{"version":3,"sources":["webpack:///webpack/universalModuleDefinition","webpack:///ingest.js","webpack:///webpack/bootstrap 110af043aff0204540cc","webpack:///./index.js","webpack:///./src/IngestAPI.js","webpack:///./~/extend/index.js","webpack:///./src/Request.js","webpack:///./~/pinkyswear/pinkyswear.js","webpack:///(webpack)/buildin/module.js","webpack:///(webpack)/~/node-libs-browser/~/timers-browserify/main.js","webpack:///(webpack)/~/node-libs-browser/~/process/browser.js","webpack:///./src/JWTUtils.js","webpack:///./src/Utils.js","webpack:///./src/Uploader.js","webpack:///./src/Cache.js","webpack:///./src/resources/Resource.js","webpack:///./src/resources/Users.js"],"names":["root","factory","exports","module","define","amd","this","modules","__webpack_require__","moduleId","installedModules","id","loaded","call","m","c","p","IngestAPI","options","defaults","host","cacheAge","networks","networksKeys","networksKeysById","inputs","inputsById","inputsUpload","inputsUploadSign","inputsUploadComplete","inputsUploadAbort","uploadMethods","param","singlePart","multiPart","config","extend","token","setToken","request","Request","JWTUtils","utils","resource","Resource","usersResource","Users","uploader","Uploader","cache","Cache","videos","tokenSource","getToken","bind","playlists","users","currentUser","transfer","revoke","prototype","Error","getNetworkSecureKeys","url","addNetworkSecureKey","data","promisify","title","key","method","getNetworkSecureKeyById","tokens","parseTokens","updateNetworkSecureKey","deleteNetworkSecureKeyById","upload","file","api","hasOwn","Object","hasOwnProperty","toStr","toString","isArray","arr","Array","isPlainObject","obj","hasOwnConstructor","hasIsPrototypeOf","constructor","name","src","copy","copyIsArray","clone","target","arguments","i","length","deep","Promise","VALID_RESPONSE_CODES","async","promise","XMLHttpRequest","setupListeners","makeRequest","requestError","onreadystatechange","readyStateChange","postData","preparePostData","headers","hasContentType","success","open","applyRequestHeaders","isExpired","setRequestHeader","type","send","result","FormData","JSON","stringify","error","keys","keysLength","requestComplete","response","processResponse","responseType","getResponseHeader","indexOf","parse","stack","statusCode","status","message","readyState","isValidResponseCode","responseText","responseCode","responseCodeCount","setImmediate","process","isFunction","f","isObject","defer","callback","setTimeout","undef","pinkySwear","state","values","deferred","set","newState","newValues","onFulfilled","onRejected","promise2","callCallbacks","resolve","x","then","cbCalled","TypeError","apply","value","e","push","webpackPolyfill","deprecate","paths","children","clearImmediate","Timeout","clearFn","_id","_clearFn","nextTick","Function","slice","immediateIds","nextImmediateId","window","clearTimeout","setInterval","clearInterval","timeout","close","unref","ref","enroll","item","msecs","_idleTimeoutId","_idleTimeout","unenroll","_unrefActive","active","_onTimeout","fn","args","cleanUpNextTick","draining","currentQueue","queue","concat","queueIndex","drainQueue","len","run","Item","fun","array","noop","browser","env","argv","version","versions","on","addListener","once","off","removeListener","removeAllListeners","emit","binding","cwd","chdir","dir","umask","parseTokenPayload","parts","split","payload","atob","exp","now","Date","getTime","Utils","template","hash","replace","series","promises","paused","promisesCount","all","total","complete","responses","pause","_seriesPause","undefined","resume","_seriesResume","_seriesCallPromise","_seriesComplete","_seriesError","Upload","sign","uploadComplete","uploadAbort","chunks","chunkSize","chunkCount","chunksComplete","uploadedBytes","aborted","created","initialized","fileRecord","filename","size","_checkMultipart","progress","save","_create","_initialize","_prepareUpload","_updateProgress","percent","record","add","_createSuccess","signing","_initializeComplete","uploadId","pieceSize","pieceCount","_createChunks","_completeUpload","_uploadFile","_onCompleteUpload","blob","chunk","start","end","sliceMethod","_getSliceMethod","chunkPromises","abort","partNumber","_uploadChunk","currentUpload","_signUpload","_sendUpload","_completeChunk","_sendSinglepartComplete","formData","append","authHeader","dateHeader","Math","round","_abortComplete","enabled","_checkCacheSupport","support","localStorage","setItem","removeItem","retrieve","cacheKey","getItem","expiry","remove","JSONResult","diff","forced","property","properties","propertiesLength","forcedLength","n","original","diffArray","items","itemsLength","results","byId","thumbnails","trash","deleteMethods","permanent","search","_tokenSource","getAll","_updateCachedResources","getById","cachedResult","getTrashed","getThumbnails","_updateCachedResource","update","_updateResourceArray","_updateResource","resources","_deleteResourceArray","_deleteResource","permanentDelete","_deleteCachedResource","_deleteCachedResources","input","count","_handleCountResponse","trashCount","parseInt","dataLength","ids","create","getCurrentUserInfo","transferUserAuthorship","oldId","newId","linkUser","unlinkUser","revokeCurrentUser"],"mappings":"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","file":"ingest.js","sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"IngestAPI\"] = factory();\n\telse\n\t\troot[\"IngestAPI\"] = factory();\n})(this, function() {\nreturn \n\n\n/** WEBPACK FOOTER **\n ** webpack/universalModuleDefinition\n **/","(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"IngestAPI\"] = factory();\n\telse\n\t\troot[\"IngestAPI\"] = factory();\n})(this, function() {\nreturn /******/ (function(modules) { // webpackBootstrap\n/******/ \t// The module cache\n/******/ \tvar installedModules = {};\n/******/\n/******/ \t// The require function\n/******/ \tfunction __webpack_require__(moduleId) {\n/******/\n/******/ \t\t// Check if module is in cache\n/******/ \t\tif(installedModules[moduleId])\n/******/ \t\t\treturn installedModules[moduleId].exports;\n/******/\n/******/ \t\t// Create a new module (and put it into the cache)\n/******/ \t\tvar module = installedModules[moduleId] = {\n/******/ \t\t\texports: {},\n/******/ \t\t\tid: moduleId,\n/******/ \t\t\tloaded: false\n/******/ \t\t};\n/******/\n/******/ \t\t// Execute the module function\n/******/ \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n/******/\n/******/ \t\t// Flag the module as loaded\n/******/ \t\tmodule.loaded = true;\n/******/\n/******/ \t\t// Return the exports of the module\n/******/ \t\treturn module.exports;\n/******/ \t}\n/******/\n/******/\n/******/ \t// expose the modules object (__webpack_modules__)\n/******/ \t__webpack_require__.m = modules;\n/******/\n/******/ \t// expose the module cache\n/******/ \t__webpack_require__.c = installedModules;\n/******/\n/******/ \t// __webpack_public_path__\n/******/ \t__webpack_require__.p = \"\";\n/******/\n/******/ \t// Load entry module and return exports\n/******/ \treturn __webpack_require__(0);\n/******/ })\n/************************************************************************/\n/******/ ([\n/* 0 */\n/***/ function(module, exports, __webpack_require__) {\n\n\tmodule.exports = __webpack_require__(1);\n\n\n/***/ },\n/* 1 */\n/***/ function(module, exports, __webpack_require__) {\n\n\tvar extend = __webpack_require__(2);\n\tvar Request = __webpack_require__(3);\n\tvar JWTUtils = __webpack_require__(8);\n\tvar utils = __webpack_require__(9);\n\tvar Uploader = __webpack_require__(10);\n\tvar Cache = __webpack_require__(11);\n\t\n\tvar Resource = __webpack_require__(12);\n\tvar Users = __webpack_require__(13);\n\t\n\t/**\n\t * IngestAPI Object\n\t * @class\n\t * @param {object}  options        Options to override the default.\n\t * @param {string}  options.host   Override the default live host.\n\t * @param {string}  options.token  Auth token to use for requests.\n\t */\n\tfunction IngestAPI (options) {\n\t\n\t  this.defaults = {\n\t    'host': 'https://api.ingest.io',\n\t    'cacheAge': 300000, // 5 minutes\n\t    'networks': '/networks',\n\t    'networksKeys': '/networks/keys',\n\t    'networksKeysById': '/networks/keys/<%=id%>',\n\t    'inputs': '/encoding/inputs',\n\t    'inputsById' : '/encoding/inputs/<%=id%>',\n\t    'inputsUpload': '/encoding/inputs/<%=id%>/upload<%=method%>',\n\t    'inputsUploadSign': '/encoding/inputs/<%=id%>/upload/sign<%=method%>',\n\t    'inputsUploadComplete': '/encoding/inputs/<%=id%>/upload/complete',\n\t    'inputsUploadAbort': '/encoding/inputs/<%=id%>/upload/abort',\n\t    'uploadMethods': {\n\t      'param': '?type=',\n\t      'singlePart': 'amazon',\n\t      'multiPart': 'amazonMP'\n\t    }\n\t  };\n\t\n\t  // Create a config object by extending the defaults with the pass options.\n\t  this.config = extend(true, {}, this.defaults, options);\n\t\n\t  this.token = null;\n\t\n\t  if (this.config.token) {\n\t    // Store the token for future use.\n\t    this.setToken(this.config.token);\n\t  }\n\t\n\t  /* Exposed for testing */\n\t  this.request = Request;\n\t  this.JWTUtils = JWTUtils;\n\t  this.utils = utils;\n\t  this.resource = Resource;\n\t  this.usersResource = Users;\n\t  this.uploader = Uploader;\n\t\n\t  this.cache = new Cache(this.config.cacheAge);\n\t\n\t  this.videos = new Resource({\n\t    host: this.config.host,\n\t    resource: 'videos',\n\t    tokenSource: this.getToken.bind(this),\n\t    cache: this.cache\n\t  });\n\t\n\t  this.playlists = new Resource({\n\t    host: this.config.host,\n\t    resource: 'playlists',\n\t    tokenSource: this.getToken.bind(this),\n\t    cache: this.cache\n\t  });\n\t\n\t  this.inputs = new Resource({\n\t    host: this.config.host,\n\t    resource: 'encoding/inputs',\n\t    tokenSource: this.getToken.bind(this),\n\t    cache: this.cache\n\t  });\n\t\n\t  this.users = new Users({\n\t    host: this.config.host,\n\t    resource: 'users',\n\t    tokenSource: this.getToken.bind(this),\n\t    cache: this.cache,\n\t    currentUser: '/users/me',\n\t    transfer: '/users/<%=oldId%>/transfer/<%=newId%>',\n\t    revoke: '/revoke'\n\t  });\n\t\n\t}\n\t/** Token **/\n\t/**\n\t * Set the auth token to use.\n\t * @param   {String}        token Auth token to use.\n\t */\n\tIngestAPI.prototype.setToken = function (token) {\n\t\n\t  // Make sure a valid value is passed.\n\t  if (typeof token !== 'string') {\n\t    throw new Error('IngestAPI requires an authentication token passed as a string.');\n\t  }\n\t\n\t  this.token = token;\n\t};\n\t\n\t/**\n\t * Return the current auth token.\n\t * @return  {String}        Current auth token, or null if a token has not been set.\n\t */\n\tIngestAPI.prototype.getToken = function () {\n\t  return this.token;\n\t};\n\t\n\t/** Network Information **/\n\t\n\t/**\n\t * Get the current network primary key in RSA format.\n\t * @return {Promise} Promise/A+ spec which resolves with the primary network key.\n\t */\n\tIngestAPI.prototype.getNetworkSecureKeys = function () {\n\t  return new Request({\n\t    url: this.config.host + this.config.networksKeys,\n\t    token: this.getToken()\n\t  });\n\t};\n\t\n\t/**\n\t * Adds a new secure key to the current network.\n\t * @param {object}  data        The object containing data for the secure key entry.\n\t * @param {string}  data.title  Optional. The title of the secure key. Will default to \"Default Key Title\"\n\t * @param {string}  data.key    The public key in RSA format.\n\t *\n\t * @return {Promise}          A promise which resolves when the request is complete.\n\t */\n\tIngestAPI.prototype.addNetworkSecureKey = function (data) {\n\t  if (typeof data !== 'object') {\n\t    return utils.promisify(false,\n\t      'IngestAPI addNetworkSecureKey requires data to be passed as an object.');\n\t  }\n\t\n\t  // The title must be a string.\n\t  if (typeof data.title !== 'string') {\n\t    data.title = '';\n\t  }\n\t\n\t  if (typeof data.key !== 'string') {\n\t    return utils.promisify(false,\n\t      'IngestAPI addNetworkSecureKey requires that the key be a string in RSA public key format.');\n\t  }\n\t\n\t  return new Request({\n\t    url: this.config.host + this.config.networksKeys,\n\t    token: this.getToken(),\n\t    method: 'POST',\n\t    data: data\n\t  });\n\t};\n\t\n\t/**\n\t * Retrieves a single network secure key entry based on the UUID given.\n\t * @param {string}  id  The UUID of the secure key entry.\n\t *\n\t * @return {Promise} A promise which resolves when the request is complete.\n\t */\n\tIngestAPI.prototype.getNetworkSecureKeyById = function (id) {\n\t  var tokens, url;\n\t\n\t  if (typeof id !== 'string') {\n\t    return utils.promisify(false,\n\t      'IngestAPI getNetworkSecureKeyById requires an id to be passed as a string.');\n\t  }\n\t\n\t  tokens = {\n\t    id: id\n\t  };\n\t\n\t  url = utils.parseTokens(this.config.host + this.config.networksKeysById, tokens);\n\t\n\t  return new Request({\n\t    url: url,\n\t    token: this.getToken()\n\t  });\n\t};\n\t\n\t/**\n\t * Updates an individual secure key entry in the current network.\n\t * @param {object}  data        The object containing data for the secure key entry.\n\t * @param {string}  data.title  The title for the current network.\n\t *\n\t * @return {Promise} A promise which resolves when the request is complete.\n\t */\n\tIngestAPI.prototype.updateNetworkSecureKey = function (data) {\n\t  var tokens, url;\n\t\n\t  if (typeof data !== 'object') {\n\t    return utils.promisify(false,\n\t      'IngestAPI updateNetworkSecureKeyById requires data to be passed as an object.');\n\t  }\n\t\n\t  if (typeof data.id !== 'string') {\n\t    return utils.promisify(false,\n\t      'IngestAPI updateNetworkSecureKeyById requires a param \"id\" to be a string.');\n\t  }\n\t\n\t  if (typeof data.title !== 'string') {\n\t    data.title = '';\n\t  }\n\t\n\t  tokens = {\n\t    id: data.id\n\t  };\n\t\n\t  url = utils.parseTokens(this.config.host + this.config.networksKeysById, tokens);\n\t\n\t  return new Request({\n\t    url: url,\n\t    token: this.getToken(),\n\t    method: 'PATCH',\n\t    data: data\n\t  });\n\t};\n\t\n\t/**\n\t * Deletes a single network secure key entry based on the UUID given.\n\t * @param {string}  id  The UUID of the secure key entry.\n\t *\n\t * @return {Promise} A promise which resolves when the request is complete.\n\t */\n\tIngestAPI.prototype.deleteNetworkSecureKeyById = function (id) {\n\t  var tokens, url;\n\t\n\t  if (typeof id !== 'string') {\n\t    return utils.promisify(false,\n\t      'IngestAPI deleteNetworkSecureKeyById requires an id to be passed as a string.');\n\t  }\n\t\n\t  tokens = {\n\t    id: id\n\t  };\n\t\n\t  url = utils.parseTokens(this.config.host + this.config.networksKeysById, tokens);\n\t\n\t  return new Request({\n\t    url: url,\n\t    token: this.getToken(),\n\t    method: 'DELETE'\n\t  });\n\t};\n\t\n\t/**\n\t * Create a new input and upload a file.\n\t * @param  {File}   file    File to upload.\n\t * @return {Promise} A promise which resolves when the upload is complete.\n\t */\n\tIngestAPI.prototype.upload = function (file) {\n\t  return new Uploader({\n\t    file: file,\n\t    api: this,\n\t    host: this.config.host\n\t  });\n\t};\n\t\n\tmodule.exports = IngestAPI;\n\n\n/***/ },\n/* 2 */\n/***/ function(module, exports) {\n\n\t'use strict';\n\t\n\tvar hasOwn = Object.prototype.hasOwnProperty;\n\tvar toStr = Object.prototype.toString;\n\t\n\tvar isArray = function isArray(arr) {\n\t\tif (typeof Array.isArray === 'function') {\n\t\t\treturn Array.isArray(arr);\n\t\t}\n\t\n\t\treturn toStr.call(arr) === '[object Array]';\n\t};\n\t\n\tvar isPlainObject = function isPlainObject(obj) {\n\t\tif (!obj || toStr.call(obj) !== '[object Object]') {\n\t\t\treturn false;\n\t\t}\n\t\n\t\tvar hasOwnConstructor = hasOwn.call(obj, 'constructor');\n\t\tvar hasIsPrototypeOf = obj.constructor && obj.constructor.prototype && hasOwn.call(obj.constructor.prototype, 'isPrototypeOf');\n\t\t// Not own constructor property must be Object\n\t\tif (obj.constructor && !hasOwnConstructor && !hasIsPrototypeOf) {\n\t\t\treturn false;\n\t\t}\n\t\n\t\t// Own properties are enumerated firstly, so to speed up,\n\t\t// if last one is own, then all properties are own.\n\t\tvar key;\n\t\tfor (key in obj) {/**/}\n\t\n\t\treturn typeof key === 'undefined' || hasOwn.call(obj, key);\n\t};\n\t\n\tmodule.exports = function extend() {\n\t\tvar options, name, src, copy, copyIsArray, clone,\n\t\t\ttarget = arguments[0],\n\t\t\ti = 1,\n\t\t\tlength = arguments.length,\n\t\t\tdeep = false;\n\t\n\t\t// Handle a deep copy situation\n\t\tif (typeof target === 'boolean') {\n\t\t\tdeep = target;\n\t\t\ttarget = arguments[1] || {};\n\t\t\t// skip the boolean and the target\n\t\t\ti = 2;\n\t\t} else if ((typeof target !== 'object' && typeof target !== 'function') || target == null) {\n\t\t\ttarget = {};\n\t\t}\n\t\n\t\tfor (; i < length; ++i) {\n\t\t\toptions = arguments[i];\n\t\t\t// Only deal with non-null/undefined values\n\t\t\tif (options != null) {\n\t\t\t\t// Extend the base object\n\t\t\t\tfor (name in options) {\n\t\t\t\t\tsrc = target[name];\n\t\t\t\t\tcopy = options[name];\n\t\n\t\t\t\t\t// Prevent never-ending loop\n\t\t\t\t\tif (target !== copy) {\n\t\t\t\t\t\t// Recurse if we're merging plain objects or arrays\n\t\t\t\t\t\tif (deep && copy && (isPlainObject(copy) || (copyIsArray = isArray(copy)))) {\n\t\t\t\t\t\t\tif (copyIsArray) {\n\t\t\t\t\t\t\t\tcopyIsArray = false;\n\t\t\t\t\t\t\t\tclone = src && isArray(src) ? src : [];\n\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\tclone = src && isPlainObject(src) ? src : {};\n\t\t\t\t\t\t\t}\n\t\n\t\t\t\t\t\t\t// Never move original objects, clone them\n\t\t\t\t\t\t\ttarget[name] = extend(deep, clone, copy);\n\t\n\t\t\t\t\t\t// Don't bring in undefined values\n\t\t\t\t\t\t} else if (typeof copy !== 'undefined') {\n\t\t\t\t\t\t\ttarget[name] = copy;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\n\t\t// Return the modified object\n\t\treturn target;\n\t};\n\t\n\n\n/***/ },\n/* 3 */\n/***/ function(module, exports, __webpack_require__) {\n\n\tvar Promise = __webpack_require__(4);\n\tvar extend = __webpack_require__(2);\n\t\n\tvar JWTUtils = __webpack_require__(8);\n\t\n\tvar VALID_RESPONSE_CODES = [200, 201, 202, 204];\n\t\n\t/**\n\t * A wrapper around the XMLHttpRequest object.\n\t * @param {object}  options         Options for the request.\n\t * @param {boolean} options.async   Whether to perform the request asynchronously\n\t * @param {string}  options.method  REST verb to use for the request.\n\t * @param {string}  options.url     URL for the request.\n\t *\n\t * @return {Promise} A promise which resolves when the request is complete.\n\t */\n\tvar Request = function (options) {\n\t\n\t  this.defaults = {\n\t    async: true,\n\t    method: 'GET'\n\t  };\n\t\n\t  this.promise = Promise();\n\t\n\t  // Create the XHR object for this request.\n\t  this.request = new XMLHttpRequest();\n\t\n\t  // Set up event listeners for this request.\n\t  this.setupListeners();\n\t\n\t  // Todo, merge some defaults with this.\n\t  this.options = extend(true, this.defaults, options);\n\t\n\t  // Make sure a url is passed before attempting to make the request.\n\t  if (!this.options.url) {\n\t    this.requestError('Request Error : a url is required to make the request.');\n\t    return this.promise;\n\t  }\n\t\n\t  // Make the actual request.\n\t  this.makeRequest();\n\t\n\t  // Return the promise.\n\t  return this.promise;\n\t\n\t};\n\t\n\t/**\n\t * Add event listeners to the XMLHttpRequest object.\n\t */\n\tRequest.prototype.setupListeners = function () {\n\t  this.request.onreadystatechange = this.readyStateChange.bind(this);\n\t};\n\t\n\t/**\n\t * Execute the open and send of the XMLHttpRequest\n\t */\n\tRequest.prototype.makeRequest = function () {\n\t\n\t  var postData = this.preparePostData(this.options.data);\n\t  var headers = this.options.headers;\n\t  var hasContentType = headers && headers.hasOwnProperty('Content-Type');\n\t\n\t  if (!postData.success) {\n\t    this.requestError('Request Error : error preparing post data.');\n\t    return;\n\t  }\n\t\n\t  this.request.open(this.options.method, this.options.url, this.options.async);\n\t\n\t  if (headers) {\n\t    this.applyRequestHeaders(headers);\n\t  }\n\t\n\t  // Make the token optional.\n\t  if (this.options.token) {\n\t\n\t    // If there is a token present ensure that it's still valid.\n\t    if (JWTUtils.isExpired(this.options.token)) {\n\t      this.requestError('Request Error : token is expired.');\n\t      return;\n\t    }\n\t\n\t    this.request.setRequestHeader('Authorization', this.options.token);\n\t\n\t  }\n\t\n\t  // Set the default content type when posting data.\n\t  if (postData.data && postData.type === 'JSON' && !hasContentType) {\n\t    this.request.setRequestHeader('Content-Type', 'application/json; charset=utf-8');\n\t  }\n\t\n\t  // If there is data then we need to pass that along with the request.\n\t  if (postData.data) {\n\t    this.request.send(postData.data);\n\t  } else {\n\t    this.request.send();\n\t  }\n\t\n\t};\n\t\n\t/**\n\t * Stringify the post data if it is present.\n\t * @param  {object} data Object to be parsed.\n\t * @return {object}      Result object with the parsed string, and a success boolean flag.\n\t */\n\tRequest.prototype.preparePostData = function (data) {\n\t\n\t  var result = {\n\t    success: true,\n\t    data: data,\n\t    type: 'JSON'\n\t  };\n\t\n\t  // In the case of file uploads, all FormData to be passed to the request.\n\t  if (data instanceof FormData) {\n\t    result.type = 'FormData';\n\t    return result;\n\t  }\n\t\n\t  // If the data is populated, and its not already a string parse it.\n\t  if (data) {\n\t    try {\n\t      result.data = JSON.stringify(data);\n\t    } catch (error) {\n\t      result.success = false;\n\t      result.data = null;\n\t    }\n\t  }\n\t\n\t  return result;\n\t\n\t};\n\t\n\t/**\n\t * Apply any supplied headers to the request object.\n\t * @param  {object} headers Array of headers to apply to the request object.\n\t */\n\tRequest.prototype.applyRequestHeaders = function (headers) {\n\t\n\t  var key, i;\n\t  var keys = Object.keys(headers);\n\t  var keysLength = keys.length;\n\t\n\t  // Loop through and add the keys to the requestHeaders.\n\t  for (i = 0; i < keysLength; i++) {\n\t    key = keys[i];\n\t    this.request.setRequestHeader(key, headers[key]);\n\t  }\n\t\n\t};\n\t\n\t/**\n\t * Handle the completion of the request and fulfill the promise.\n\t * @param  {String} Response test of the request.\n\t */\n\tRequest.prototype.requestComplete = function (response) {\n\t\n\t  // Process the result.\n\t  this.response = this.processResponse(response);\n\t\n\t  // Either resolve or reject the promise.\n\t  this.promise(!this.response.data.error, [this.response]);\n\t\n\t};\n\t\n\t/**\n\t * Process the response and parse certain content types.\n\t * @param  {*}  response  Response data from request.\n\t * @return {*}            Processed response data.\n\t */\n\tRequest.prototype.processResponse = function (response) {\n\t  var responseType = this.request.getResponseHeader('Content-Type');\n\t  var result = response;\n\t\n\t  // Parse JSON if the result is JSON.\n\t  if (responseType && responseType.indexOf('application/json') !== -1) {\n\t    try {\n\t      result = JSON.parse(response);\n\t    } catch (error) {\n\t      result = {\n\t        error: 'JSON parsing failed. ' + error.stack\n\t      };\n\t    }\n\t  }\n\t\n\t  return {\n\t    data: result,\n\t    headers: this.request.getResponseHeader.bind(this.request),\n\t    statusCode: this.request.status\n\t  };\n\t\n\t};\n\t\n\t/**\n\t * Resolve the promise.\n\t * @param  {String} message   Error message.\n\t */\n\tRequest.prototype.requestError = function (message) {\n\t  // Reject the promise.\n\t  this.promise(false, [message]);\n\t};\n\t\n\t/**\n\t * Handle ready state change events.\n\t */\n\tRequest.prototype.readyStateChange = function () {\n\t\n\t  // Request is complete.\n\t  if (this.request.readyState === 4) {\n\t\n\t    // Check if the final response code is valid.\n\t    if (this.isValidResponseCode(this.request.status)) {\n\t      this.requestComplete(this.request.responseText);\n\t    } else {\n\t      this.requestError('Invalid response code.');\n\t    }\n\t\n\t  }\n\t\n\t};\n\t\n\t/**\n\t * Validate the current response code to see if the request was a success.\n\t * @param  {String}  responseCode Response Code.\n\t * @return {Boolean}              Should this be treated as a successful response code.\n\t */\n\tRequest.prototype.isValidResponseCode = function (responseCode) {\n\t\n\t  var result = false,\n\t    responseCodeCount = VALID_RESPONSE_CODES.length,\n\t    i;\n\t\n\t  // Check if the supplied code is in our list of valid codes.\n\t  for (i = 0; i < responseCodeCount; i++) {\n\t\n\t    if (responseCode === VALID_RESPONSE_CODES[i]) {\n\t      result = true;\n\t      break;\n\t    }\n\t\n\t  }\n\t\n\t  return result;\n\t\n\t};\n\t\n\tmodule.exports = Request;\n\n\n/***/ },\n/* 4 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t/* WEBPACK VAR INJECTION */(function(module, setImmediate, process) {/*\n\t * PinkySwear.js 2.2.2 - Minimalistic implementation of the Promises/A+ spec\n\t * \n\t * Public Domain. Use, modify and distribute it any way you like. No attribution required.\n\t *\n\t * NO WARRANTY EXPRESSED OR IMPLIED. USE AT YOUR OWN RISK.\n\t *\n\t * PinkySwear is a very small implementation of the Promises/A+ specification. After compilation with the\n\t * Google Closure Compiler and gzipping it weighs less than 500 bytes. It is based on the implementation for \n\t * Minified.js and should be perfect for embedding. \n\t *\n\t *\n\t * PinkySwear has just three functions.\n\t *\n\t * To create a new promise in pending state, call pinkySwear():\n\t *         var promise = pinkySwear();\n\t *\n\t * The returned object has a Promises/A+ compatible then() implementation:\n\t *          promise.then(function(value) { alert(\"Success!\"); }, function(value) { alert(\"Failure!\"); });\n\t *\n\t *\n\t * The promise returned by pinkySwear() is a function. To fulfill the promise, call the function with true as first argument and\n\t * an optional array of values to pass to the then() handler. By putting more than one value in the array, you can pass more than one\n\t * value to the then() handlers. Here an example to fulfill a promsise, this time with only one argument: \n\t *         promise(true, [42]);\n\t *\n\t * When the promise has been rejected, call it with false. Again, there may be more than one argument for the then() handler:\n\t *         promise(true, [6, 6, 6]);\n\t *         \n\t * You can obtain the promise's current state by calling the function without arguments. It will be true if fulfilled,\n\t * false if rejected, and otherwise undefined.\n\t * \t\t   var state = promise(); \n\t * \n\t * https://github.com/timjansen/PinkySwear.js\n\t */\n\t(function(target) {\n\t\tvar undef;\n\t\n\t\tfunction isFunction(f) {\n\t\t\treturn typeof f == 'function';\n\t\t}\n\t\tfunction isObject(f) {\n\t\t\treturn typeof f == 'object';\n\t\t}\n\t\tfunction defer(callback) {\n\t\t\tif (typeof setImmediate != 'undefined')\n\t\t\t\tsetImmediate(callback);\n\t\t\telse if (typeof process != 'undefined' && process['nextTick'])\n\t\t\t\tprocess['nextTick'](callback);\n\t\t\telse\n\t\t\t\tsetTimeout(callback, 0);\n\t\t}\n\t\n\t\ttarget[0][target[1]] = function pinkySwear(extend) {\n\t\t\tvar state;           // undefined/null = pending, true = fulfilled, false = rejected\n\t\t\tvar values = [];     // an array of values as arguments for the then() handlers\n\t\t\tvar deferred = [];   // functions to call when set() is invoked\n\t\n\t\t\tvar set = function(newState, newValues) {\n\t\t\t\tif (state == null && newState != null) {\n\t\t\t\t\tstate = newState;\n\t\t\t\t\tvalues = newValues;\n\t\t\t\t\tif (deferred.length)\n\t\t\t\t\t\tdefer(function() {\n\t\t\t\t\t\t\tfor (var i = 0; i < deferred.length; i++)\n\t\t\t\t\t\t\t\tdeferred[i]();\n\t\t\t\t\t\t});\n\t\t\t\t}\n\t\t\t\treturn state;\n\t\t\t};\n\t\n\t\t\tset['then'] = function (onFulfilled, onRejected) {\n\t\t\t\tvar promise2 = pinkySwear(extend);\n\t\t\t\tvar callCallbacks = function() {\n\t\t    \t\ttry {\n\t\t    \t\t\tvar f = (state ? onFulfilled : onRejected);\n\t\t    \t\t\tif (isFunction(f)) {\n\t\t\t   \t\t\t\tfunction resolve(x) {\n\t\t\t\t\t\t\t    var then, cbCalled = 0;\n\t\t\t   \t\t\t\t\ttry {\n\t\t\t\t\t   \t\t\t\tif (x && (isObject(x) || isFunction(x)) && isFunction(then = x['then'])) {\n\t\t\t\t\t\t\t\t\t\t\tif (x === promise2)\n\t\t\t\t\t\t\t\t\t\t\t\tthrow new TypeError();\n\t\t\t\t\t\t\t\t\t\t\tthen['call'](x,\n\t\t\t\t\t\t\t\t\t\t\t\tfunction() { if (!cbCalled++) resolve.apply(undef,arguments); } ,\n\t\t\t\t\t\t\t\t\t\t\t\tfunction(value){ if (!cbCalled++) promise2(false,[value]);});\n\t\t\t\t\t   \t\t\t\t}\n\t\t\t\t\t   \t\t\t\telse\n\t\t\t\t\t   \t\t\t\t\tpromise2(true, arguments);\n\t\t\t   \t\t\t\t\t}\n\t\t\t   \t\t\t\t\tcatch(e) {\n\t\t\t   \t\t\t\t\t\tif (!cbCalled++)\n\t\t\t   \t\t\t\t\t\t\tpromise2(false, [e]);\n\t\t\t   \t\t\t\t\t}\n\t\t\t   \t\t\t\t}\n\t\t\t   \t\t\t\tresolve(f.apply(undef, values || []));\n\t\t\t   \t\t\t}\n\t\t\t   \t\t\telse\n\t\t\t   \t\t\t\tpromise2(state, values);\n\t\t\t\t\t}\n\t\t\t\t\tcatch (e) {\n\t\t\t\t\t\tpromise2(false, [e]);\n\t\t\t\t\t}\n\t\t\t\t};\n\t\t\t\tif (state != null)\n\t\t\t\t\tdefer(callCallbacks);\n\t\t\t\telse\n\t\t\t\t\tdeferred.push(callCallbacks);\n\t\t\t\treturn promise2;\n\t\t\t};\n\t        if(extend){\n\t            set = extend(set);\n\t        }\n\t\t\treturn set;\n\t\t};\n\t})( false ? [window, 'pinkySwear'] : [module, 'exports']);\n\t\n\t\n\t/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(5)(module), __webpack_require__(6).setImmediate, __webpack_require__(7)))\n\n/***/ },\n/* 5 */\n/***/ function(module, exports) {\n\n\tmodule.exports = function(module) {\r\n\t\tif(!module.webpackPolyfill) {\r\n\t\t\tmodule.deprecate = function() {};\r\n\t\t\tmodule.paths = [];\r\n\t\t\t// module.parent = undefined by default\r\n\t\t\tmodule.children = [];\r\n\t\t\tmodule.webpackPolyfill = 1;\r\n\t\t}\r\n\t\treturn module;\r\n\t}\r\n\n\n/***/ },\n/* 6 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t/* WEBPACK VAR INJECTION */(function(setImmediate, clearImmediate) {var nextTick = __webpack_require__(7).nextTick;\n\tvar apply = Function.prototype.apply;\n\tvar slice = Array.prototype.slice;\n\tvar immediateIds = {};\n\tvar nextImmediateId = 0;\n\t\n\t// DOM APIs, for completeness\n\t\n\texports.setTimeout = function() {\n\t  return new Timeout(apply.call(setTimeout, window, arguments), clearTimeout);\n\t};\n\texports.setInterval = function() {\n\t  return new Timeout(apply.call(setInterval, window, arguments), clearInterval);\n\t};\n\texports.clearTimeout =\n\texports.clearInterval = function(timeout) { timeout.close(); };\n\t\n\tfunction Timeout(id, clearFn) {\n\t  this._id = id;\n\t  this._clearFn = clearFn;\n\t}\n\tTimeout.prototype.unref = Timeout.prototype.ref = function() {};\n\tTimeout.prototype.close = function() {\n\t  this._clearFn.call(window, this._id);\n\t};\n\t\n\t// Does not start the time, just sets up the members needed.\n\texports.enroll = function(item, msecs) {\n\t  clearTimeout(item._idleTimeoutId);\n\t  item._idleTimeout = msecs;\n\t};\n\t\n\texports.unenroll = function(item) {\n\t  clearTimeout(item._idleTimeoutId);\n\t  item._idleTimeout = -1;\n\t};\n\t\n\texports._unrefActive = exports.active = function(item) {\n\t  clearTimeout(item._idleTimeoutId);\n\t\n\t  var msecs = item._idleTimeout;\n\t  if (msecs >= 0) {\n\t    item._idleTimeoutId = setTimeout(function onTimeout() {\n\t      if (item._onTimeout)\n\t        item._onTimeout();\n\t    }, msecs);\n\t  }\n\t};\n\t\n\t// That's not how node.js implements it but the exposed api is the same.\n\texports.setImmediate = typeof setImmediate === \"function\" ? setImmediate : function(fn) {\n\t  var id = nextImmediateId++;\n\t  var args = arguments.length < 2 ? false : slice.call(arguments, 1);\n\t\n\t  immediateIds[id] = true;\n\t\n\t  nextTick(function onNextTick() {\n\t    if (immediateIds[id]) {\n\t      // fn.call() is faster so we optimize for the common use-case\n\t      // @see http://jsperf.com/call-apply-segu\n\t      if (args) {\n\t        fn.apply(null, args);\n\t      } else {\n\t        fn.call(null);\n\t      }\n\t      // Prevent ids from leaking\n\t      exports.clearImmediate(id);\n\t    }\n\t  });\n\t\n\t  return id;\n\t};\n\t\n\texports.clearImmediate = typeof clearImmediate === \"function\" ? clearImmediate : function(id) {\n\t  delete immediateIds[id];\n\t};\n\t/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(6).setImmediate, __webpack_require__(6).clearImmediate))\n\n/***/ },\n/* 7 */\n/***/ function(module, exports) {\n\n\t// shim for using process in browser\n\t\n\tvar process = module.exports = {};\n\tvar queue = [];\n\tvar draining = false;\n\tvar currentQueue;\n\tvar queueIndex = -1;\n\t\n\tfunction cleanUpNextTick() {\n\t    draining = false;\n\t    if (currentQueue.length) {\n\t        queue = currentQueue.concat(queue);\n\t    } else {\n\t        queueIndex = -1;\n\t    }\n\t    if (queue.length) {\n\t        drainQueue();\n\t    }\n\t}\n\t\n\tfunction drainQueue() {\n\t    if (draining) {\n\t        return;\n\t    }\n\t    var timeout = setTimeout(cleanUpNextTick);\n\t    draining = true;\n\t\n\t    var len = queue.length;\n\t    while(len) {\n\t        currentQueue = queue;\n\t        queue = [];\n\t        while (++queueIndex < len) {\n\t            if (currentQueue) {\n\t                currentQueue[queueIndex].run();\n\t            }\n\t        }\n\t        queueIndex = -1;\n\t        len = queue.length;\n\t    }\n\t    currentQueue = null;\n\t    draining = false;\n\t    clearTimeout(timeout);\n\t}\n\t\n\tprocess.nextTick = function (fun) {\n\t    var args = new Array(arguments.length - 1);\n\t    if (arguments.length > 1) {\n\t        for (var i = 1; i < arguments.length; i++) {\n\t            args[i - 1] = arguments[i];\n\t        }\n\t    }\n\t    queue.push(new Item(fun, args));\n\t    if (queue.length === 1 && !draining) {\n\t        setTimeout(drainQueue, 0);\n\t    }\n\t};\n\t\n\t// v8 likes predictible objects\n\tfunction Item(fun, array) {\n\t    this.fun = fun;\n\t    this.array = array;\n\t}\n\tItem.prototype.run = function () {\n\t    this.fun.apply(null, this.array);\n\t};\n\tprocess.title = 'browser';\n\tprocess.browser = true;\n\tprocess.env = {};\n\tprocess.argv = [];\n\tprocess.version = ''; // empty string to avoid regexp issues\n\tprocess.versions = {};\n\t\n\tfunction noop() {}\n\t\n\tprocess.on = noop;\n\tprocess.addListener = noop;\n\tprocess.once = noop;\n\tprocess.off = noop;\n\tprocess.removeListener = noop;\n\tprocess.removeAllListeners = noop;\n\tprocess.emit = noop;\n\t\n\tprocess.binding = function (name) {\n\t    throw new Error('process.binding is not supported');\n\t};\n\t\n\tprocess.cwd = function () { return '/' };\n\tprocess.chdir = function (dir) {\n\t    throw new Error('process.chdir is not supported');\n\t};\n\tprocess.umask = function() { return 0; };\n\n\n/***/ },\n/* 8 */\n/***/ function(module, exports) {\n\n\t/**\n\t * UTILS for dealing with jwt tokens.\n\t */\n\t\n\t/**\n\t * Parse the payload out of the JWT token.\n\t * @param  {string} token JWT Token.\n\t * @return {object}       Parsed payload object.\n\t */\n\tvar parseTokenPayload = function (token) {\n\t  var parts = token.split('.');\n\t\n\t  // Return false if the token is invalid.\n\t  if (parts.length <= 1) {\n\t    return false;\n\t  }\n\t\n\t  // decode the payload portion.\n\t  var payload = window.atob(parts[1]);\n\t\n\t  // parse it as JSON\n\t  payload = JSON.parse(payload);\n\t\n\t  return payload;\n\t};\n\t\n\t/**\n\t * Return true if the provided token has expired.\n\t * @param  {string}  token JWT Token\n\t * @return {Boolean}       True if expired.\n\t */\n\tmodule.exports.isExpired = function (token) {\n\t  var data, exp, result, now;\n\t\n\t  data = parseTokenPayload(token);\n\t\n\t  result = true;\n\t\n\t  // Return true if the token does not parse properly.\n\t  if (!data) {\n\t    return result;\n\t  }\n\t\n\t  exp = data.exp;\n\t\n\t  // Get the unix timestamp in seconds.\n\t  now = new Date();\n\t  now = now.getTime() / 1000;\n\t\n\t  if (!exp) {\n\t    return result;\n\t  }\n\t\n\t  // If the expiry data is still in the future.\n\t  if (now < exp) {\n\t    result = false;\n\t  }\n\t\n\t  return result;\n\t\n\t};\n\n\n/***/ },\n/* 9 */\n/***/ function(module, exports, __webpack_require__) {\n\n\tvar Promise = __webpack_require__(4);\n\tvar Utils = {};\n\t/**\n\t * Replace all tokens within a given template based on the given key/value pair.\n\t * @param  {string}     template    Template for the url.\n\t * @param  {object}     hash        Key/Value pair for replacing tokens in the template.\n\t *\n\t * @example\n\t * var tokens = {\n\t *  keyInTemplate: 'replacedWith'\n\t * };\n\t *\n\t * var template = '<%=keyInTemplate%>';\n\t *\n\t * var result = parseTokens(template, tokens);  // 'replacedWith'\n\t *\n\t * @return {string}                 Parsed string.\n\t */\n\tUtils.parseTokens = function (template, hash) {\n\t  if (!template) {\n\t    return null;\n\t  }\n\t\n\t  var keys = Object.keys(hash);\n\t  var i;\n\t  var length = keys.length;\n\t\n\t  for (i = 0; i < length; i++) {\n\t    template = template.replace('<%=' + keys[i] + '%>', hash[keys[i]]);\n\t  }\n\t\n\t  return template;\n\t};\n\t\n\t/**\n\t * Wrapper function to wrap a value in either a reject or resolve.\n\t * @param  {boolean} state Rejection or Approval.\n\t * @param  {*}       value Value to pass back to the promise.\n\t * @return {Promise}       Promise/A+ spec promise.\n\t */\n\tUtils.promisify = function (state, value) {\n\t  var promise = Promise();\n\t\n\t  promise(state, [value]);\n\t\n\t  return promise;\n\t};\n\t\n\t/**\n\t * Wrap an array of promises and return when they have all completed.\n\t * @param   {Array}     promises  An array of promises to manage.\n\t * @param   {boolean}   paused    A boolean to pause the execution of the promises.\n\t * @return  {Promise}             A promise that is resolved when all of the promises have fulfilled.\n\t */\n\tUtils.series = function (promises, paused) {\n\t\n\t  var promisesCount = promises.length;\n\t  var all = Promise();\n\t\n\t  var state = {\n\t    total: promisesCount,\n\t    complete: 0,\n\t    responses: [],\n\t    promises: promises,\n\t    paused: true\n\t  };\n\t\n\t  all.pause = Utils._seriesPause.bind(undefined, all, state);\n\t  all.resume = Utils._seriesResume.bind(undefined, all, state);\n\t\n\t  if (!paused) {\n\t    state.paused = false;\n\t    Utils._seriesCallPromise(promises[0], state, all);\n\t  }\n\t\n\t  return all;\n\t\n\t};\n\t\n\t/**\n\t * Call a promise and pass the complete and error functions.\n\t * @param  {Promise} promise Promise to execute on.\n\t * @param  {Object} state   Persistent state of the series of promises.\n\t */\n\tUtils._seriesCallPromise = function (promise, state, all) {\n\t  // call the promise;\n\t  if (!state.paused) {\n\t    promise().then(Utils._seriesComplete.bind(undefined, all, state),\n\t      Utils._seriesError.bind(undefined, all, state));\n\t  }\n\t};\n\t\n\t/**\n\t * Manage the progress of the promises.\n\t * @private\n\t * @param  {Promise} all      All promise.\n\t * @param  {Object}  state    State object used to persist the promise count.\n\t * @param  {Object}  response Response of the promise being fulfilled.\n\t */\n\tUtils._seriesComplete = function (all, state, response) {\n\t\n\t  // Increment the complete promises.\n\t  state.complete++;\n\t  state.responses.push(response);\n\t\n\t  if (state.complete >= state.total) {\n\t    all(true, state.responses);\n\t  } else {\n\t    if (!state.paused) {\n\t      // Execute the next promise.\n\t      Utils._seriesCallPromise(state.promises[state.complete], state, all);\n\t    }\n\t  }\n\t\n\t};\n\t\n\t/**\n\t * Immediately reject the promise if there is an error.\n\t * @param  {Promise} all  All promise.\n\t * @param  {Object}  state    State object used to persist the promise count.\n\t * @param  {Object}  response Response of the promise being fulfilled.\n\t */\n\tUtils._seriesError = function (all, state, error) {\n\t  all(false, [error]);\n\t};\n\t\n\t/**\n\t * Pause the current series of promises.\n\t * @param  {Promise} all  All promise.\n\t * @param  {Object}  state    State object used to persist the promise count.\n\t */\n\tUtils._seriesPause = function (all, state) {\n\t  state.paused = true;\n\t};\n\t\n\t/**\n\t * Resume the current series of promises.\n\t * @param  {Promise} all  All promise.\n\t * @param  {Object}  state    State object used to persist the promise count.\n\t */\n\tUtils._seriesResume = function (all, state) {\n\t  state.paused = false;\n\t\n\t  if (state.complete !== state.total) {\n\t    Utils._seriesCallPromise(state.promises[state.complete], state, all);\n\t  }\n\t};\n\t\n\tmodule.exports = Utils;\n\n\n/***/ },\n/* 10 */\n/***/ function(module, exports, __webpack_require__) {\n\n\tvar extend = __webpack_require__(2);\n\tvar Request = __webpack_require__(3);\n\tvar utils = __webpack_require__(9);\n\tvar JWTUtils = __webpack_require__(8);\n\t\n\t/**\n\t * Create a new upload wrapper.  Manages the entire upload of a file.\n\t * @class\n\t * @param   {object}  options                   Configuration options to override the defaults.\n\t * @param   {object}  options.api               A reference to the parent API instance.\n\t * @param   {object}  options.file              The file to upload.\n\t * @param   {object}  options.upload            REST endpoint for creating an input.\n\t * @param   {object}  options.sign              REST endpoint for signing a blob before upload.\n\t * @param   {object}  options.uploadComplete    REST endpoint to notify the API that the upload is complete.\n\t * @param   {object}  options.uploadAbort       REST endpoint to abort the upload.\n\t */\n\tfunction Upload (options) {\n\t\n\t  this.defaults = {\n\t    api: null,\n\t    file: null,\n\t    upload: '/encoding/inputs/<%=id%>/upload<%=method%>',\n\t    sign: '/encoding/inputs/<%=id%>/upload/sign<%=method%>',\n\t    uploadComplete: '/encoding/inputs/<%=id%>/upload/complete',\n\t    uploadAbort: '/encoding/inputs/<%=id%>/upload/abort<%=method%>',\n\t    uploadMethods: {\n\t      param: '?type=',\n\t      singlePart: 'amazon',\n\t      multiPart: 'amazonMP'\n\t    }\n\t  };\n\t\n\t  // Create a config object by extending the defaults with the pass options.\n\t  this.config = extend(true, {}, this.defaults, options);\n\t\n\t  this.api = this.config.api;\n\t  this.file = this.config.file;\n\t\n\t  this.chunks = [];\n\t  this.chunkSize = 0;\n\t  this.chunkCount = 0;\n\t  this.chunksComplete = 0;\n\t  this.uploadedBytes = 0;\n\t\n\t  this.aborted = false;\n\t  this.paused = false;\n\t  this.created = false;\n\t  this.initialized = false;\n\t\n\t  this.fileRecord = {\n\t    filename: this.file.name,\n\t    type: this.file.type,\n\t    size: this.file.size,\n\t    method: this._checkMultipart(this.file)\n\t  };\n\t\n\t};\n\t\n\t/**\n\t * Register a function to execute when a chunk completes uploading.\n\t * @param  {Function} callback A callback to execute when progress is made.\n\t */\n\tUpload.prototype.progress = function (callback) {\n\t  this.config.progress = callback.bind(this);\n\t};\n\t\n\t/**\n\t * Create a new input record and upload the files to amazon.\n\t * @return  {Promise}         A promise which resolves when the new input record is created and uploaded.\n\t */\n\tUpload.prototype.save = function () {\n\t  return this._create(this.fileRecord)\n\t    .then(this._initialize.bind(this))\n\t    .then(this._prepareUpload.bind(this));\n\t};\n\t\n\t/**\n\t * Call the progress callback and pass the current progress percentage.\n\t * @private\n\t * @param  {number} message Current progress percentage.\n\t */\n\tUpload.prototype._updateProgress = function (percent, chunkSize) {\n\t\n\t  if (!this.config.progress) {\n\t    return;\n\t  }\n\t\n\t  this.config.progress.call(this, percent, chunkSize);\n\t};\n\t\n\t/**\n\t * Create a new input record.\n\t * @private\n\t * @param   {object}  record  A JSON object representing the input record to create.\n\t * @return  {Promise}         A promise which resolves when the new input record is created.\n\t */\n\tUpload.prototype._create = function (record) {\n\t\n\t  if (this.aborted) {\n\t    return utils.promisify(false, 'upload aborted');\n\t  }\n\t\n\t  return this.api.inputs.add([record]).then(this._createSuccess.bind(this));\n\t};\n\t\n\t/**\n\t * Return the data object from the response.\n\t * @private\n\t * @param  {JSON}   response  JSON response containing the new input record id.\n\t * @return {string}           new input record id.\n\t */\n\tUpload.prototype._createSuccess = function (response) {\n\t\n\t  this.created = true;\n\t\n\t  this._updateProgress(0, 0);\n\t  this.fileRecord.id = response.data[0].id;\n\t\n\t  return this.fileRecord.id;\n\t};\n\t\n\t/**\n\t * Initializes an Input for upload\n\t * @private\n\t * @return {Promise} A promise which resolves when the request is complete.\n\t */\n\tUpload.prototype._initialize = function () {\n\t\n\t  var url;\n\t  var tokens;\n\t  var signing = '';\n\t\n\t  if (this.aborted) {\n\t    return utils.promisify(false, 'upload aborted');\n\t  }\n\t\n\t  if (!this.fileRecord.method) {\n\t    signing = this.config.uploadMethods.param + this.config.uploadMethods.singlePart;\n\t  }\n\t\n\t  tokens = {\n\t    id: this.fileRecord.id,\n\t    method: signing\n\t  };\n\t\n\t  url = utils.parseTokens(this.api.config.host + this.config.upload, tokens);\n\t\n\t  return new Request({\n\t    url: url,\n\t    token: this.api.getToken(),\n\t    method: 'POST',\n\t    data: this.fileRecord\n\t  }).then(this._initializeComplete.bind(this));\n\t\n\t};\n\t\n\t/**\n\t * Store the information returned from the initialize request.\n\t * @private\n\t */\n\tUpload.prototype._initializeComplete = function (response) {\n\t  this.initialized = true;\n\t  this.fileRecord.key = response.data.key;\n\t  this.fileRecord.uploadId = response.data.uploadId;\n\t  this.chunkSize = response.data.pieceSize;\n\t  this.chunkCount = response.data.pieceCount;\n\t};\n\t\n\t/**\n\t * Setup the upload depending on its type, single or multi part.\n\t * @return {Promise} A promise which resolves when all of the pieces have completed uploading.\n\t */\n\tUpload.prototype._prepareUpload = function () {\n\t  if (!this.fileRecord.method) {\n\t    // Singlepart.\n\t    return this._uploadFile()\n\t      .then(this._onCompleteUpload.bind(this));\n\t  } else {\n\t    // Multipart.\n\t    return this._createChunks()\n\t      .then(this._completeUpload.bind(this));\n\t  }\n\t};\n\t\n\t/**\n\t * Break a file into blobs and create a chunk object for each piece.\n\t * @private\n\t * @return {Promise} A promise which resolves when all of the pieces have completed uploading.\n\t */\n\tUpload.prototype._createChunks = function () {\n\t  var sliceMethod = this._getSliceMethod(this.file);\n\t  var i, blob, chunk, start, end,\n\t    chunkPromises = [];\n\t\n\t  if (this.aborted) {\n\t    this.abort();\n\t    return utils.promisify(false, 'upload aborted');\n\t  }\n\t\n\t  for (i = 0; i < this.chunkCount; i++) {\n\t\n\t    start = i * this.chunkSize;\n\t    end = (i + 1) * this.chunkSize;\n\t\n\t    // Fix any possible overflow that could add extra bytes.\n\t    if (i === this.chunkCount - 1) {\n\t      end = this.fileRecord.size;\n\t    }\n\t\n\t    blob = this.file[sliceMethod](start, end);\n\t\n\t    chunk = {\n\t      partNumber: i + 1,\n\t      data: blob\n\t    };\n\t\n\t    this.chunks.push(chunk);\n\t\n\t    chunkPromises.push(this._uploadChunk.bind(this, chunk));\n\t\n\t  }\n\t\n\t  // Store a reference for pausing and resuming.\n\t  this.currentUpload = utils.series(chunkPromises, this.paused);\n\t\n\t  return this.currentUpload;\n\t};\n\t\n\t/**\n\t * Create a promise chain for each chunk to be uploaded.\n\t * @private\n\t * @return {Promise} A promise which resolves when the request is complete.\n\t */\n\tUpload.prototype._uploadChunk = function (chunk) {\n\t  return this._signUpload(chunk)\n\t    .then(this._sendUpload.bind(this, chunk))\n\t    .then(this._completeChunk.bind(this, chunk));\n\t};\n\t\n\t/**\n\t * Create a promise chain for a single part file upload.\n\t * @param  {file}   file    A file reference to upload.\n\t * @return {Promise} A promise which resolves when the request is complete.\n\t */\n\tUpload.prototype._uploadFile = function () {\n\t  var chunk = {\n\t    data: this.file\n\t  };\n\t\n\t  return this._signUpload(chunk)\n\t    .then(this._sendUpload.bind(this, chunk))\n\t    .then(this._sendSinglepartComplete.bind(this))\n\t    .then(this._updateProgress.bind(this, 100, this.fileRecord.size));\n\t};\n\t\n\t/**\n\t * Make a request and sign the chunk to be uploaded.\n\t * @private\n\t * @param  {object}   chunk           Information about the chunk to be uploaded.\n\t * @return {Promise}                  A promise which resolves when the request is complete.\n\t */\n\tUpload.prototype._signUpload = function (chunk) {\n\t  var url;\n\t  var signing = '';\n\t  var headers = {};\n\t\n\t  // Set the part number for the current chunk.\n\t  if (chunk.partNumber) {\n\t    this.fileRecord.partNumber = chunk.partNumber;\n\t  }\n\t\n\t  headers['Content-Type'] = 'multipart/form-data';\n\t\n\t  if (!this.fileRecord.method) {\n\t    signing = this.config.uploadMethods.param + this.config.uploadMethods.singlePart;\n\t  }\n\t\n\t  url = utils.parseTokens(this.api.config.host + this.config.sign, {\n\t    id: this.fileRecord.id,\n\t    method: signing\n\t  });\n\t\n\t  return new Request({\n\t    url: url,\n\t    token: this.api.getToken(),\n\t    method: 'POST',\n\t    headers: headers,\n\t    data: this.fileRecord\n\t  });\n\t};\n\t\n\t/**\n\t * Send the upload to the server.\n\t * @private\n\t * @param   {object} upload  An object representing the upload to send to the server.\n\t * @return  {Promise}       A promise which resolves when the request is complete.\n\t */\n\tUpload.prototype._sendUpload = function (upload, response) {\n\t  var headers = {};\n\t\n\t  var formData = new FormData();\n\t  formData.append('file', upload.data);\n\t\n\t  // Set the proper headers to send with the file.\n\t  headers['Content-Type'] = 'multipart/form-data';\n\t  headers['Authorization'] = response.data.authHeader;\n\t  headers['x-amz-date'] = response.data.dateHeader;\n\t\n\t  return new Request({\n\t    url: response.data.url,\n\t    method: 'PUT',\n\t    headers: headers,\n\t    data: formData\n\t  });\n\t};\n\t\n\t/**\n\t * Update the upload bytes value when a single part file is uploaded.\n\t */\n\tUpload.prototype._sendSinglepartComplete = function () {\n\t  this.uploadedBytes = this.fileRecord.size;\n\t};\n\t\n\t/**\n\t *  Executed when a chunk is finished uploading.\n\t *  @private\n\t */\n\tUpload.prototype._completeChunk = function (chunk) {\n\t  var progress;\n\t\n\t  this.chunksComplete++;\n\t  chunk.complete = true;\n\t\n\t  this.uploadedBytes += chunk.data.size;\n\t\n\t  progress = this.uploadedBytes / this.fileRecord.size;\n\t  progress = progress * 100;\n\t  progress = Math.round(progress);\n\t\n\t  this._updateProgress(progress, chunk.data.size);\n\t};\n\t\n\t/**\n\t * Notify the server that the upload is complete.\n\t *\n\t * @private\n\t * @return {Promise} A promise which resolves when the request is complete.\n\t */\n\tUpload.prototype._completeUpload = function () {\n\t  var url;\n\t  var tokens;\n\t\n\t  if (this.aborted) {\n\t    this.abort();\n\t    return utils.promisify(false, 'upload aborted');\n\t  }\n\t\n\t  tokens = {\n\t    id: this.fileRecord.id\n\t  };\n\t\n\t  url = utils.parseTokens(this.api.config.host + this.config.uploadComplete, tokens);\n\t\n\t  return new Request({\n\t    url: url,\n\t    token: this.api.getToken(),\n\t    method: 'POST',\n\t    data: this.fileRecord\n\t  }).then(this._onCompleteUpload.bind(this));\n\t};\n\t\n\t/**\n\t * Return the id for the current file record.\n\t * @private\n\t * @return {string} ID for the input record that was created.\n\t */\n\tUpload.prototype._onCompleteUpload = function () {\n\t  this.currentUpload = null;\n\t  return this.fileRecord.id;\n\t};\n\t\n\t/**\n\t * Aborts an input upload\n\t *\n\t * @param {boolean} async A flag to indicate whether or not the request to delete the input should be async.\n\t *\n\t * @return {Promise} A promise which resolves when the request is complete.\n\t */\n\tUpload.prototype.abort = function (async) {\n\t  var url;\n\t  var tokens;\n\t  var signing = '';\n\t\n\t  if (typeof async === 'undefined') {\n\t    async = true;\n\t  }\n\t\n\t  this.aborted = true;\n\t\n\t  // If initialize hasn't been called yet there is no need to abort the upload as it doesn't\n\t  // exist yet.\n\t  if (!this.initialized) {\n\t\n\t    if (this.created) {\n\t      // If the input has been created simply return early with a\n\t      // promise to delete the created input record.\n\t      return this.api.inputs.delete(this.fileRecord.id, async);\n\t    } else {\n\t      // Resolve as a successful promise. This case would be fulfilled when an upload\n\t      // has been created but save() hasn't yet been called.\n\t      return utils.promisify(true);\n\t    }\n\t\n\t  }\n\t\n\t  if (this.currentUpload) {\n\t    this.currentUpload.pause();\n\t    this.currentUpload = null;\n\t  }\n\t\n\t  if (!this.fileRecord.method) {\n\t    signing = this.config.uploadMethods.param + this.config.uploadMethods.singlePart;\n\t  }\n\t\n\t  tokens = {\n\t    id: this.fileRecord.id,\n\t    method: signing\n\t  };\n\t\n\t  url = utils.parseTokens(this.api.config.host + this.config.uploadAbort, tokens);\n\t\n\t  return new Request({\n\t    url: url,\n\t    async: async,\n\t    token: this.api.getToken(),\n\t    method: 'POST',\n\t    data: this.fileRecord\n\t  }).then(this._abortComplete.bind(this, async));\n\t};\n\t\n\t/**\n\t * Delete the input that was created.\n\t * @private\n\t * @return {Promise} A promise which resolves when the request is complete.\n\t */\n\tUpload.prototype._abortComplete = function (async) {\n\t  return this.api.inputs.delete(this.fileRecord.id, async);\n\t};\n\t\n\t/**\n\t * Pause the current upload.\n\t */\n\tUpload.prototype.pause = function () {\n\t  this.paused = true;\n\t  if (this.currentUpload) {\n\t    this.currentUpload.pause();\n\t  }\n\t};\n\t\n\t/**\n\t * Resume the current upload.\n\t */\n\tUpload.prototype.resume = function () {\n\t  this.paused = false;\n\t  if (this.currentUpload) {\n\t    this.currentUpload.resume();\n\t  }\n\t};\n\t\n\t/**\n\t * Check the file size to determine if it should be a multipart upload, returns false for singlepart uploads.\n\t * @private\n\t * @param  {file}   file  The file to evaluate.\n\t * @return {boolean}      True if the file will be uploading using mutlipart upload.\n\t */\n\tUpload.prototype._checkMultipart = function (file) {\n\t  if (!file) {\n\t    return;\n\t  }\n\t\n\t  return (file.size <= (5 * 1024 * 1024) ? false : true);\n\t};\n\t\n\t/**\n\t * Function that determines the slice method to be used\n\t * @private\n\t * @param {object} file - The file object you wish to determine the slice method for\n\t * @return {string} sliceMethod - The slice method to use.\n\t */\n\tUpload.prototype._getSliceMethod = function (file) {\n\t  var sliceMethod;\n\t\n\t  if ('mozSlice' in file) {\n\t    sliceMethod = 'mozSlice';\n\t  } else if ('webkitSlice' in file) {\n\t    sliceMethod = 'webkitSlice';\n\t  } else {\n\t    sliceMethod = 'slice';\n\t  }\n\t\n\t  return sliceMethod;\n\t};\n\t\n\tmodule.exports = Upload;\n\n\n/***/ },\n/* 11 */\n/***/ function(module, exports) {\n\n\t/**\n\t * A management layer for storing app cache in local storage.\n\t */\n\tvar Cache = function (cacheAge) {\n\t  this.cacheAge = cacheAge;\n\t  this.enabled = this._checkCacheSupport();\n\t};\n\t\n\t/**\n\t * Return true if localStorage is supported.\n\t * @private\n\t * @return {boolean} True if localStorage is supported.\n\t */\n\tCache.prototype._checkCacheSupport = function () {\n\t\n\t  var support = 'support';\n\t\n\t  try {\n\t    window.localStorage.setItem(support, support);\n\t    window.localStorage.removeItem(support);\n\t    return true;\n\t  } catch (e) {\n\t    return false;\n\t  }\n\t\n\t};\n\t\n\t/**\n\t * Retrieve the cached result for the provided cacheKey.\n\t * @param  {string}   cacheKey  Key associated with the cached result.\n\t * @return {object}             Parse results object.\n\t */\n\tCache.prototype.retrieve = function (cacheKey) {\n\t  var data;\n\t  var value = null;\n\t  var expiry;\n\t\n\t  try {\n\t\n\t    data = window.localStorage.getItem(cacheKey);\n\t    data = JSON.parse(data);\n\t\n\t    if (!data) {\n\t      return value;\n\t    }\n\t\n\t    value = data.value;\n\t\n\t    if (data.expiry < Date.now()) {\n\t      // Cache is expired;\n\t      window.localStorage.removeItem(cacheKey);\n\t      value = null;\n\t    }\n\t\n\t  } catch (error) {\n\t    // Silent capture so that caching never gets in the way of returning a result.\n\t    value = null;\n\t  }\n\t\n\t  return value;\n\t};\n\t\n\t/**\n\t * Remove a result from the cache.\n\t * @param  {string}   cacheKey  Key associated with the cached result.\n\t * @return {boolean}            A boolean indicating success of the removal.\n\t */\n\tCache.prototype.remove = function (cacheKey) {\n\t  var result = true;\n\t\n\t  try {\n\t    window.localStorage.removeItem(cacheKey);\n\t  } catch (error) {\n\t    // Silent capture so that caching never gets in the way of returning a result.\n\t    result = false;\n\t  }\n\t\n\t  return result;\n\t};\n\t\n\t/**\n\t * Save the new result with its expiry date.\n\t * @param  {string}   cacheKey Unique cache key for the request.\n\t * @param  {number}   expiry   Unix timestamp for the expiry.\n\t * @param  {object}   result   Object to be cached.\n\t * @return {boolean}            A boolean indicating success of the save.\n\t */\n\tCache.prototype.save = function (cacheKey, value) {\n\t  var result = true;\n\t  var data = {};\n\t  var JSONResult;\n\t\n\t  try {\n\t\n\t    data.expiry = Date.now() + this.cacheAge;\n\t    data.value = value;\n\t\n\t    JSONResult = JSON.stringify(data);\n\t\n\t    window.localStorage.setItem(cacheKey, JSONResult);\n\t\n\t  } catch (error) {\n\t    // Silent capture so that caching never gets in the way of returning a result.\n\t    result = false;\n\t  }\n\t\n\t  return result;\n\t};\n\t\n\t/**\n\t * Return an object representing the differences between the provided object and the cached object.\n\t * @example\n\t * //'cachedObject' = {id: '12345'};\n\t * cache.diff('cachedObject', {title: 'test'});\n\t * // returns {title: 'test'}\n\t * @example\n\t * //'cachedObject' = {id: '12345', title: 'test'};\n\t * cache.diff('cachedObject', {title: 'test2'});\n\t * // returns {title: 'test2'}\n\t *\n\t * @param  {string} cacheKey  Cachekey of the object to compare against.\n\t * @param  {object} item      Object to compare against the cached object.\n\t * @param  {array}  forced    An array of properties to be returned in the resulting object regardless of difference.\n\t * @return {object}           An object containing the differences.\n\t */\n\tCache.prototype.diff = function (cacheKey, item, forced) {\n\t  var property, properties, propertiesLength, i;\n\t  var force, forcedLength, n;\n\t  var original = this.retrieve(cacheKey);\n\t  var diff = null;\n\t\n\t  if (forced) {\n\t    forcedLength = forced.length;\n\t  }\n\t\n\t  properties = Object.keys(item);\n\t  propertiesLength = properties.length;\n\t\n\t  if (!original) {\n\t    // return the compare object if the original item wasn't found.\n\t    return item;\n\t  }\n\t\n\t  // Walk the object and compare the properties.\n\t  for (i = 0; i < propertiesLength; i++) {\n\t    property = properties[i];\n\t\n\t    // Check the values if both objects have the property.\n\t    if (original.hasOwnProperty(property)) {\n\t      if (item[property] === original[property]) {\n\t        // If the values are the same we don't need to add it to the diff so continue.\n\t        continue;\n\t      }\n\t    }\n\t\n\t    // If the diff item is still null we need to create a new object to store the properties in.\n\t    if (!diff) {\n\t      diff = {};\n\t    }\n\t\n\t    // If we've made it this far the property is either a new one, or the item doesn't match.\n\t    diff[property] = item[property];\n\t\n\t  }\n\t\n\t  // As long as changes were found append the forced properties.\n\t  if (diff) {\n\t    for (n = 0; n < forcedLength; n++) {\n\t      property = forced[n];\n\t      diff[property] = item[property];\n\t    }\n\t  }\n\t\n\t  return diff;\n\t\n\t};\n\t\n\t/**\n\t * Return an object representing the differences between the provided objects and the cached object.\n\t * Similar to diff, but accepts an array of objects.\n\t *\n\t * @param  {string} cacheKey  Property on the provided objects that represents the cache key.\n\t * @param  {object} item      Object to compare against the cached object.\n\t * @param  {array}  forced    An array of properties to be returned in the resulting object regardless of difference.\n\t * @return {object}           An object containing the differences.\n\t */\n\tCache.prototype.diffArray = function (cacheKey, items, forced) {\n\t\n\t  var i;\n\t  var itemsLength = items.length;\n\t  var item;\n\t  var result = null;\n\t  var results = [];\n\t\n\t  for (i = 0; i < itemsLength; i++) {\n\t    item = items[i];\n\t\n\t    result = this.diff(item[cacheKey], item, forced);\n\t\n\t    // Only add it to the result set if changes were found.\n\t    if (result !== null) {\n\t      results.push(result);\n\t    }\n\t\n\t  }\n\t\n\t  return results;\n\t\n\t};\n\t\n\tmodule.exports = Cache;\n\n\n/***/ },\n/* 12 */\n/***/ function(module, exports, __webpack_require__) {\n\n\tvar extend = __webpack_require__(2);\n\tvar Request = __webpack_require__(3);\n\tvar utils = __webpack_require__(9);\n\t\n\t/**\n\t * Resource Object\n\t * @class\n\t */\n\tfunction Resource (options) {\n\t\n\t  this.defaults = {\n\t    host: 'https://api.ingest.io',\n\t    all: '/<%=resource%>',\n\t    byId: '/<%=resource%>/<%=id%>',\n\t    thumbnails: '/<%=resource%>/<%=id%>/thumbnails',\n\t    trash: '/<%=resource%>?filter=trashed',\n\t    deleteMethods: {\n\t      'permanent': '?permanent=1'\n\t    },\n\t    search: '/<%=resource%>?search=<%=input%>',\n\t    tokenSource: null,\n\t    resource: null\n\t  };\n\t\n\t  this.config = extend(true, {}, this.defaults, options);\n\t\n\t  this.cache = this.config.cache;\n\t\n\t}\n\t\n\t/**\n\t * Proxy the request to token source to ensure a value is always returned.\n\t * @private\n\t * @return {string} Auth token.\n\t */\n\tResource.prototype._tokenSource = function () {\n\t  var result = null;\n\t\n\t  if (this.config.tokenSource) {\n\t    result = this.config.tokenSource.call();\n\t  }\n\t\n\t  return result;\n\t};\n\t\n\t/**\n\t * Return a list of the requested resource for the current user and network.\n\t * @param  {object}   headers   Object representing headers to apply to the request.\n\t * @return {promise}            A promise which resolves when the request is complete.\n\t */\n\tResource.prototype.getAll = function (headers) {\n\t  var url = utils.parseTokens(this.config.host + this.config.all, {\n\t    resource: this.config.resource\n\t  });\n\t\n\t  return new Request({\n\t    url: url,\n\t    token: this._tokenSource(),\n\t    headers: headers\n\t  }).then(this._updateCachedResources.bind(this));\n\t};\n\t\n\t/**\n\t * Return a resource that matches the supplied id.\n\t * @param  {string}   id    Resource id.\n\t * @return {promise}        A promise which resolves when the request is complete.\n\t */\n\tResource.prototype.getById = function (id) {\n\t  var url, cachedResult;\n\t\n\t  if (typeof id !== 'string') {\n\t    return utils.promisify(false,\n\t      'IngestAPI Resource getById requires a valid id passed as a string.');\n\t  }\n\t\n\t  url = utils.parseTokens(this.config.host + this.config.byId, {\n\t    resource: this.config.resource,\n\t    id: id\n\t  });\n\t\n\t  if (this.cache && this.cache.enabled) {\n\t    // retrieve the cached item.\n\t    cachedResult = this.cache.retrieve(id);\n\t  }\n\t\n\t  // Return a cached result if we've found one.\n\t  if (cachedResult) {\n\t    return utils.promisify(true, {\n\t      data: cachedResult\n\t    });\n\t  } else {\n\t    return new Request({\n\t      url: url,\n\t      token: this._tokenSource()\n\t    });\n\t  }\n\t};\n\t\n\t/**\n\t * Return the resources currently in the trash.\n\t * @param  {object} headers Headers to be passed along with the request for pagination.\n\t * @return {promise}         A promise which resolves when the request is complete.\n\t */\n\tResource.prototype.getTrashed = function (headers) {\n\t  var url = utils.parseTokens(this.config.host + this.config.trash, {\n\t    resource: this.config.resource\n\t  });\n\t\n\t  return new Request({\n\t    url: url,\n\t    token: this._tokenSource(),\n\t    headers: headers\n\t  });\n\t};\n\t\n\t/**\n\t * Retrieve all thumbnails for a provided resource id.\n\t * @param {string} id ID of the resource to retrieve thumbnails for.\n\t * @return {promise}  A promise which resolves when the request is complete.\n\t */\n\tResource.prototype.getThumbnails = function (id) {\n\t  var url;\n\t\n\t  if (typeof id !== 'string') {\n\t    return utils.promisify(false,\n\t      'IngestAPI Resource getThumbnails requires an id to be passed as a string.');\n\t  }\n\t\n\t  url = utils.parseTokens(this.config.host + this.config.thumbnails, {\n\t    resource: this.config.resource,\n\t    id: id\n\t  });\n\t\n\t  return new Request({\n\t    url: url,\n\t    token: this._tokenSource()\n\t  });\n\t};\n\t\n\t/**\n\t * Add a new resource.\n\t * @param   {object}  resource  An object representing the resource to add.\n\t * @return  {promise}           A promise which resolves when the request is complete.\n\t */\n\tResource.prototype.add = function (resource) {\n\t  var url;\n\t\n\t  if (typeof resource !== 'object') {\n\t    return utils.promisify(false,\n\t      'IngestAPI Resource add requires a resource passed as an object.');\n\t  }\n\t\n\t  url = utils.parseTokens(this.config.host + this.config.all, {\n\t    resource: this.config.resource\n\t  });\n\t\n\t  return new Request({\n\t    url: url,\n\t    token: this._tokenSource(),\n\t    method: 'POST',\n\t    data: resource\n\t  }).then(this._updateCachedResource.bind(this));\n\t};\n\t\n\t/**\n\t * Update an existing resource with new content.\n\t * @param  {object|array} resource  An object or an array of objects representing the resource(s) to be updated.\n\t * @return {promise}                A promise which resolves when the request is complete.\n\t */\n\tResource.prototype.update = function (resource) {\n\t  if (typeof resource !== 'object') {\n\t    return utils.promisify(false,\n\t      'IngestAPI Resource update requires a resource to be passed either as an object or an array of objects.'); //eslint-disable-line\n\t  }\n\t\n\t  // If they've passed an array fire the updateArray function.\n\t  if (Array.isArray(resource)) {\n\t    return this._updateResourceArray(resource);\n\t  } else {\n\t    return this._updateResource(resource);\n\t  }\n\t};\n\t\n\t/**\n\t * Update a single resource.\n\t * @private\n\t * @param  {object}   resource  An object representing the resource to update.\n\t * @return {promise}            A promise which resolves when the request is complete.\n\t */\n\tResource.prototype._updateResource = function (resource) {\n\t  var data = resource;\n\t\n\t  var url = utils.parseTokens(this.config.host + this.config.byId, {\n\t    resource: this.config.resource,\n\t    id: resource.id\n\t  });\n\t\n\t  if (this.cache && this.cache.enabled) {\n\t    data = this.cache.diff(resource.id, resource);\n\t  }\n\t\n\t  // Null is returned in the case that the two objects match.\n\t  if (!data) {\n\t    // Return a fulfilled promise with the cached object.\n\t    return utils.promisify(true, {\n\t      data: this.cache.retrieve(resource.id)\n\t    });\n\t  }\n\t\n\t  return new Request({\n\t    url: url,\n\t    token: this._tokenSource(),\n\t    method: 'PATCH',\n\t    data: data\n\t  }).then(this._updateCachedResource.bind(this));\n\t};\n\t\n\t/**\n\t * Update an array of resources.\n\t * @private\n\t * @param  {array} resources  An array of resource objects to be updated.\n\t * @return {promise}          A promise which resolves when the request is complete.\n\t */\n\tResource.prototype._updateResourceArray = function (resources) {\n\t  var url = utils.parseTokens(this.config.host + this.config.all, {\n\t    resource: this.config.resource\n\t  });\n\t\n\t  return new Request({\n\t    url: url,\n\t    token: this._tokenSource(),\n\t    method: 'PATCH',\n\t    data: resources\n\t  }).then(this._updateCachedResources.bind(this));\n\t};\n\t\n\t/**\n\t * Delete an existing resource\n\t * @param  {object | array} resource The id, or an array of ids for the resource(s) to be deleted.\n\t * @param {boolean}   async       A flag to indicate if this should be an async request to delete.\n\t * @return {promise}          A promise which resolves when the request is complete.\n\t */\n\tResource.prototype.delete = function (resource, async) {\n\t  if (typeof async === 'undefined') {\n\t    async = true;\n\t  }\n\t\n\t  if (typeof resource !== 'string') {\n\t    // If they've passed an array fire the updateArray function.\n\t    if (Array.isArray(resource)) {\n\t      return this._deleteResourceArray(resource, false, async);\n\t    }\n\t\n\t    return utils.promisify(false,\n\t      'IngestAPI Resource delete requires a resource to be passed either as a string or an array of strings.'); //eslint-disable-line\n\t  }\n\t\n\t  return this._deleteResource(resource, false, async);\n\t};\n\t\n\t/**\n\t * Permanently delete an existing resource.\n\t * @param  {object | array} resource The id, or an array of ids for the resource(s) to be deleted.\n\t * @param {boolean}   async       A flag to indicate if this should be an async request to delete.\n\t * @return {promise}          A promise which resolves when the request is complete.\n\t */\n\tResource.prototype.permanentDelete = function (resource, async) {\n\t  if (typeof async === 'undefined') {\n\t    async = true;\n\t  }\n\t\n\t  if (typeof resource !== 'string') {\n\t    // If they've passed an array fire the updateArray function.\n\t    if (Array.isArray(resource)) {\n\t      return this._deleteResourceArray(resource, true, async);\n\t    }\n\t\n\t    return utils.promisify(false,\n\t      'IngestAPI Resource delete requires a resource to be passed either as a string or an array of strings.'); //eslint-disable-line\n\t  }\n\t\n\t  return this._deleteResource(resource, true, async);\n\t};\n\t\n\t/**\n\t * Delete a single resource\n\t * @private\n\t * @param  {object}   resource  The id of the resource to be deleted.\n\t * @param {boolean}   permanent  A flag to permanently delete each video.\n\t * @param {boolean}   async       A flag to indicate if this should be an async request to delete.\n\t * @return {promise}            A promise which resolves when the request is complete.\n\t */\n\tResource.prototype._deleteResource = function (resource, permanent, async) {\n\t  var url = utils.parseTokens(this.config.host + this.config.byId, {\n\t    resource: this.config.resource,\n\t    id: resource\n\t  });\n\t\n\t  if (permanent === true) {\n\t    url += this.config.deleteMethods.permanent;\n\t  }\n\t\n\t  return new Request({\n\t    url: url,\n\t    async: async,\n\t    token: this._tokenSource(),\n\t    method: 'DELETE',\n\t  }).then(this._deleteCachedResource.bind(this, resource));\n\t};\n\t\n\t/**\n\t * Delete an array of resources\n\t * @private\n\t * @param  {array}  resources   An array of resource objects to be deleted.\n\t * @param {boolean}  permanent  A flag to permanently delete each video.\n\t * @return {promise}            A promise which resolves when the request is complete.\n\t */\n\tResource.prototype._deleteResourceArray = function (resources, permanent) {\n\t  var url = utils.parseTokens(this.config.host + this.config.all, {\n\t    resource: this.config.resource\n\t  });\n\t\n\t  if (permanent === true) {\n\t    url += this.config.deleteMethods.permanent;\n\t  }\n\t\n\t  return new Request({\n\t    url: url,\n\t    token: this._tokenSource(),\n\t    method: 'DELETE',\n\t    data: resources\n\t  }).then(this._deleteCachedResources.bind(this, resources));\n\t};\n\t\n\t/**\n\t * Return a subset of items that match the search terms.\n\t * @param  {string} input    The search terms to match against.\n\t * @param  {object} headers  The headers to be passed to the request.\n\t * @return {Promise}          A promise which resolves when the request is complete.\n\t */\n\tResource.prototype.search = function (input, headers) {\n\t  var url;\n\t\n\t  if (typeof input !== 'string') {\n\t    return utils.promisify(false,\n\t      'IngestAPI Resource search requires search input to be passed as a string.');\n\t  }\n\t\n\t  url = utils.parseTokens(this.config.host + this.config.search, {\n\t    resource: this.config.resource,\n\t    input: input\n\t  });\n\t\n\t  return new Request({\n\t    url: url,\n\t    token: this._tokenSource(),\n\t    headers: headers\n\t  });\n\t};\n\t\n\t/**\n\t * Get the total count of resources.\n\t * @return {promise} A promise which resolves when the request is complete.\n\t */\n\tResource.prototype.count = function () {\n\t  var url = utils.parseTokens(this.config.host + this.config.all, {\n\t    resource: this.config.resource\n\t  });\n\t\n\t  return new Request({\n\t    url: url,\n\t    token: this._tokenSource(),\n\t    method: 'HEAD'\n\t  }).then(this._handleCountResponse);\n\t};\n\t\n\t/**\n\t * Get the total count of resources in the trash.\n\t * @return {promise} A promise which resolves when the request is complete.\n\t */\n\tResource.prototype.trashCount = function () {\n\t  var url = utils.parseTokens(this.config.host + this.config.trash, {\n\t    resource: this.config.resource\n\t  });\n\t\n\t  return new Request({\n\t    url: url,\n\t    token: this._tokenSource(),\n\t    method: 'HEAD'\n\t  }).then(this._handleCountResponse);\n\t};\n\t\n\t/**\n\t * Return the resource count from the response.\n\t * @private\n\t * @param  {object} response Request response object.\n\t * @return {number}          The resource count.\n\t */\n\tResource.prototype._handleCountResponse = function (response) {\n\t  return parseInt(response.headers('Resource-Count'), 10);\n\t};\n\t\n\t/**\n\t * Update a single cached resource based on the response data.\n\t * @param  {object}   response   Response object from the getAll request.\n\t * @return {response}            Response object from the getAll request.\n\t */\n\tResource.prototype._updateCachedResource = function (response) {\n\t  if (this.cache && this.cache.enabled) {\n\t    this.cache.save(response.data.id, response.data);\n\t  }\n\t\n\t  return response;\n\t};\n\t\n\t/**\n\t * Store the returned items in cache.\n\t * @param  {object}   response   Response object from the getAll request.\n\t * @return {response}            Response object from the getAll request.\n\t */\n\tResource.prototype._updateCachedResources = function (response) {\n\t  var data = response.data;\n\t  var dataLength = data.length;\n\t  var i;\n\t\n\t  if (this.cache && this.cache.enabled) {\n\t\n\t    for (i = 0; i < dataLength; i++) {\n\t      this.cache.save(data[i].id, data[i]);\n\t    }\n\t\n\t  }\n\t\n\t  return response;\n\t};\n\t\n\t/**\n\t * Delete a single cached resource.\n\t * @param  {string} id            ID of the resource to remove.\n\t * @param  {object}   response    Response object from the getAll request.\n\t * @return {response}             Response object from the getAll request.\n\t */\n\tResource.prototype._deleteCachedResource = function (id, response) {\n\t  if (this.cache && this.cache.enabled) {\n\t    this.cache.remove(id);\n\t  }\n\t\n\t  return response;\n\t};\n\t\n\t/**\n\t * Delete an array of cached resources\n\t * @param  {array}    ids         Array of resource id's to delete from cache.\n\t * @param  {object}   response    Response object from the getAll request.\n\t * @return {response}             Response object from the getAll request.\n\t */\n\tResource.prototype._deleteCachedResources = function (ids, response) {\n\t  var dataLength = ids.length;\n\t  var i;\n\t\n\t  if (this.cache && this.cache.enabled) {\n\t\n\t    for (i = 0; i < dataLength; i++) {\n\t      this.cache.remove(ids[i]);\n\t    }\n\t\n\t  }\n\t\n\t  return response;\n\t};\n\t\n\tmodule.exports = Resource;\n\n\n/***/ },\n/* 13 */\n/***/ function(module, exports, __webpack_require__) {\n\n\tvar Resource = __webpack_require__(12);\n\tvar Request = __webpack_require__(3);\n\tvar utils = __webpack_require__(9);\n\t\n\tfunction Users (options) {\n\t\n\t  Resource.call(this, options);\n\t\n\t};\n\t\n\t// This extends the base class of 'Resource'.\n\tUsers.prototype = Object.create(Resource.prototype);\n\tUsers.prototype.constructor = Users;\n\t\n\t/**\n\t * Retrieve information for the current user.\n\t *\n\t * @return {Promise} A promise which resolves when the request is complete.\n\t */\n\tUsers.prototype.getCurrentUserInfo = function () {\n\t  return new Request({\n\t    url: this.config.host + this.config.currentUser,\n\t    token: this._tokenSource()\n\t  });\n\t};\n\t\n\t/**\n\t * Transfer all authorship currently under the specified user onto another.\n\t * This includes all videos & playlists.\n\t * This task is commonly used in conjunction with permanently deleting a user.\n\t *\n\t * @param {string} oldId - The user who currently has authorship.\n\t * @param {string} newId - The user to transfer authorship to.\n\t *\n\t * @return {Promise} A promise which resolves when the request is complete.\n\t */\n\tUsers.prototype.transferUserAuthorship = function (oldId, newId) {\n\t  var tokens, url;\n\t\n\t  if (typeof oldId !== 'string') {\n\t    return utils.promisify(false,\n\t      'IngestAPI transferUserAuthorship requires \"oldId\" to be passed as a string.');\n\t  }\n\t\n\t  if (typeof newId !== 'string') {\n\t    return utils.promisify(false,\n\t      'IngestAPI transferUserAuthorship requires \"newId\" to be passed as a string');\n\t  }\n\t\n\t  tokens = {\n\t    oldId: oldId,\n\t    newId: newId\n\t  };\n\t\n\t  url = utils.parseTokens(this.config.host + this.config.transfer, tokens);\n\t\n\t  return new Request({\n\t    url: url,\n\t    token: this._tokenSource(),\n\t    method: 'PATCH'\n\t  });\n\t};\n\t\n\t/**\n\t * Link an existing user to the currently authorized network.\n\t *\n\t * @param {string} id - The unique ID of the user to link.\n\t *\n\t * @return {object} - The user object.\n\t *\n\t * @return {Promise} A promise which resolves when the request is complete.\n\t */\n\tUsers.prototype.linkUser = function (id) {\n\t  var tokens, url;\n\t\n\t  if (typeof id !== 'string') {\n\t    return utils.promisify(false,\n\t      'IngestAPI linkUser requires \"id\" to be passed as a string.');\n\t  }\n\t\n\t  tokens = {\n\t    resource: 'users',\n\t    id: id\n\t  };\n\t\n\t  url = utils.parseTokens(this.config.host + this.config.byId, tokens);\n\t\n\t  return new Request({\n\t    url: url,\n\t    token: this._tokenSource(),\n\t    method: 'LINK'\n\t  });\n\t};\n\t\n\t/**\n\t * Remove the specified user from the currently authorized network.\n\t *\n\t * @param {string} id - The unique ID of the user to unlink.\n\t *\n\t * @return {Promise} A promise which resolves when the request is complete.\n\t */\n\tUsers.prototype.unlinkUser = function (id) {\n\t  var tokens, url;\n\t\n\t  if (typeof id !== 'string') {\n\t    return utils.promisify(false,\n\t      'IngestAPI unlinkUser requires \"id\" to be passed as a string.');\n\t  }\n\t\n\t  tokens = {\n\t    resource: 'users',\n\t    id: id\n\t  };\n\t\n\t  url = utils.parseTokens(this.config.host + this.config.byId, tokens);\n\t\n\t  return new Request({\n\t    url: url,\n\t    token: this._tokenSource(),\n\t    method: 'UNLINK'\n\t  });\n\t};\n\t\n\t/**\n\t * Revokes the authorization token for the current user.\n\t *\n\t * @return {Promise} A promise which resolves when the request is complete.\n\t */\n\tUsers.prototype.revokeCurrentUser = function () {\n\t  return new Request({\n\t    url: this.config.host + this.config.currentUser + this.config.revoke,\n\t    token: this._tokenSource(),\n\t    method: 'DELETE'\n\t  });\n\t};\n\t\n\tmodule.exports = Users;\n\n\n/***/ }\n/******/ ])\n});\n;\n\n\n/** WEBPACK FOOTER **\n ** ingest.js\n **/"," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId])\n \t\t\treturn installedModules[moduleId].exports;\n\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\texports: {},\n \t\t\tid: moduleId,\n \t\t\tloaded: false\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.loaded = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(0);\n\n\n\n/** WEBPACK FOOTER **\n ** webpack/bootstrap 110af043aff0204540cc\n **/","module.exports = require('./src/IngestAPI.js');\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./index.js\n ** module id = 0\n ** module chunks = 0\n **/","var extend = require('extend');\nvar Request = require('./Request');\nvar JWTUtils = require('./JWTUtils');\nvar utils = require('./Utils');\nvar Uploader = require('./Uploader');\nvar Cache = require('./Cache');\n\nvar Resource = require('./resources/Resource');\nvar Users = require('./resources/Users');\n\n/**\n * IngestAPI Object\n * @class\n * @param {object}  options        Options to override the default.\n * @param {string}  options.host   Override the default live host.\n * @param {string}  options.token  Auth token to use for requests.\n */\nfunction IngestAPI (options) {\n\n  this.defaults = {\n    'host': 'https://api.ingest.io',\n    'cacheAge': 300000, // 5 minutes\n    'networks': '/networks',\n    'networksKeys': '/networks/keys',\n    'networksKeysById': '/networks/keys/<%=id%>',\n    'inputs': '/encoding/inputs',\n    'inputsById' : '/encoding/inputs/<%=id%>',\n    'inputsUpload': '/encoding/inputs/<%=id%>/upload<%=method%>',\n    'inputsUploadSign': '/encoding/inputs/<%=id%>/upload/sign<%=method%>',\n    'inputsUploadComplete': '/encoding/inputs/<%=id%>/upload/complete',\n    'inputsUploadAbort': '/encoding/inputs/<%=id%>/upload/abort',\n    'uploadMethods': {\n      'param': '?type=',\n      'singlePart': 'amazon',\n      'multiPart': 'amazonMP'\n    }\n  };\n\n  // Create a config object by extending the defaults with the pass options.\n  this.config = extend(true, {}, this.defaults, options);\n\n  this.token = null;\n\n  if (this.config.token) {\n    // Store the token for future use.\n    this.setToken(this.config.token);\n  }\n\n  /* Exposed for testing */\n  this.request = Request;\n  this.JWTUtils = JWTUtils;\n  this.utils = utils;\n  this.resource = Resource;\n  this.usersResource = Users;\n  this.uploader = Uploader;\n\n  this.cache = new Cache(this.config.cacheAge);\n\n  this.videos = new Resource({\n    host: this.config.host,\n    resource: 'videos',\n    tokenSource: this.getToken.bind(this),\n    cache: this.cache\n  });\n\n  this.playlists = new Resource({\n    host: this.config.host,\n    resource: 'playlists',\n    tokenSource: this.getToken.bind(this),\n    cache: this.cache\n  });\n\n  this.inputs = new Resource({\n    host: this.config.host,\n    resource: 'encoding/inputs',\n    tokenSource: this.getToken.bind(this),\n    cache: this.cache\n  });\n\n  this.users = new Users({\n    host: this.config.host,\n    resource: 'users',\n    tokenSource: this.getToken.bind(this),\n    cache: this.cache,\n    currentUser: '/users/me',\n    transfer: '/users/<%=oldId%>/transfer/<%=newId%>',\n    revoke: '/revoke'\n  });\n\n}\n/** Token **/\n/**\n * Set the auth token to use.\n * @param   {String}        token Auth token to use.\n */\nIngestAPI.prototype.setToken = function (token) {\n\n  // Make sure a valid value is passed.\n  if (typeof token !== 'string') {\n    throw new Error('IngestAPI requires an authentication token passed as a string.');\n  }\n\n  this.token = token;\n};\n\n/**\n * Return the current auth token.\n * @return  {String}        Current auth token, or null if a token has not been set.\n */\nIngestAPI.prototype.getToken = function () {\n  return this.token;\n};\n\n/** Network Information **/\n\n/**\n * Get the current network primary key in RSA format.\n * @return {Promise} Promise/A+ spec which resolves with the primary network key.\n */\nIngestAPI.prototype.getNetworkSecureKeys = function () {\n  return new Request({\n    url: this.config.host + this.config.networksKeys,\n    token: this.getToken()\n  });\n};\n\n/**\n * Adds a new secure key to the current network.\n * @param {object}  data        The object containing data for the secure key entry.\n * @param {string}  data.title  Optional. The title of the secure key. Will default to \"Default Key Title\"\n * @param {string}  data.key    The public key in RSA format.\n *\n * @return {Promise}          A promise which resolves when the request is complete.\n */\nIngestAPI.prototype.addNetworkSecureKey = function (data) {\n  if (typeof data !== 'object') {\n    return utils.promisify(false,\n      'IngestAPI addNetworkSecureKey requires data to be passed as an object.');\n  }\n\n  // The title must be a string.\n  if (typeof data.title !== 'string') {\n    data.title = '';\n  }\n\n  if (typeof data.key !== 'string') {\n    return utils.promisify(false,\n      'IngestAPI addNetworkSecureKey requires that the key be a string in RSA public key format.');\n  }\n\n  return new Request({\n    url: this.config.host + this.config.networksKeys,\n    token: this.getToken(),\n    method: 'POST',\n    data: data\n  });\n};\n\n/**\n * Retrieves a single network secure key entry based on the UUID given.\n * @param {string}  id  The UUID of the secure key entry.\n *\n * @return {Promise} A promise which resolves when the request is complete.\n */\nIngestAPI.prototype.getNetworkSecureKeyById = function (id) {\n  var tokens, url;\n\n  if (typeof id !== 'string') {\n    return utils.promisify(false,\n      'IngestAPI getNetworkSecureKeyById requires an id to be passed as a string.');\n  }\n\n  tokens = {\n    id: id\n  };\n\n  url = utils.parseTokens(this.config.host + this.config.networksKeysById, tokens);\n\n  return new Request({\n    url: url,\n    token: this.getToken()\n  });\n};\n\n/**\n * Updates an individual secure key entry in the current network.\n * @param {object}  data        The object containing data for the secure key entry.\n * @param {string}  data.title  The title for the current network.\n *\n * @return {Promise} A promise which resolves when the request is complete.\n */\nIngestAPI.prototype.updateNetworkSecureKey = function (data) {\n  var tokens, url;\n\n  if (typeof data !== 'object') {\n    return utils.promisify(false,\n      'IngestAPI updateNetworkSecureKeyById requires data to be passed as an object.');\n  }\n\n  if (typeof data.id !== 'string') {\n    return utils.promisify(false,\n      'IngestAPI updateNetworkSecureKeyById requires a param \"id\" to be a string.');\n  }\n\n  if (typeof data.title !== 'string') {\n    data.title = '';\n  }\n\n  tokens = {\n    id: data.id\n  };\n\n  url = utils.parseTokens(this.config.host + this.config.networksKeysById, tokens);\n\n  return new Request({\n    url: url,\n    token: this.getToken(),\n    method: 'PATCH',\n    data: data\n  });\n};\n\n/**\n * Deletes a single network secure key entry based on the UUID given.\n * @param {string}  id  The UUID of the secure key entry.\n *\n * @return {Promise} A promise which resolves when the request is complete.\n */\nIngestAPI.prototype.deleteNetworkSecureKeyById = function (id) {\n  var tokens, url;\n\n  if (typeof id !== 'string') {\n    return utils.promisify(false,\n      'IngestAPI deleteNetworkSecureKeyById requires an id to be passed as a string.');\n  }\n\n  tokens = {\n    id: id\n  };\n\n  url = utils.parseTokens(this.config.host + this.config.networksKeysById, tokens);\n\n  return new Request({\n    url: url,\n    token: this.getToken(),\n    method: 'DELETE'\n  });\n};\n\n/**\n * Create a new input and upload a file.\n * @param  {File}   file    File to upload.\n * @return {Promise} A promise which resolves when the upload is complete.\n */\nIngestAPI.prototype.upload = function (file) {\n  return new Uploader({\n    file: file,\n    api: this,\n    host: this.config.host\n  });\n};\n\nmodule.exports = IngestAPI;\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./src/IngestAPI.js\n ** module id = 1\n ** module chunks = 0\n **/","'use strict';\n\nvar hasOwn = Object.prototype.hasOwnProperty;\nvar toStr = Object.prototype.toString;\n\nvar isArray = function isArray(arr) {\n\tif (typeof Array.isArray === 'function') {\n\t\treturn Array.isArray(arr);\n\t}\n\n\treturn toStr.call(arr) === '[object Array]';\n};\n\nvar isPlainObject = function isPlainObject(obj) {\n\tif (!obj || toStr.call(obj) !== '[object Object]') {\n\t\treturn false;\n\t}\n\n\tvar hasOwnConstructor = hasOwn.call(obj, 'constructor');\n\tvar hasIsPrototypeOf = obj.constructor && obj.constructor.prototype && hasOwn.call(obj.constructor.prototype, 'isPrototypeOf');\n\t// Not own constructor property must be Object\n\tif (obj.constructor && !hasOwnConstructor && !hasIsPrototypeOf) {\n\t\treturn false;\n\t}\n\n\t// Own properties are enumerated firstly, so to speed up,\n\t// if last one is own, then all properties are own.\n\tvar key;\n\tfor (key in obj) {/**/}\n\n\treturn typeof key === 'undefined' || hasOwn.call(obj, key);\n};\n\nmodule.exports = function extend() {\n\tvar options, name, src, copy, copyIsArray, clone,\n\t\ttarget = arguments[0],\n\t\ti = 1,\n\t\tlength = arguments.length,\n\t\tdeep = false;\n\n\t// Handle a deep copy situation\n\tif (typeof target === 'boolean') {\n\t\tdeep = target;\n\t\ttarget = arguments[1] || {};\n\t\t// skip the boolean and the target\n\t\ti = 2;\n\t} else if ((typeof target !== 'object' && typeof target !== 'function') || target == null) {\n\t\ttarget = {};\n\t}\n\n\tfor (; i < length; ++i) {\n\t\toptions = arguments[i];\n\t\t// Only deal with non-null/undefined values\n\t\tif (options != null) {\n\t\t\t// Extend the base object\n\t\t\tfor (name in options) {\n\t\t\t\tsrc = target[name];\n\t\t\t\tcopy = options[name];\n\n\t\t\t\t// Prevent never-ending loop\n\t\t\t\tif (target !== copy) {\n\t\t\t\t\t// Recurse if we're merging plain objects or arrays\n\t\t\t\t\tif (deep && copy && (isPlainObject(copy) || (copyIsArray = isArray(copy)))) {\n\t\t\t\t\t\tif (copyIsArray) {\n\t\t\t\t\t\t\tcopyIsArray = false;\n\t\t\t\t\t\t\tclone = src && isArray(src) ? src : [];\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tclone = src && isPlainObject(src) ? src : {};\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\t// Never move original objects, clone them\n\t\t\t\t\t\ttarget[name] = extend(deep, clone, copy);\n\n\t\t\t\t\t// Don't bring in undefined values\n\t\t\t\t\t} else if (typeof copy !== 'undefined') {\n\t\t\t\t\t\ttarget[name] = copy;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\t// Return the modified object\n\treturn target;\n};\n\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./~/extend/index.js\n ** module id = 2\n ** module chunks = 0\n **/","var Promise = require('pinkyswear');\nvar extend = require('extend');\n\nvar JWTUtils = require('./JWTUtils');\n\nvar VALID_RESPONSE_CODES = [200, 201, 202, 204];\n\n/**\n * A wrapper around the XMLHttpRequest object.\n * @param {object}  options         Options for the request.\n * @param {boolean} options.async   Whether to perform the request asynchronously\n * @param {string}  options.method  REST verb to use for the request.\n * @param {string}  options.url     URL for the request.\n *\n * @return {Promise} A promise which resolves when the request is complete.\n */\nvar Request = function (options) {\n\n  this.defaults = {\n    async: true,\n    method: 'GET'\n  };\n\n  this.promise = Promise();\n\n  // Create the XHR object for this request.\n  this.request = new XMLHttpRequest();\n\n  // Set up event listeners for this request.\n  this.setupListeners();\n\n  // Todo, merge some defaults with this.\n  this.options = extend(true, this.defaults, options);\n\n  // Make sure a url is passed before attempting to make the request.\n  if (!this.options.url) {\n    this.requestError('Request Error : a url is required to make the request.');\n    return this.promise;\n  }\n\n  // Make the actual request.\n  this.makeRequest();\n\n  // Return the promise.\n  return this.promise;\n\n};\n\n/**\n * Add event listeners to the XMLHttpRequest object.\n */\nRequest.prototype.setupListeners = function () {\n  this.request.onreadystatechange = this.readyStateChange.bind(this);\n};\n\n/**\n * Execute the open and send of the XMLHttpRequest\n */\nRequest.prototype.makeRequest = function () {\n\n  var postData = this.preparePostData(this.options.data);\n  var headers = this.options.headers;\n  var hasContentType = headers && headers.hasOwnProperty('Content-Type');\n\n  if (!postData.success) {\n    this.requestError('Request Error : error preparing post data.');\n    return;\n  }\n\n  this.request.open(this.options.method, this.options.url, this.options.async);\n\n  if (headers) {\n    this.applyRequestHeaders(headers);\n  }\n\n  // Make the token optional.\n  if (this.options.token) {\n\n    // If there is a token present ensure that it's still valid.\n    if (JWTUtils.isExpired(this.options.token)) {\n      this.requestError('Request Error : token is expired.');\n      return;\n    }\n\n    this.request.setRequestHeader('Authorization', this.options.token);\n\n  }\n\n  // Set the default content type when posting data.\n  if (postData.data && postData.type === 'JSON' && !hasContentType) {\n    this.request.setRequestHeader('Content-Type', 'application/json; charset=utf-8');\n  }\n\n  // If there is data then we need to pass that along with the request.\n  if (postData.data) {\n    this.request.send(postData.data);\n  } else {\n    this.request.send();\n  }\n\n};\n\n/**\n * Stringify the post data if it is present.\n * @param  {object} data Object to be parsed.\n * @return {object}      Result object with the parsed string, and a success boolean flag.\n */\nRequest.prototype.preparePostData = function (data) {\n\n  var result = {\n    success: true,\n    data: data,\n    type: 'JSON'\n  };\n\n  // In the case of file uploads, all FormData to be passed to the request.\n  if (data instanceof FormData) {\n    result.type = 'FormData';\n    return result;\n  }\n\n  // If the data is populated, and its not already a string parse it.\n  if (data) {\n    try {\n      result.data = JSON.stringify(data);\n    } catch (error) {\n      result.success = false;\n      result.data = null;\n    }\n  }\n\n  return result;\n\n};\n\n/**\n * Apply any supplied headers to the request object.\n * @param  {object} headers Array of headers to apply to the request object.\n */\nRequest.prototype.applyRequestHeaders = function (headers) {\n\n  var key, i;\n  var keys = Object.keys(headers);\n  var keysLength = keys.length;\n\n  // Loop through and add the keys to the requestHeaders.\n  for (i = 0; i < keysLength; i++) {\n    key = keys[i];\n    this.request.setRequestHeader(key, headers[key]);\n  }\n\n};\n\n/**\n * Handle the completion of the request and fulfill the promise.\n * @param  {String} Response test of the request.\n */\nRequest.prototype.requestComplete = function (response) {\n\n  // Process the result.\n  this.response = this.processResponse(response);\n\n  // Either resolve or reject the promise.\n  this.promise(!this.response.data.error, [this.response]);\n\n};\n\n/**\n * Process the response and parse certain content types.\n * @param  {*}  response  Response data from request.\n * @return {*}            Processed response data.\n */\nRequest.prototype.processResponse = function (response) {\n  var responseType = this.request.getResponseHeader('Content-Type');\n  var result = response;\n\n  // Parse JSON if the result is JSON.\n  if (responseType && responseType.indexOf('application/json') !== -1) {\n    try {\n      result = JSON.parse(response);\n    } catch (error) {\n      result = {\n        error: 'JSON parsing failed. ' + error.stack\n      };\n    }\n  }\n\n  return {\n    data: result,\n    headers: this.request.getResponseHeader.bind(this.request),\n    statusCode: this.request.status\n  };\n\n};\n\n/**\n * Resolve the promise.\n * @param  {String} message   Error message.\n */\nRequest.prototype.requestError = function (message) {\n  // Reject the promise.\n  this.promise(false, [message]);\n};\n\n/**\n * Handle ready state change events.\n */\nRequest.prototype.readyStateChange = function () {\n\n  // Request is complete.\n  if (this.request.readyState === 4) {\n\n    // Check if the final response code is valid.\n    if (this.isValidResponseCode(this.request.status)) {\n      this.requestComplete(this.request.responseText);\n    } else {\n      this.requestError('Invalid response code.');\n    }\n\n  }\n\n};\n\n/**\n * Validate the current response code to see if the request was a success.\n * @param  {String}  responseCode Response Code.\n * @return {Boolean}              Should this be treated as a successful response code.\n */\nRequest.prototype.isValidResponseCode = function (responseCode) {\n\n  var result = false,\n    responseCodeCount = VALID_RESPONSE_CODES.length,\n    i;\n\n  // Check if the supplied code is in our list of valid codes.\n  for (i = 0; i < responseCodeCount; i++) {\n\n    if (responseCode === VALID_RESPONSE_CODES[i]) {\n      result = true;\n      break;\n    }\n\n  }\n\n  return result;\n\n};\n\nmodule.exports = Request;\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./src/Request.js\n ** module id = 3\n ** module chunks = 0\n **/","/*\n * PinkySwear.js 2.2.2 - Minimalistic implementation of the Promises/A+ spec\n * \n * Public Domain. Use, modify and distribute it any way you like. No attribution required.\n *\n * NO WARRANTY EXPRESSED OR IMPLIED. USE AT YOUR OWN RISK.\n *\n * PinkySwear is a very small implementation of the Promises/A+ specification. After compilation with the\n * Google Closure Compiler and gzipping it weighs less than 500 bytes. It is based on the implementation for \n * Minified.js and should be perfect for embedding. \n *\n *\n * PinkySwear has just three functions.\n *\n * To create a new promise in pending state, call pinkySwear():\n *         var promise = pinkySwear();\n *\n * The returned object has a Promises/A+ compatible then() implementation:\n *          promise.then(function(value) { alert(\"Success!\"); }, function(value) { alert(\"Failure!\"); });\n *\n *\n * The promise returned by pinkySwear() is a function. To fulfill the promise, call the function with true as first argument and\n * an optional array of values to pass to the then() handler. By putting more than one value in the array, you can pass more than one\n * value to the then() handlers. Here an example to fulfill a promsise, this time with only one argument: \n *         promise(true, [42]);\n *\n * When the promise has been rejected, call it with false. Again, there may be more than one argument for the then() handler:\n *         promise(true, [6, 6, 6]);\n *         \n * You can obtain the promise's current state by calling the function without arguments. It will be true if fulfilled,\n * false if rejected, and otherwise undefined.\n * \t\t   var state = promise(); \n * \n * https://github.com/timjansen/PinkySwear.js\n */\n(function(target) {\n\tvar undef;\n\n\tfunction isFunction(f) {\n\t\treturn typeof f == 'function';\n\t}\n\tfunction isObject(f) {\n\t\treturn typeof f == 'object';\n\t}\n\tfunction defer(callback) {\n\t\tif (typeof setImmediate != 'undefined')\n\t\t\tsetImmediate(callback);\n\t\telse if (typeof process != 'undefined' && process['nextTick'])\n\t\t\tprocess['nextTick'](callback);\n\t\telse\n\t\t\tsetTimeout(callback, 0);\n\t}\n\n\ttarget[0][target[1]] = function pinkySwear(extend) {\n\t\tvar state;           // undefined/null = pending, true = fulfilled, false = rejected\n\t\tvar values = [];     // an array of values as arguments for the then() handlers\n\t\tvar deferred = [];   // functions to call when set() is invoked\n\n\t\tvar set = function(newState, newValues) {\n\t\t\tif (state == null && newState != null) {\n\t\t\t\tstate = newState;\n\t\t\t\tvalues = newValues;\n\t\t\t\tif (deferred.length)\n\t\t\t\t\tdefer(function() {\n\t\t\t\t\t\tfor (var i = 0; i < deferred.length; i++)\n\t\t\t\t\t\t\tdeferred[i]();\n\t\t\t\t\t});\n\t\t\t}\n\t\t\treturn state;\n\t\t};\n\n\t\tset['then'] = function (onFulfilled, onRejected) {\n\t\t\tvar promise2 = pinkySwear(extend);\n\t\t\tvar callCallbacks = function() {\n\t    \t\ttry {\n\t    \t\t\tvar f = (state ? onFulfilled : onRejected);\n\t    \t\t\tif (isFunction(f)) {\n\t\t   \t\t\t\tfunction resolve(x) {\n\t\t\t\t\t\t    var then, cbCalled = 0;\n\t\t   \t\t\t\t\ttry {\n\t\t\t\t   \t\t\t\tif (x && (isObject(x) || isFunction(x)) && isFunction(then = x['then'])) {\n\t\t\t\t\t\t\t\t\t\tif (x === promise2)\n\t\t\t\t\t\t\t\t\t\t\tthrow new TypeError();\n\t\t\t\t\t\t\t\t\t\tthen['call'](x,\n\t\t\t\t\t\t\t\t\t\t\tfunction() { if (!cbCalled++) resolve.apply(undef,arguments); } ,\n\t\t\t\t\t\t\t\t\t\t\tfunction(value){ if (!cbCalled++) promise2(false,[value]);});\n\t\t\t\t   \t\t\t\t}\n\t\t\t\t   \t\t\t\telse\n\t\t\t\t   \t\t\t\t\tpromise2(true, arguments);\n\t\t   \t\t\t\t\t}\n\t\t   \t\t\t\t\tcatch(e) {\n\t\t   \t\t\t\t\t\tif (!cbCalled++)\n\t\t   \t\t\t\t\t\t\tpromise2(false, [e]);\n\t\t   \t\t\t\t\t}\n\t\t   \t\t\t\t}\n\t\t   \t\t\t\tresolve(f.apply(undef, values || []));\n\t\t   \t\t\t}\n\t\t   \t\t\telse\n\t\t   \t\t\t\tpromise2(state, values);\n\t\t\t\t}\n\t\t\t\tcatch (e) {\n\t\t\t\t\tpromise2(false, [e]);\n\t\t\t\t}\n\t\t\t};\n\t\t\tif (state != null)\n\t\t\t\tdefer(callCallbacks);\n\t\t\telse\n\t\t\t\tdeferred.push(callCallbacks);\n\t\t\treturn promise2;\n\t\t};\n        if(extend){\n            set = extend(set);\n        }\n\t\treturn set;\n\t};\n})(typeof module == 'undefined' ? [window, 'pinkySwear'] : [module, 'exports']);\n\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./~/pinkyswear/pinkyswear.js\n ** module id = 4\n ** module chunks = 0\n **/","module.exports = function(module) {\r\n\tif(!module.webpackPolyfill) {\r\n\t\tmodule.deprecate = function() {};\r\n\t\tmodule.paths = [];\r\n\t\t// module.parent = undefined by default\r\n\t\tmodule.children = [];\r\n\t\tmodule.webpackPolyfill = 1;\r\n\t}\r\n\treturn module;\r\n}\r\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** (webpack)/buildin/module.js\n ** module id = 5\n ** module chunks = 0\n **/","var nextTick = require('process/browser.js').nextTick;\nvar apply = Function.prototype.apply;\nvar slice = Array.prototype.slice;\nvar immediateIds = {};\nvar nextImmediateId = 0;\n\n// DOM APIs, for completeness\n\nexports.setTimeout = function() {\n  return new Timeout(apply.call(setTimeout, window, arguments), clearTimeout);\n};\nexports.setInterval = function() {\n  return new Timeout(apply.call(setInterval, window, arguments), clearInterval);\n};\nexports.clearTimeout =\nexports.clearInterval = function(timeout) { timeout.close(); };\n\nfunction Timeout(id, clearFn) {\n  this._id = id;\n  this._clearFn = clearFn;\n}\nTimeout.prototype.unref = Timeout.prototype.ref = function() {};\nTimeout.prototype.close = function() {\n  this._clearFn.call(window, this._id);\n};\n\n// Does not start the time, just sets up the members needed.\nexports.enroll = function(item, msecs) {\n  clearTimeout(item._idleTimeoutId);\n  item._idleTimeout = msecs;\n};\n\nexports.unenroll = function(item) {\n  clearTimeout(item._idleTimeoutId);\n  item._idleTimeout = -1;\n};\n\nexports._unrefActive = exports.active = function(item) {\n  clearTimeout(item._idleTimeoutId);\n\n  var msecs = item._idleTimeout;\n  if (msecs >= 0) {\n    item._idleTimeoutId = setTimeout(function onTimeout() {\n      if (item._onTimeout)\n        item._onTimeout();\n    }, msecs);\n  }\n};\n\n// That's not how node.js implements it but the exposed api is the same.\nexports.setImmediate = typeof setImmediate === \"function\" ? setImmediate : function(fn) {\n  var id = nextImmediateId++;\n  var args = arguments.length < 2 ? false : slice.call(arguments, 1);\n\n  immediateIds[id] = true;\n\n  nextTick(function onNextTick() {\n    if (immediateIds[id]) {\n      // fn.call() is faster so we optimize for the common use-case\n      // @see http://jsperf.com/call-apply-segu\n      if (args) {\n        fn.apply(null, args);\n      } else {\n        fn.call(null);\n      }\n      // Prevent ids from leaking\n      exports.clearImmediate(id);\n    }\n  });\n\n  return id;\n};\n\nexports.clearImmediate = typeof clearImmediate === \"function\" ? clearImmediate : function(id) {\n  delete immediateIds[id];\n};\n\n\n/*****************\n ** WEBPACK FOOTER\n ** (webpack)/~/node-libs-browser/~/timers-browserify/main.js\n ** module id = 6\n ** module chunks = 0\n **/","// shim for using process in browser\n\nvar process = module.exports = {};\nvar queue = [];\nvar draining = false;\nvar currentQueue;\nvar queueIndex = -1;\n\nfunction cleanUpNextTick() {\n    draining = false;\n    if (currentQueue.length) {\n        queue = currentQueue.concat(queue);\n    } else {\n        queueIndex = -1;\n    }\n    if (queue.length) {\n        drainQueue();\n    }\n}\n\nfunction drainQueue() {\n    if (draining) {\n        return;\n    }\n    var timeout = setTimeout(cleanUpNextTick);\n    draining = true;\n\n    var len = queue.length;\n    while(len) {\n        currentQueue = queue;\n        queue = [];\n        while (++queueIndex < len) {\n            if (currentQueue) {\n                currentQueue[queueIndex].run();\n            }\n        }\n        queueIndex = -1;\n        len = queue.length;\n    }\n    currentQueue = null;\n    draining = false;\n    clearTimeout(timeout);\n}\n\nprocess.nextTick = function (fun) {\n    var args = new Array(arguments.length - 1);\n    if (arguments.length > 1) {\n        for (var i = 1; i < arguments.length; i++) {\n            args[i - 1] = arguments[i];\n        }\n    }\n    queue.push(new Item(fun, args));\n    if (queue.length === 1 && !draining) {\n        setTimeout(drainQueue, 0);\n    }\n};\n\n// v8 likes predictible objects\nfunction Item(fun, array) {\n    this.fun = fun;\n    this.array = array;\n}\nItem.prototype.run = function () {\n    this.fun.apply(null, this.array);\n};\nprocess.title = 'browser';\nprocess.browser = true;\nprocess.env = {};\nprocess.argv = [];\nprocess.version = ''; // empty string to avoid regexp issues\nprocess.versions = {};\n\nfunction noop() {}\n\nprocess.on = noop;\nprocess.addListener = noop;\nprocess.once = noop;\nprocess.off = noop;\nprocess.removeListener = noop;\nprocess.removeAllListeners = noop;\nprocess.emit = noop;\n\nprocess.binding = function (name) {\n    throw new Error('process.binding is not supported');\n};\n\nprocess.cwd = function () { return '/' };\nprocess.chdir = function (dir) {\n    throw new Error('process.chdir is not supported');\n};\nprocess.umask = function() { return 0; };\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** (webpack)/~/node-libs-browser/~/process/browser.js\n ** module id = 7\n ** module chunks = 0\n **/","/**\n * UTILS for dealing with jwt tokens.\n */\n\n/**\n * Parse the payload out of the JWT token.\n * @param  {string} token JWT Token.\n * @return {object}       Parsed payload object.\n */\nvar parseTokenPayload = function (token) {\n  var parts = token.split('.');\n\n  // Return false if the token is invalid.\n  if (parts.length <= 1) {\n    return false;\n  }\n\n  // decode the payload portion.\n  var payload = window.atob(parts[1]);\n\n  // parse it as JSON\n  payload = JSON.parse(payload);\n\n  return payload;\n};\n\n/**\n * Return true if the provided token has expired.\n * @param  {string}  token JWT Token\n * @return {Boolean}       True if expired.\n */\nmodule.exports.isExpired = function (token) {\n  var data, exp, result, now;\n\n  data = parseTokenPayload(token);\n\n  result = true;\n\n  // Return true if the token does not parse properly.\n  if (!data) {\n    return result;\n  }\n\n  exp = data.exp;\n\n  // Get the unix timestamp in seconds.\n  now = new Date();\n  now = now.getTime() / 1000;\n\n  if (!exp) {\n    return result;\n  }\n\n  // If the expiry data is still in the future.\n  if (now < exp) {\n    result = false;\n  }\n\n  return result;\n\n};\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./src/JWTUtils.js\n ** module id = 8\n ** module chunks = 0\n **/","var Promise = require('pinkyswear');\nvar Utils = {};\n/**\n * Replace all tokens within a given template based on the given key/value pair.\n * @param  {string}     template    Template for the url.\n * @param  {object}     hash        Key/Value pair for replacing tokens in the template.\n *\n * @example\n * var tokens = {\n *  keyInTemplate: 'replacedWith'\n * };\n *\n * var template = '<%=keyInTemplate%>';\n *\n * var result = parseTokens(template, tokens);  // 'replacedWith'\n *\n * @return {string}                 Parsed string.\n */\nUtils.parseTokens = function (template, hash) {\n  if (!template) {\n    return null;\n  }\n\n  var keys = Object.keys(hash);\n  var i;\n  var length = keys.length;\n\n  for (i = 0; i < length; i++) {\n    template = template.replace('<%=' + keys[i] + '%>', hash[keys[i]]);\n  }\n\n  return template;\n};\n\n/**\n * Wrapper function to wrap a value in either a reject or resolve.\n * @param  {boolean} state Rejection or Approval.\n * @param  {*}       value Value to pass back to the promise.\n * @return {Promise}       Promise/A+ spec promise.\n */\nUtils.promisify = function (state, value) {\n  var promise = Promise();\n\n  promise(state, [value]);\n\n  return promise;\n};\n\n/**\n * Wrap an array of promises and return when they have all completed.\n * @param   {Array}     promises  An array of promises to manage.\n * @param   {boolean}   paused    A boolean to pause the execution of the promises.\n * @return  {Promise}             A promise that is resolved when all of the promises have fulfilled.\n */\nUtils.series = function (promises, paused) {\n\n  var promisesCount = promises.length;\n  var all = Promise();\n\n  var state = {\n    total: promisesCount,\n    complete: 0,\n    responses: [],\n    promises: promises,\n    paused: true\n  };\n\n  all.pause = Utils._seriesPause.bind(undefined, all, state);\n  all.resume = Utils._seriesResume.bind(undefined, all, state);\n\n  if (!paused) {\n    state.paused = false;\n    Utils._seriesCallPromise(promises[0], state, all);\n  }\n\n  return all;\n\n};\n\n/**\n * Call a promise and pass the complete and error functions.\n * @param  {Promise} promise Promise to execute on.\n * @param  {Object} state   Persistent state of the series of promises.\n */\nUtils._seriesCallPromise = function (promise, state, all) {\n  // call the promise;\n  if (!state.paused) {\n    promise().then(Utils._seriesComplete.bind(undefined, all, state),\n      Utils._seriesError.bind(undefined, all, state));\n  }\n};\n\n/**\n * Manage the progress of the promises.\n * @private\n * @param  {Promise} all      All promise.\n * @param  {Object}  state    State object used to persist the promise count.\n * @param  {Object}  response Response of the promise being fulfilled.\n */\nUtils._seriesComplete = function (all, state, response) {\n\n  // Increment the complete promises.\n  state.complete++;\n  state.responses.push(response);\n\n  if (state.complete >= state.total) {\n    all(true, state.responses);\n  } else {\n    if (!state.paused) {\n      // Execute the next promise.\n      Utils._seriesCallPromise(state.promises[state.complete], state, all);\n    }\n  }\n\n};\n\n/**\n * Immediately reject the promise if there is an error.\n * @param  {Promise} all  All promise.\n * @param  {Object}  state    State object used to persist the promise count.\n * @param  {Object}  response Response of the promise being fulfilled.\n */\nUtils._seriesError = function (all, state, error) {\n  all(false, [error]);\n};\n\n/**\n * Pause the current series of promises.\n * @param  {Promise} all  All promise.\n * @param  {Object}  state    State object used to persist the promise count.\n */\nUtils._seriesPause = function (all, state) {\n  state.paused = true;\n};\n\n/**\n * Resume the current series of promises.\n * @param  {Promise} all  All promise.\n * @param  {Object}  state    State object used to persist the promise count.\n */\nUtils._seriesResume = function (all, state) {\n  state.paused = false;\n\n  if (state.complete !== state.total) {\n    Utils._seriesCallPromise(state.promises[state.complete], state, all);\n  }\n};\n\nmodule.exports = Utils;\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./src/Utils.js\n ** module id = 9\n ** module chunks = 0\n **/","var extend = require('extend');\nvar Request = require('./Request');\nvar utils = require('./Utils');\nvar JWTUtils = require('./JWTUtils');\n\n/**\n * Create a new upload wrapper.  Manages the entire upload of a file.\n * @class\n * @param   {object}  options                   Configuration options to override the defaults.\n * @param   {object}  options.api               A reference to the parent API instance.\n * @param   {object}  options.file              The file to upload.\n * @param   {object}  options.upload            REST endpoint for creating an input.\n * @param   {object}  options.sign              REST endpoint for signing a blob before upload.\n * @param   {object}  options.uploadComplete    REST endpoint to notify the API that the upload is complete.\n * @param   {object}  options.uploadAbort       REST endpoint to abort the upload.\n */\nfunction Upload (options) {\n\n  this.defaults = {\n    api: null,\n    file: null,\n    upload: '/encoding/inputs/<%=id%>/upload<%=method%>',\n    sign: '/encoding/inputs/<%=id%>/upload/sign<%=method%>',\n    uploadComplete: '/encoding/inputs/<%=id%>/upload/complete',\n    uploadAbort: '/encoding/inputs/<%=id%>/upload/abort<%=method%>',\n    uploadMethods: {\n      param: '?type=',\n      singlePart: 'amazon',\n      multiPart: 'amazonMP'\n    }\n  };\n\n  // Create a config object by extending the defaults with the pass options.\n  this.config = extend(true, {}, this.defaults, options);\n\n  this.api = this.config.api;\n  this.file = this.config.file;\n\n  this.chunks = [];\n  this.chunkSize = 0;\n  this.chunkCount = 0;\n  this.chunksComplete = 0;\n  this.uploadedBytes = 0;\n\n  this.aborted = false;\n  this.paused = false;\n  this.created = false;\n  this.initialized = false;\n\n  this.fileRecord = {\n    filename: this.file.name,\n    type: this.file.type,\n    size: this.file.size,\n    method: this._checkMultipart(this.file)\n  };\n\n};\n\n/**\n * Register a function to execute when a chunk completes uploading.\n * @param  {Function} callback A callback to execute when progress is made.\n */\nUpload.prototype.progress = function (callback) {\n  this.config.progress = callback.bind(this);\n};\n\n/**\n * Create a new input record and upload the files to amazon.\n * @return  {Promise}         A promise which resolves when the new input record is created and uploaded.\n */\nUpload.prototype.save = function () {\n  return this._create(this.fileRecord)\n    .then(this._initialize.bind(this))\n    .then(this._prepareUpload.bind(this));\n};\n\n/**\n * Call the progress callback and pass the current progress percentage.\n * @private\n * @param  {number} message Current progress percentage.\n */\nUpload.prototype._updateProgress = function (percent, chunkSize) {\n\n  if (!this.config.progress) {\n    return;\n  }\n\n  this.config.progress.call(this, percent, chunkSize);\n};\n\n/**\n * Create a new input record.\n * @private\n * @param   {object}  record  A JSON object representing the input record to create.\n * @return  {Promise}         A promise which resolves when the new input record is created.\n */\nUpload.prototype._create = function (record) {\n\n  if (this.aborted) {\n    return utils.promisify(false, 'upload aborted');\n  }\n\n  return this.api.inputs.add([record]).then(this._createSuccess.bind(this));\n};\n\n/**\n * Return the data object from the response.\n * @private\n * @param  {JSON}   response  JSON response containing the new input record id.\n * @return {string}           new input record id.\n */\nUpload.prototype._createSuccess = function (response) {\n\n  this.created = true;\n\n  this._updateProgress(0, 0);\n  this.fileRecord.id = response.data[0].id;\n\n  return this.fileRecord.id;\n};\n\n/**\n * Initializes an Input for upload\n * @private\n * @return {Promise} A promise which resolves when the request is complete.\n */\nUpload.prototype._initialize = function () {\n\n  var url;\n  var tokens;\n  var signing = '';\n\n  if (this.aborted) {\n    return utils.promisify(false, 'upload aborted');\n  }\n\n  if (!this.fileRecord.method) {\n    signing = this.config.uploadMethods.param + this.config.uploadMethods.singlePart;\n  }\n\n  tokens = {\n    id: this.fileRecord.id,\n    method: signing\n  };\n\n  url = utils.parseTokens(this.api.config.host + this.config.upload, tokens);\n\n  return new Request({\n    url: url,\n    token: this.api.getToken(),\n    method: 'POST',\n    data: this.fileRecord\n  }).then(this._initializeComplete.bind(this));\n\n};\n\n/**\n * Store the information returned from the initialize request.\n * @private\n */\nUpload.prototype._initializeComplete = function (response) {\n  this.initialized = true;\n  this.fileRecord.key = response.data.key;\n  this.fileRecord.uploadId = response.data.uploadId;\n  this.chunkSize = response.data.pieceSize;\n  this.chunkCount = response.data.pieceCount;\n};\n\n/**\n * Setup the upload depending on its type, single or multi part.\n * @return {Promise} A promise which resolves when all of the pieces have completed uploading.\n */\nUpload.prototype._prepareUpload = function () {\n  if (!this.fileRecord.method) {\n    // Singlepart.\n    return this._uploadFile()\n      .then(this._onCompleteUpload.bind(this));\n  } else {\n    // Multipart.\n    return this._createChunks()\n      .then(this._completeUpload.bind(this));\n  }\n};\n\n/**\n * Break a file into blobs and create a chunk object for each piece.\n * @private\n * @return {Promise} A promise which resolves when all of the pieces have completed uploading.\n */\nUpload.prototype._createChunks = function () {\n  var sliceMethod = this._getSliceMethod(this.file);\n  var i, blob, chunk, start, end,\n    chunkPromises = [];\n\n  if (this.aborted) {\n    this.abort();\n    return utils.promisify(false, 'upload aborted');\n  }\n\n  for (i = 0; i < this.chunkCount; i++) {\n\n    start = i * this.chunkSize;\n    end = (i + 1) * this.chunkSize;\n\n    // Fix any possible overflow that could add extra bytes.\n    if (i === this.chunkCount - 1) {\n      end = this.fileRecord.size;\n    }\n\n    blob = this.file[sliceMethod](start, end);\n\n    chunk = {\n      partNumber: i + 1,\n      data: blob\n    };\n\n    this.chunks.push(chunk);\n\n    chunkPromises.push(this._uploadChunk.bind(this, chunk));\n\n  }\n\n  // Store a reference for pausing and resuming.\n  this.currentUpload = utils.series(chunkPromises, this.paused);\n\n  return this.currentUpload;\n};\n\n/**\n * Create a promise chain for each chunk to be uploaded.\n * @private\n * @return {Promise} A promise which resolves when the request is complete.\n */\nUpload.prototype._uploadChunk = function (chunk) {\n  return this._signUpload(chunk)\n    .then(this._sendUpload.bind(this, chunk))\n    .then(this._completeChunk.bind(this, chunk));\n};\n\n/**\n * Create a promise chain for a single part file upload.\n * @param  {file}   file    A file reference to upload.\n * @return {Promise} A promise which resolves when the request is complete.\n */\nUpload.prototype._uploadFile = function () {\n  var chunk = {\n    data: this.file\n  };\n\n  return this._signUpload(chunk)\n    .then(this._sendUpload.bind(this, chunk))\n    .then(this._sendSinglepartComplete.bind(this))\n    .then(this._updateProgress.bind(this, 100, this.fileRecord.size));\n};\n\n/**\n * Make a request and sign the chunk to be uploaded.\n * @private\n * @param  {object}   chunk           Information about the chunk to be uploaded.\n * @return {Promise}                  A promise which resolves when the request is complete.\n */\nUpload.prototype._signUpload = function (chunk) {\n  var url;\n  var signing = '';\n  var headers = {};\n\n  // Set the part number for the current chunk.\n  if (chunk.partNumber) {\n    this.fileRecord.partNumber = chunk.partNumber;\n  }\n\n  headers['Content-Type'] = 'multipart/form-data';\n\n  if (!this.fileRecord.method) {\n    signing = this.config.uploadMethods.param + this.config.uploadMethods.singlePart;\n  }\n\n  url = utils.parseTokens(this.api.config.host + this.config.sign, {\n    id: this.fileRecord.id,\n    method: signing\n  });\n\n  return new Request({\n    url: url,\n    token: this.api.getToken(),\n    method: 'POST',\n    headers: headers,\n    data: this.fileRecord\n  });\n};\n\n/**\n * Send the upload to the server.\n * @private\n * @param   {object} upload  An object representing the upload to send to the server.\n * @return  {Promise}       A promise which resolves when the request is complete.\n */\nUpload.prototype._sendUpload = function (upload, response) {\n  var headers = {};\n\n  var formData = new FormData();\n  formData.append('file', upload.data);\n\n  // Set the proper headers to send with the file.\n  headers['Content-Type'] = 'multipart/form-data';\n  headers['Authorization'] = response.data.authHeader;\n  headers['x-amz-date'] = response.data.dateHeader;\n\n  return new Request({\n    url: response.data.url,\n    method: 'PUT',\n    headers: headers,\n    data: formData\n  });\n};\n\n/**\n * Update the upload bytes value when a single part file is uploaded.\n */\nUpload.prototype._sendSinglepartComplete = function () {\n  this.uploadedBytes = this.fileRecord.size;\n};\n\n/**\n *  Executed when a chunk is finished uploading.\n *  @private\n */\nUpload.prototype._completeChunk = function (chunk) {\n  var progress;\n\n  this.chunksComplete++;\n  chunk.complete = true;\n\n  this.uploadedBytes += chunk.data.size;\n\n  progress = this.uploadedBytes / this.fileRecord.size;\n  progress = progress * 100;\n  progress = Math.round(progress);\n\n  this._updateProgress(progress, chunk.data.size);\n};\n\n/**\n * Notify the server that the upload is complete.\n *\n * @private\n * @return {Promise} A promise which resolves when the request is complete.\n */\nUpload.prototype._completeUpload = function () {\n  var url;\n  var tokens;\n\n  if (this.aborted) {\n    this.abort();\n    return utils.promisify(false, 'upload aborted');\n  }\n\n  tokens = {\n    id: this.fileRecord.id\n  };\n\n  url = utils.parseTokens(this.api.config.host + this.config.uploadComplete, tokens);\n\n  return new Request({\n    url: url,\n    token: this.api.getToken(),\n    method: 'POST',\n    data: this.fileRecord\n  }).then(this._onCompleteUpload.bind(this));\n};\n\n/**\n * Return the id for the current file record.\n * @private\n * @return {string} ID for the input record that was created.\n */\nUpload.prototype._onCompleteUpload = function () {\n  this.currentUpload = null;\n  return this.fileRecord.id;\n};\n\n/**\n * Aborts an input upload\n *\n * @param {boolean} async A flag to indicate whether or not the request to delete the input should be async.\n *\n * @return {Promise} A promise which resolves when the request is complete.\n */\nUpload.prototype.abort = function (async) {\n  var url;\n  var tokens;\n  var signing = '';\n\n  if (typeof async === 'undefined') {\n    async = true;\n  }\n\n  this.aborted = true;\n\n  // If initialize hasn't been called yet there is no need to abort the upload as it doesn't\n  // exist yet.\n  if (!this.initialized) {\n\n    if (this.created) {\n      // If the input has been created simply return early with a\n      // promise to delete the created input record.\n      return this.api.inputs.delete(this.fileRecord.id, async);\n    } else {\n      // Resolve as a successful promise. This case would be fulfilled when an upload\n      // has been created but save() hasn't yet been called.\n      return utils.promisify(true);\n    }\n\n  }\n\n  if (this.currentUpload) {\n    this.currentUpload.pause();\n    this.currentUpload = null;\n  }\n\n  if (!this.fileRecord.method) {\n    signing = this.config.uploadMethods.param + this.config.uploadMethods.singlePart;\n  }\n\n  tokens = {\n    id: this.fileRecord.id,\n    method: signing\n  };\n\n  url = utils.parseTokens(this.api.config.host + this.config.uploadAbort, tokens);\n\n  return new Request({\n    url: url,\n    async: async,\n    token: this.api.getToken(),\n    method: 'POST',\n    data: this.fileRecord\n  }).then(this._abortComplete.bind(this, async));\n};\n\n/**\n * Delete the input that was created.\n * @private\n * @return {Promise} A promise which resolves when the request is complete.\n */\nUpload.prototype._abortComplete = function (async) {\n  return this.api.inputs.delete(this.fileRecord.id, async);\n};\n\n/**\n * Pause the current upload.\n */\nUpload.prototype.pause = function () {\n  this.paused = true;\n  if (this.currentUpload) {\n    this.currentUpload.pause();\n  }\n};\n\n/**\n * Resume the current upload.\n */\nUpload.prototype.resume = function () {\n  this.paused = false;\n  if (this.currentUpload) {\n    this.currentUpload.resume();\n  }\n};\n\n/**\n * Check the file size to determine if it should be a multipart upload, returns false for singlepart uploads.\n * @private\n * @param  {file}   file  The file to evaluate.\n * @return {boolean}      True if the file will be uploading using mutlipart upload.\n */\nUpload.prototype._checkMultipart = function (file) {\n  if (!file) {\n    return;\n  }\n\n  return (file.size <= (5 * 1024 * 1024) ? false : true);\n};\n\n/**\n * Function that determines the slice method to be used\n * @private\n * @param {object} file - The file object you wish to determine the slice method for\n * @return {string} sliceMethod - The slice method to use.\n */\nUpload.prototype._getSliceMethod = function (file) {\n  var sliceMethod;\n\n  if ('mozSlice' in file) {\n    sliceMethod = 'mozSlice';\n  } else if ('webkitSlice' in file) {\n    sliceMethod = 'webkitSlice';\n  } else {\n    sliceMethod = 'slice';\n  }\n\n  return sliceMethod;\n};\n\nmodule.exports = Upload;\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./src/Uploader.js\n ** module id = 10\n ** module chunks = 0\n **/","/**\n * A management layer for storing app cache in local storage.\n */\nvar Cache = function (cacheAge) {\n  this.cacheAge = cacheAge;\n  this.enabled = this._checkCacheSupport();\n};\n\n/**\n * Return true if localStorage is supported.\n * @private\n * @return {boolean} True if localStorage is supported.\n */\nCache.prototype._checkCacheSupport = function () {\n\n  var support = 'support';\n\n  try {\n    window.localStorage.setItem(support, support);\n    window.localStorage.removeItem(support);\n    return true;\n  } catch (e) {\n    return false;\n  }\n\n};\n\n/**\n * Retrieve the cached result for the provided cacheKey.\n * @param  {string}   cacheKey  Key associated with the cached result.\n * @return {object}             Parse results object.\n */\nCache.prototype.retrieve = function (cacheKey) {\n  var data;\n  var value = null;\n  var expiry;\n\n  try {\n\n    data = window.localStorage.getItem(cacheKey);\n    data = JSON.parse(data);\n\n    if (!data) {\n      return value;\n    }\n\n    value = data.value;\n\n    if (data.expiry < Date.now()) {\n      // Cache is expired;\n      window.localStorage.removeItem(cacheKey);\n      value = null;\n    }\n\n  } catch (error) {\n    // Silent capture so that caching never gets in the way of returning a result.\n    value = null;\n  }\n\n  return value;\n};\n\n/**\n * Remove a result from the cache.\n * @param  {string}   cacheKey  Key associated with the cached result.\n * @return {boolean}            A boolean indicating success of the removal.\n */\nCache.prototype.remove = function (cacheKey) {\n  var result = true;\n\n  try {\n    window.localStorage.removeItem(cacheKey);\n  } catch (error) {\n    // Silent capture so that caching never gets in the way of returning a result.\n    result = false;\n  }\n\n  return result;\n};\n\n/**\n * Save the new result with its expiry date.\n * @param  {string}   cacheKey Unique cache key for the request.\n * @param  {number}   expiry   Unix timestamp for the expiry.\n * @param  {object}   result   Object to be cached.\n * @return {boolean}            A boolean indicating success of the save.\n */\nCache.prototype.save = function (cacheKey, value) {\n  var result = true;\n  var data = {};\n  var JSONResult;\n\n  try {\n\n    data.expiry = Date.now() + this.cacheAge;\n    data.value = value;\n\n    JSONResult = JSON.stringify(data);\n\n    window.localStorage.setItem(cacheKey, JSONResult);\n\n  } catch (error) {\n    // Silent capture so that caching never gets in the way of returning a result.\n    result = false;\n  }\n\n  return result;\n};\n\n/**\n * Return an object representing the differences between the provided object and the cached object.\n * @example\n * //'cachedObject' = {id: '12345'};\n * cache.diff('cachedObject', {title: 'test'});\n * // returns {title: 'test'}\n * @example\n * //'cachedObject' = {id: '12345', title: 'test'};\n * cache.diff('cachedObject', {title: 'test2'});\n * // returns {title: 'test2'}\n *\n * @param  {string} cacheKey  Cachekey of the object to compare against.\n * @param  {object} item      Object to compare against the cached object.\n * @param  {array}  forced    An array of properties to be returned in the resulting object regardless of difference.\n * @return {object}           An object containing the differences.\n */\nCache.prototype.diff = function (cacheKey, item, forced) {\n  var property, properties, propertiesLength, i;\n  var force, forcedLength, n;\n  var original = this.retrieve(cacheKey);\n  var diff = null;\n\n  if (forced) {\n    forcedLength = forced.length;\n  }\n\n  properties = Object.keys(item);\n  propertiesLength = properties.length;\n\n  if (!original) {\n    // return the compare object if the original item wasn't found.\n    return item;\n  }\n\n  // Walk the object and compare the properties.\n  for (i = 0; i < propertiesLength; i++) {\n    property = properties[i];\n\n    // Check the values if both objects have the property.\n    if (original.hasOwnProperty(property)) {\n      if (item[property] === original[property]) {\n        // If the values are the same we don't need to add it to the diff so continue.\n        continue;\n      }\n    }\n\n    // If the diff item is still null we need to create a new object to store the properties in.\n    if (!diff) {\n      diff = {};\n    }\n\n    // If we've made it this far the property is either a new one, or the item doesn't match.\n    diff[property] = item[property];\n\n  }\n\n  // As long as changes were found append the forced properties.\n  if (diff) {\n    for (n = 0; n < forcedLength; n++) {\n      property = forced[n];\n      diff[property] = item[property];\n    }\n  }\n\n  return diff;\n\n};\n\n/**\n * Return an object representing the differences between the provided objects and the cached object.\n * Similar to diff, but accepts an array of objects.\n *\n * @param  {string} cacheKey  Property on the provided objects that represents the cache key.\n * @param  {object} item      Object to compare against the cached object.\n * @param  {array}  forced    An array of properties to be returned in the resulting object regardless of difference.\n * @return {object}           An object containing the differences.\n */\nCache.prototype.diffArray = function (cacheKey, items, forced) {\n\n  var i;\n  var itemsLength = items.length;\n  var item;\n  var result = null;\n  var results = [];\n\n  for (i = 0; i < itemsLength; i++) {\n    item = items[i];\n\n    result = this.diff(item[cacheKey], item, forced);\n\n    // Only add it to the result set if changes were found.\n    if (result !== null) {\n      results.push(result);\n    }\n\n  }\n\n  return results;\n\n};\n\nmodule.exports = Cache;\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./src/Cache.js\n ** module id = 11\n ** module chunks = 0\n **/","var extend = require('extend');\nvar Request = require('../Request');\nvar utils = require('../Utils');\n\n/**\n * Resource Object\n * @class\n */\nfunction Resource (options) {\n\n  this.defaults = {\n    host: 'https://api.ingest.io',\n    all: '/<%=resource%>',\n    byId: '/<%=resource%>/<%=id%>',\n    thumbnails: '/<%=resource%>/<%=id%>/thumbnails',\n    trash: '/<%=resource%>?filter=trashed',\n    deleteMethods: {\n      'permanent': '?permanent=1'\n    },\n    search: '/<%=resource%>?search=<%=input%>',\n    tokenSource: null,\n    resource: null\n  };\n\n  this.config = extend(true, {}, this.defaults, options);\n\n  this.cache = this.config.cache;\n\n}\n\n/**\n * Proxy the request to token source to ensure a value is always returned.\n * @private\n * @return {string} Auth token.\n */\nResource.prototype._tokenSource = function () {\n  var result = null;\n\n  if (this.config.tokenSource) {\n    result = this.config.tokenSource.call();\n  }\n\n  return result;\n};\n\n/**\n * Return a list of the requested resource for the current user and network.\n * @param  {object}   headers   Object representing headers to apply to the request.\n * @return {promise}            A promise which resolves when the request is complete.\n */\nResource.prototype.getAll = function (headers) {\n  var url = utils.parseTokens(this.config.host + this.config.all, {\n    resource: this.config.resource\n  });\n\n  return new Request({\n    url: url,\n    token: this._tokenSource(),\n    headers: headers\n  }).then(this._updateCachedResources.bind(this));\n};\n\n/**\n * Return a resource that matches the supplied id.\n * @param  {string}   id    Resource id.\n * @return {promise}        A promise which resolves when the request is complete.\n */\nResource.prototype.getById = function (id) {\n  var url, cachedResult;\n\n  if (typeof id !== 'string') {\n    return utils.promisify(false,\n      'IngestAPI Resource getById requires a valid id passed as a string.');\n  }\n\n  url = utils.parseTokens(this.config.host + this.config.byId, {\n    resource: this.config.resource,\n    id: id\n  });\n\n  if (this.cache && this.cache.enabled) {\n    // retrieve the cached item.\n    cachedResult = this.cache.retrieve(id);\n  }\n\n  // Return a cached result if we've found one.\n  if (cachedResult) {\n    return utils.promisify(true, {\n      data: cachedResult\n    });\n  } else {\n    return new Request({\n      url: url,\n      token: this._tokenSource()\n    });\n  }\n};\n\n/**\n * Return the resources currently in the trash.\n * @param  {object} headers Headers to be passed along with the request for pagination.\n * @return {promise}         A promise which resolves when the request is complete.\n */\nResource.prototype.getTrashed = function (headers) {\n  var url = utils.parseTokens(this.config.host + this.config.trash, {\n    resource: this.config.resource\n  });\n\n  return new Request({\n    url: url,\n    token: this._tokenSource(),\n    headers: headers\n  });\n};\n\n/**\n * Retrieve all thumbnails for a provided resource id.\n * @param {string} id ID of the resource to retrieve thumbnails for.\n * @return {promise}  A promise which resolves when the request is complete.\n */\nResource.prototype.getThumbnails = function (id) {\n  var url;\n\n  if (typeof id !== 'string') {\n    return utils.promisify(false,\n      'IngestAPI Resource getThumbnails requires an id to be passed as a string.');\n  }\n\n  url = utils.parseTokens(this.config.host + this.config.thumbnails, {\n    resource: this.config.resource,\n    id: id\n  });\n\n  return new Request({\n    url: url,\n    token: this._tokenSource()\n  });\n};\n\n/**\n * Add a new resource.\n * @param   {object}  resource  An object representing the resource to add.\n * @return  {promise}           A promise which resolves when the request is complete.\n */\nResource.prototype.add = function (resource) {\n  var url;\n\n  if (typeof resource !== 'object') {\n    return utils.promisify(false,\n      'IngestAPI Resource add requires a resource passed as an object.');\n  }\n\n  url = utils.parseTokens(this.config.host + this.config.all, {\n    resource: this.config.resource\n  });\n\n  return new Request({\n    url: url,\n    token: this._tokenSource(),\n    method: 'POST',\n    data: resource\n  }).then(this._updateCachedResource.bind(this));\n};\n\n/**\n * Update an existing resource with new content.\n * @param  {object|array} resource  An object or an array of objects representing the resource(s) to be updated.\n * @return {promise}                A promise which resolves when the request is complete.\n */\nResource.prototype.update = function (resource) {\n  if (typeof resource !== 'object') {\n    return utils.promisify(false,\n      'IngestAPI Resource update requires a resource to be passed either as an object or an array of objects.'); //eslint-disable-line\n  }\n\n  // If they've passed an array fire the updateArray function.\n  if (Array.isArray(resource)) {\n    return this._updateResourceArray(resource);\n  } else {\n    return this._updateResource(resource);\n  }\n};\n\n/**\n * Update a single resource.\n * @private\n * @param  {object}   resource  An object representing the resource to update.\n * @return {promise}            A promise which resolves when the request is complete.\n */\nResource.prototype._updateResource = function (resource) {\n  var data = resource;\n\n  var url = utils.parseTokens(this.config.host + this.config.byId, {\n    resource: this.config.resource,\n    id: resource.id\n  });\n\n  if (this.cache && this.cache.enabled) {\n    data = this.cache.diff(resource.id, resource);\n  }\n\n  // Null is returned in the case that the two objects match.\n  if (!data) {\n    // Return a fulfilled promise with the cached object.\n    return utils.promisify(true, {\n      data: this.cache.retrieve(resource.id)\n    });\n  }\n\n  return new Request({\n    url: url,\n    token: this._tokenSource(),\n    method: 'PATCH',\n    data: data\n  }).then(this._updateCachedResource.bind(this));\n};\n\n/**\n * Update an array of resources.\n * @private\n * @param  {array} resources  An array of resource objects to be updated.\n * @return {promise}          A promise which resolves when the request is complete.\n */\nResource.prototype._updateResourceArray = function (resources) {\n  var url = utils.parseTokens(this.config.host + this.config.all, {\n    resource: this.config.resource\n  });\n\n  return new Request({\n    url: url,\n    token: this._tokenSource(),\n    method: 'PATCH',\n    data: resources\n  }).then(this._updateCachedResources.bind(this));\n};\n\n/**\n * Delete an existing resource\n * @param  {object | array} resource The id, or an array of ids for the resource(s) to be deleted.\n * @param {boolean}   async       A flag to indicate if this should be an async request to delete.\n * @return {promise}          A promise which resolves when the request is complete.\n */\nResource.prototype.delete = function (resource, async) {\n  if (typeof async === 'undefined') {\n    async = true;\n  }\n\n  if (typeof resource !== 'string') {\n    // If they've passed an array fire the updateArray function.\n    if (Array.isArray(resource)) {\n      return this._deleteResourceArray(resource, false, async);\n    }\n\n    return utils.promisify(false,\n      'IngestAPI Resource delete requires a resource to be passed either as a string or an array of strings.'); //eslint-disable-line\n  }\n\n  return this._deleteResource(resource, false, async);\n};\n\n/**\n * Permanently delete an existing resource.\n * @param  {object | array} resource The id, or an array of ids for the resource(s) to be deleted.\n * @param {boolean}   async       A flag to indicate if this should be an async request to delete.\n * @return {promise}          A promise which resolves when the request is complete.\n */\nResource.prototype.permanentDelete = function (resource, async) {\n  if (typeof async === 'undefined') {\n    async = true;\n  }\n\n  if (typeof resource !== 'string') {\n    // If they've passed an array fire the updateArray function.\n    if (Array.isArray(resource)) {\n      return this._deleteResourceArray(resource, true, async);\n    }\n\n    return utils.promisify(false,\n      'IngestAPI Resource delete requires a resource to be passed either as a string or an array of strings.'); //eslint-disable-line\n  }\n\n  return this._deleteResource(resource, true, async);\n};\n\n/**\n * Delete a single resource\n * @private\n * @param  {object}   resource  The id of the resource to be deleted.\n * @param {boolean}   permanent  A flag to permanently delete each video.\n * @param {boolean}   async       A flag to indicate if this should be an async request to delete.\n * @return {promise}            A promise which resolves when the request is complete.\n */\nResource.prototype._deleteResource = function (resource, permanent, async) {\n  var url = utils.parseTokens(this.config.host + this.config.byId, {\n    resource: this.config.resource,\n    id: resource\n  });\n\n  if (permanent === true) {\n    url += this.config.deleteMethods.permanent;\n  }\n\n  return new Request({\n    url: url,\n    async: async,\n    token: this._tokenSource(),\n    method: 'DELETE',\n  }).then(this._deleteCachedResource.bind(this, resource));\n};\n\n/**\n * Delete an array of resources\n * @private\n * @param  {array}  resources   An array of resource objects to be deleted.\n * @param {boolean}  permanent  A flag to permanently delete each video.\n * @return {promise}            A promise which resolves when the request is complete.\n */\nResource.prototype._deleteResourceArray = function (resources, permanent) {\n  var url = utils.parseTokens(this.config.host + this.config.all, {\n    resource: this.config.resource\n  });\n\n  if (permanent === true) {\n    url += this.config.deleteMethods.permanent;\n  }\n\n  return new Request({\n    url: url,\n    token: this._tokenSource(),\n    method: 'DELETE',\n    data: resources\n  }).then(this._deleteCachedResources.bind(this, resources));\n};\n\n/**\n * Return a subset of items that match the search terms.\n * @param  {string} input    The search terms to match against.\n * @param  {object} headers  The headers to be passed to the request.\n * @return {Promise}          A promise which resolves when the request is complete.\n */\nResource.prototype.search = function (input, headers) {\n  var url;\n\n  if (typeof input !== 'string') {\n    return utils.promisify(false,\n      'IngestAPI Resource search requires search input to be passed as a string.');\n  }\n\n  url = utils.parseTokens(this.config.host + this.config.search, {\n    resource: this.config.resource,\n    input: input\n  });\n\n  return new Request({\n    url: url,\n    token: this._tokenSource(),\n    headers: headers\n  });\n};\n\n/**\n * Get the total count of resources.\n * @return {promise} A promise which resolves when the request is complete.\n */\nResource.prototype.count = function () {\n  var url = utils.parseTokens(this.config.host + this.config.all, {\n    resource: this.config.resource\n  });\n\n  return new Request({\n    url: url,\n    token: this._tokenSource(),\n    method: 'HEAD'\n  }).then(this._handleCountResponse);\n};\n\n/**\n * Get the total count of resources in the trash.\n * @return {promise} A promise which resolves when the request is complete.\n */\nResource.prototype.trashCount = function () {\n  var url = utils.parseTokens(this.config.host + this.config.trash, {\n    resource: this.config.resource\n  });\n\n  return new Request({\n    url: url,\n    token: this._tokenSource(),\n    method: 'HEAD'\n  }).then(this._handleCountResponse);\n};\n\n/**\n * Return the resource count from the response.\n * @private\n * @param  {object} response Request response object.\n * @return {number}          The resource count.\n */\nResource.prototype._handleCountResponse = function (response) {\n  return parseInt(response.headers('Resource-Count'), 10);\n};\n\n/**\n * Update a single cached resource based on the response data.\n * @param  {object}   response   Response object from the getAll request.\n * @return {response}            Response object from the getAll request.\n */\nResource.prototype._updateCachedResource = function (response) {\n  if (this.cache && this.cache.enabled) {\n    this.cache.save(response.data.id, response.data);\n  }\n\n  return response;\n};\n\n/**\n * Store the returned items in cache.\n * @param  {object}   response   Response object from the getAll request.\n * @return {response}            Response object from the getAll request.\n */\nResource.prototype._updateCachedResources = function (response) {\n  var data = response.data;\n  var dataLength = data.length;\n  var i;\n\n  if (this.cache && this.cache.enabled) {\n\n    for (i = 0; i < dataLength; i++) {\n      this.cache.save(data[i].id, data[i]);\n    }\n\n  }\n\n  return response;\n};\n\n/**\n * Delete a single cached resource.\n * @param  {string} id            ID of the resource to remove.\n * @param  {object}   response    Response object from the getAll request.\n * @return {response}             Response object from the getAll request.\n */\nResource.prototype._deleteCachedResource = function (id, response) {\n  if (this.cache && this.cache.enabled) {\n    this.cache.remove(id);\n  }\n\n  return response;\n};\n\n/**\n * Delete an array of cached resources\n * @param  {array}    ids         Array of resource id's to delete from cache.\n * @param  {object}   response    Response object from the getAll request.\n * @return {response}             Response object from the getAll request.\n */\nResource.prototype._deleteCachedResources = function (ids, response) {\n  var dataLength = ids.length;\n  var i;\n\n  if (this.cache && this.cache.enabled) {\n\n    for (i = 0; i < dataLength; i++) {\n      this.cache.remove(ids[i]);\n    }\n\n  }\n\n  return response;\n};\n\nmodule.exports = Resource;\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./src/resources/Resource.js\n ** module id = 12\n ** module chunks = 0\n **/","var Resource = require('./Resource');\nvar Request = require('../Request');\nvar utils = require('../Utils');\n\nfunction Users (options) {\n\n  Resource.call(this, options);\n\n};\n\n// This extends the base class of 'Resource'.\nUsers.prototype = Object.create(Resource.prototype);\nUsers.prototype.constructor = Users;\n\n/**\n * Retrieve information for the current user.\n *\n * @return {Promise} A promise which resolves when the request is complete.\n */\nUsers.prototype.getCurrentUserInfo = function () {\n  return new Request({\n    url: this.config.host + this.config.currentUser,\n    token: this._tokenSource()\n  });\n};\n\n/**\n * Transfer all authorship currently under the specified user onto another.\n * This includes all videos & playlists.\n * This task is commonly used in conjunction with permanently deleting a user.\n *\n * @param {string} oldId - The user who currently has authorship.\n * @param {string} newId - The user to transfer authorship to.\n *\n * @return {Promise} A promise which resolves when the request is complete.\n */\nUsers.prototype.transferUserAuthorship = function (oldId, newId) {\n  var tokens, url;\n\n  if (typeof oldId !== 'string') {\n    return utils.promisify(false,\n      'IngestAPI transferUserAuthorship requires \"oldId\" to be passed as a string.');\n  }\n\n  if (typeof newId !== 'string') {\n    return utils.promisify(false,\n      'IngestAPI transferUserAuthorship requires \"newId\" to be passed as a string');\n  }\n\n  tokens = {\n    oldId: oldId,\n    newId: newId\n  };\n\n  url = utils.parseTokens(this.config.host + this.config.transfer, tokens);\n\n  return new Request({\n    url: url,\n    token: this._tokenSource(),\n    method: 'PATCH'\n  });\n};\n\n/**\n * Link an existing user to the currently authorized network.\n *\n * @param {string} id - The unique ID of the user to link.\n *\n * @return {object} - The user object.\n *\n * @return {Promise} A promise which resolves when the request is complete.\n */\nUsers.prototype.linkUser = function (id) {\n  var tokens, url;\n\n  if (typeof id !== 'string') {\n    return utils.promisify(false,\n      'IngestAPI linkUser requires \"id\" to be passed as a string.');\n  }\n\n  tokens = {\n    resource: 'users',\n    id: id\n  };\n\n  url = utils.parseTokens(this.config.host + this.config.byId, tokens);\n\n  return new Request({\n    url: url,\n    token: this._tokenSource(),\n    method: 'LINK'\n  });\n};\n\n/**\n * Remove the specified user from the currently authorized network.\n *\n * @param {string} id - The unique ID of the user to unlink.\n *\n * @return {Promise} A promise which resolves when the request is complete.\n */\nUsers.prototype.unlinkUser = function (id) {\n  var tokens, url;\n\n  if (typeof id !== 'string') {\n    return utils.promisify(false,\n      'IngestAPI unlinkUser requires \"id\" to be passed as a string.');\n  }\n\n  tokens = {\n    resource: 'users',\n    id: id\n  };\n\n  url = utils.parseTokens(this.config.host + this.config.byId, tokens);\n\n  return new Request({\n    url: url,\n    token: this._tokenSource(),\n    method: 'UNLINK'\n  });\n};\n\n/**\n * Revokes the authorization token for the current user.\n *\n * @return {Promise} A promise which resolves when the request is complete.\n */\nUsers.prototype.revokeCurrentUser = function () {\n  return new Request({\n    url: this.config.host + this.config.currentUser + this.config.revoke,\n    token: this._tokenSource(),\n    method: 'DELETE'\n  });\n};\n\nmodule.exports = Users;\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./src/resources/Users.js\n ** module id = 13\n ** module chunks = 0\n **/"],"sourceRoot":""}
{"version":3,"sources":["webpack:///webpack/universalModuleDefinition","webpack:///ingest.js","webpack:///webpack/bootstrap 0368fac7ac56cd3631a0","webpack:///./index.js","webpack:///./src/IngestAPI.js","webpack:///./~/extend/index.js","webpack:///./src/Request.js","webpack:///./~/pinkyswear/pinkyswear.js","webpack:///(webpack)/buildin/module.js","webpack:///./~/timers-browserify/main.js","webpack:///./~/process/browser.js","webpack:///./src/JWTUtils.js","webpack:///./src/Utils.js","webpack:///./src/Uploader.js","webpack:///./src/Cache.js","webpack:///./src/resources/Resource.js","webpack:///./src/resources/Users.js","webpack:///./src/resources/Networks.js","webpack:///./src/resources/Videos.js"],"names":["root","factory","exports","module","define","amd","this","modules","__webpack_require__","moduleId","installedModules","id","loaded","call","m","c","p","IngestAPI","options","defaults","host","cacheAge","networks","networksKeys","networksKeysById","inputs","inputsById","inputsUpload","inputsUploadSign","inputsUploadComplete","inputsUploadAbort","uploadMethods","param","singlePart","multiPart","config","extend","token","setToken","request","Request","JWTUtils","utils","resource","Resource","usersResource","Users","networksResource","Networks","videosResource","Videos","uploader","Uploader","cache","Cache","videos","tokenSource","getToken","bind","playlists","users","profiles","jobs","prototype","Error","getNetworkSecureKeys","url","send","addNetworkSecureKey","data","promisify","title","key","method","getNetworkSecureKeyById","tokens","parseTokens","updateNetworkSecureKey","deleteNetworkSecureKeyById","upload","file","api","hasOwn","Object","hasOwnProperty","toStr","toString","isArray","arr","Array","isPlainObject","obj","hasOwnConstructor","hasIsPrototypeOf","constructor","name","src","copy","copyIsArray","clone","target","arguments","i","length","deep","Promise","VALID_RESPONSE_CODES","async","ignoreAcceptHeader","XMLHttpRequest","setupListeners","promise","makeRequest","requestError","onreadystatechange","readyStateChange","postData","preparePostData","headers","hasContentType","success","open","setRequestHeader","applyRequestHeaders","isExpired","type","result","FormData","Blob","JSON","stringify","error","keys","keysLength","requestComplete","response","processResponse","responseType","getResponseHeader","indexOf","parse","stack","statusCode","status","message","readyState","isValidResponseCode","responseText","responseCode","responseCodeCount","cancel","abort","setImmediate","process","isFunction","f","isObject","defer","callback","setTimeout","undef","pinkySwear","state","values","deferred","set","newState","newValues","onFulfilled","onRejected","promise2","callCallbacks","resolve","x","then","cbCalled","TypeError","apply","value","e","push","webpackPolyfill","deprecate","paths","children","clearImmediate","Timeout","clearFn","_id","_clearFn","nextTick","Function","slice","immediateIds","nextImmediateId","window","clearTimeout","setInterval","clearInterval","timeout","close","unref","ref","enroll","item","msecs","_idleTimeoutId","_idleTimeout","unenroll","_unrefActive","active","_onTimeout","fn","args","cleanUpNextTick","draining","currentQueue","queue","concat","queueIndex","drainQueue","len","run","Item","fun","array","noop","browser","env","argv","version","versions","on","addListener","once","off","removeListener","removeAllListeners","emit","binding","cwd","chdir","dir","umask","parseTokenPayload","parts","split","payload","atob","exp","now","Date","getTime","Utils","template","hash","replace","series","promises","paused","promisesCount","all","total","complete","responses","pause","_seriesPause","undefined","resume","_seriesResume","_seriesCancel","_seriesCallPromise","_seriesComplete","_seriesError","canceled","Upload","sign","uploadComplete","uploadAbort","chunks","chunkSize","chunkCount","chunksComplete","uploadedBytes","aborted","created","initialized","fileRecord","filename","size","_checkMultipart","progress","save","_create","_initialize","_prepareUpload","_updateProgress","percent","record","add","_createSuccess","signing","_initializeComplete","uploadId","pieceSize","pieceCount","_createChunks","_completeUpload","_uploadFile","_onCompleteUpload","blob","chunk","start","end","sliceMethod","_getSliceMethod","chunkPromises","Math","min","partNumber","_uploadChunk","multiPartPromise","_signUpload","_sendUpload","_completeChunk","singlePartPromise","_sendSinglepartComplete","_uploadFileComplete","authorization","authHeader","dateHeader","requestPromise","round","singelPartPromise","_abortComplete","enabled","_checkCacheSupport","support","localStorage","setItem","removeItem","retrieve","cacheKey","getItem","expiry","remove","JSONResult","diff","forced","property","properties","propertiesLength","forcedLength","n","original","diffArray","items","itemsLength","results","byId","thumbnails","trash","deleteMethods","permanent","search","_tokenSource","getAll","_updateCachedResources","getById","cachedResult","getTrashed","getThumbnails","_updateCachedResource","update","_updateResourceArray","_updateResource","resources","_deleteResourceArray","_deleteResource","permanentDelete","_deleteCachedResource","_deleteCachedResources","input","count","_handleCountResponse","trashCount","parseInt","dataLength","ids","overrides","currentUser","transfer","revoke","create","getCurrentUserInfo","transferUserAuthorship","oldId","newId","revokeCurrentUser","invite","linkUser","user_id","unlinkUser","inviteUser","email","variants","getPlaylists","getVariants"],"mappings":"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","file":"ingest.js","sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"IngestAPI\"] = factory();\n\telse\n\t\troot[\"IngestAPI\"] = factory();\n})(this, function() {\nreturn \n\n\n/** WEBPACK FOOTER **\n ** webpack/universalModuleDefinition\n **/","(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"IngestAPI\"] = factory();\n\telse\n\t\troot[\"IngestAPI\"] = factory();\n})(this, function() {\nreturn /******/ (function(modules) { // webpackBootstrap\n/******/ \t// The module cache\n/******/ \tvar installedModules = {};\n/******/\n/******/ \t// The require function\n/******/ \tfunction __webpack_require__(moduleId) {\n/******/\n/******/ \t\t// Check if module is in cache\n/******/ \t\tif(installedModules[moduleId])\n/******/ \t\t\treturn installedModules[moduleId].exports;\n/******/\n/******/ \t\t// Create a new module (and put it into the cache)\n/******/ \t\tvar module = installedModules[moduleId] = {\n/******/ \t\t\texports: {},\n/******/ \t\t\tid: moduleId,\n/******/ \t\t\tloaded: false\n/******/ \t\t};\n/******/\n/******/ \t\t// Execute the module function\n/******/ \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n/******/\n/******/ \t\t// Flag the module as loaded\n/******/ \t\tmodule.loaded = true;\n/******/\n/******/ \t\t// Return the exports of the module\n/******/ \t\treturn module.exports;\n/******/ \t}\n/******/\n/******/\n/******/ \t// expose the modules object (__webpack_modules__)\n/******/ \t__webpack_require__.m = modules;\n/******/\n/******/ \t// expose the module cache\n/******/ \t__webpack_require__.c = installedModules;\n/******/\n/******/ \t// __webpack_public_path__\n/******/ \t__webpack_require__.p = \"\";\n/******/\n/******/ \t// Load entry module and return exports\n/******/ \treturn __webpack_require__(0);\n/******/ })\n/************************************************************************/\n/******/ ([\n/* 0 */\n/***/ function(module, exports, __webpack_require__) {\n\n\tmodule.exports = __webpack_require__(1);\n\n\n/***/ },\n/* 1 */\n/***/ function(module, exports, __webpack_require__) {\n\n\tvar extend = __webpack_require__(2);\n\tvar Request = __webpack_require__(3);\n\tvar JWTUtils = __webpack_require__(8);\n\tvar utils = __webpack_require__(9);\n\tvar Uploader = __webpack_require__(10);\n\tvar Cache = __webpack_require__(11);\n\t\n\tvar Resource = __webpack_require__(12);\n\tvar Users = __webpack_require__(13);\n\tvar Networks = __webpack_require__(14);\n\tvar Videos = __webpack_require__(15);\n\t\n\t/**\n\t * IngestAPI Object\n\t * @class\n\t * @param {object}  options        Options to override the default.\n\t * @param {string}  options.host   Override the default live host.\n\t * @param {string}  options.token  Auth token to use for requests.\n\t */\n\tfunction IngestAPI (options) {\n\t\n\t  this.defaults = {\n\t    'host': 'https://api.ingest.io',\n\t    'cacheAge': 300000, // 5 minutes\n\t    'networks': '/networks',\n\t    'networksKeys': '/networks/keys',\n\t    'networksKeysById': '/networks/keys/<%=id%>',\n\t    'inputs': '/encoding/inputs',\n\t    'inputsById' : '/encoding/inputs/<%=id%>',\n\t    'inputsUpload': '/encoding/inputs/<%=id%>/upload<%=method%>',\n\t    'inputsUploadSign': '/encoding/inputs/<%=id%>/upload/sign<%=method%>',\n\t    'inputsUploadComplete': '/encoding/inputs/<%=id%>/upload/complete',\n\t    'inputsUploadAbort': '/encoding/inputs/<%=id%>/upload/abort',\n\t    'uploadMethods': {\n\t      'param': '?type=',\n\t      'singlePart': 'amazon',\n\t      'multiPart': 'amazonMP'\n\t    }\n\t  };\n\t\n\t  // Create a config object by extending the defaults with the pass options.\n\t  this.config = extend(true, {}, this.defaults, options);\n\t\n\t  this.token = null;\n\t\n\t  if (this.config.token) {\n\t    // Store the token for future use.\n\t    this.setToken(this.config.token);\n\t  }\n\t\n\t  /* Exposed for testing */\n\t  this.request = Request;\n\t  this.JWTUtils = JWTUtils;\n\t  this.utils = utils;\n\t  this.resource = Resource;\n\t  this.usersResource = Users;\n\t  this.networksResource = Networks;\n\t  this.videosResource = Videos;\n\t  this.uploader = Uploader;\n\t\n\t  this.cache = new Cache(this.config.cacheAge);\n\t\n\t  this.videos = new Videos({\n\t    host: this.config.host,\n\t    resource: 'videos',\n\t    tokenSource: this.getToken.bind(this),\n\t    cache: this.cache\n\t  });\n\t\n\t  this.playlists = new Resource({\n\t    host: this.config.host,\n\t    resource: 'playlists',\n\t    tokenSource: this.getToken.bind(this)\n\t  });\n\t\n\t  this.inputs = new Resource({\n\t    host: this.config.host,\n\t    resource: 'encoding/inputs',\n\t    tokenSource: this.getToken.bind(this),\n\t    cache: this.cache\n\t  });\n\t\n\t  this.users = new Users({\n\t    host: this.config.host,\n\t    resource: 'users',\n\t    tokenSource: this.getToken.bind(this),\n\t    cache: this.cache\n\t  });\n\t\n\t  this.networks = new Networks({\n\t    host: this.config.host,\n\t    resource: 'networks',\n\t    tokenSource: this.getToken.bind(this),\n\t    cache: this.cache\n\t  });\n\t\n\t  this.profiles = new Resource({\n\t    host: this.config.host,\n\t    resource: 'encoding/profiles',\n\t    tokenSource: this.getToken.bind(this),\n\t    cache: this.cache\n\t  });\n\t\n\t  this.jobs = new Resource({\n\t    host: this.config.host,\n\t    resource: 'encoding/jobs',\n\t    tokenSource: this.getToken.bind(this),\n\t    cache: this.cache\n\t  });\n\t\n\t}\n\t/** Token **/\n\t/**\n\t * Set the auth token to use.\n\t * @param   {String}        token Auth token to use.\n\t */\n\tIngestAPI.prototype.setToken = function (token) {\n\t\n\t  // Make sure a valid value is passed.\n\t  if (typeof token !== 'string') {\n\t    throw new Error('IngestAPI requires an authentication token passed as a string.');\n\t  }\n\t\n\t  this.token = token;\n\t};\n\t\n\t/**\n\t * Return the current auth token.\n\t * @return  {String}        Current auth token, or null if a token has not been set.\n\t */\n\tIngestAPI.prototype.getToken = function () {\n\t  return this.token;\n\t};\n\t\n\t/** Network Information **/\n\t\n\t/**\n\t * Get the current network primary key in RSA format.\n\t * @return {Promise} Promise/A+ spec which resolves with the primary network key.\n\t */\n\tIngestAPI.prototype.getNetworkSecureKeys = function () {\n\t  var request = new Request({\n\t    url: this.config.host + this.config.networksKeys,\n\t    token: this.getToken()\n\t  });\n\t\n\t  return request.send();\n\t};\n\t\n\t/**\n\t * Adds a new secure key to the current network.\n\t * @param {object}  data        The object containing data for the secure key entry.\n\t * @param {string}  data.title  Optional. The title of the secure key. Will default to \"Default Key Title\"\n\t * @param {string}  data.key    The public key in RSA format.\n\t *\n\t * @return {Promise}          A promise which resolves when the request is complete.\n\t */\n\tIngestAPI.prototype.addNetworkSecureKey = function (data) {\n\t  var request;\n\t\n\t  if (typeof data !== 'object') {\n\t    return utils.promisify(false,\n\t      'IngestAPI addNetworkSecureKey requires data to be passed as an object.');\n\t  }\n\t\n\t  // The title must be a string.\n\t  if (typeof data.title !== 'string') {\n\t    data.title = '';\n\t  }\n\t\n\t  if (typeof data.key !== 'string') {\n\t    return utils.promisify(false,\n\t      'IngestAPI addNetworkSecureKey requires that the key be a string in RSA public key format.');\n\t  }\n\t\n\t  request = new Request({\n\t    url: this.config.host + this.config.networksKeys,\n\t    token: this.getToken(),\n\t    method: 'POST',\n\t    data: data\n\t  });\n\t\n\t  return request.send();\n\t};\n\t\n\t/**\n\t * Retrieves a single network secure key entry based on the UUID given.\n\t * @param {string}  id  The UUID of the secure key entry.\n\t *\n\t * @return {Promise} A promise which resolves when the request is complete.\n\t */\n\tIngestAPI.prototype.getNetworkSecureKeyById = function (id) {\n\t  var tokens, url, request;\n\t\n\t  if (typeof id !== 'string') {\n\t    return utils.promisify(false,\n\t      'IngestAPI getNetworkSecureKeyById requires an id to be passed as a string.');\n\t  }\n\t\n\t  tokens = {\n\t    id: id\n\t  };\n\t\n\t  url = utils.parseTokens(this.config.host + this.config.networksKeysById, tokens);\n\t\n\t  request = new Request({\n\t    url: url,\n\t    token: this.getToken()\n\t  });\n\t\n\t  return request.send();\n\t};\n\t\n\t/**\n\t * Updates an individual secure key entry in the current network.\n\t * @param {object}  data        The object containing data for the secure key entry.\n\t * @param {string}  data.title  The title for the current network.\n\t *\n\t * @return {Promise} A promise which resolves when the request is complete.\n\t */\n\tIngestAPI.prototype.updateNetworkSecureKey = function (data) {\n\t  var tokens, url, request;\n\t\n\t  if (typeof data !== 'object') {\n\t    return utils.promisify(false,\n\t      'IngestAPI updateNetworkSecureKeyById requires data to be passed as an object.');\n\t  }\n\t\n\t  if (typeof data.id !== 'string') {\n\t    return utils.promisify(false,\n\t      'IngestAPI updateNetworkSecureKeyById requires a param \"id\" to be a string.');\n\t  }\n\t\n\t  if (typeof data.title !== 'string') {\n\t    data.title = '';\n\t  }\n\t\n\t  tokens = {\n\t    id: data.id\n\t  };\n\t\n\t  url = utils.parseTokens(this.config.host + this.config.networksKeysById, tokens);\n\t\n\t  request = new Request({\n\t    url: url,\n\t    token: this.getToken(),\n\t    method: 'PATCH',\n\t    data: data\n\t  });\n\t\n\t  return request.send();\n\t};\n\t\n\t/**\n\t * Deletes a single network secure key entry based on the UUID given.\n\t * @param {string}  id  The UUID of the secure key entry.\n\t *\n\t * @return {Promise} A promise which resolves when the request is complete.\n\t */\n\tIngestAPI.prototype.deleteNetworkSecureKeyById = function (id) {\n\t  var tokens, url, request;\n\t\n\t  if (typeof id !== 'string') {\n\t    return utils.promisify(false,\n\t      'IngestAPI deleteNetworkSecureKeyById requires an id to be passed as a string.');\n\t  }\n\t\n\t  tokens = {\n\t    id: id\n\t  };\n\t\n\t  url = utils.parseTokens(this.config.host + this.config.networksKeysById, tokens);\n\t\n\t  request = new Request({\n\t    url: url,\n\t    token: this.getToken(),\n\t    method: 'DELETE'\n\t  });\n\t\n\t  return request.send();\n\t\n\t};\n\t\n\t/**\n\t * Create a new input and upload a file.\n\t * @param  {File}   file    File to upload.\n\t * @return {Promise} A promise which resolves when the upload is complete.\n\t */\n\tIngestAPI.prototype.upload = function (file) {\n\t  return new Uploader({\n\t    file: file,\n\t    api: this,\n\t    host: this.config.host\n\t  });\n\t};\n\t\n\tmodule.exports = IngestAPI;\n\n\n/***/ },\n/* 2 */\n/***/ function(module, exports) {\n\n\t'use strict';\n\t\n\tvar hasOwn = Object.prototype.hasOwnProperty;\n\tvar toStr = Object.prototype.toString;\n\t\n\tvar isArray = function isArray(arr) {\n\t\tif (typeof Array.isArray === 'function') {\n\t\t\treturn Array.isArray(arr);\n\t\t}\n\t\n\t\treturn toStr.call(arr) === '[object Array]';\n\t};\n\t\n\tvar isPlainObject = function isPlainObject(obj) {\n\t\tif (!obj || toStr.call(obj) !== '[object Object]') {\n\t\t\treturn false;\n\t\t}\n\t\n\t\tvar hasOwnConstructor = hasOwn.call(obj, 'constructor');\n\t\tvar hasIsPrototypeOf = obj.constructor && obj.constructor.prototype && hasOwn.call(obj.constructor.prototype, 'isPrototypeOf');\n\t\t// Not own constructor property must be Object\n\t\tif (obj.constructor && !hasOwnConstructor && !hasIsPrototypeOf) {\n\t\t\treturn false;\n\t\t}\n\t\n\t\t// Own properties are enumerated firstly, so to speed up,\n\t\t// if last one is own, then all properties are own.\n\t\tvar key;\n\t\tfor (key in obj) {/**/}\n\t\n\t\treturn typeof key === 'undefined' || hasOwn.call(obj, key);\n\t};\n\t\n\tmodule.exports = function extend() {\n\t\tvar options, name, src, copy, copyIsArray, clone,\n\t\t\ttarget = arguments[0],\n\t\t\ti = 1,\n\t\t\tlength = arguments.length,\n\t\t\tdeep = false;\n\t\n\t\t// Handle a deep copy situation\n\t\tif (typeof target === 'boolean') {\n\t\t\tdeep = target;\n\t\t\ttarget = arguments[1] || {};\n\t\t\t// skip the boolean and the target\n\t\t\ti = 2;\n\t\t} else if ((typeof target !== 'object' && typeof target !== 'function') || target == null) {\n\t\t\ttarget = {};\n\t\t}\n\t\n\t\tfor (; i < length; ++i) {\n\t\t\toptions = arguments[i];\n\t\t\t// Only deal with non-null/undefined values\n\t\t\tif (options != null) {\n\t\t\t\t// Extend the base object\n\t\t\t\tfor (name in options) {\n\t\t\t\t\tsrc = target[name];\n\t\t\t\t\tcopy = options[name];\n\t\n\t\t\t\t\t// Prevent never-ending loop\n\t\t\t\t\tif (target !== copy) {\n\t\t\t\t\t\t// Recurse if we're merging plain objects or arrays\n\t\t\t\t\t\tif (deep && copy && (isPlainObject(copy) || (copyIsArray = isArray(copy)))) {\n\t\t\t\t\t\t\tif (copyIsArray) {\n\t\t\t\t\t\t\t\tcopyIsArray = false;\n\t\t\t\t\t\t\t\tclone = src && isArray(src) ? src : [];\n\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\tclone = src && isPlainObject(src) ? src : {};\n\t\t\t\t\t\t\t}\n\t\n\t\t\t\t\t\t\t// Never move original objects, clone them\n\t\t\t\t\t\t\ttarget[name] = extend(deep, clone, copy);\n\t\n\t\t\t\t\t\t// Don't bring in undefined values\n\t\t\t\t\t\t} else if (typeof copy !== 'undefined') {\n\t\t\t\t\t\t\ttarget[name] = copy;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\n\t\t// Return the modified object\n\t\treturn target;\n\t};\n\t\n\n\n/***/ },\n/* 3 */\n/***/ function(module, exports, __webpack_require__) {\n\n\tvar Promise = __webpack_require__(4);\n\tvar extend = __webpack_require__(2);\n\t\n\tvar JWTUtils = __webpack_require__(8);\n\t\n\tvar VALID_RESPONSE_CODES = [200, 201, 202, 204];\n\t\n\t/**\n\t * A wrapper around the XMLHttpRequest object.\n\t * @param {object}  options         Options for the request.\n\t * @param {boolean} options.async   Whether to perform the request asynchronously\n\t * @param {string}  options.method  REST verb to use for the request.\n\t * @param {string}  options.url     URL for the request.\n\t */\n\tvar Request = function (options) {\n\t\n\t  this.defaults = {\n\t    async: true,\n\t    method: 'GET',\n\t    ignoreAcceptHeader: false\n\t  };\n\t\n\t  // Create the XHR object for this request.\n\t  this.request = new XMLHttpRequest();\n\t\n\t  // Set up event listeners for this request.\n\t  this.setupListeners();\n\t\n\t  // Todo, merge some defaults with this.\n\t  this.options = extend(true, this.defaults, options);\n\t\n\t};\n\t\n\t/**\n\t * Send the request and return a promise to resolve when the request is complete.\n\t * @return {Promise} A promise which resolves when the request is complete.\n\t */\n\tRequest.prototype.send = function () {\n\t\n\t  this.promise = Promise();\n\t\n\t  // Make sure a url is passed before attempting to make the request.\n\t  if (this.options.url) {\n\t    // Make the actual request.\n\t    this.makeRequest();\n\t  } else {\n\t    this.requestError('Request Error : a url is required to make the request.');\n\t  }\n\t\n\t  return this.promise;\n\t\n\t};\n\t\n\t/**\n\t * Add event listeners to the XMLHttpRequest object.\n\t */\n\tRequest.prototype.setupListeners = function () {\n\t  this.request.onreadystatechange = this.readyStateChange.bind(this);\n\t};\n\t\n\t/**\n\t * Execute the open and send of the XMLHttpRequest\n\t */\n\tRequest.prototype.makeRequest = function () {\n\t\n\t  var postData = this.preparePostData(this.options.data);\n\t  var headers = this.options.headers;\n\t  var hasContentType = headers && headers.hasOwnProperty('Content-Type');\n\t\n\t  if (!postData.success) {\n\t    this.requestError('Request Error : error preparing post data.');\n\t    return;\n\t  }\n\t\n\t  this.request.open(this.options.method, this.options.url, this.options.async);\n\t\n\t  // Set before we apply the headers so it can be overridden on a per request basis.\n\t  if (!this.options.ignoreAcceptHeader) {\n\t    this.request.setRequestHeader('Accept', 'application/vnd.ingest.v1+json');\n\t  }\n\t\n\t  if (headers) {\n\t    this.applyRequestHeaders(headers);\n\t  }\n\t\n\t  // Make the token optional.\n\t  if (this.options.token) {\n\t\n\t    // If there is a token present ensure that it's still valid.\n\t    if (JWTUtils.isExpired(this.options.token)) {\n\t      this.requestError('Request Error : token is expired.');\n\t      return;\n\t    }\n\t\n\t    this.request.setRequestHeader('Authorization', this.options.token);\n\t\n\t  }\n\t\n\t  // Set the default content type when posting data.\n\t  if (postData.data && postData.type === 'JSON' && !hasContentType) {\n\t    this.request.setRequestHeader('Content-Type', 'application/vnd.ingest.v1+json');\n\t  }\n\t\n\t  // If there is data then we need to pass that along with the request.\n\t  if (postData.data) {\n\t    this.request.send(postData.data);\n\t  } else {\n\t    this.request.send();\n\t  }\n\t\n\t};\n\t\n\t/**\n\t * Stringify the post data if it is present.\n\t * @param  {object} data Object to be parsed.\n\t * @return {object}      Result object with the parsed string, and a success boolean flag.\n\t */\n\tRequest.prototype.preparePostData = function (data) {\n\t\n\t  var result = {\n\t    success: true,\n\t    data: data,\n\t    type: 'JSON'\n\t  };\n\t\n\t  // In the case of file uploads, all FormData to be passed to the request.\n\t  if (data instanceof FormData) {\n\t    result.type = 'FormData';\n\t    return result;\n\t  }\n\t\n\t  if (data instanceof Blob) {\n\t    result.type = 'File';\n\t    return result;\n\t  }\n\t\n\t  // If the data is populated, and its not already a string parse it.\n\t  if (data) {\n\t    try {\n\t      result.data = JSON.stringify(data);\n\t    } catch (error) {\n\t      result.success = false;\n\t      result.data = null;\n\t    }\n\t  }\n\t\n\t  return result;\n\t\n\t};\n\t\n\t/**\n\t * Apply any supplied headers to the request object.\n\t * @param  {object} headers Array of headers to apply to the request object.\n\t */\n\tRequest.prototype.applyRequestHeaders = function (headers) {\n\t\n\t  var key, i;\n\t  var keys = Object.keys(headers);\n\t  var keysLength = keys.length;\n\t\n\t  // Loop through and add the keys to the requestHeaders.\n\t  for (i = 0; i < keysLength; i++) {\n\t    key = keys[i];\n\t    this.request.setRequestHeader(key, headers[key]);\n\t  }\n\t\n\t};\n\t\n\t/**\n\t * Handle the completion of the request and fulfill the promise.\n\t * @param  {String} Response test of the request.\n\t */\n\tRequest.prototype.requestComplete = function (response) {\n\t\n\t  // Process the result.\n\t  this.response = this.processResponse(response);\n\t\n\t  // Either resolve or reject the promise.\n\t  this.promise(!this.response.data.error, [this.response]);\n\t\n\t};\n\t\n\t/**\n\t * Process the response and parse certain content types.\n\t * @param  {*}  response  Response data from request.\n\t * @return {*}            Processed response data.\n\t */\n\tRequest.prototype.processResponse = function (response) {\n\t  var responseType = this.request.getResponseHeader('Content-Type');\n\t  var result = response;\n\t\n\t  // Parse JSON if the result is JSON.\n\t  if (responseType && responseType.indexOf('json') !== -1) {\n\t    try {\n\t      result = JSON.parse(response);\n\t    } catch (error) {\n\t      result = {\n\t        error: 'JSON parsing failed. ' + error.stack\n\t      };\n\t    }\n\t  }\n\t\n\t  return {\n\t    data: result,\n\t    headers: this.request.getResponseHeader.bind(this.request),\n\t    statusCode: this.request.status\n\t  };\n\t\n\t};\n\t\n\t/**\n\t * Resolve the promise.\n\t * @param  {String} message   Error message.\n\t */\n\tRequest.prototype.requestError = function (message) {\n\t  // Reject the promise.\n\t  this.promise(false, [message]);\n\t};\n\t\n\t/**\n\t * Handle ready state change events.\n\t */\n\tRequest.prototype.readyStateChange = function () {\n\t\n\t  // Request is complete.\n\t  if (this.request.readyState === 4) {\n\t\n\t    // Check if the final response code is valid.\n\t    if (this.isValidResponseCode(this.request.status)) {\n\t      this.requestComplete(this.request.responseText);\n\t    } else {\n\t      this.requestError('Invalid response code.');\n\t    }\n\t\n\t  }\n\t\n\t};\n\t\n\t/**\n\t * Validate the current response code to see if the request was a success.\n\t * @param  {String}  responseCode Response Code.\n\t * @return {Boolean}              Should this be treated as a successful response code.\n\t */\n\tRequest.prototype.isValidResponseCode = function (responseCode) {\n\t\n\t  var result = false,\n\t    responseCodeCount = VALID_RESPONSE_CODES.length,\n\t    i;\n\t\n\t  // Check if the supplied code is in our list of valid codes.\n\t  for (i = 0; i < responseCodeCount; i++) {\n\t\n\t    if (responseCode === VALID_RESPONSE_CODES[i]) {\n\t      result = true;\n\t      break;\n\t    }\n\t\n\t  }\n\t\n\t  return result;\n\t\n\t};\n\t\n\t/**\n\t * Cancel the current XHR request.\n\t */\n\tRequest.prototype.cancel = function () {\n\t  // Remove the event listener.\n\t  this.request.onreadystatechange = null;\n\t  this.request.abort();\n\t  this.requestError('Request has been canceled.');\n\t};\n\t\n\tmodule.exports = Request;\n\n\n/***/ },\n/* 4 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t/* WEBPACK VAR INJECTION */(function(module, setImmediate, process) {/*\n\t * PinkySwear.js 2.2.2 - Minimalistic implementation of the Promises/A+ spec\n\t * \n\t * Public Domain. Use, modify and distribute it any way you like. No attribution required.\n\t *\n\t * NO WARRANTY EXPRESSED OR IMPLIED. USE AT YOUR OWN RISK.\n\t *\n\t * PinkySwear is a very small implementation of the Promises/A+ specification. After compilation with the\n\t * Google Closure Compiler and gzipping it weighs less than 500 bytes. It is based on the implementation for \n\t * Minified.js and should be perfect for embedding. \n\t *\n\t *\n\t * PinkySwear has just three functions.\n\t *\n\t * To create a new promise in pending state, call pinkySwear():\n\t *         var promise = pinkySwear();\n\t *\n\t * The returned object has a Promises/A+ compatible then() implementation:\n\t *          promise.then(function(value) { alert(\"Success!\"); }, function(value) { alert(\"Failure!\"); });\n\t *\n\t *\n\t * The promise returned by pinkySwear() is a function. To fulfill the promise, call the function with true as first argument and\n\t * an optional array of values to pass to the then() handler. By putting more than one value in the array, you can pass more than one\n\t * value to the then() handlers. Here an example to fulfill a promsise, this time with only one argument: \n\t *         promise(true, [42]);\n\t *\n\t * When the promise has been rejected, call it with false. Again, there may be more than one argument for the then() handler:\n\t *         promise(true, [6, 6, 6]);\n\t *         \n\t * You can obtain the promise's current state by calling the function without arguments. It will be true if fulfilled,\n\t * false if rejected, and otherwise undefined.\n\t * \t\t   var state = promise(); \n\t * \n\t * https://github.com/timjansen/PinkySwear.js\n\t */\n\t(function(target) {\n\t\tvar undef;\n\t\n\t\tfunction isFunction(f) {\n\t\t\treturn typeof f == 'function';\n\t\t}\n\t\tfunction isObject(f) {\n\t\t\treturn typeof f == 'object';\n\t\t}\n\t\tfunction defer(callback) {\n\t\t\tif (typeof setImmediate != 'undefined')\n\t\t\t\tsetImmediate(callback);\n\t\t\telse if (typeof process != 'undefined' && process['nextTick'])\n\t\t\t\tprocess['nextTick'](callback);\n\t\t\telse\n\t\t\t\tsetTimeout(callback, 0);\n\t\t}\n\t\n\t\ttarget[0][target[1]] = function pinkySwear(extend) {\n\t\t\tvar state;           // undefined/null = pending, true = fulfilled, false = rejected\n\t\t\tvar values = [];     // an array of values as arguments for the then() handlers\n\t\t\tvar deferred = [];   // functions to call when set() is invoked\n\t\n\t\t\tvar set = function(newState, newValues) {\n\t\t\t\tif (state == null && newState != null) {\n\t\t\t\t\tstate = newState;\n\t\t\t\t\tvalues = newValues;\n\t\t\t\t\tif (deferred.length)\n\t\t\t\t\t\tdefer(function() {\n\t\t\t\t\t\t\tfor (var i = 0; i < deferred.length; i++)\n\t\t\t\t\t\t\t\tdeferred[i]();\n\t\t\t\t\t\t});\n\t\t\t\t}\n\t\t\t\treturn state;\n\t\t\t};\n\t\n\t\t\tset['then'] = function (onFulfilled, onRejected) {\n\t\t\t\tvar promise2 = pinkySwear(extend);\n\t\t\t\tvar callCallbacks = function() {\n\t\t    \t\ttry {\n\t\t    \t\t\tvar f = (state ? onFulfilled : onRejected);\n\t\t    \t\t\tif (isFunction(f)) {\n\t\t\t   \t\t\t\tfunction resolve(x) {\n\t\t\t\t\t\t\t    var then, cbCalled = 0;\n\t\t\t   \t\t\t\t\ttry {\n\t\t\t\t\t   \t\t\t\tif (x && (isObject(x) || isFunction(x)) && isFunction(then = x['then'])) {\n\t\t\t\t\t\t\t\t\t\t\tif (x === promise2)\n\t\t\t\t\t\t\t\t\t\t\t\tthrow new TypeError();\n\t\t\t\t\t\t\t\t\t\t\tthen['call'](x,\n\t\t\t\t\t\t\t\t\t\t\t\tfunction() { if (!cbCalled++) resolve.apply(undef,arguments); } ,\n\t\t\t\t\t\t\t\t\t\t\t\tfunction(value){ if (!cbCalled++) promise2(false,[value]);});\n\t\t\t\t\t   \t\t\t\t}\n\t\t\t\t\t   \t\t\t\telse\n\t\t\t\t\t   \t\t\t\t\tpromise2(true, arguments);\n\t\t\t   \t\t\t\t\t}\n\t\t\t   \t\t\t\t\tcatch(e) {\n\t\t\t   \t\t\t\t\t\tif (!cbCalled++)\n\t\t\t   \t\t\t\t\t\t\tpromise2(false, [e]);\n\t\t\t   \t\t\t\t\t}\n\t\t\t   \t\t\t\t}\n\t\t\t   \t\t\t\tresolve(f.apply(undef, values || []));\n\t\t\t   \t\t\t}\n\t\t\t   \t\t\telse\n\t\t\t   \t\t\t\tpromise2(state, values);\n\t\t\t\t\t}\n\t\t\t\t\tcatch (e) {\n\t\t\t\t\t\tpromise2(false, [e]);\n\t\t\t\t\t}\n\t\t\t\t};\n\t\t\t\tif (state != null)\n\t\t\t\t\tdefer(callCallbacks);\n\t\t\t\telse\n\t\t\t\t\tdeferred.push(callCallbacks);\n\t\t\t\treturn promise2;\n\t\t\t};\n\t        if(extend){\n\t            set = extend(set);\n\t        }\n\t\t\treturn set;\n\t\t};\n\t})( false ? [window, 'pinkySwear'] : [module, 'exports']);\n\t\n\t\n\t/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(5)(module), __webpack_require__(6).setImmediate, __webpack_require__(7)))\n\n/***/ },\n/* 5 */\n/***/ function(module, exports) {\n\n\tmodule.exports = function(module) {\r\n\t\tif(!module.webpackPolyfill) {\r\n\t\t\tmodule.deprecate = function() {};\r\n\t\t\tmodule.paths = [];\r\n\t\t\t// module.parent = undefined by default\r\n\t\t\tmodule.children = [];\r\n\t\t\tmodule.webpackPolyfill = 1;\r\n\t\t}\r\n\t\treturn module;\r\n\t}\r\n\n\n/***/ },\n/* 6 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t/* WEBPACK VAR INJECTION */(function(setImmediate, clearImmediate) {var nextTick = __webpack_require__(7).nextTick;\n\tvar apply = Function.prototype.apply;\n\tvar slice = Array.prototype.slice;\n\tvar immediateIds = {};\n\tvar nextImmediateId = 0;\n\t\n\t// DOM APIs, for completeness\n\t\n\texports.setTimeout = function() {\n\t  return new Timeout(apply.call(setTimeout, window, arguments), clearTimeout);\n\t};\n\texports.setInterval = function() {\n\t  return new Timeout(apply.call(setInterval, window, arguments), clearInterval);\n\t};\n\texports.clearTimeout =\n\texports.clearInterval = function(timeout) { timeout.close(); };\n\t\n\tfunction Timeout(id, clearFn) {\n\t  this._id = id;\n\t  this._clearFn = clearFn;\n\t}\n\tTimeout.prototype.unref = Timeout.prototype.ref = function() {};\n\tTimeout.prototype.close = function() {\n\t  this._clearFn.call(window, this._id);\n\t};\n\t\n\t// Does not start the time, just sets up the members needed.\n\texports.enroll = function(item, msecs) {\n\t  clearTimeout(item._idleTimeoutId);\n\t  item._idleTimeout = msecs;\n\t};\n\t\n\texports.unenroll = function(item) {\n\t  clearTimeout(item._idleTimeoutId);\n\t  item._idleTimeout = -1;\n\t};\n\t\n\texports._unrefActive = exports.active = function(item) {\n\t  clearTimeout(item._idleTimeoutId);\n\t\n\t  var msecs = item._idleTimeout;\n\t  if (msecs >= 0) {\n\t    item._idleTimeoutId = setTimeout(function onTimeout() {\n\t      if (item._onTimeout)\n\t        item._onTimeout();\n\t    }, msecs);\n\t  }\n\t};\n\t\n\t// That's not how node.js implements it but the exposed api is the same.\n\texports.setImmediate = typeof setImmediate === \"function\" ? setImmediate : function(fn) {\n\t  var id = nextImmediateId++;\n\t  var args = arguments.length < 2 ? false : slice.call(arguments, 1);\n\t\n\t  immediateIds[id] = true;\n\t\n\t  nextTick(function onNextTick() {\n\t    if (immediateIds[id]) {\n\t      // fn.call() is faster so we optimize for the common use-case\n\t      // @see http://jsperf.com/call-apply-segu\n\t      if (args) {\n\t        fn.apply(null, args);\n\t      } else {\n\t        fn.call(null);\n\t      }\n\t      // Prevent ids from leaking\n\t      exports.clearImmediate(id);\n\t    }\n\t  });\n\t\n\t  return id;\n\t};\n\t\n\texports.clearImmediate = typeof clearImmediate === \"function\" ? clearImmediate : function(id) {\n\t  delete immediateIds[id];\n\t};\n\t/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(6).setImmediate, __webpack_require__(6).clearImmediate))\n\n/***/ },\n/* 7 */\n/***/ function(module, exports) {\n\n\t// shim for using process in browser\n\t\n\tvar process = module.exports = {};\n\tvar queue = [];\n\tvar draining = false;\n\tvar currentQueue;\n\tvar queueIndex = -1;\n\t\n\tfunction cleanUpNextTick() {\n\t    draining = false;\n\t    if (currentQueue.length) {\n\t        queue = currentQueue.concat(queue);\n\t    } else {\n\t        queueIndex = -1;\n\t    }\n\t    if (queue.length) {\n\t        drainQueue();\n\t    }\n\t}\n\t\n\tfunction drainQueue() {\n\t    if (draining) {\n\t        return;\n\t    }\n\t    var timeout = setTimeout(cleanUpNextTick);\n\t    draining = true;\n\t\n\t    var len = queue.length;\n\t    while(len) {\n\t        currentQueue = queue;\n\t        queue = [];\n\t        while (++queueIndex < len) {\n\t            if (currentQueue) {\n\t                currentQueue[queueIndex].run();\n\t            }\n\t        }\n\t        queueIndex = -1;\n\t        len = queue.length;\n\t    }\n\t    currentQueue = null;\n\t    draining = false;\n\t    clearTimeout(timeout);\n\t}\n\t\n\tprocess.nextTick = function (fun) {\n\t    var args = new Array(arguments.length - 1);\n\t    if (arguments.length > 1) {\n\t        for (var i = 1; i < arguments.length; i++) {\n\t            args[i - 1] = arguments[i];\n\t        }\n\t    }\n\t    queue.push(new Item(fun, args));\n\t    if (queue.length === 1 && !draining) {\n\t        setTimeout(drainQueue, 0);\n\t    }\n\t};\n\t\n\t// v8 likes predictible objects\n\tfunction Item(fun, array) {\n\t    this.fun = fun;\n\t    this.array = array;\n\t}\n\tItem.prototype.run = function () {\n\t    this.fun.apply(null, this.array);\n\t};\n\tprocess.title = 'browser';\n\tprocess.browser = true;\n\tprocess.env = {};\n\tprocess.argv = [];\n\tprocess.version = ''; // empty string to avoid regexp issues\n\tprocess.versions = {};\n\t\n\tfunction noop() {}\n\t\n\tprocess.on = noop;\n\tprocess.addListener = noop;\n\tprocess.once = noop;\n\tprocess.off = noop;\n\tprocess.removeListener = noop;\n\tprocess.removeAllListeners = noop;\n\tprocess.emit = noop;\n\t\n\tprocess.binding = function (name) {\n\t    throw new Error('process.binding is not supported');\n\t};\n\t\n\tprocess.cwd = function () { return '/' };\n\tprocess.chdir = function (dir) {\n\t    throw new Error('process.chdir is not supported');\n\t};\n\tprocess.umask = function() { return 0; };\n\n\n/***/ },\n/* 8 */\n/***/ function(module, exports) {\n\n\t/**\n\t * UTILS for dealing with jwt tokens.\n\t */\n\t\n\t/**\n\t * Parse the payload out of the JWT token.\n\t * @param  {string} token JWT Token.\n\t * @return {object}       Parsed payload object.\n\t */\n\tvar parseTokenPayload = function (token) {\n\t  var parts = token.split('.');\n\t\n\t  // Return false if the token is invalid.\n\t  if (parts.length <= 1) {\n\t    return false;\n\t  }\n\t\n\t  // decode the payload portion.\n\t  var payload = window.atob(parts[1]);\n\t\n\t  // parse it as JSON\n\t  payload = JSON.parse(payload);\n\t\n\t  return payload;\n\t};\n\t\n\t/**\n\t * Return true if the provided token has expired.\n\t * @param  {string}  token JWT Token\n\t * @return {Boolean}       True if expired.\n\t */\n\tmodule.exports.isExpired = function (token) {\n\t  var data, exp, result, now;\n\t\n\t  data = parseTokenPayload(token);\n\t\n\t  result = true;\n\t\n\t  // Return true if the token does not parse properly.\n\t  if (!data) {\n\t    return result;\n\t  }\n\t\n\t  exp = data.exp;\n\t\n\t  // Get the unix timestamp in seconds.\n\t  now = new Date();\n\t  now = now.getTime() / 1000;\n\t\n\t  if (!exp) {\n\t    return result;\n\t  }\n\t\n\t  // If the expiry data is still in the future.\n\t  if (now < exp) {\n\t    result = false;\n\t  }\n\t\n\t  return result;\n\t\n\t};\n\n\n/***/ },\n/* 9 */\n/***/ function(module, exports, __webpack_require__) {\n\n\tvar Promise = __webpack_require__(4);\n\tvar Utils = {};\n\t/**\n\t * Replace all tokens within a given template based on the given key/value pair.\n\t * @param  {string}     template    Template for the url.\n\t * @param  {object}     hash        Key/Value pair for replacing tokens in the template.\n\t *\n\t * @example\n\t * var tokens = {\n\t *  keyInTemplate: 'replacedWith'\n\t * };\n\t *\n\t * var template = '<%=keyInTemplate%>';\n\t *\n\t * var result = parseTokens(template, tokens);  // 'replacedWith'\n\t *\n\t * @return {string}                 Parsed string.\n\t */\n\tUtils.parseTokens = function (template, hash) {\n\t  if (!template) {\n\t    return null;\n\t  }\n\t\n\t  var keys = Object.keys(hash);\n\t  var i;\n\t  var length = keys.length;\n\t\n\t  for (i = 0; i < length; i++) {\n\t    template = template.replace('<%=' + keys[i] + '%>', hash[keys[i]]);\n\t  }\n\t\n\t  return template;\n\t};\n\t\n\t/**\n\t * Wrapper function to wrap a value in either a reject or resolve.\n\t * @param  {boolean} state Rejection or Approval.\n\t * @param  {*}       value Value to pass back to the promise.\n\t * @return {Promise}       Promise/A+ spec promise.\n\t */\n\tUtils.promisify = function (state, value) {\n\t  var promise = Promise();\n\t\n\t  promise(state, [value]);\n\t\n\t  return promise;\n\t};\n\t\n\t/**\n\t * Wrap an array of promises and return when they have all completed.\n\t * @param   {Array}     promises  An array of promises to manage.\n\t * @param   {boolean}   paused    A boolean to pause the execution of the promises.\n\t * @return  {Promise}             A promise that is resolved when all of the promises have fulfilled.\n\t */\n\tUtils.series = function (promises, paused) {\n\t\n\t  var promisesCount = promises.length;\n\t  var all = Promise();\n\t\n\t  var state = {\n\t    total: promisesCount,\n\t    complete: 0,\n\t    responses: [],\n\t    promises: promises,\n\t    paused: true\n\t  };\n\t\n\t  all.pause = Utils._seriesPause.bind(undefined, all, state);\n\t  all.resume = Utils._seriesResume.bind(undefined, all, state);\n\t  all.cancel = Utils._seriesCancel.bind(undefined, all, 'The Series has been canceled.');\n\t\n\t  if (!paused) {\n\t    state.paused = false;\n\t    Utils._seriesCallPromise(promises[0], state, all);\n\t  }\n\t\n\t  return all;\n\t\n\t};\n\t\n\t/**\n\t * Call a promise and pass the complete and error functions.\n\t * @param  {Promise} promise Promise to execute on.\n\t * @param  {Object} state   Persistent state of the series of promises.\n\t */\n\tUtils._seriesCallPromise = function (promise, state, all) {\n\t  // call the promise;\n\t  if (!state.paused) {\n\t    promise().then(Utils._seriesComplete.bind(undefined, all, state),\n\t      Utils._seriesError.bind(undefined, all, state));\n\t  }\n\t};\n\t\n\t/**\n\t * Manage the progress of the promises.\n\t * @private\n\t * @param  {Promise} all      All promise.\n\t * @param  {Object}  state    State object used to persist the promise count.\n\t * @param  {Object}  response Response of the promise being fulfilled.\n\t */\n\tUtils._seriesComplete = function (all, state, response) {\n\t\n\t  // Early return if this has been canceled.\n\t  if (state.canceled) {\n\t    return;\n\t  }\n\t\n\t  // Increment the complete promises.\n\t  state.complete++;\n\t  state.responses.push(response);\n\t\n\t  if (state.complete >= state.total) {\n\t    all(true, state.responses);\n\t  } else {\n\t    if (!state.paused) {\n\t      // Execute the next promise.\n\t      Utils._seriesCallPromise(state.promises[state.complete], state, all);\n\t    }\n\t  }\n\t\n\t};\n\t\n\t/**\n\t * Immediately reject the promise if there is an error.\n\t * @param  {Promise} all  All promise.\n\t * @param  {Object}  state    State object used to persist the promise count.\n\t * @param  {Object}  response Response of the promise being fulfilled.\n\t */\n\tUtils._seriesError = function (all, state, error) {\n\t  all(false, [error]);\n\t};\n\t\n\t/**\n\t * Pause the current series of promises.\n\t * @param  {Promise} all  All promise.\n\t * @param  {Object}  state    State object used to persist the promise count.\n\t */\n\tUtils._seriesPause = function (all, state) {\n\t  state.paused = true;\n\t};\n\t\n\t/**\n\t * Resume the current series of promises.\n\t * @param  {Promise} all  All promise.\n\t * @param  {Object}  state    State object used to persist the promise count.\n\t */\n\tUtils._seriesResume = function (all, state) {\n\t  state.paused = false;\n\t\n\t  if (state.complete !== state.total) {\n\t    Utils._seriesCallPromise(state.promises[state.complete], state, all);\n\t  }\n\t};\n\t\n\t/**\n\t * Resolve the promise but return an empty response.\n\t * @param  {Promise}  all     All promise.\n\t * @param  {Object}   state   State object used to persist the promise count.\n\t */\n\tUtils._seriesCancel = function (all, state) {\n\t  state.canceled = true;\n\t  all(true, []);\n\t};\n\t\n\tmodule.exports = Utils;\n\n\n/***/ },\n/* 10 */\n/***/ function(module, exports, __webpack_require__) {\n\n\tvar extend = __webpack_require__(2);\n\tvar Request = __webpack_require__(3);\n\tvar Promise = __webpack_require__(4);\n\tvar utils = __webpack_require__(9);\n\tvar JWTUtils = __webpack_require__(8);\n\t\n\t/**\n\t * Create a new upload wrapper.  Manages the entire upload of a file.\n\t * @class\n\t * @param   {object}  options                   Configuration options to override the defaults.\n\t * @param   {object}  options.api               A reference to the parent API instance.\n\t * @param   {object}  options.file              The file to upload.\n\t * @param   {object}  options.upload            REST endpoint for creating an input.\n\t * @param   {object}  options.sign              REST endpoint for signing a blob before upload.\n\t * @param   {object}  options.uploadComplete    REST endpoint to notify the API that the upload is complete.\n\t * @param   {object}  options.uploadAbort       REST endpoint to abort the upload.\n\t */\n\tfunction Upload (options) {\n\t\n\t  this.defaults = {\n\t    api: null,\n\t    file: null,\n\t    upload: '/encoding/inputs/<%=id%>/upload<%=method%>',\n\t    sign: '/encoding/inputs/<%=id%>/upload/sign<%=method%>',\n\t    uploadComplete: '/encoding/inputs/<%=id%>/upload/complete',\n\t    uploadAbort: '/encoding/inputs/<%=id%>/upload/abort<%=method%>',\n\t    uploadMethods: {\n\t      param: '?type=',\n\t      singlePart: 'amazon',\n\t      multiPart: 'amazonMP'\n\t    }\n\t  };\n\t\n\t  // Create a config object by extending the defaults with the pass options.\n\t  this.config = extend(true, {}, this.defaults, options);\n\t\n\t  this.api = this.config.api;\n\t  this.file = this.config.file;\n\t\n\t  this.chunks = [];\n\t  this.chunkSize = 0;\n\t  this.chunkCount = 0;\n\t  this.chunksComplete = 0;\n\t  this.uploadedBytes = 0;\n\t\n\t  this.aborted = false;\n\t  this.paused = false;\n\t  this.created = false;\n\t  this.initialized = false;\n\t\n\t  // Set to true when all the chunks are uploaded, but before the complete call is made.\n\t  this.uploadComplete = false;\n\t\n\t  this.fileRecord = {\n\t    filename: this.file.name,\n\t    type: this.file.type,\n\t    size: this.file.size,\n\t    method: this._checkMultipart(this.file)\n\t  };\n\t\n\t};\n\t\n\t/**\n\t * Register a function to execute when a chunk completes uploading.\n\t * @param  {Function} callback A callback to execute when progress is made.\n\t */\n\tUpload.prototype.progress = function (callback) {\n\t  this.config.progress = callback.bind(this);\n\t};\n\t\n\t/**\n\t * Create a new input record and upload the files to amazon.\n\t * @return  {Promise}         A promise which resolves when the new input record is created and uploaded.\n\t */\n\tUpload.prototype.save = function () {\n\t  return this._create(this.fileRecord)\n\t    .then(this._initialize.bind(this))\n\t    .then(this._prepareUpload.bind(this));\n\t};\n\t\n\t/**\n\t * Call the progress callback and pass the current progress percentage.\n\t * @private\n\t * @param  {number} message Current progress percentage.\n\t */\n\tUpload.prototype._updateProgress = function (percent, chunkSize) {\n\t\n\t  if (!this.config.progress) {\n\t    return;\n\t  }\n\t\n\t  this.config.progress.call(this, percent, chunkSize);\n\t};\n\t\n\t/**\n\t * Create a new input record.\n\t * @private\n\t * @param   {object}  record  A JSON object representing the input record to create.\n\t * @return  {Promise}         A promise which resolves when the new input record is created.\n\t */\n\tUpload.prototype._create = function (record) {\n\t\n\t  if (this.created) {\n\t    return utils.promisify(true, this.fileRecord.id);\n\t  }\n\t\n\t  if (this.aborted) {\n\t    return utils.promisify(false, 'upload aborted');\n\t  }\n\t\n\t  return this.api.inputs.add([record]).then(this._createSuccess.bind(this));\n\t};\n\t\n\t/**\n\t * Return the data object from the response.\n\t * @private\n\t * @param  {JSON}   response  JSON response containing the new input record id.\n\t * @return {string}           new input record id.\n\t */\n\tUpload.prototype._createSuccess = function (response) {\n\t\n\t  this.created = true;\n\t\n\t  this._updateProgress(0, 0);\n\t  this.fileRecord.id = response.data[0].id;\n\t\n\t  return this.fileRecord.id;\n\t};\n\t\n\t/**\n\t * Initializes an Input for upload\n\t * @private\n\t * @return {Promise} A promise which resolves when the request is complete.\n\t */\n\tUpload.prototype._initialize = function () {\n\t\n\t  var url;\n\t  var tokens;\n\t  var signing = '';\n\t  var request;\n\t\n\t  if (this.aborted) {\n\t    return utils.promisify(false, 'upload aborted');\n\t  }\n\t\n\t  if (!this.fileRecord.method) {\n\t    signing = this.config.uploadMethods.param + this.config.uploadMethods.singlePart;\n\t  }\n\t\n\t  tokens = {\n\t    id: this.fileRecord.id,\n\t    method: signing\n\t  };\n\t\n\t  url = utils.parseTokens(this.api.config.host + this.config.upload, tokens);\n\t\n\t  request = new Request({\n\t    url: url,\n\t    token: this.api.getToken(),\n\t    method: 'POST',\n\t    data: this.fileRecord\n\t  });\n\t\n\t  return request.send()\n\t          .then(this._initializeComplete.bind(this));\n\t\n\t};\n\t\n\t/**\n\t * Store the information returned from the initialize request.\n\t * @private\n\t */\n\tUpload.prototype._initializeComplete = function (response) {\n\t  this.initialized = true;\n\t  this.fileRecord.key = response.data.key;\n\t  this.fileRecord.uploadId = response.data.uploadId;\n\t  this.chunkSize = response.data.pieceSize;\n\t  this.chunkCount = response.data.pieceCount;\n\t};\n\t\n\t/**\n\t * Setup the upload depending on its type, single or multi part.\n\t * @return {Promise} A promise which resolves when all of the pieces have completed uploading.\n\t */\n\tUpload.prototype._prepareUpload = function () {\n\t  if (!this.fileRecord.method) {\n\t    // Singlepart.\n\t    return this._uploadFile()\n\t      .then(this._onCompleteUpload.bind(this));\n\t  } else {\n\t    // Multipart.\n\t    return this._createChunks()\n\t      .then(this._completeUpload.bind(this));\n\t  }\n\t};\n\t\n\t/**\n\t * Break a file into blobs and create a chunk object for each piece.\n\t * @private\n\t * @return {Promise} A promise which resolves when all of the pieces have completed uploading.\n\t */\n\tUpload.prototype._createChunks = function () {\n\t  var sliceMethod = this._getSliceMethod(this.file);\n\t  var i, blob, chunk, start, end,\n\t    chunkPromises = [];\n\t\n\t  if (this.aborted) {\n\t    this.abort();\n\t    return utils.promisify(false, 'upload aborted');\n\t  }\n\t\n\t  for (i = 0; i < this.chunkCount; i++) {\n\t\n\t    start = i * this.chunkSize;\n\t    // Choose the smaller value, so that we don't go over the filesize.\n\t    end = Math.min((i + 1) * this.chunkSize, this.fileRecord.size);\n\t\n\t    blob = this.file[sliceMethod](start, end);\n\t\n\t    chunk = {\n\t      partNumber: i + 1,\n\t      data: blob\n\t    };\n\t\n\t    this.chunks.push(chunk);\n\t\n\t    chunkPromises.push(this._uploadChunk.bind(this, chunk));\n\t\n\t  }\n\t\n\t  // Store a reference for pausing and resuming.\n\t  this.multiPartPromise = utils.series(chunkPromises, this.paused);\n\t\n\t  return this.multiPartPromise;\n\t};\n\t\n\t/**\n\t * Create a promise chain for each chunk to be uploaded.\n\t * @private\n\t * @return {Promise} A promise which resolves when the request is complete.\n\t */\n\tUpload.prototype._uploadChunk = function (chunk) {\n\t  var promise = Promise();\n\t\n\t  // Break the promise chain.\n\t  this._signUpload(chunk)\n\t    .then(this._sendUpload.bind(this, chunk))\n\t    .then(this._completeChunk.bind(this, chunk, promise));\n\t\n\t  return promise;\n\t};\n\t\n\t/**\n\t * Create a promise chain for a single part file upload.\n\t * @param  {file}   file    A file reference to upload.\n\t * @return {Promise} A promise which resolves when the request is complete.\n\t */\n\tUpload.prototype._uploadFile = function () {\n\t  var chunk = {\n\t    data: this.file\n\t  };\n\t\n\t  // Create a new promise if one doesn't exist.\n\t  if (!this.singlePartPromise) {\n\t    this.singlePartPromise = Promise();\n\t  }\n\t\n\t  // Broken off the chain, this will allow us to cancel single part uploads without breaking the\n\t  // initial chain.\n\t  this._signUpload(chunk)\n\t    .then(this._sendUpload.bind(this, chunk))\n\t    .then(this._sendSinglepartComplete.bind(this))\n\t    .then(this._updateProgress.bind(this, 100, this.fileRecord.size))\n\t    .then(this._uploadFileComplete.bind(this));\n\t\n\t  return this.singlePartPromise;\n\t};\n\t\n\t/**\n\t *  Resolve the single part upload promise;\n\t */\n\tUpload.prototype._uploadFileComplete = function () {\n\t  this.singlePartPromise(true, []);\n\t};\n\t\n\t/**\n\t * Make a request and sign the chunk to be uploaded.\n\t * @private\n\t * @param  {object}   chunk           Information about the chunk to be uploaded.\n\t * @return {Promise}                  A promise which resolves when the request is complete.\n\t */\n\tUpload.prototype._signUpload = function (chunk) {\n\t  var url;\n\t  var signing = '';\n\t  var headers = {};\n\t  var request;\n\t\n\t  // Set the part number for the current chunk.\n\t  if (chunk.partNumber) {\n\t    this.fileRecord.partNumber = chunk.partNumber;\n\t  }\n\t\n\t  headers['Content-Type'] = 'multipart/form-data';\n\t\n\t  if (!this.fileRecord.method) {\n\t    signing = this.config.uploadMethods.param + this.config.uploadMethods.singlePart;\n\t  }\n\t\n\t  url = utils.parseTokens(this.api.config.host + this.config.sign, {\n\t    id: this.fileRecord.id,\n\t    method: signing\n\t  });\n\t\n\t  request = new Request({\n\t    url: url,\n\t    token: this.api.getToken(),\n\t    method: 'POST',\n\t    headers: headers,\n\t    data: this.fileRecord\n\t  });\n\t\n\t  return request.send();\n\t};\n\t\n\t/**\n\t * Send the upload to the server.\n\t * @private\n\t * @param   {object} upload  An object representing the upload to send to the server.\n\t * @return  {Promise}       A promise which resolves when the request is complete.\n\t */\n\tUpload.prototype._sendUpload = function (upload, response) {\n\t  var headers = {};\n\t  var request;\n\t\n\t  // Set the proper headers to send with the file.\n\t  headers['Content-Type'] = 'multipart/form-data';\n\t  headers.authorization = response.data.authHeader;\n\t  headers['x-amz-date'] = response.data.dateHeader;\n\t\n\t  request = new Request({\n\t    url: response.data.url,\n\t    method: 'PUT',\n\t    headers: headers,\n\t    data: upload.data,\n\t    ignoreAcceptHeader: true\n\t  });\n\t\n\t  this.requestPromise = request;\n\t\n\t  return request.send();\n\t};\n\t\n\t/**\n\t * Update the upload bytes value when a single part file is uploaded.\n\t */\n\tUpload.prototype._sendSinglepartComplete = function () {\n\t  this.uploadComplete = true;\n\t  this.uploadedBytes = this.fileRecord.size;\n\t};\n\t\n\t/**\n\t *  Executed when a chunk is finished uploading.\n\t *  @private\n\t *  @param {object}   chunk   The current chunk that was uploaded.\n\t *  @param {Promise}  promise The promise to resolve when the chunk is complete.\n\t */\n\tUpload.prototype._completeChunk = function (chunk, promise) {\n\t  var progress;\n\t\n\t  this.chunksComplete++;\n\t  chunk.complete = true;\n\t\n\t  this.uploadedBytes += chunk.data.size;\n\t\n\t  // Upload is complete.\n\t  if (this.chunksComplete === this.chunkCount) {\n\t    this.uploadComplete = true;\n\t  }\n\t\n\t  progress = this.uploadedBytes / this.fileRecord.size;\n\t  // 0 - 99 for actual upload progress, 1% for the complete call.\n\t  progress = progress * 99;\n\t  progress = Math.round(progress);\n\t\n\t  this._updateProgress(progress, chunk.data.size);\n\t\n\t  // Resolve the promise.\n\t  promise(true, []);\n\t};\n\t\n\t/**\n\t * Notify the server that the upload is complete.\n\t *\n\t * @private\n\t * @return  {Promise} A promise which resolves when the request is complete.\n\t */\n\tUpload.prototype._completeUpload = function () {\n\t  var url;\n\t  var tokens;\n\t  var request;\n\t\n\t  // Early return so we don't process any of the complete information on an aborted upload.\n\t  if (this.aborted) {\n\t    return utils.promisify(false, 'Upload Aborted.');\n\t  }\n\t\n\t  tokens = {\n\t    id: this.fileRecord.id\n\t  };\n\t\n\t  url = utils.parseTokens(this.api.config.host + this.config.uploadComplete, tokens);\n\t\n\t  request = new Request({\n\t    url: url,\n\t    token: this.api.getToken(),\n\t    method: 'POST',\n\t    data: this.fileRecord\n\t  });\n\t\n\t  return request.send()\n\t          .then(this._onCompleteUpload.bind(this));\n\t};\n\t\n\t/**\n\t * Return the id for the current file record.\n\t * @private\n\t * @return {string} ID for the input record that was created.\n\t */\n\tUpload.prototype._onCompleteUpload = function () {\n\t  // Send the final progress update once the upload is actually complete.\n\t  this._updateProgress(100);\n\t\n\t  this.uploadComplete = true;\n\t  this.multiPartPromise = null;\n\t  this.requestPromise = null;\n\t  this.singlePartPromise = null;\n\t  return this.fileRecord.id;\n\t};\n\t\n\t/**\n\t * Aborts an input upload\n\t *\n\t * @param {boolean} async A flag to indicate whether or not the request to delete the input should be async.\n\t *\n\t * @return {Promise} A promise which resolves when the request is complete.\n\t */\n\tUpload.prototype.abort = function (async) {\n\t  var url;\n\t  var tokens;\n\t  var request;\n\t\n\t  if (typeof async === 'undefined') {\n\t    async = true;\n\t  }\n\t\n\t  this.aborted = true;\n\t\n\t  // If initialize hasn't been called yet there is no need to abort the upload as it doesn't\n\t  // exist yet.\n\t  if (!this.initialized) {\n\t\n\t    if (this.created) {\n\t      // If the input has been created simply return early with a\n\t      // promise to delete the created input record.\n\t      return this.api.inputs.delete(this.fileRecord.id, async);\n\t    } else {\n\t      // Resolve as a successful promise. This case would be fulfilled when an upload\n\t      // has been created but save() hasn't yet been called.\n\t      return utils.promisify(true);\n\t    }\n\t\n\t  }\n\t\n\t  // Cancel the current request.\n\t  if (this.requestPromise) {\n\t    this.requestPromise.cancel();\n\t    this.requestPromise = null;\n\t  }\n\t\n\t  if (this.singlePartPromise) {\n\t    this.singelPartPromise = null;\n\t    // return here because there is no need to abort a single part upload.\n\t    return this._abortComplete(async);\n\t  }\n\t\n\t  this.multiPartPromise.cancel();\n\t  this.multiPartPromise = null;\n\t\n\t  tokens = {\n\t    id: this.fileRecord.id,\n\t    method: ''\n\t  };\n\t\n\t  url = utils.parseTokens(this.api.config.host + this.config.uploadAbort, tokens);\n\t\n\t  request = new Request({\n\t    url: url,\n\t    async: async,\n\t    token: this.api.getToken(),\n\t    method: 'POST',\n\t    data: this.fileRecord\n\t  });\n\t\n\t  return request.send()\n\t          .then(this._abortComplete.bind(this, async));\n\t};\n\t\n\t/**\n\t * Delete the input that was created.\n\t * @private\n\t * @return {Promise} A promise which resolves when the request is complete.\n\t */\n\tUpload.prototype._abortComplete = function (async) {\n\t  return this.api.inputs.delete(this.fileRecord.id, async);\n\t};\n\t\n\t/**\n\t * Pause the current upload.\n\t */\n\tUpload.prototype.pause = function () {\n\t  // Return early if the upload portion is complete.\n\t  // The work is done by now so we might as well fire the\n\t  // complete call.\n\t  if (this.uploadComplete) {\n\t    return;\n\t  }\n\t\n\t  this.paused = true;\n\t\n\t  // Is there an upload\n\t  if (this.multiPartPromise) {\n\t\n\t    // Pause the series if its a multipart upload.\n\t    this.multiPartPromise.pause();\n\t\n\t    // Cancel the http request for this chunk.\n\t    this.requestPromise.cancel();\n\t\n\t  } else if (this.requestPromise) {\n\t    // Abort the upload if its a singlepart upload.\n\t    this.requestPromise.cancel();\n\t  }\n\t\n\t};\n\t\n\t/**\n\t * Resume the current upload.\n\t */\n\tUpload.prototype.resume = function () {\n\t  this.paused = false;\n\t\n\t  // resume the series if its multi part.\n\t  if (this.multiPartPromise) {\n\t    // resume the series if its multipart.\n\t    this.multiPartPromise.resume();\n\t  } else if (this.requestPromise) {\n\t    // Restart the file upload.\n\t    this._uploadFile();\n\t  }\n\t\n\t};\n\t\n\t/**\n\t * Check the file size to determine if it should be a multipart upload, returns false for singlepart uploads.\n\t * @private\n\t * @param  {file}   file  The file to evaluate.\n\t * @return {boolean}      True if the file will be uploading using mutlipart upload.\n\t */\n\tUpload.prototype._checkMultipart = function (file) {\n\t  if (!file) {\n\t    return;\n\t  }\n\t\n\t  return (file.size <= (5 * 1024 * 1024) ? false : true);\n\t};\n\t\n\t/**\n\t * Function that determines the slice method to be used\n\t * @private\n\t * @param {object} file - The file object you wish to determine the slice method for\n\t * @return {string} sliceMethod - The slice method to use.\n\t */\n\tUpload.prototype._getSliceMethod = function (file) {\n\t  var sliceMethod;\n\t\n\t  if ('mozSlice' in file) {\n\t    sliceMethod = 'mozSlice';\n\t  } else if ('webkitSlice' in file) {\n\t    sliceMethod = 'webkitSlice';\n\t  } else {\n\t    sliceMethod = 'slice';\n\t  }\n\t\n\t  return sliceMethod;\n\t};\n\t\n\tmodule.exports = Upload;\n\n\n/***/ },\n/* 11 */\n/***/ function(module, exports) {\n\n\t/**\n\t * A management layer for storing app cache in local storage.\n\t */\n\tvar Cache = function (cacheAge) {\n\t  this.cacheAge = cacheAge;\n\t  this.enabled = this._checkCacheSupport();\n\t};\n\t\n\t/**\n\t * Return true if localStorage is supported.\n\t * @private\n\t * @return {boolean} True if localStorage is supported.\n\t */\n\tCache.prototype._checkCacheSupport = function () {\n\t\n\t  var support = 'support';\n\t\n\t  try {\n\t    window.localStorage.setItem(support, support);\n\t    window.localStorage.removeItem(support);\n\t    return true;\n\t  } catch (e) {\n\t    return false;\n\t  }\n\t\n\t};\n\t\n\t/**\n\t * Retrieve the cached result for the provided cacheKey.\n\t * @param  {string}   cacheKey  Key associated with the cached result.\n\t * @return {object}             Parse results object.\n\t */\n\tCache.prototype.retrieve = function (cacheKey) {\n\t  var data;\n\t  var value = null;\n\t  var expiry;\n\t\n\t  try {\n\t\n\t    data = window.localStorage.getItem(cacheKey);\n\t    data = JSON.parse(data);\n\t\n\t    if (!data) {\n\t      return value;\n\t    }\n\t\n\t    value = data.value;\n\t\n\t    if (data.expiry < Date.now()) {\n\t      // Cache is expired;\n\t      window.localStorage.removeItem(cacheKey);\n\t      value = null;\n\t    }\n\t\n\t  } catch (error) {\n\t    // Silent capture so that caching never gets in the way of returning a result.\n\t    value = null;\n\t  }\n\t\n\t  return value;\n\t};\n\t\n\t/**\n\t * Remove a result from the cache.\n\t * @param  {string}   cacheKey  Key associated with the cached result.\n\t * @return {boolean}            A boolean indicating success of the removal.\n\t */\n\tCache.prototype.remove = function (cacheKey) {\n\t  var result = true;\n\t\n\t  try {\n\t    window.localStorage.removeItem(cacheKey);\n\t  } catch (error) {\n\t    // Silent capture so that caching never gets in the way of returning a result.\n\t    result = false;\n\t  }\n\t\n\t  return result;\n\t};\n\t\n\t/**\n\t * Save the new result with its expiry date.\n\t * @param  {string}   cacheKey Unique cache key for the request.\n\t * @param  {number}   expiry   Unix timestamp for the expiry.\n\t * @param  {object}   result   Object to be cached.\n\t * @return {boolean}            A boolean indicating success of the save.\n\t */\n\tCache.prototype.save = function (cacheKey, value) {\n\t  var result = true;\n\t  var data = {};\n\t  var JSONResult;\n\t\n\t  try {\n\t\n\t    data.expiry = Date.now() + this.cacheAge;\n\t    data.value = value;\n\t\n\t    JSONResult = JSON.stringify(data);\n\t\n\t    window.localStorage.setItem(cacheKey, JSONResult);\n\t\n\t  } catch (error) {\n\t    // Silent capture so that caching never gets in the way of returning a result.\n\t    result = false;\n\t  }\n\t\n\t  return result;\n\t};\n\t\n\t/**\n\t * Return an object representing the differences between the provided object and the cached object.\n\t * @example\n\t * //'cachedObject' = {id: '12345'};\n\t * cache.diff('cachedObject', {title: 'test'});\n\t * // returns {title: 'test'}\n\t * @example\n\t * //'cachedObject' = {id: '12345', title: 'test'};\n\t * cache.diff('cachedObject', {title: 'test2'});\n\t * // returns {title: 'test2'}\n\t *\n\t * @param  {string} cacheKey  Cachekey of the object to compare against.\n\t * @param  {object} item      Object to compare against the cached object.\n\t * @param  {array}  forced    An array of properties to be returned in the resulting object regardless of difference.\n\t * @return {object}           An object containing the differences.\n\t */\n\tCache.prototype.diff = function (cacheKey, item, forced) {\n\t  var property, properties, propertiesLength, i;\n\t  var force, forcedLength, n;\n\t  var original = this.retrieve(cacheKey);\n\t  var diff = null;\n\t\n\t  if (forced) {\n\t    forcedLength = forced.length;\n\t  }\n\t\n\t  properties = Object.keys(item);\n\t  propertiesLength = properties.length;\n\t\n\t  if (!original) {\n\t    // return the compare object if the original item wasn't found.\n\t    return item;\n\t  }\n\t\n\t  // Walk the object and compare the properties.\n\t  for (i = 0; i < propertiesLength; i++) {\n\t    property = properties[i];\n\t\n\t    // Check the values if both objects have the property.\n\t    if (original.hasOwnProperty(property)) {\n\t      if (item[property] === original[property]) {\n\t        // If the values are the same we don't need to add it to the diff so continue.\n\t        continue;\n\t      }\n\t    }\n\t\n\t    // If the diff item is still null we need to create a new object to store the properties in.\n\t    if (!diff) {\n\t      diff = {};\n\t    }\n\t\n\t    // If we've made it this far the property is either a new one, or the item doesn't match.\n\t    diff[property] = item[property];\n\t\n\t  }\n\t\n\t  // As long as changes were found append the forced properties.\n\t  if (diff) {\n\t    for (n = 0; n < forcedLength; n++) {\n\t      property = forced[n];\n\t      diff[property] = item[property];\n\t    }\n\t  }\n\t\n\t  return diff;\n\t\n\t};\n\t\n\t/**\n\t * Return an object representing the differences between the provided objects and the cached object.\n\t * Similar to diff, but accepts an array of objects.\n\t *\n\t * @param  {string} cacheKey  Property on the provided objects that represents the cache key.\n\t * @param  {object} item      Object to compare against the cached object.\n\t * @param  {array}  forced    An array of properties to be returned in the resulting object regardless of difference.\n\t * @return {object}           An object containing the differences.\n\t */\n\tCache.prototype.diffArray = function (cacheKey, items, forced) {\n\t\n\t  var i;\n\t  var itemsLength = items.length;\n\t  var item;\n\t  var result = null;\n\t  var results = [];\n\t\n\t  for (i = 0; i < itemsLength; i++) {\n\t    item = items[i];\n\t\n\t    result = this.diff(item[cacheKey], item, forced);\n\t\n\t    // Only add it to the result set if changes were found.\n\t    if (result !== null) {\n\t      results.push(result);\n\t    }\n\t\n\t  }\n\t\n\t  return results;\n\t\n\t};\n\t\n\tmodule.exports = Cache;\n\n\n/***/ },\n/* 12 */\n/***/ function(module, exports, __webpack_require__) {\n\n\tvar extend = __webpack_require__(2);\n\tvar Request = __webpack_require__(3);\n\tvar utils = __webpack_require__(9);\n\t\n\t/**\n\t * Resource Object\n\t * @class\n\t */\n\tfunction Resource (options) {\n\t\n\t  this.defaults = {\n\t    host: 'https://api.ingest.io',\n\t    all: '/<%=resource%>',\n\t    byId: '/<%=resource%>/<%=id%>',\n\t    thumbnails: '/<%=resource%>/<%=id%>/thumbnails',\n\t    trash: '/<%=resource%>?filter=trashed',\n\t    deleteMethods: {\n\t      'permanent': '?permanent=1'\n\t    },\n\t    search: '/<%=resource%>?search=<%=input%>',\n\t    tokenSource: null,\n\t    resource: null\n\t  };\n\t\n\t  this.config = extend(true, {}, this.defaults, options);\n\t\n\t  this.cache = this.config.cache;\n\t\n\t}\n\t\n\t/**\n\t * Proxy the request to token source to ensure a value is always returned.\n\t * @private\n\t * @return {string} Auth token.\n\t */\n\tResource.prototype._tokenSource = function () {\n\t  var result = null;\n\t\n\t  if (this.config.tokenSource) {\n\t    result = this.config.tokenSource.call();\n\t  }\n\t\n\t  return result;\n\t};\n\t\n\t/**\n\t * Return a list of the requested resource for the current user and network.\n\t * @param  {object}   headers   Object representing headers to apply to the request.\n\t * @return {promise}            A promise which resolves when the request is complete.\n\t */\n\tResource.prototype.getAll = function (headers) {\n\t  var request;\n\t  var url = utils.parseTokens(this.config.host + this.config.all, {\n\t    resource: this.config.resource\n\t  });\n\t\n\t  request = new Request({\n\t    url: url,\n\t    token: this._tokenSource(),\n\t    headers: headers\n\t  });\n\t\n\t  return request.send()\n\t          .then(this._updateCachedResources.bind(this));\n\t};\n\t\n\t/**\n\t * Return a resource that matches the supplied id.\n\t * @param  {string}   id    Resource id.\n\t * @return {promise}        A promise which resolves when the request is complete.\n\t */\n\tResource.prototype.getById = function (id) {\n\t  var url, cachedResult, request;\n\t\n\t  if (typeof id !== 'string') {\n\t    return utils.promisify(false,\n\t      'IngestAPI Resource getById requires a valid id passed as a string.');\n\t  }\n\t\n\t  url = utils.parseTokens(this.config.host + this.config.byId, {\n\t    resource: this.config.resource,\n\t    id: id\n\t  });\n\t\n\t  if (this.cache && this.cache.enabled) {\n\t    // retrieve the cached item.\n\t    cachedResult = this.cache.retrieve(id);\n\t  }\n\t\n\t  // Return a cached result if we've found one.\n\t  if (cachedResult) {\n\t    return utils.promisify(true, {\n\t      data: cachedResult\n\t    });\n\t  } else {\n\t\n\t    request = new Request({\n\t      url: url,\n\t      token: this._tokenSource()\n\t    });\n\t\n\t    return request.send();\n\t\n\t  }\n\t};\n\t\n\t/**\n\t * Return the resources currently in the trash.\n\t * @param  {object} headers Headers to be passed along with the request for pagination.\n\t * @return {promise}         A promise which resolves when the request is complete.\n\t */\n\tResource.prototype.getTrashed = function (headers) {\n\t  var request;\n\t  var url = utils.parseTokens(this.config.host + this.config.trash, {\n\t    resource: this.config.resource\n\t  });\n\t\n\t  request = new Request({\n\t    url: url,\n\t    token: this._tokenSource(),\n\t    headers: headers\n\t  });\n\t\n\t  return request.send();\n\t};\n\t\n\t/**\n\t * Retrieve all thumbnails for a provided resource id.\n\t * @param {string} id ID of the resource to retrieve thumbnails for.\n\t * @return {promise}  A promise which resolves when the request is complete.\n\t */\n\tResource.prototype.getThumbnails = function (id) {\n\t  var url, request;\n\t\n\t  if (typeof id !== 'string') {\n\t    return utils.promisify(false,\n\t      'IngestAPI Resource getThumbnails requires an id to be passed as a string.');\n\t  }\n\t\n\t  url = utils.parseTokens(this.config.host + this.config.thumbnails, {\n\t    resource: this.config.resource,\n\t    id: id\n\t  });\n\t\n\t  request = new Request({\n\t    url: url,\n\t    token: this._tokenSource()\n\t  });\n\t\n\t  return request.send();\n\t};\n\t\n\t/**\n\t * Add a new resource.\n\t * @param   {object}  resource  An object representing the resource to add.\n\t * @return  {promise}           A promise which resolves when the request is complete.\n\t */\n\tResource.prototype.add = function (resource) {\n\t  var url, request;\n\t\n\t  if (typeof resource !== 'object') {\n\t    return utils.promisify(false,\n\t      'IngestAPI Resource add requires a resource passed as an object.');\n\t  }\n\t\n\t  url = utils.parseTokens(this.config.host + this.config.all, {\n\t    resource: this.config.resource\n\t  });\n\t\n\t  request = new Request({\n\t    url: url,\n\t    token: this._tokenSource(),\n\t    method: 'POST',\n\t    data: resource\n\t  });\n\t\n\t  return request.send()\n\t          .then(this._updateCachedResource.bind(this));\n\t};\n\t\n\t/**\n\t * Update an existing resource with new content.\n\t * @param  {object|array} resource  An object or an array of objects representing the resource(s) to be updated.\n\t * @return {promise}                A promise which resolves when the request is complete.\n\t */\n\tResource.prototype.update = function (resource) {\n\t  if (typeof resource !== 'object') {\n\t    return utils.promisify(false,\n\t      'IngestAPI Resource update requires a resource to be passed either as an object or an array of objects.'); //eslint-disable-line\n\t  }\n\t\n\t  // If they've passed an array fire the updateArray function.\n\t  if (Array.isArray(resource)) {\n\t    return this._updateResourceArray(resource);\n\t  } else {\n\t    return this._updateResource(resource);\n\t  }\n\t};\n\t\n\t/**\n\t * Update a single resource.\n\t * @private\n\t * @param  {object}   resource  An object representing the resource to update.\n\t * @return {promise}            A promise which resolves when the request is complete.\n\t */\n\tResource.prototype._updateResource = function (resource) {\n\t  var request;\n\t  var data = resource;\n\t\n\t  var url = utils.parseTokens(this.config.host + this.config.byId, {\n\t    resource: this.config.resource,\n\t    id: resource.id\n\t  });\n\t\n\t  if (this.cache && this.cache.enabled) {\n\t    data = this.cache.diff(resource.id, resource);\n\t  }\n\t\n\t  // Null is returned in the case that the two objects match.\n\t  if (!data) {\n\t    // Return a fulfilled promise with the cached object.\n\t    return utils.promisify(true, {\n\t      data: this.cache.retrieve(resource.id)\n\t    });\n\t  }\n\t\n\t  request = new Request({\n\t    url: url,\n\t    token: this._tokenSource(),\n\t    method: 'PATCH',\n\t    data: data\n\t  });\n\t\n\t  return request.send()\n\t          .then(this._updateCachedResource.bind(this));\n\t};\n\t\n\t/**\n\t * Update an array of resources.\n\t * @private\n\t * @param  {array} resources  An array of resource objects to be updated.\n\t * @return {promise}          A promise which resolves when the request is complete.\n\t */\n\tResource.prototype._updateResourceArray = function (resources) {\n\t  var request;\n\t  var url = utils.parseTokens(this.config.host + this.config.all, {\n\t    resource: this.config.resource\n\t  });\n\t\n\t  request = new Request({\n\t    url: url,\n\t    token: this._tokenSource(),\n\t    method: 'PATCH',\n\t    data: resources\n\t  });\n\t\n\t  return request.send()\n\t          .then(this._updateCachedResources.bind(this));\n\t};\n\t\n\t/**\n\t * Delete an existing resource\n\t * @param  {object | array} resource The id, or an array of ids for the resource(s) to be deleted.\n\t * @param {boolean}   async       A flag to indicate if this should be an async request to delete.\n\t * @return {promise}          A promise which resolves when the request is complete.\n\t */\n\tResource.prototype.delete = function (resource, async) {\n\t  if (typeof async === 'undefined') {\n\t    async = true;\n\t  }\n\t\n\t  if (typeof resource !== 'string') {\n\t    // If they've passed an array fire the updateArray function.\n\t    if (Array.isArray(resource)) {\n\t      return this._deleteResourceArray(resource, false, async);\n\t    }\n\t\n\t    return utils.promisify(false,\n\t      'IngestAPI Resource delete requires a resource to be passed either as a string or an array of strings.'); //eslint-disable-line\n\t  }\n\t\n\t  return this._deleteResource(resource, false, async);\n\t};\n\t\n\t/**\n\t * Permanently delete an existing resource.\n\t * @param  {object | array} resource The id, or an array of ids for the resource(s) to be deleted.\n\t * @param {boolean}   async       A flag to indicate if this should be an async request to delete.\n\t * @return {promise}          A promise which resolves when the request is complete.\n\t */\n\tResource.prototype.permanentDelete = function (resource, async) {\n\t  if (typeof async === 'undefined') {\n\t    async = true;\n\t  }\n\t\n\t  if (typeof resource !== 'string') {\n\t    // If they've passed an array fire the updateArray function.\n\t    if (Array.isArray(resource)) {\n\t      return this._deleteResourceArray(resource, true, async);\n\t    }\n\t\n\t    return utils.promisify(false,\n\t      'IngestAPI Resource delete requires a resource to be passed either as a string or an array of strings.'); //eslint-disable-line\n\t  }\n\t\n\t  return this._deleteResource(resource, true, async);\n\t};\n\t\n\t/**\n\t * Delete a single resource\n\t * @private\n\t * @param  {object}   resource  The id of the resource to be deleted.\n\t * @param {boolean}   permanent  A flag to permanently delete each video.\n\t * @param {boolean}   async       A flag to indicate if this should be an async request to delete.\n\t * @return {promise}            A promise which resolves when the request is complete.\n\t */\n\tResource.prototype._deleteResource = function (resource, permanent, async) {\n\t  var request;\n\t  var url = utils.parseTokens(this.config.host + this.config.byId, {\n\t    resource: this.config.resource,\n\t    id: resource\n\t  });\n\t\n\t  if (permanent === true) {\n\t    url += this.config.deleteMethods.permanent;\n\t  }\n\t\n\t  request = new Request({\n\t    url: url,\n\t    async: async,\n\t    token: this._tokenSource(),\n\t    method: 'DELETE',\n\t  });\n\t\n\t  return request.send()\n\t          .then(this._deleteCachedResource.bind(this, resource));\n\t};\n\t\n\t/**\n\t * Delete an array of resources\n\t * @private\n\t * @param  {array}  resources   An array of resource objects to be deleted.\n\t * @param {boolean}  permanent  A flag to permanently delete each video.\n\t * @return {promise}            A promise which resolves when the request is complete.\n\t */\n\tResource.prototype._deleteResourceArray = function (resources, permanent) {\n\t  var request;\n\t  var url = utils.parseTokens(this.config.host + this.config.all, {\n\t    resource: this.config.resource\n\t  });\n\t\n\t  if (permanent === true) {\n\t    url += this.config.deleteMethods.permanent;\n\t  }\n\t\n\t  request = new Request({\n\t    url: url,\n\t    token: this._tokenSource(),\n\t    method: 'DELETE',\n\t    data: resources\n\t  });\n\t\n\t  return request.send()\n\t          .then(this._deleteCachedResources.bind(this, resources));\n\t};\n\t\n\t/**\n\t * Return a subset of items that match the search terms.\n\t * @param  {string} input    The search terms to match against.\n\t * @param  {object} headers  The headers to be passed to the request.\n\t * @return {Promise}          A promise which resolves when the request is complete.\n\t */\n\tResource.prototype.search = function (input, headers) {\n\t  var url, request;\n\t\n\t  if (typeof input !== 'string') {\n\t    return utils.promisify(false,\n\t      'IngestAPI Resource search requires search input to be passed as a string.');\n\t  }\n\t\n\t  url = utils.parseTokens(this.config.host + this.config.search, {\n\t    resource: this.config.resource,\n\t    input: input\n\t  });\n\t\n\t  request = new Request({\n\t    url: url,\n\t    token: this._tokenSource(),\n\t    headers: headers\n\t  });\n\t\n\t  return request.send();\n\t};\n\t\n\t/**\n\t * Get the total count of resources.\n\t * @return {promise} A promise which resolves when the request is complete.\n\t */\n\tResource.prototype.count = function () {\n\t  var request;\n\t  var url = utils.parseTokens(this.config.host + this.config.all, {\n\t    resource: this.config.resource\n\t  });\n\t\n\t  request = new Request({\n\t    url: url,\n\t    token: this._tokenSource(),\n\t    method: 'HEAD'\n\t  });\n\t\n\t  return request.send()\n\t          .then(this._handleCountResponse);\n\t};\n\t\n\t/**\n\t * Get the total count of resources in the trash.\n\t * @return {promise} A promise which resolves when the request is complete.\n\t */\n\tResource.prototype.trashCount = function () {\n\t  var request;\n\t  var url = utils.parseTokens(this.config.host + this.config.trash, {\n\t    resource: this.config.resource\n\t  });\n\t\n\t  request = new Request({\n\t    url: url,\n\t    token: this._tokenSource(),\n\t    method: 'HEAD'\n\t  });\n\t\n\t  return request.send()\n\t          .then(this._handleCountResponse);\n\t};\n\t\n\t/**\n\t * Return the resource count from the response.\n\t * @private\n\t * @param  {object} response Request response object.\n\t * @return {number}          The resource count.\n\t */\n\tResource.prototype._handleCountResponse = function (response) {\n\t  return parseInt(response.headers('Resource-Count'), 10);\n\t};\n\t\n\t/**\n\t * Update a single cached resource based on the response data.\n\t * @param  {object}   response   Response object from the getAll request.\n\t * @return {response}            Response object from the getAll request.\n\t */\n\tResource.prototype._updateCachedResource = function (response) {\n\t  if (this.cache && this.cache.enabled) {\n\t    this.cache.save(response.data.id, response.data);\n\t  }\n\t\n\t  return response;\n\t};\n\t\n\t/**\n\t * Store the returned items in cache.\n\t * @param  {object}   response   Response object from the getAll request.\n\t * @return {response}            Response object from the getAll request.\n\t */\n\tResource.prototype._updateCachedResources = function (response) {\n\t  var data = response.data;\n\t  var dataLength = data.length;\n\t  var i;\n\t\n\t  if (this.cache && this.cache.enabled) {\n\t\n\t    for (i = 0; i < dataLength; i++) {\n\t      this.cache.save(data[i].id, data[i]);\n\t    }\n\t\n\t  }\n\t\n\t  return response;\n\t};\n\t\n\t/**\n\t * Delete a single cached resource.\n\t * @param  {string} id            ID of the resource to remove.\n\t * @param  {object}   response    Response object from the getAll request.\n\t * @return {response}             Response object from the getAll request.\n\t */\n\tResource.prototype._deleteCachedResource = function (id, response) {\n\t  if (this.cache && this.cache.enabled) {\n\t    this.cache.remove(id);\n\t  }\n\t\n\t  return response;\n\t};\n\t\n\t/**\n\t * Delete an array of cached resources\n\t * @param  {array}    ids         Array of resource id's to delete from cache.\n\t * @param  {object}   response    Response object from the getAll request.\n\t * @return {response}             Response object from the getAll request.\n\t */\n\tResource.prototype._deleteCachedResources = function (ids, response) {\n\t  var dataLength = ids.length;\n\t  var i;\n\t\n\t  if (this.cache && this.cache.enabled) {\n\t\n\t    for (i = 0; i < dataLength; i++) {\n\t      this.cache.remove(ids[i]);\n\t    }\n\t\n\t  }\n\t\n\t  return response;\n\t};\n\t\n\tmodule.exports = Resource;\n\n\n/***/ },\n/* 13 */\n/***/ function(module, exports, __webpack_require__) {\n\n\tvar Resource = __webpack_require__(12);\n\tvar Request = __webpack_require__(3);\n\tvar utils = __webpack_require__(9);\n\tvar extend = __webpack_require__(2);\n\t\n\tfunction Users (options) {\n\t\n\t  var overrides = {\n\t    currentUser: '/users/me',\n\t    transfer: '/users/<%=oldId%>/transfer/<%=newId%>',\n\t    revoke: '/revoke'\n\t  };\n\t\n\t  options = extend(true, {}, overrides, options);\n\t\n\t  Resource.call(this, options);\n\t\n\t};\n\t\n\t// This extends the base class of 'Resource'.\n\tUsers.prototype = Object.create(Resource.prototype);\n\tUsers.prototype.constructor = Users;\n\t\n\t/**\n\t * Retrieve information for the current user.\n\t *\n\t * @return {Promise} A promise which resolves when the request is complete.\n\t */\n\tUsers.prototype.getCurrentUserInfo = function () {\n\t  var request = new Request({\n\t    url: this.config.host + this.config.currentUser,\n\t    token: this._tokenSource()\n\t  });\n\t\n\t  return request.send();\n\t};\n\t\n\t/**\n\t * Transfer all authorship currently under the specified user onto another.\n\t * This includes all videos & playlists.\n\t * This task is commonly used in conjunction with permanently deleting a user.\n\t *\n\t * @param {string} oldId - The user who currently has authorship.\n\t * @param {string} newId - The user to transfer authorship to.\n\t *\n\t * @return {Promise} A promise which resolves when the request is complete.\n\t */\n\tUsers.prototype.transferUserAuthorship = function (oldId, newId) {\n\t  var tokens, url, request;\n\t\n\t  if (typeof oldId !== 'string') {\n\t    return utils.promisify(false,\n\t      'IngestAPI transferUserAuthorship requires \"oldId\" to be passed as a string.');\n\t  }\n\t\n\t  if (typeof newId !== 'string') {\n\t    return utils.promisify(false,\n\t      'IngestAPI transferUserAuthorship requires \"newId\" to be passed as a string');\n\t  }\n\t\n\t  tokens = {\n\t    oldId: oldId,\n\t    newId: newId\n\t  };\n\t\n\t  url = utils.parseTokens(this.config.host + this.config.transfer, tokens);\n\t\n\t  request = new Request({\n\t    url: url,\n\t    token: this._tokenSource(),\n\t    method: 'PATCH'\n\t  });\n\t\n\t  return request.send();\n\t};\n\t\n\t/**\n\t * Revokes the authorization token for the current user.\n\t *\n\t * @return {Promise} A promise which resolves when the request is complete.\n\t */\n\tUsers.prototype.revokeCurrentUser = function () {\n\t  var request = new Request({\n\t    url: this.config.host + this.config.currentUser + this.config.revoke,\n\t    token: this._tokenSource(),\n\t    method: 'DELETE'\n\t  });\n\t\n\t  return request.send();\n\t};\n\t\n\tmodule.exports = Users;\n\n\n/***/ },\n/* 14 */\n/***/ function(module, exports, __webpack_require__) {\n\n\tvar Resource = __webpack_require__(12);\n\tvar Request = __webpack_require__(3);\n\tvar utils = __webpack_require__(9);\n\tvar extend = __webpack_require__(2);\n\t\n\tfunction Networks (options) {\n\t\n\t  var overrides = {\n\t    invite: '/networks/invite'\n\t  };\n\t\n\t  options = extend(true, {}, overrides, options);\n\t\n\t  Resource.call(this, options);\n\t\n\t};\n\t\n\t// This extends the base class of 'Resource'.\n\tNetworks.prototype = Object.create(Resource.prototype);\n\tNetworks.prototype.constructor = Networks;\n\t\n\t/**\n\t * Link an existing user to the currently authorized network.\n\t *\n\t * @param {string} id - The unique ID of the user to link.\n\t *\n\t * @return {Promise} A promise which resolves when the request is complete.\n\t */\n\tNetworks.prototype.linkUser = function (id) {\n\t  var data, request;\n\t\n\t  if (typeof id !== 'string') {\n\t    return utils.promisify(false,\n\t      'IngestAPI linkUser requires \"id\" to be passed as a string.');\n\t  }\n\t\n\t  data = {\n\t    user_id: id\n\t  };\n\t\n\t  request = new Request({\n\t    url: this.config.host + '/' + this.config.resource,\n\t    data: data,\n\t    token: this._tokenSource(),\n\t    method: 'LINK'\n\t  });\n\t\n\t  return request.send();\n\t};\n\t\n\t/**\n\t * Remove the specified user from the currently authorized network.\n\t *\n\t * @param {string} id - The unique ID of the user to unlink.\n\t *\n\t * @return {Promise} A promise which resolves when the request is complete.\n\t */\n\tNetworks.prototype.unlinkUser = function (id) {\n\t  var data, request;\n\t\n\t  if (typeof id !== 'string') {\n\t    return utils.promisify(false,\n\t      'IngestAPI unlinkUser requires \"id\" to be passed as a string.');\n\t  }\n\t\n\t  data = {\n\t    user_id: id\n\t  };\n\t\n\t  request = new Request({\n\t    url: this.config.host + '/' + this.config.resource,\n\t    data: data,\n\t    token: this._tokenSource(),\n\t    method: 'UNLINK'\n\t  });\n\t\n\t  return request.send();\n\t};\n\t\n\t/**\n\t * Invite a user to the currently authorized network.\n\t *\n\t * @param {string} email - The email to send the invite to.\n\t * @param {string} name  - The name of the person to invite.\n\t *\n\t * @return {Promise} A promise which resolves when the request is complete.\n\t */\n\tNetworks.prototype.inviteUser = function (email, name) {\n\t  var data, request;\n\t\n\t  if (typeof email !== 'string') {\n\t    return utils.promisify(false,\n\t      'IngestAPI inviteUser requires \"email\" to be passed as a string.');\n\t  }\n\t\n\t  if (typeof name !== 'string') {\n\t    return utils.promisify(false,\n\t      'IngestAPI inviteUser requires \"name\" to be passed as a string.');\n\t  }\n\t\n\t  data = {\n\t    email: email,\n\t    name: name\n\t  };\n\t\n\t  request = new Request({\n\t    url: this.config.host + this.config.invite,\n\t    data: data,\n\t    token: this._tokenSource(),\n\t    method: 'POST'\n\t  });\n\t\n\t  return request.send();\n\t};\n\t\n\t\n\tmodule.exports = Networks;\n\n\n/***/ },\n/* 15 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\t\n\tvar Resource = __webpack_require__(12);\n\tvar Request = __webpack_require__(3);\n\tvar utils = __webpack_require__(9);\n\tvar extend = __webpack_require__(2);\n\t\n\tfunction Videos (options) {\n\t\n\t  var overrides = {\n\t    playlists: '/<%=resource%>/<%=id%>/playlists',\n\t    variants: '/<%=resource%>/<%=id%>/variants'\n\t  };\n\t\n\t  options = extend(true, {}, overrides, options);\n\t\n\t  Resource.call(this, options);\n\t\n\t};\n\t\n\t// This extends the base class of 'Resource'.\n\tVideos.prototype = Object.create(Resource.prototype);\n\tVideos.prototype.constructor = Videos;\n\t\n\t/**\n\t * Return any playlists that contains the provided video.\n\t * @param   {string}   id   Video id.\n\t * @return  {promise}       A promise which resolves when the request is complete.\n\t */\n\tVideos.prototype.getPlaylists = function (id) {\n\t  var url, request;\n\t\n\t  if (typeof id !== 'string') {\n\t    return utils.promisify(false,\n\t      'IngestAPI Resource getPlaylists requires a valid video id passed as a string.');\n\t  }\n\t\n\t  url = utils.parseTokens(this.config.host + this.config.playlists, {\n\t    resource: this.config.resource,\n\t    id: id\n\t  });\n\t\n\t  request = new Request({\n\t    url: url,\n\t    token: this._tokenSource()\n\t  });\n\t\n\t  return request.send();\n\t\n\t};\n\t\n\t/**\n\t * Get all of the variants for the supplied video id.\n\t * @param   {string}    id     Video id.\n\t * @return  {promise}          A promise which resolves when the request is complete.\n\t */\n\tVideos.prototype.getVariants = function (id) {\n\t  var url, request;\n\t\n\t  if (typeof id !== 'string') {\n\t    return utils.promisify(false,\n\t      'IngestAPI Resource getPlaylists requires a valid video id passed as a string.');\n\t  }\n\t\n\t  url = utils.parseTokens(this.config.host + this.config.variants, {\n\t    resource: this.config.resource,\n\t    id: id\n\t  });\n\t\n\t  request = new Request({\n\t    url: url,\n\t    token: this._tokenSource()\n\t  });\n\t\n\t  return request.send();\n\t};\n\t\n\tmodule.exports = Videos;\n\n\n/***/ }\n/******/ ])\n});\n;\n\n\n/** WEBPACK FOOTER **\n ** ingest.js\n **/"," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId])\n \t\t\treturn installedModules[moduleId].exports;\n\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\texports: {},\n \t\t\tid: moduleId,\n \t\t\tloaded: false\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.loaded = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(0);\n\n\n\n/** WEBPACK FOOTER **\n ** webpack/bootstrap 0368fac7ac56cd3631a0\n **/","module.exports = require('./src/IngestAPI.js');\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./index.js\n ** module id = 0\n ** module chunks = 0\n **/","var extend = require('extend');\nvar Request = require('./Request');\nvar JWTUtils = require('./JWTUtils');\nvar utils = require('./Utils');\nvar Uploader = require('./Uploader');\nvar Cache = require('./Cache');\n\nvar Resource = require('./resources/Resource');\nvar Users = require('./resources/Users');\nvar Networks = require('./resources/Networks');\nvar Videos = require('./resources/Videos');\n\n/**\n * IngestAPI Object\n * @class\n * @param {object}  options        Options to override the default.\n * @param {string}  options.host   Override the default live host.\n * @param {string}  options.token  Auth token to use for requests.\n */\nfunction IngestAPI (options) {\n\n  this.defaults = {\n    'host': 'https://api.ingest.io',\n    'cacheAge': 300000, // 5 minutes\n    'networks': '/networks',\n    'networksKeys': '/networks/keys',\n    'networksKeysById': '/networks/keys/<%=id%>',\n    'inputs': '/encoding/inputs',\n    'inputsById' : '/encoding/inputs/<%=id%>',\n    'inputsUpload': '/encoding/inputs/<%=id%>/upload<%=method%>',\n    'inputsUploadSign': '/encoding/inputs/<%=id%>/upload/sign<%=method%>',\n    'inputsUploadComplete': '/encoding/inputs/<%=id%>/upload/complete',\n    'inputsUploadAbort': '/encoding/inputs/<%=id%>/upload/abort',\n    'uploadMethods': {\n      'param': '?type=',\n      'singlePart': 'amazon',\n      'multiPart': 'amazonMP'\n    }\n  };\n\n  // Create a config object by extending the defaults with the pass options.\n  this.config = extend(true, {}, this.defaults, options);\n\n  this.token = null;\n\n  if (this.config.token) {\n    // Store the token for future use.\n    this.setToken(this.config.token);\n  }\n\n  /* Exposed for testing */\n  this.request = Request;\n  this.JWTUtils = JWTUtils;\n  this.utils = utils;\n  this.resource = Resource;\n  this.usersResource = Users;\n  this.networksResource = Networks;\n  this.videosResource = Videos;\n  this.uploader = Uploader;\n\n  this.cache = new Cache(this.config.cacheAge);\n\n  this.videos = new Videos({\n    host: this.config.host,\n    resource: 'videos',\n    tokenSource: this.getToken.bind(this),\n    cache: this.cache\n  });\n\n  this.playlists = new Resource({\n    host: this.config.host,\n    resource: 'playlists',\n    tokenSource: this.getToken.bind(this)\n  });\n\n  this.inputs = new Resource({\n    host: this.config.host,\n    resource: 'encoding/inputs',\n    tokenSource: this.getToken.bind(this),\n    cache: this.cache\n  });\n\n  this.users = new Users({\n    host: this.config.host,\n    resource: 'users',\n    tokenSource: this.getToken.bind(this),\n    cache: this.cache\n  });\n\n  this.networks = new Networks({\n    host: this.config.host,\n    resource: 'networks',\n    tokenSource: this.getToken.bind(this),\n    cache: this.cache\n  });\n\n  this.profiles = new Resource({\n    host: this.config.host,\n    resource: 'encoding/profiles',\n    tokenSource: this.getToken.bind(this),\n    cache: this.cache\n  });\n\n  this.jobs = new Resource({\n    host: this.config.host,\n    resource: 'encoding/jobs',\n    tokenSource: this.getToken.bind(this),\n    cache: this.cache\n  });\n\n}\n/** Token **/\n/**\n * Set the auth token to use.\n * @param   {String}        token Auth token to use.\n */\nIngestAPI.prototype.setToken = function (token) {\n\n  // Make sure a valid value is passed.\n  if (typeof token !== 'string') {\n    throw new Error('IngestAPI requires an authentication token passed as a string.');\n  }\n\n  this.token = token;\n};\n\n/**\n * Return the current auth token.\n * @return  {String}        Current auth token, or null if a token has not been set.\n */\nIngestAPI.prototype.getToken = function () {\n  return this.token;\n};\n\n/** Network Information **/\n\n/**\n * Get the current network primary key in RSA format.\n * @return {Promise} Promise/A+ spec which resolves with the primary network key.\n */\nIngestAPI.prototype.getNetworkSecureKeys = function () {\n  var request = new Request({\n    url: this.config.host + this.config.networksKeys,\n    token: this.getToken()\n  });\n\n  return request.send();\n};\n\n/**\n * Adds a new secure key to the current network.\n * @param {object}  data        The object containing data for the secure key entry.\n * @param {string}  data.title  Optional. The title of the secure key. Will default to \"Default Key Title\"\n * @param {string}  data.key    The public key in RSA format.\n *\n * @return {Promise}          A promise which resolves when the request is complete.\n */\nIngestAPI.prototype.addNetworkSecureKey = function (data) {\n  var request;\n\n  if (typeof data !== 'object') {\n    return utils.promisify(false,\n      'IngestAPI addNetworkSecureKey requires data to be passed as an object.');\n  }\n\n  // The title must be a string.\n  if (typeof data.title !== 'string') {\n    data.title = '';\n  }\n\n  if (typeof data.key !== 'string') {\n    return utils.promisify(false,\n      'IngestAPI addNetworkSecureKey requires that the key be a string in RSA public key format.');\n  }\n\n  request = new Request({\n    url: this.config.host + this.config.networksKeys,\n    token: this.getToken(),\n    method: 'POST',\n    data: data\n  });\n\n  return request.send();\n};\n\n/**\n * Retrieves a single network secure key entry based on the UUID given.\n * @param {string}  id  The UUID of the secure key entry.\n *\n * @return {Promise} A promise which resolves when the request is complete.\n */\nIngestAPI.prototype.getNetworkSecureKeyById = function (id) {\n  var tokens, url, request;\n\n  if (typeof id !== 'string') {\n    return utils.promisify(false,\n      'IngestAPI getNetworkSecureKeyById requires an id to be passed as a string.');\n  }\n\n  tokens = {\n    id: id\n  };\n\n  url = utils.parseTokens(this.config.host + this.config.networksKeysById, tokens);\n\n  request = new Request({\n    url: url,\n    token: this.getToken()\n  });\n\n  return request.send();\n};\n\n/**\n * Updates an individual secure key entry in the current network.\n * @param {object}  data        The object containing data for the secure key entry.\n * @param {string}  data.title  The title for the current network.\n *\n * @return {Promise} A promise which resolves when the request is complete.\n */\nIngestAPI.prototype.updateNetworkSecureKey = function (data) {\n  var tokens, url, request;\n\n  if (typeof data !== 'object') {\n    return utils.promisify(false,\n      'IngestAPI updateNetworkSecureKeyById requires data to be passed as an object.');\n  }\n\n  if (typeof data.id !== 'string') {\n    return utils.promisify(false,\n      'IngestAPI updateNetworkSecureKeyById requires a param \"id\" to be a string.');\n  }\n\n  if (typeof data.title !== 'string') {\n    data.title = '';\n  }\n\n  tokens = {\n    id: data.id\n  };\n\n  url = utils.parseTokens(this.config.host + this.config.networksKeysById, tokens);\n\n  request = new Request({\n    url: url,\n    token: this.getToken(),\n    method: 'PATCH',\n    data: data\n  });\n\n  return request.send();\n};\n\n/**\n * Deletes a single network secure key entry based on the UUID given.\n * @param {string}  id  The UUID of the secure key entry.\n *\n * @return {Promise} A promise which resolves when the request is complete.\n */\nIngestAPI.prototype.deleteNetworkSecureKeyById = function (id) {\n  var tokens, url, request;\n\n  if (typeof id !== 'string') {\n    return utils.promisify(false,\n      'IngestAPI deleteNetworkSecureKeyById requires an id to be passed as a string.');\n  }\n\n  tokens = {\n    id: id\n  };\n\n  url = utils.parseTokens(this.config.host + this.config.networksKeysById, tokens);\n\n  request = new Request({\n    url: url,\n    token: this.getToken(),\n    method: 'DELETE'\n  });\n\n  return request.send();\n\n};\n\n/**\n * Create a new input and upload a file.\n * @param  {File}   file    File to upload.\n * @return {Promise} A promise which resolves when the upload is complete.\n */\nIngestAPI.prototype.upload = function (file) {\n  return new Uploader({\n    file: file,\n    api: this,\n    host: this.config.host\n  });\n};\n\nmodule.exports = IngestAPI;\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./src/IngestAPI.js\n ** module id = 1\n ** module chunks = 0\n **/","'use strict';\n\nvar hasOwn = Object.prototype.hasOwnProperty;\nvar toStr = Object.prototype.toString;\n\nvar isArray = function isArray(arr) {\n\tif (typeof Array.isArray === 'function') {\n\t\treturn Array.isArray(arr);\n\t}\n\n\treturn toStr.call(arr) === '[object Array]';\n};\n\nvar isPlainObject = function isPlainObject(obj) {\n\tif (!obj || toStr.call(obj) !== '[object Object]') {\n\t\treturn false;\n\t}\n\n\tvar hasOwnConstructor = hasOwn.call(obj, 'constructor');\n\tvar hasIsPrototypeOf = obj.constructor && obj.constructor.prototype && hasOwn.call(obj.constructor.prototype, 'isPrototypeOf');\n\t// Not own constructor property must be Object\n\tif (obj.constructor && !hasOwnConstructor && !hasIsPrototypeOf) {\n\t\treturn false;\n\t}\n\n\t// Own properties are enumerated firstly, so to speed up,\n\t// if last one is own, then all properties are own.\n\tvar key;\n\tfor (key in obj) {/**/}\n\n\treturn typeof key === 'undefined' || hasOwn.call(obj, key);\n};\n\nmodule.exports = function extend() {\n\tvar options, name, src, copy, copyIsArray, clone,\n\t\ttarget = arguments[0],\n\t\ti = 1,\n\t\tlength = arguments.length,\n\t\tdeep = false;\n\n\t// Handle a deep copy situation\n\tif (typeof target === 'boolean') {\n\t\tdeep = target;\n\t\ttarget = arguments[1] || {};\n\t\t// skip the boolean and the target\n\t\ti = 2;\n\t} else if ((typeof target !== 'object' && typeof target !== 'function') || target == null) {\n\t\ttarget = {};\n\t}\n\n\tfor (; i < length; ++i) {\n\t\toptions = arguments[i];\n\t\t// Only deal with non-null/undefined values\n\t\tif (options != null) {\n\t\t\t// Extend the base object\n\t\t\tfor (name in options) {\n\t\t\t\tsrc = target[name];\n\t\t\t\tcopy = options[name];\n\n\t\t\t\t// Prevent never-ending loop\n\t\t\t\tif (target !== copy) {\n\t\t\t\t\t// Recurse if we're merging plain objects or arrays\n\t\t\t\t\tif (deep && copy && (isPlainObject(copy) || (copyIsArray = isArray(copy)))) {\n\t\t\t\t\t\tif (copyIsArray) {\n\t\t\t\t\t\t\tcopyIsArray = false;\n\t\t\t\t\t\t\tclone = src && isArray(src) ? src : [];\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tclone = src && isPlainObject(src) ? src : {};\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\t// Never move original objects, clone them\n\t\t\t\t\t\ttarget[name] = extend(deep, clone, copy);\n\n\t\t\t\t\t// Don't bring in undefined values\n\t\t\t\t\t} else if (typeof copy !== 'undefined') {\n\t\t\t\t\t\ttarget[name] = copy;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\t// Return the modified object\n\treturn target;\n};\n\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./~/extend/index.js\n ** module id = 2\n ** module chunks = 0\n **/","var Promise = require('pinkyswear');\nvar extend = require('extend');\n\nvar JWTUtils = require('./JWTUtils');\n\nvar VALID_RESPONSE_CODES = [200, 201, 202, 204];\n\n/**\n * A wrapper around the XMLHttpRequest object.\n * @param {object}  options         Options for the request.\n * @param {boolean} options.async   Whether to perform the request asynchronously\n * @param {string}  options.method  REST verb to use for the request.\n * @param {string}  options.url     URL for the request.\n */\nvar Request = function (options) {\n\n  this.defaults = {\n    async: true,\n    method: 'GET',\n    ignoreAcceptHeader: false\n  };\n\n  // Create the XHR object for this request.\n  this.request = new XMLHttpRequest();\n\n  // Set up event listeners for this request.\n  this.setupListeners();\n\n  // Todo, merge some defaults with this.\n  this.options = extend(true, this.defaults, options);\n\n};\n\n/**\n * Send the request and return a promise to resolve when the request is complete.\n * @return {Promise} A promise which resolves when the request is complete.\n */\nRequest.prototype.send = function () {\n\n  this.promise = Promise();\n\n  // Make sure a url is passed before attempting to make the request.\n  if (this.options.url) {\n    // Make the actual request.\n    this.makeRequest();\n  } else {\n    this.requestError('Request Error : a url is required to make the request.');\n  }\n\n  return this.promise;\n\n};\n\n/**\n * Add event listeners to the XMLHttpRequest object.\n */\nRequest.prototype.setupListeners = function () {\n  this.request.onreadystatechange = this.readyStateChange.bind(this);\n};\n\n/**\n * Execute the open and send of the XMLHttpRequest\n */\nRequest.prototype.makeRequest = function () {\n\n  var postData = this.preparePostData(this.options.data);\n  var headers = this.options.headers;\n  var hasContentType = headers && headers.hasOwnProperty('Content-Type');\n\n  if (!postData.success) {\n    this.requestError('Request Error : error preparing post data.');\n    return;\n  }\n\n  this.request.open(this.options.method, this.options.url, this.options.async);\n\n  // Set before we apply the headers so it can be overridden on a per request basis.\n  if (!this.options.ignoreAcceptHeader) {\n    this.request.setRequestHeader('Accept', 'application/vnd.ingest.v1+json');\n  }\n\n  if (headers) {\n    this.applyRequestHeaders(headers);\n  }\n\n  // Make the token optional.\n  if (this.options.token) {\n\n    // If there is a token present ensure that it's still valid.\n    if (JWTUtils.isExpired(this.options.token)) {\n      this.requestError('Request Error : token is expired.');\n      return;\n    }\n\n    this.request.setRequestHeader('Authorization', this.options.token);\n\n  }\n\n  // Set the default content type when posting data.\n  if (postData.data && postData.type === 'JSON' && !hasContentType) {\n    this.request.setRequestHeader('Content-Type', 'application/vnd.ingest.v1+json');\n  }\n\n  // If there is data then we need to pass that along with the request.\n  if (postData.data) {\n    this.request.send(postData.data);\n  } else {\n    this.request.send();\n  }\n\n};\n\n/**\n * Stringify the post data if it is present.\n * @param  {object} data Object to be parsed.\n * @return {object}      Result object with the parsed string, and a success boolean flag.\n */\nRequest.prototype.preparePostData = function (data) {\n\n  var result = {\n    success: true,\n    data: data,\n    type: 'JSON'\n  };\n\n  // In the case of file uploads, all FormData to be passed to the request.\n  if (data instanceof FormData) {\n    result.type = 'FormData';\n    return result;\n  }\n\n  if (data instanceof Blob) {\n    result.type = 'File';\n    return result;\n  }\n\n  // If the data is populated, and its not already a string parse it.\n  if (data) {\n    try {\n      result.data = JSON.stringify(data);\n    } catch (error) {\n      result.success = false;\n      result.data = null;\n    }\n  }\n\n  return result;\n\n};\n\n/**\n * Apply any supplied headers to the request object.\n * @param  {object} headers Array of headers to apply to the request object.\n */\nRequest.prototype.applyRequestHeaders = function (headers) {\n\n  var key, i;\n  var keys = Object.keys(headers);\n  var keysLength = keys.length;\n\n  // Loop through and add the keys to the requestHeaders.\n  for (i = 0; i < keysLength; i++) {\n    key = keys[i];\n    this.request.setRequestHeader(key, headers[key]);\n  }\n\n};\n\n/**\n * Handle the completion of the request and fulfill the promise.\n * @param  {String} Response test of the request.\n */\nRequest.prototype.requestComplete = function (response) {\n\n  // Process the result.\n  this.response = this.processResponse(response);\n\n  // Either resolve or reject the promise.\n  this.promise(!this.response.data.error, [this.response]);\n\n};\n\n/**\n * Process the response and parse certain content types.\n * @param  {*}  response  Response data from request.\n * @return {*}            Processed response data.\n */\nRequest.prototype.processResponse = function (response) {\n  var responseType = this.request.getResponseHeader('Content-Type');\n  var result = response;\n\n  // Parse JSON if the result is JSON.\n  if (responseType && responseType.indexOf('json') !== -1) {\n    try {\n      result = JSON.parse(response);\n    } catch (error) {\n      result = {\n        error: 'JSON parsing failed. ' + error.stack\n      };\n    }\n  }\n\n  return {\n    data: result,\n    headers: this.request.getResponseHeader.bind(this.request),\n    statusCode: this.request.status\n  };\n\n};\n\n/**\n * Resolve the promise.\n * @param  {String} message   Error message.\n */\nRequest.prototype.requestError = function (message) {\n  // Reject the promise.\n  this.promise(false, [message]);\n};\n\n/**\n * Handle ready state change events.\n */\nRequest.prototype.readyStateChange = function () {\n\n  // Request is complete.\n  if (this.request.readyState === 4) {\n\n    // Check if the final response code is valid.\n    if (this.isValidResponseCode(this.request.status)) {\n      this.requestComplete(this.request.responseText);\n    } else {\n      this.requestError('Invalid response code.');\n    }\n\n  }\n\n};\n\n/**\n * Validate the current response code to see if the request was a success.\n * @param  {String}  responseCode Response Code.\n * @return {Boolean}              Should this be treated as a successful response code.\n */\nRequest.prototype.isValidResponseCode = function (responseCode) {\n\n  var result = false,\n    responseCodeCount = VALID_RESPONSE_CODES.length,\n    i;\n\n  // Check if the supplied code is in our list of valid codes.\n  for (i = 0; i < responseCodeCount; i++) {\n\n    if (responseCode === VALID_RESPONSE_CODES[i]) {\n      result = true;\n      break;\n    }\n\n  }\n\n  return result;\n\n};\n\n/**\n * Cancel the current XHR request.\n */\nRequest.prototype.cancel = function () {\n  // Remove the event listener.\n  this.request.onreadystatechange = null;\n  this.request.abort();\n  this.requestError('Request has been canceled.');\n};\n\nmodule.exports = Request;\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./src/Request.js\n ** module id = 3\n ** module chunks = 0\n **/","/*\n * PinkySwear.js 2.2.2 - Minimalistic implementation of the Promises/A+ spec\n * \n * Public Domain. Use, modify and distribute it any way you like. No attribution required.\n *\n * NO WARRANTY EXPRESSED OR IMPLIED. USE AT YOUR OWN RISK.\n *\n * PinkySwear is a very small implementation of the Promises/A+ specification. After compilation with the\n * Google Closure Compiler and gzipping it weighs less than 500 bytes. It is based on the implementation for \n * Minified.js and should be perfect for embedding. \n *\n *\n * PinkySwear has just three functions.\n *\n * To create a new promise in pending state, call pinkySwear():\n *         var promise = pinkySwear();\n *\n * The returned object has a Promises/A+ compatible then() implementation:\n *          promise.then(function(value) { alert(\"Success!\"); }, function(value) { alert(\"Failure!\"); });\n *\n *\n * The promise returned by pinkySwear() is a function. To fulfill the promise, call the function with true as first argument and\n * an optional array of values to pass to the then() handler. By putting more than one value in the array, you can pass more than one\n * value to the then() handlers. Here an example to fulfill a promsise, this time with only one argument: \n *         promise(true, [42]);\n *\n * When the promise has been rejected, call it with false. Again, there may be more than one argument for the then() handler:\n *         promise(true, [6, 6, 6]);\n *         \n * You can obtain the promise's current state by calling the function without arguments. It will be true if fulfilled,\n * false if rejected, and otherwise undefined.\n * \t\t   var state = promise(); \n * \n * https://github.com/timjansen/PinkySwear.js\n */\n(function(target) {\n\tvar undef;\n\n\tfunction isFunction(f) {\n\t\treturn typeof f == 'function';\n\t}\n\tfunction isObject(f) {\n\t\treturn typeof f == 'object';\n\t}\n\tfunction defer(callback) {\n\t\tif (typeof setImmediate != 'undefined')\n\t\t\tsetImmediate(callback);\n\t\telse if (typeof process != 'undefined' && process['nextTick'])\n\t\t\tprocess['nextTick'](callback);\n\t\telse\n\t\t\tsetTimeout(callback, 0);\n\t}\n\n\ttarget[0][target[1]] = function pinkySwear(extend) {\n\t\tvar state;           // undefined/null = pending, true = fulfilled, false = rejected\n\t\tvar values = [];     // an array of values as arguments for the then() handlers\n\t\tvar deferred = [];   // functions to call when set() is invoked\n\n\t\tvar set = function(newState, newValues) {\n\t\t\tif (state == null && newState != null) {\n\t\t\t\tstate = newState;\n\t\t\t\tvalues = newValues;\n\t\t\t\tif (deferred.length)\n\t\t\t\t\tdefer(function() {\n\t\t\t\t\t\tfor (var i = 0; i < deferred.length; i++)\n\t\t\t\t\t\t\tdeferred[i]();\n\t\t\t\t\t});\n\t\t\t}\n\t\t\treturn state;\n\t\t};\n\n\t\tset['then'] = function (onFulfilled, onRejected) {\n\t\t\tvar promise2 = pinkySwear(extend);\n\t\t\tvar callCallbacks = function() {\n\t    \t\ttry {\n\t    \t\t\tvar f = (state ? onFulfilled : onRejected);\n\t    \t\t\tif (isFunction(f)) {\n\t\t   \t\t\t\tfunction resolve(x) {\n\t\t\t\t\t\t    var then, cbCalled = 0;\n\t\t   \t\t\t\t\ttry {\n\t\t\t\t   \t\t\t\tif (x && (isObject(x) || isFunction(x)) && isFunction(then = x['then'])) {\n\t\t\t\t\t\t\t\t\t\tif (x === promise2)\n\t\t\t\t\t\t\t\t\t\t\tthrow new TypeError();\n\t\t\t\t\t\t\t\t\t\tthen['call'](x,\n\t\t\t\t\t\t\t\t\t\t\tfunction() { if (!cbCalled++) resolve.apply(undef,arguments); } ,\n\t\t\t\t\t\t\t\t\t\t\tfunction(value){ if (!cbCalled++) promise2(false,[value]);});\n\t\t\t\t   \t\t\t\t}\n\t\t\t\t   \t\t\t\telse\n\t\t\t\t   \t\t\t\t\tpromise2(true, arguments);\n\t\t   \t\t\t\t\t}\n\t\t   \t\t\t\t\tcatch(e) {\n\t\t   \t\t\t\t\t\tif (!cbCalled++)\n\t\t   \t\t\t\t\t\t\tpromise2(false, [e]);\n\t\t   \t\t\t\t\t}\n\t\t   \t\t\t\t}\n\t\t   \t\t\t\tresolve(f.apply(undef, values || []));\n\t\t   \t\t\t}\n\t\t   \t\t\telse\n\t\t   \t\t\t\tpromise2(state, values);\n\t\t\t\t}\n\t\t\t\tcatch (e) {\n\t\t\t\t\tpromise2(false, [e]);\n\t\t\t\t}\n\t\t\t};\n\t\t\tif (state != null)\n\t\t\t\tdefer(callCallbacks);\n\t\t\telse\n\t\t\t\tdeferred.push(callCallbacks);\n\t\t\treturn promise2;\n\t\t};\n        if(extend){\n            set = extend(set);\n        }\n\t\treturn set;\n\t};\n})(typeof module == 'undefined' ? [window, 'pinkySwear'] : [module, 'exports']);\n\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./~/pinkyswear/pinkyswear.js\n ** module id = 4\n ** module chunks = 0\n **/","module.exports = function(module) {\r\n\tif(!module.webpackPolyfill) {\r\n\t\tmodule.deprecate = function() {};\r\n\t\tmodule.paths = [];\r\n\t\t// module.parent = undefined by default\r\n\t\tmodule.children = [];\r\n\t\tmodule.webpackPolyfill = 1;\r\n\t}\r\n\treturn module;\r\n}\r\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** (webpack)/buildin/module.js\n ** module id = 5\n ** module chunks = 0\n **/","var nextTick = require('process/browser.js').nextTick;\nvar apply = Function.prototype.apply;\nvar slice = Array.prototype.slice;\nvar immediateIds = {};\nvar nextImmediateId = 0;\n\n// DOM APIs, for completeness\n\nexports.setTimeout = function() {\n  return new Timeout(apply.call(setTimeout, window, arguments), clearTimeout);\n};\nexports.setInterval = function() {\n  return new Timeout(apply.call(setInterval, window, arguments), clearInterval);\n};\nexports.clearTimeout =\nexports.clearInterval = function(timeout) { timeout.close(); };\n\nfunction Timeout(id, clearFn) {\n  this._id = id;\n  this._clearFn = clearFn;\n}\nTimeout.prototype.unref = Timeout.prototype.ref = function() {};\nTimeout.prototype.close = function() {\n  this._clearFn.call(window, this._id);\n};\n\n// Does not start the time, just sets up the members needed.\nexports.enroll = function(item, msecs) {\n  clearTimeout(item._idleTimeoutId);\n  item._idleTimeout = msecs;\n};\n\nexports.unenroll = function(item) {\n  clearTimeout(item._idleTimeoutId);\n  item._idleTimeout = -1;\n};\n\nexports._unrefActive = exports.active = function(item) {\n  clearTimeout(item._idleTimeoutId);\n\n  var msecs = item._idleTimeout;\n  if (msecs >= 0) {\n    item._idleTimeoutId = setTimeout(function onTimeout() {\n      if (item._onTimeout)\n        item._onTimeout();\n    }, msecs);\n  }\n};\n\n// That's not how node.js implements it but the exposed api is the same.\nexports.setImmediate = typeof setImmediate === \"function\" ? setImmediate : function(fn) {\n  var id = nextImmediateId++;\n  var args = arguments.length < 2 ? false : slice.call(arguments, 1);\n\n  immediateIds[id] = true;\n\n  nextTick(function onNextTick() {\n    if (immediateIds[id]) {\n      // fn.call() is faster so we optimize for the common use-case\n      // @see http://jsperf.com/call-apply-segu\n      if (args) {\n        fn.apply(null, args);\n      } else {\n        fn.call(null);\n      }\n      // Prevent ids from leaking\n      exports.clearImmediate(id);\n    }\n  });\n\n  return id;\n};\n\nexports.clearImmediate = typeof clearImmediate === \"function\" ? clearImmediate : function(id) {\n  delete immediateIds[id];\n};\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./~/timers-browserify/main.js\n ** module id = 6\n ** module chunks = 0\n **/","// shim for using process in browser\n\nvar process = module.exports = {};\nvar queue = [];\nvar draining = false;\nvar currentQueue;\nvar queueIndex = -1;\n\nfunction cleanUpNextTick() {\n    draining = false;\n    if (currentQueue.length) {\n        queue = currentQueue.concat(queue);\n    } else {\n        queueIndex = -1;\n    }\n    if (queue.length) {\n        drainQueue();\n    }\n}\n\nfunction drainQueue() {\n    if (draining) {\n        return;\n    }\n    var timeout = setTimeout(cleanUpNextTick);\n    draining = true;\n\n    var len = queue.length;\n    while(len) {\n        currentQueue = queue;\n        queue = [];\n        while (++queueIndex < len) {\n            if (currentQueue) {\n                currentQueue[queueIndex].run();\n            }\n        }\n        queueIndex = -1;\n        len = queue.length;\n    }\n    currentQueue = null;\n    draining = false;\n    clearTimeout(timeout);\n}\n\nprocess.nextTick = function (fun) {\n    var args = new Array(arguments.length - 1);\n    if (arguments.length > 1) {\n        for (var i = 1; i < arguments.length; i++) {\n            args[i - 1] = arguments[i];\n        }\n    }\n    queue.push(new Item(fun, args));\n    if (queue.length === 1 && !draining) {\n        setTimeout(drainQueue, 0);\n    }\n};\n\n// v8 likes predictible objects\nfunction Item(fun, array) {\n    this.fun = fun;\n    this.array = array;\n}\nItem.prototype.run = function () {\n    this.fun.apply(null, this.array);\n};\nprocess.title = 'browser';\nprocess.browser = true;\nprocess.env = {};\nprocess.argv = [];\nprocess.version = ''; // empty string to avoid regexp issues\nprocess.versions = {};\n\nfunction noop() {}\n\nprocess.on = noop;\nprocess.addListener = noop;\nprocess.once = noop;\nprocess.off = noop;\nprocess.removeListener = noop;\nprocess.removeAllListeners = noop;\nprocess.emit = noop;\n\nprocess.binding = function (name) {\n    throw new Error('process.binding is not supported');\n};\n\nprocess.cwd = function () { return '/' };\nprocess.chdir = function (dir) {\n    throw new Error('process.chdir is not supported');\n};\nprocess.umask = function() { return 0; };\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./~/process/browser.js\n ** module id = 7\n ** module chunks = 0\n **/","/**\n * UTILS for dealing with jwt tokens.\n */\n\n/**\n * Parse the payload out of the JWT token.\n * @param  {string} token JWT Token.\n * @return {object}       Parsed payload object.\n */\nvar parseTokenPayload = function (token) {\n  var parts = token.split('.');\n\n  // Return false if the token is invalid.\n  if (parts.length <= 1) {\n    return false;\n  }\n\n  // decode the payload portion.\n  var payload = window.atob(parts[1]);\n\n  // parse it as JSON\n  payload = JSON.parse(payload);\n\n  return payload;\n};\n\n/**\n * Return true if the provided token has expired.\n * @param  {string}  token JWT Token\n * @return {Boolean}       True if expired.\n */\nmodule.exports.isExpired = function (token) {\n  var data, exp, result, now;\n\n  data = parseTokenPayload(token);\n\n  result = true;\n\n  // Return true if the token does not parse properly.\n  if (!data) {\n    return result;\n  }\n\n  exp = data.exp;\n\n  // Get the unix timestamp in seconds.\n  now = new Date();\n  now = now.getTime() / 1000;\n\n  if (!exp) {\n    return result;\n  }\n\n  // If the expiry data is still in the future.\n  if (now < exp) {\n    result = false;\n  }\n\n  return result;\n\n};\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./src/JWTUtils.js\n ** module id = 8\n ** module chunks = 0\n **/","var Promise = require('pinkyswear');\nvar Utils = {};\n/**\n * Replace all tokens within a given template based on the given key/value pair.\n * @param  {string}     template    Template for the url.\n * @param  {object}     hash        Key/Value pair for replacing tokens in the template.\n *\n * @example\n * var tokens = {\n *  keyInTemplate: 'replacedWith'\n * };\n *\n * var template = '<%=keyInTemplate%>';\n *\n * var result = parseTokens(template, tokens);  // 'replacedWith'\n *\n * @return {string}                 Parsed string.\n */\nUtils.parseTokens = function (template, hash) {\n  if (!template) {\n    return null;\n  }\n\n  var keys = Object.keys(hash);\n  var i;\n  var length = keys.length;\n\n  for (i = 0; i < length; i++) {\n    template = template.replace('<%=' + keys[i] + '%>', hash[keys[i]]);\n  }\n\n  return template;\n};\n\n/**\n * Wrapper function to wrap a value in either a reject or resolve.\n * @param  {boolean} state Rejection or Approval.\n * @param  {*}       value Value to pass back to the promise.\n * @return {Promise}       Promise/A+ spec promise.\n */\nUtils.promisify = function (state, value) {\n  var promise = Promise();\n\n  promise(state, [value]);\n\n  return promise;\n};\n\n/**\n * Wrap an array of promises and return when they have all completed.\n * @param   {Array}     promises  An array of promises to manage.\n * @param   {boolean}   paused    A boolean to pause the execution of the promises.\n * @return  {Promise}             A promise that is resolved when all of the promises have fulfilled.\n */\nUtils.series = function (promises, paused) {\n\n  var promisesCount = promises.length;\n  var all = Promise();\n\n  var state = {\n    total: promisesCount,\n    complete: 0,\n    responses: [],\n    promises: promises,\n    paused: true\n  };\n\n  all.pause = Utils._seriesPause.bind(undefined, all, state);\n  all.resume = Utils._seriesResume.bind(undefined, all, state);\n  all.cancel = Utils._seriesCancel.bind(undefined, all, 'The Series has been canceled.');\n\n  if (!paused) {\n    state.paused = false;\n    Utils._seriesCallPromise(promises[0], state, all);\n  }\n\n  return all;\n\n};\n\n/**\n * Call a promise and pass the complete and error functions.\n * @param  {Promise} promise Promise to execute on.\n * @param  {Object} state   Persistent state of the series of promises.\n */\nUtils._seriesCallPromise = function (promise, state, all) {\n  // call the promise;\n  if (!state.paused) {\n    promise().then(Utils._seriesComplete.bind(undefined, all, state),\n      Utils._seriesError.bind(undefined, all, state));\n  }\n};\n\n/**\n * Manage the progress of the promises.\n * @private\n * @param  {Promise} all      All promise.\n * @param  {Object}  state    State object used to persist the promise count.\n * @param  {Object}  response Response of the promise being fulfilled.\n */\nUtils._seriesComplete = function (all, state, response) {\n\n  // Early return if this has been canceled.\n  if (state.canceled) {\n    return;\n  }\n\n  // Increment the complete promises.\n  state.complete++;\n  state.responses.push(response);\n\n  if (state.complete >= state.total) {\n    all(true, state.responses);\n  } else {\n    if (!state.paused) {\n      // Execute the next promise.\n      Utils._seriesCallPromise(state.promises[state.complete], state, all);\n    }\n  }\n\n};\n\n/**\n * Immediately reject the promise if there is an error.\n * @param  {Promise} all  All promise.\n * @param  {Object}  state    State object used to persist the promise count.\n * @param  {Object}  response Response of the promise being fulfilled.\n */\nUtils._seriesError = function (all, state, error) {\n  all(false, [error]);\n};\n\n/**\n * Pause the current series of promises.\n * @param  {Promise} all  All promise.\n * @param  {Object}  state    State object used to persist the promise count.\n */\nUtils._seriesPause = function (all, state) {\n  state.paused = true;\n};\n\n/**\n * Resume the current series of promises.\n * @param  {Promise} all  All promise.\n * @param  {Object}  state    State object used to persist the promise count.\n */\nUtils._seriesResume = function (all, state) {\n  state.paused = false;\n\n  if (state.complete !== state.total) {\n    Utils._seriesCallPromise(state.promises[state.complete], state, all);\n  }\n};\n\n/**\n * Resolve the promise but return an empty response.\n * @param  {Promise}  all     All promise.\n * @param  {Object}   state   State object used to persist the promise count.\n */\nUtils._seriesCancel = function (all, state) {\n  state.canceled = true;\n  all(true, []);\n};\n\nmodule.exports = Utils;\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./src/Utils.js\n ** module id = 9\n ** module chunks = 0\n **/","var extend = require('extend');\nvar Request = require('./Request');\nvar Promise = require('pinkyswear');\nvar utils = require('./Utils');\nvar JWTUtils = require('./JWTUtils');\n\n/**\n * Create a new upload wrapper.  Manages the entire upload of a file.\n * @class\n * @param   {object}  options                   Configuration options to override the defaults.\n * @param   {object}  options.api               A reference to the parent API instance.\n * @param   {object}  options.file              The file to upload.\n * @param   {object}  options.upload            REST endpoint for creating an input.\n * @param   {object}  options.sign              REST endpoint for signing a blob before upload.\n * @param   {object}  options.uploadComplete    REST endpoint to notify the API that the upload is complete.\n * @param   {object}  options.uploadAbort       REST endpoint to abort the upload.\n */\nfunction Upload (options) {\n\n  this.defaults = {\n    api: null,\n    file: null,\n    upload: '/encoding/inputs/<%=id%>/upload<%=method%>',\n    sign: '/encoding/inputs/<%=id%>/upload/sign<%=method%>',\n    uploadComplete: '/encoding/inputs/<%=id%>/upload/complete',\n    uploadAbort: '/encoding/inputs/<%=id%>/upload/abort<%=method%>',\n    uploadMethods: {\n      param: '?type=',\n      singlePart: 'amazon',\n      multiPart: 'amazonMP'\n    }\n  };\n\n  // Create a config object by extending the defaults with the pass options.\n  this.config = extend(true, {}, this.defaults, options);\n\n  this.api = this.config.api;\n  this.file = this.config.file;\n\n  this.chunks = [];\n  this.chunkSize = 0;\n  this.chunkCount = 0;\n  this.chunksComplete = 0;\n  this.uploadedBytes = 0;\n\n  this.aborted = false;\n  this.paused = false;\n  this.created = false;\n  this.initialized = false;\n\n  // Set to true when all the chunks are uploaded, but before the complete call is made.\n  this.uploadComplete = false;\n\n  this.fileRecord = {\n    filename: this.file.name,\n    type: this.file.type,\n    size: this.file.size,\n    method: this._checkMultipart(this.file)\n  };\n\n};\n\n/**\n * Register a function to execute when a chunk completes uploading.\n * @param  {Function} callback A callback to execute when progress is made.\n */\nUpload.prototype.progress = function (callback) {\n  this.config.progress = callback.bind(this);\n};\n\n/**\n * Create a new input record and upload the files to amazon.\n * @return  {Promise}         A promise which resolves when the new input record is created and uploaded.\n */\nUpload.prototype.save = function () {\n  return this._create(this.fileRecord)\n    .then(this._initialize.bind(this))\n    .then(this._prepareUpload.bind(this));\n};\n\n/**\n * Call the progress callback and pass the current progress percentage.\n * @private\n * @param  {number} message Current progress percentage.\n */\nUpload.prototype._updateProgress = function (percent, chunkSize) {\n\n  if (!this.config.progress) {\n    return;\n  }\n\n  this.config.progress.call(this, percent, chunkSize);\n};\n\n/**\n * Create a new input record.\n * @private\n * @param   {object}  record  A JSON object representing the input record to create.\n * @return  {Promise}         A promise which resolves when the new input record is created.\n */\nUpload.prototype._create = function (record) {\n\n  if (this.created) {\n    return utils.promisify(true, this.fileRecord.id);\n  }\n\n  if (this.aborted) {\n    return utils.promisify(false, 'upload aborted');\n  }\n\n  return this.api.inputs.add([record]).then(this._createSuccess.bind(this));\n};\n\n/**\n * Return the data object from the response.\n * @private\n * @param  {JSON}   response  JSON response containing the new input record id.\n * @return {string}           new input record id.\n */\nUpload.prototype._createSuccess = function (response) {\n\n  this.created = true;\n\n  this._updateProgress(0, 0);\n  this.fileRecord.id = response.data[0].id;\n\n  return this.fileRecord.id;\n};\n\n/**\n * Initializes an Input for upload\n * @private\n * @return {Promise} A promise which resolves when the request is complete.\n */\nUpload.prototype._initialize = function () {\n\n  var url;\n  var tokens;\n  var signing = '';\n  var request;\n\n  if (this.aborted) {\n    return utils.promisify(false, 'upload aborted');\n  }\n\n  if (!this.fileRecord.method) {\n    signing = this.config.uploadMethods.param + this.config.uploadMethods.singlePart;\n  }\n\n  tokens = {\n    id: this.fileRecord.id,\n    method: signing\n  };\n\n  url = utils.parseTokens(this.api.config.host + this.config.upload, tokens);\n\n  request = new Request({\n    url: url,\n    token: this.api.getToken(),\n    method: 'POST',\n    data: this.fileRecord\n  });\n\n  return request.send()\n          .then(this._initializeComplete.bind(this));\n\n};\n\n/**\n * Store the information returned from the initialize request.\n * @private\n */\nUpload.prototype._initializeComplete = function (response) {\n  this.initialized = true;\n  this.fileRecord.key = response.data.key;\n  this.fileRecord.uploadId = response.data.uploadId;\n  this.chunkSize = response.data.pieceSize;\n  this.chunkCount = response.data.pieceCount;\n};\n\n/**\n * Setup the upload depending on its type, single or multi part.\n * @return {Promise} A promise which resolves when all of the pieces have completed uploading.\n */\nUpload.prototype._prepareUpload = function () {\n  if (!this.fileRecord.method) {\n    // Singlepart.\n    return this._uploadFile()\n      .then(this._onCompleteUpload.bind(this));\n  } else {\n    // Multipart.\n    return this._createChunks()\n      .then(this._completeUpload.bind(this));\n  }\n};\n\n/**\n * Break a file into blobs and create a chunk object for each piece.\n * @private\n * @return {Promise} A promise which resolves when all of the pieces have completed uploading.\n */\nUpload.prototype._createChunks = function () {\n  var sliceMethod = this._getSliceMethod(this.file);\n  var i, blob, chunk, start, end,\n    chunkPromises = [];\n\n  if (this.aborted) {\n    this.abort();\n    return utils.promisify(false, 'upload aborted');\n  }\n\n  for (i = 0; i < this.chunkCount; i++) {\n\n    start = i * this.chunkSize;\n    // Choose the smaller value, so that we don't go over the filesize.\n    end = Math.min((i + 1) * this.chunkSize, this.fileRecord.size);\n\n    blob = this.file[sliceMethod](start, end);\n\n    chunk = {\n      partNumber: i + 1,\n      data: blob\n    };\n\n    this.chunks.push(chunk);\n\n    chunkPromises.push(this._uploadChunk.bind(this, chunk));\n\n  }\n\n  // Store a reference for pausing and resuming.\n  this.multiPartPromise = utils.series(chunkPromises, this.paused);\n\n  return this.multiPartPromise;\n};\n\n/**\n * Create a promise chain for each chunk to be uploaded.\n * @private\n * @return {Promise} A promise which resolves when the request is complete.\n */\nUpload.prototype._uploadChunk = function (chunk) {\n  var promise = Promise();\n\n  // Break the promise chain.\n  this._signUpload(chunk)\n    .then(this._sendUpload.bind(this, chunk))\n    .then(this._completeChunk.bind(this, chunk, promise));\n\n  return promise;\n};\n\n/**\n * Create a promise chain for a single part file upload.\n * @param  {file}   file    A file reference to upload.\n * @return {Promise} A promise which resolves when the request is complete.\n */\nUpload.prototype._uploadFile = function () {\n  var chunk = {\n    data: this.file\n  };\n\n  // Create a new promise if one doesn't exist.\n  if (!this.singlePartPromise) {\n    this.singlePartPromise = Promise();\n  }\n\n  // Broken off the chain, this will allow us to cancel single part uploads without breaking the\n  // initial chain.\n  this._signUpload(chunk)\n    .then(this._sendUpload.bind(this, chunk))\n    .then(this._sendSinglepartComplete.bind(this))\n    .then(this._updateProgress.bind(this, 100, this.fileRecord.size))\n    .then(this._uploadFileComplete.bind(this));\n\n  return this.singlePartPromise;\n};\n\n/**\n *  Resolve the single part upload promise;\n */\nUpload.prototype._uploadFileComplete = function () {\n  this.singlePartPromise(true, []);\n};\n\n/**\n * Make a request and sign the chunk to be uploaded.\n * @private\n * @param  {object}   chunk           Information about the chunk to be uploaded.\n * @return {Promise}                  A promise which resolves when the request is complete.\n */\nUpload.prototype._signUpload = function (chunk) {\n  var url;\n  var signing = '';\n  var headers = {};\n  var request;\n\n  // Set the part number for the current chunk.\n  if (chunk.partNumber) {\n    this.fileRecord.partNumber = chunk.partNumber;\n  }\n\n  headers['Content-Type'] = 'multipart/form-data';\n\n  if (!this.fileRecord.method) {\n    signing = this.config.uploadMethods.param + this.config.uploadMethods.singlePart;\n  }\n\n  url = utils.parseTokens(this.api.config.host + this.config.sign, {\n    id: this.fileRecord.id,\n    method: signing\n  });\n\n  request = new Request({\n    url: url,\n    token: this.api.getToken(),\n    method: 'POST',\n    headers: headers,\n    data: this.fileRecord\n  });\n\n  return request.send();\n};\n\n/**\n * Send the upload to the server.\n * @private\n * @param   {object} upload  An object representing the upload to send to the server.\n * @return  {Promise}       A promise which resolves when the request is complete.\n */\nUpload.prototype._sendUpload = function (upload, response) {\n  var headers = {};\n  var request;\n\n  // Set the proper headers to send with the file.\n  headers['Content-Type'] = 'multipart/form-data';\n  headers.authorization = response.data.authHeader;\n  headers['x-amz-date'] = response.data.dateHeader;\n\n  request = new Request({\n    url: response.data.url,\n    method: 'PUT',\n    headers: headers,\n    data: upload.data,\n    ignoreAcceptHeader: true\n  });\n\n  this.requestPromise = request;\n\n  return request.send();\n};\n\n/**\n * Update the upload bytes value when a single part file is uploaded.\n */\nUpload.prototype._sendSinglepartComplete = function () {\n  this.uploadComplete = true;\n  this.uploadedBytes = this.fileRecord.size;\n};\n\n/**\n *  Executed when a chunk is finished uploading.\n *  @private\n *  @param {object}   chunk   The current chunk that was uploaded.\n *  @param {Promise}  promise The promise to resolve when the chunk is complete.\n */\nUpload.prototype._completeChunk = function (chunk, promise) {\n  var progress;\n\n  this.chunksComplete++;\n  chunk.complete = true;\n\n  this.uploadedBytes += chunk.data.size;\n\n  // Upload is complete.\n  if (this.chunksComplete === this.chunkCount) {\n    this.uploadComplete = true;\n  }\n\n  progress = this.uploadedBytes / this.fileRecord.size;\n  // 0 - 99 for actual upload progress, 1% for the complete call.\n  progress = progress * 99;\n  progress = Math.round(progress);\n\n  this._updateProgress(progress, chunk.data.size);\n\n  // Resolve the promise.\n  promise(true, []);\n};\n\n/**\n * Notify the server that the upload is complete.\n *\n * @private\n * @return  {Promise} A promise which resolves when the request is complete.\n */\nUpload.prototype._completeUpload = function () {\n  var url;\n  var tokens;\n  var request;\n\n  // Early return so we don't process any of the complete information on an aborted upload.\n  if (this.aborted) {\n    return utils.promisify(false, 'Upload Aborted.');\n  }\n\n  tokens = {\n    id: this.fileRecord.id\n  };\n\n  url = utils.parseTokens(this.api.config.host + this.config.uploadComplete, tokens);\n\n  request = new Request({\n    url: url,\n    token: this.api.getToken(),\n    method: 'POST',\n    data: this.fileRecord\n  });\n\n  return request.send()\n          .then(this._onCompleteUpload.bind(this));\n};\n\n/**\n * Return the id for the current file record.\n * @private\n * @return {string} ID for the input record that was created.\n */\nUpload.prototype._onCompleteUpload = function () {\n  // Send the final progress update once the upload is actually complete.\n  this._updateProgress(100);\n\n  this.uploadComplete = true;\n  this.multiPartPromise = null;\n  this.requestPromise = null;\n  this.singlePartPromise = null;\n  return this.fileRecord.id;\n};\n\n/**\n * Aborts an input upload\n *\n * @param {boolean} async A flag to indicate whether or not the request to delete the input should be async.\n *\n * @return {Promise} A promise which resolves when the request is complete.\n */\nUpload.prototype.abort = function (async) {\n  var url;\n  var tokens;\n  var request;\n\n  if (typeof async === 'undefined') {\n    async = true;\n  }\n\n  this.aborted = true;\n\n  // If initialize hasn't been called yet there is no need to abort the upload as it doesn't\n  // exist yet.\n  if (!this.initialized) {\n\n    if (this.created) {\n      // If the input has been created simply return early with a\n      // promise to delete the created input record.\n      return this.api.inputs.delete(this.fileRecord.id, async);\n    } else {\n      // Resolve as a successful promise. This case would be fulfilled when an upload\n      // has been created but save() hasn't yet been called.\n      return utils.promisify(true);\n    }\n\n  }\n\n  // Cancel the current request.\n  if (this.requestPromise) {\n    this.requestPromise.cancel();\n    this.requestPromise = null;\n  }\n\n  if (this.singlePartPromise) {\n    this.singelPartPromise = null;\n    // return here because there is no need to abort a single part upload.\n    return this._abortComplete(async);\n  }\n\n  this.multiPartPromise.cancel();\n  this.multiPartPromise = null;\n\n  tokens = {\n    id: this.fileRecord.id,\n    method: ''\n  };\n\n  url = utils.parseTokens(this.api.config.host + this.config.uploadAbort, tokens);\n\n  request = new Request({\n    url: url,\n    async: async,\n    token: this.api.getToken(),\n    method: 'POST',\n    data: this.fileRecord\n  });\n\n  return request.send()\n          .then(this._abortComplete.bind(this, async));\n};\n\n/**\n * Delete the input that was created.\n * @private\n * @return {Promise} A promise which resolves when the request is complete.\n */\nUpload.prototype._abortComplete = function (async) {\n  return this.api.inputs.delete(this.fileRecord.id, async);\n};\n\n/**\n * Pause the current upload.\n */\nUpload.prototype.pause = function () {\n  // Return early if the upload portion is complete.\n  // The work is done by now so we might as well fire the\n  // complete call.\n  if (this.uploadComplete) {\n    return;\n  }\n\n  this.paused = true;\n\n  // Is there an upload\n  if (this.multiPartPromise) {\n\n    // Pause the series if its a multipart upload.\n    this.multiPartPromise.pause();\n\n    // Cancel the http request for this chunk.\n    this.requestPromise.cancel();\n\n  } else if (this.requestPromise) {\n    // Abort the upload if its a singlepart upload.\n    this.requestPromise.cancel();\n  }\n\n};\n\n/**\n * Resume the current upload.\n */\nUpload.prototype.resume = function () {\n  this.paused = false;\n\n  // resume the series if its multi part.\n  if (this.multiPartPromise) {\n    // resume the series if its multipart.\n    this.multiPartPromise.resume();\n  } else if (this.requestPromise) {\n    // Restart the file upload.\n    this._uploadFile();\n  }\n\n};\n\n/**\n * Check the file size to determine if it should be a multipart upload, returns false for singlepart uploads.\n * @private\n * @param  {file}   file  The file to evaluate.\n * @return {boolean}      True if the file will be uploading using mutlipart upload.\n */\nUpload.prototype._checkMultipart = function (file) {\n  if (!file) {\n    return;\n  }\n\n  return (file.size <= (5 * 1024 * 1024) ? false : true);\n};\n\n/**\n * Function that determines the slice method to be used\n * @private\n * @param {object} file - The file object you wish to determine the slice method for\n * @return {string} sliceMethod - The slice method to use.\n */\nUpload.prototype._getSliceMethod = function (file) {\n  var sliceMethod;\n\n  if ('mozSlice' in file) {\n    sliceMethod = 'mozSlice';\n  } else if ('webkitSlice' in file) {\n    sliceMethod = 'webkitSlice';\n  } else {\n    sliceMethod = 'slice';\n  }\n\n  return sliceMethod;\n};\n\nmodule.exports = Upload;\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./src/Uploader.js\n ** module id = 10\n ** module chunks = 0\n **/","/**\n * A management layer for storing app cache in local storage.\n */\nvar Cache = function (cacheAge) {\n  this.cacheAge = cacheAge;\n  this.enabled = this._checkCacheSupport();\n};\n\n/**\n * Return true if localStorage is supported.\n * @private\n * @return {boolean} True if localStorage is supported.\n */\nCache.prototype._checkCacheSupport = function () {\n\n  var support = 'support';\n\n  try {\n    window.localStorage.setItem(support, support);\n    window.localStorage.removeItem(support);\n    return true;\n  } catch (e) {\n    return false;\n  }\n\n};\n\n/**\n * Retrieve the cached result for the provided cacheKey.\n * @param  {string}   cacheKey  Key associated with the cached result.\n * @return {object}             Parse results object.\n */\nCache.prototype.retrieve = function (cacheKey) {\n  var data;\n  var value = null;\n  var expiry;\n\n  try {\n\n    data = window.localStorage.getItem(cacheKey);\n    data = JSON.parse(data);\n\n    if (!data) {\n      return value;\n    }\n\n    value = data.value;\n\n    if (data.expiry < Date.now()) {\n      // Cache is expired;\n      window.localStorage.removeItem(cacheKey);\n      value = null;\n    }\n\n  } catch (error) {\n    // Silent capture so that caching never gets in the way of returning a result.\n    value = null;\n  }\n\n  return value;\n};\n\n/**\n * Remove a result from the cache.\n * @param  {string}   cacheKey  Key associated with the cached result.\n * @return {boolean}            A boolean indicating success of the removal.\n */\nCache.prototype.remove = function (cacheKey) {\n  var result = true;\n\n  try {\n    window.localStorage.removeItem(cacheKey);\n  } catch (error) {\n    // Silent capture so that caching never gets in the way of returning a result.\n    result = false;\n  }\n\n  return result;\n};\n\n/**\n * Save the new result with its expiry date.\n * @param  {string}   cacheKey Unique cache key for the request.\n * @param  {number}   expiry   Unix timestamp for the expiry.\n * @param  {object}   result   Object to be cached.\n * @return {boolean}            A boolean indicating success of the save.\n */\nCache.prototype.save = function (cacheKey, value) {\n  var result = true;\n  var data = {};\n  var JSONResult;\n\n  try {\n\n    data.expiry = Date.now() + this.cacheAge;\n    data.value = value;\n\n    JSONResult = JSON.stringify(data);\n\n    window.localStorage.setItem(cacheKey, JSONResult);\n\n  } catch (error) {\n    // Silent capture so that caching never gets in the way of returning a result.\n    result = false;\n  }\n\n  return result;\n};\n\n/**\n * Return an object representing the differences between the provided object and the cached object.\n * @example\n * //'cachedObject' = {id: '12345'};\n * cache.diff('cachedObject', {title: 'test'});\n * // returns {title: 'test'}\n * @example\n * //'cachedObject' = {id: '12345', title: 'test'};\n * cache.diff('cachedObject', {title: 'test2'});\n * // returns {title: 'test2'}\n *\n * @param  {string} cacheKey  Cachekey of the object to compare against.\n * @param  {object} item      Object to compare against the cached object.\n * @param  {array}  forced    An array of properties to be returned in the resulting object regardless of difference.\n * @return {object}           An object containing the differences.\n */\nCache.prototype.diff = function (cacheKey, item, forced) {\n  var property, properties, propertiesLength, i;\n  var force, forcedLength, n;\n  var original = this.retrieve(cacheKey);\n  var diff = null;\n\n  if (forced) {\n    forcedLength = forced.length;\n  }\n\n  properties = Object.keys(item);\n  propertiesLength = properties.length;\n\n  if (!original) {\n    // return the compare object if the original item wasn't found.\n    return item;\n  }\n\n  // Walk the object and compare the properties.\n  for (i = 0; i < propertiesLength; i++) {\n    property = properties[i];\n\n    // Check the values if both objects have the property.\n    if (original.hasOwnProperty(property)) {\n      if (item[property] === original[property]) {\n        // If the values are the same we don't need to add it to the diff so continue.\n        continue;\n      }\n    }\n\n    // If the diff item is still null we need to create a new object to store the properties in.\n    if (!diff) {\n      diff = {};\n    }\n\n    // If we've made it this far the property is either a new one, or the item doesn't match.\n    diff[property] = item[property];\n\n  }\n\n  // As long as changes were found append the forced properties.\n  if (diff) {\n    for (n = 0; n < forcedLength; n++) {\n      property = forced[n];\n      diff[property] = item[property];\n    }\n  }\n\n  return diff;\n\n};\n\n/**\n * Return an object representing the differences between the provided objects and the cached object.\n * Similar to diff, but accepts an array of objects.\n *\n * @param  {string} cacheKey  Property on the provided objects that represents the cache key.\n * @param  {object} item      Object to compare against the cached object.\n * @param  {array}  forced    An array of properties to be returned in the resulting object regardless of difference.\n * @return {object}           An object containing the differences.\n */\nCache.prototype.diffArray = function (cacheKey, items, forced) {\n\n  var i;\n  var itemsLength = items.length;\n  var item;\n  var result = null;\n  var results = [];\n\n  for (i = 0; i < itemsLength; i++) {\n    item = items[i];\n\n    result = this.diff(item[cacheKey], item, forced);\n\n    // Only add it to the result set if changes were found.\n    if (result !== null) {\n      results.push(result);\n    }\n\n  }\n\n  return results;\n\n};\n\nmodule.exports = Cache;\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./src/Cache.js\n ** module id = 11\n ** module chunks = 0\n **/","var extend = require('extend');\nvar Request = require('../Request');\nvar utils = require('../Utils');\n\n/**\n * Resource Object\n * @class\n */\nfunction Resource (options) {\n\n  this.defaults = {\n    host: 'https://api.ingest.io',\n    all: '/<%=resource%>',\n    byId: '/<%=resource%>/<%=id%>',\n    thumbnails: '/<%=resource%>/<%=id%>/thumbnails',\n    trash: '/<%=resource%>?filter=trashed',\n    deleteMethods: {\n      'permanent': '?permanent=1'\n    },\n    search: '/<%=resource%>?search=<%=input%>',\n    tokenSource: null,\n    resource: null\n  };\n\n  this.config = extend(true, {}, this.defaults, options);\n\n  this.cache = this.config.cache;\n\n}\n\n/**\n * Proxy the request to token source to ensure a value is always returned.\n * @private\n * @return {string} Auth token.\n */\nResource.prototype._tokenSource = function () {\n  var result = null;\n\n  if (this.config.tokenSource) {\n    result = this.config.tokenSource.call();\n  }\n\n  return result;\n};\n\n/**\n * Return a list of the requested resource for the current user and network.\n * @param  {object}   headers   Object representing headers to apply to the request.\n * @return {promise}            A promise which resolves when the request is complete.\n */\nResource.prototype.getAll = function (headers) {\n  var request;\n  var url = utils.parseTokens(this.config.host + this.config.all, {\n    resource: this.config.resource\n  });\n\n  request = new Request({\n    url: url,\n    token: this._tokenSource(),\n    headers: headers\n  });\n\n  return request.send()\n          .then(this._updateCachedResources.bind(this));\n};\n\n/**\n * Return a resource that matches the supplied id.\n * @param  {string}   id    Resource id.\n * @return {promise}        A promise which resolves when the request is complete.\n */\nResource.prototype.getById = function (id) {\n  var url, cachedResult, request;\n\n  if (typeof id !== 'string') {\n    return utils.promisify(false,\n      'IngestAPI Resource getById requires a valid id passed as a string.');\n  }\n\n  url = utils.parseTokens(this.config.host + this.config.byId, {\n    resource: this.config.resource,\n    id: id\n  });\n\n  if (this.cache && this.cache.enabled) {\n    // retrieve the cached item.\n    cachedResult = this.cache.retrieve(id);\n  }\n\n  // Return a cached result if we've found one.\n  if (cachedResult) {\n    return utils.promisify(true, {\n      data: cachedResult\n    });\n  } else {\n\n    request = new Request({\n      url: url,\n      token: this._tokenSource()\n    });\n\n    return request.send();\n\n  }\n};\n\n/**\n * Return the resources currently in the trash.\n * @param  {object} headers Headers to be passed along with the request for pagination.\n * @return {promise}         A promise which resolves when the request is complete.\n */\nResource.prototype.getTrashed = function (headers) {\n  var request;\n  var url = utils.parseTokens(this.config.host + this.config.trash, {\n    resource: this.config.resource\n  });\n\n  request = new Request({\n    url: url,\n    token: this._tokenSource(),\n    headers: headers\n  });\n\n  return request.send();\n};\n\n/**\n * Retrieve all thumbnails for a provided resource id.\n * @param {string} id ID of the resource to retrieve thumbnails for.\n * @return {promise}  A promise which resolves when the request is complete.\n */\nResource.prototype.getThumbnails = function (id) {\n  var url, request;\n\n  if (typeof id !== 'string') {\n    return utils.promisify(false,\n      'IngestAPI Resource getThumbnails requires an id to be passed as a string.');\n  }\n\n  url = utils.parseTokens(this.config.host + this.config.thumbnails, {\n    resource: this.config.resource,\n    id: id\n  });\n\n  request = new Request({\n    url: url,\n    token: this._tokenSource()\n  });\n\n  return request.send();\n};\n\n/**\n * Add a new resource.\n * @param   {object}  resource  An object representing the resource to add.\n * @return  {promise}           A promise which resolves when the request is complete.\n */\nResource.prototype.add = function (resource) {\n  var url, request;\n\n  if (typeof resource !== 'object') {\n    return utils.promisify(false,\n      'IngestAPI Resource add requires a resource passed as an object.');\n  }\n\n  url = utils.parseTokens(this.config.host + this.config.all, {\n    resource: this.config.resource\n  });\n\n  request = new Request({\n    url: url,\n    token: this._tokenSource(),\n    method: 'POST',\n    data: resource\n  });\n\n  return request.send()\n          .then(this._updateCachedResource.bind(this));\n};\n\n/**\n * Update an existing resource with new content.\n * @param  {object|array} resource  An object or an array of objects representing the resource(s) to be updated.\n * @return {promise}                A promise which resolves when the request is complete.\n */\nResource.prototype.update = function (resource) {\n  if (typeof resource !== 'object') {\n    return utils.promisify(false,\n      'IngestAPI Resource update requires a resource to be passed either as an object or an array of objects.'); //eslint-disable-line\n  }\n\n  // If they've passed an array fire the updateArray function.\n  if (Array.isArray(resource)) {\n    return this._updateResourceArray(resource);\n  } else {\n    return this._updateResource(resource);\n  }\n};\n\n/**\n * Update a single resource.\n * @private\n * @param  {object}   resource  An object representing the resource to update.\n * @return {promise}            A promise which resolves when the request is complete.\n */\nResource.prototype._updateResource = function (resource) {\n  var request;\n  var data = resource;\n\n  var url = utils.parseTokens(this.config.host + this.config.byId, {\n    resource: this.config.resource,\n    id: resource.id\n  });\n\n  if (this.cache && this.cache.enabled) {\n    data = this.cache.diff(resource.id, resource);\n  }\n\n  // Null is returned in the case that the two objects match.\n  if (!data) {\n    // Return a fulfilled promise with the cached object.\n    return utils.promisify(true, {\n      data: this.cache.retrieve(resource.id)\n    });\n  }\n\n  request = new Request({\n    url: url,\n    token: this._tokenSource(),\n    method: 'PATCH',\n    data: data\n  });\n\n  return request.send()\n          .then(this._updateCachedResource.bind(this));\n};\n\n/**\n * Update an array of resources.\n * @private\n * @param  {array} resources  An array of resource objects to be updated.\n * @return {promise}          A promise which resolves when the request is complete.\n */\nResource.prototype._updateResourceArray = function (resources) {\n  var request;\n  var url = utils.parseTokens(this.config.host + this.config.all, {\n    resource: this.config.resource\n  });\n\n  request = new Request({\n    url: url,\n    token: this._tokenSource(),\n    method: 'PATCH',\n    data: resources\n  });\n\n  return request.send()\n          .then(this._updateCachedResources.bind(this));\n};\n\n/**\n * Delete an existing resource\n * @param  {object | array} resource The id, or an array of ids for the resource(s) to be deleted.\n * @param {boolean}   async       A flag to indicate if this should be an async request to delete.\n * @return {promise}          A promise which resolves when the request is complete.\n */\nResource.prototype.delete = function (resource, async) {\n  if (typeof async === 'undefined') {\n    async = true;\n  }\n\n  if (typeof resource !== 'string') {\n    // If they've passed an array fire the updateArray function.\n    if (Array.isArray(resource)) {\n      return this._deleteResourceArray(resource, false, async);\n    }\n\n    return utils.promisify(false,\n      'IngestAPI Resource delete requires a resource to be passed either as a string or an array of strings.'); //eslint-disable-line\n  }\n\n  return this._deleteResource(resource, false, async);\n};\n\n/**\n * Permanently delete an existing resource.\n * @param  {object | array} resource The id, or an array of ids for the resource(s) to be deleted.\n * @param {boolean}   async       A flag to indicate if this should be an async request to delete.\n * @return {promise}          A promise which resolves when the request is complete.\n */\nResource.prototype.permanentDelete = function (resource, async) {\n  if (typeof async === 'undefined') {\n    async = true;\n  }\n\n  if (typeof resource !== 'string') {\n    // If they've passed an array fire the updateArray function.\n    if (Array.isArray(resource)) {\n      return this._deleteResourceArray(resource, true, async);\n    }\n\n    return utils.promisify(false,\n      'IngestAPI Resource delete requires a resource to be passed either as a string or an array of strings.'); //eslint-disable-line\n  }\n\n  return this._deleteResource(resource, true, async);\n};\n\n/**\n * Delete a single resource\n * @private\n * @param  {object}   resource  The id of the resource to be deleted.\n * @param {boolean}   permanent  A flag to permanently delete each video.\n * @param {boolean}   async       A flag to indicate if this should be an async request to delete.\n * @return {promise}            A promise which resolves when the request is complete.\n */\nResource.prototype._deleteResource = function (resource, permanent, async) {\n  var request;\n  var url = utils.parseTokens(this.config.host + this.config.byId, {\n    resource: this.config.resource,\n    id: resource\n  });\n\n  if (permanent === true) {\n    url += this.config.deleteMethods.permanent;\n  }\n\n  request = new Request({\n    url: url,\n    async: async,\n    token: this._tokenSource(),\n    method: 'DELETE',\n  });\n\n  return request.send()\n          .then(this._deleteCachedResource.bind(this, resource));\n};\n\n/**\n * Delete an array of resources\n * @private\n * @param  {array}  resources   An array of resource objects to be deleted.\n * @param {boolean}  permanent  A flag to permanently delete each video.\n * @return {promise}            A promise which resolves when the request is complete.\n */\nResource.prototype._deleteResourceArray = function (resources, permanent) {\n  var request;\n  var url = utils.parseTokens(this.config.host + this.config.all, {\n    resource: this.config.resource\n  });\n\n  if (permanent === true) {\n    url += this.config.deleteMethods.permanent;\n  }\n\n  request = new Request({\n    url: url,\n    token: this._tokenSource(),\n    method: 'DELETE',\n    data: resources\n  });\n\n  return request.send()\n          .then(this._deleteCachedResources.bind(this, resources));\n};\n\n/**\n * Return a subset of items that match the search terms.\n * @param  {string} input    The search terms to match against.\n * @param  {object} headers  The headers to be passed to the request.\n * @return {Promise}          A promise which resolves when the request is complete.\n */\nResource.prototype.search = function (input, headers) {\n  var url, request;\n\n  if (typeof input !== 'string') {\n    return utils.promisify(false,\n      'IngestAPI Resource search requires search input to be passed as a string.');\n  }\n\n  url = utils.parseTokens(this.config.host + this.config.search, {\n    resource: this.config.resource,\n    input: input\n  });\n\n  request = new Request({\n    url: url,\n    token: this._tokenSource(),\n    headers: headers\n  });\n\n  return request.send();\n};\n\n/**\n * Get the total count of resources.\n * @return {promise} A promise which resolves when the request is complete.\n */\nResource.prototype.count = function () {\n  var request;\n  var url = utils.parseTokens(this.config.host + this.config.all, {\n    resource: this.config.resource\n  });\n\n  request = new Request({\n    url: url,\n    token: this._tokenSource(),\n    method: 'HEAD'\n  });\n\n  return request.send()\n          .then(this._handleCountResponse);\n};\n\n/**\n * Get the total count of resources in the trash.\n * @return {promise} A promise which resolves when the request is complete.\n */\nResource.prototype.trashCount = function () {\n  var request;\n  var url = utils.parseTokens(this.config.host + this.config.trash, {\n    resource: this.config.resource\n  });\n\n  request = new Request({\n    url: url,\n    token: this._tokenSource(),\n    method: 'HEAD'\n  });\n\n  return request.send()\n          .then(this._handleCountResponse);\n};\n\n/**\n * Return the resource count from the response.\n * @private\n * @param  {object} response Request response object.\n * @return {number}          The resource count.\n */\nResource.prototype._handleCountResponse = function (response) {\n  return parseInt(response.headers('Resource-Count'), 10);\n};\n\n/**\n * Update a single cached resource based on the response data.\n * @param  {object}   response   Response object from the getAll request.\n * @return {response}            Response object from the getAll request.\n */\nResource.prototype._updateCachedResource = function (response) {\n  if (this.cache && this.cache.enabled) {\n    this.cache.save(response.data.id, response.data);\n  }\n\n  return response;\n};\n\n/**\n * Store the returned items in cache.\n * @param  {object}   response   Response object from the getAll request.\n * @return {response}            Response object from the getAll request.\n */\nResource.prototype._updateCachedResources = function (response) {\n  var data = response.data;\n  var dataLength = data.length;\n  var i;\n\n  if (this.cache && this.cache.enabled) {\n\n    for (i = 0; i < dataLength; i++) {\n      this.cache.save(data[i].id, data[i]);\n    }\n\n  }\n\n  return response;\n};\n\n/**\n * Delete a single cached resource.\n * @param  {string} id            ID of the resource to remove.\n * @param  {object}   response    Response object from the getAll request.\n * @return {response}             Response object from the getAll request.\n */\nResource.prototype._deleteCachedResource = function (id, response) {\n  if (this.cache && this.cache.enabled) {\n    this.cache.remove(id);\n  }\n\n  return response;\n};\n\n/**\n * Delete an array of cached resources\n * @param  {array}    ids         Array of resource id's to delete from cache.\n * @param  {object}   response    Response object from the getAll request.\n * @return {response}             Response object from the getAll request.\n */\nResource.prototype._deleteCachedResources = function (ids, response) {\n  var dataLength = ids.length;\n  var i;\n\n  if (this.cache && this.cache.enabled) {\n\n    for (i = 0; i < dataLength; i++) {\n      this.cache.remove(ids[i]);\n    }\n\n  }\n\n  return response;\n};\n\nmodule.exports = Resource;\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./src/resources/Resource.js\n ** module id = 12\n ** module chunks = 0\n **/","var Resource = require('./Resource');\nvar Request = require('../Request');\nvar utils = require('../Utils');\nvar extend = require('extend');\n\nfunction Users (options) {\n\n  var overrides = {\n    currentUser: '/users/me',\n    transfer: '/users/<%=oldId%>/transfer/<%=newId%>',\n    revoke: '/revoke'\n  };\n\n  options = extend(true, {}, overrides, options);\n\n  Resource.call(this, options);\n\n};\n\n// This extends the base class of 'Resource'.\nUsers.prototype = Object.create(Resource.prototype);\nUsers.prototype.constructor = Users;\n\n/**\n * Retrieve information for the current user.\n *\n * @return {Promise} A promise which resolves when the request is complete.\n */\nUsers.prototype.getCurrentUserInfo = function () {\n  var request = new Request({\n    url: this.config.host + this.config.currentUser,\n    token: this._tokenSource()\n  });\n\n  return request.send();\n};\n\n/**\n * Transfer all authorship currently under the specified user onto another.\n * This includes all videos & playlists.\n * This task is commonly used in conjunction with permanently deleting a user.\n *\n * @param {string} oldId - The user who currently has authorship.\n * @param {string} newId - The user to transfer authorship to.\n *\n * @return {Promise} A promise which resolves when the request is complete.\n */\nUsers.prototype.transferUserAuthorship = function (oldId, newId) {\n  var tokens, url, request;\n\n  if (typeof oldId !== 'string') {\n    return utils.promisify(false,\n      'IngestAPI transferUserAuthorship requires \"oldId\" to be passed as a string.');\n  }\n\n  if (typeof newId !== 'string') {\n    return utils.promisify(false,\n      'IngestAPI transferUserAuthorship requires \"newId\" to be passed as a string');\n  }\n\n  tokens = {\n    oldId: oldId,\n    newId: newId\n  };\n\n  url = utils.parseTokens(this.config.host + this.config.transfer, tokens);\n\n  request = new Request({\n    url: url,\n    token: this._tokenSource(),\n    method: 'PATCH'\n  });\n\n  return request.send();\n};\n\n/**\n * Revokes the authorization token for the current user.\n *\n * @return {Promise} A promise which resolves when the request is complete.\n */\nUsers.prototype.revokeCurrentUser = function () {\n  var request = new Request({\n    url: this.config.host + this.config.currentUser + this.config.revoke,\n    token: this._tokenSource(),\n    method: 'DELETE'\n  });\n\n  return request.send();\n};\n\nmodule.exports = Users;\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./src/resources/Users.js\n ** module id = 13\n ** module chunks = 0\n **/","var Resource = require('./Resource');\nvar Request = require('../Request');\nvar utils = require('../Utils');\nvar extend = require('extend');\n\nfunction Networks (options) {\n\n  var overrides = {\n    invite: '/networks/invite'\n  };\n\n  options = extend(true, {}, overrides, options);\n\n  Resource.call(this, options);\n\n};\n\n// This extends the base class of 'Resource'.\nNetworks.prototype = Object.create(Resource.prototype);\nNetworks.prototype.constructor = Networks;\n\n/**\n * Link an existing user to the currently authorized network.\n *\n * @param {string} id - The unique ID of the user to link.\n *\n * @return {Promise} A promise which resolves when the request is complete.\n */\nNetworks.prototype.linkUser = function (id) {\n  var data, request;\n\n  if (typeof id !== 'string') {\n    return utils.promisify(false,\n      'IngestAPI linkUser requires \"id\" to be passed as a string.');\n  }\n\n  data = {\n    user_id: id\n  };\n\n  request = new Request({\n    url: this.config.host + '/' + this.config.resource,\n    data: data,\n    token: this._tokenSource(),\n    method: 'LINK'\n  });\n\n  return request.send();\n};\n\n/**\n * Remove the specified user from the currently authorized network.\n *\n * @param {string} id - The unique ID of the user to unlink.\n *\n * @return {Promise} A promise which resolves when the request is complete.\n */\nNetworks.prototype.unlinkUser = function (id) {\n  var data, request;\n\n  if (typeof id !== 'string') {\n    return utils.promisify(false,\n      'IngestAPI unlinkUser requires \"id\" to be passed as a string.');\n  }\n\n  data = {\n    user_id: id\n  };\n\n  request = new Request({\n    url: this.config.host + '/' + this.config.resource,\n    data: data,\n    token: this._tokenSource(),\n    method: 'UNLINK'\n  });\n\n  return request.send();\n};\n\n/**\n * Invite a user to the currently authorized network.\n *\n * @param {string} email - The email to send the invite to.\n * @param {string} name  - The name of the person to invite.\n *\n * @return {Promise} A promise which resolves when the request is complete.\n */\nNetworks.prototype.inviteUser = function (email, name) {\n  var data, request;\n\n  if (typeof email !== 'string') {\n    return utils.promisify(false,\n      'IngestAPI inviteUser requires \"email\" to be passed as a string.');\n  }\n\n  if (typeof name !== 'string') {\n    return utils.promisify(false,\n      'IngestAPI inviteUser requires \"name\" to be passed as a string.');\n  }\n\n  data = {\n    email: email,\n    name: name\n  };\n\n  request = new Request({\n    url: this.config.host + this.config.invite,\n    data: data,\n    token: this._tokenSource(),\n    method: 'POST'\n  });\n\n  return request.send();\n};\n\n\nmodule.exports = Networks;\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./src/resources/Networks.js\n ** module id = 14\n ** module chunks = 0\n **/","'use strict';\n\nvar Resource = require('./Resource');\nvar Request = require('../Request');\nvar utils = require('../Utils');\nvar extend = require('extend');\n\nfunction Videos (options) {\n\n  var overrides = {\n    playlists: '/<%=resource%>/<%=id%>/playlists',\n    variants: '/<%=resource%>/<%=id%>/variants'\n  };\n\n  options = extend(true, {}, overrides, options);\n\n  Resource.call(this, options);\n\n};\n\n// This extends the base class of 'Resource'.\nVideos.prototype = Object.create(Resource.prototype);\nVideos.prototype.constructor = Videos;\n\n/**\n * Return any playlists that contains the provided video.\n * @param   {string}   id   Video id.\n * @return  {promise}       A promise which resolves when the request is complete.\n */\nVideos.prototype.getPlaylists = function (id) {\n  var url, request;\n\n  if (typeof id !== 'string') {\n    return utils.promisify(false,\n      'IngestAPI Resource getPlaylists requires a valid video id passed as a string.');\n  }\n\n  url = utils.parseTokens(this.config.host + this.config.playlists, {\n    resource: this.config.resource,\n    id: id\n  });\n\n  request = new Request({\n    url: url,\n    token: this._tokenSource()\n  });\n\n  return request.send();\n\n};\n\n/**\n * Get all of the variants for the supplied video id.\n * @param   {string}    id     Video id.\n * @return  {promise}          A promise which resolves when the request is complete.\n */\nVideos.prototype.getVariants = function (id) {\n  var url, request;\n\n  if (typeof id !== 'string') {\n    return utils.promisify(false,\n      'IngestAPI Resource getPlaylists requires a valid video id passed as a string.');\n  }\n\n  url = utils.parseTokens(this.config.host + this.config.variants, {\n    resource: this.config.resource,\n    id: id\n  });\n\n  request = new Request({\n    url: url,\n    token: this._tokenSource()\n  });\n\n  return request.send();\n};\n\nmodule.exports = Videos;\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./src/resources/Videos.js\n ** module id = 15\n ** module chunks = 0\n **/"],"sourceRoot":""}
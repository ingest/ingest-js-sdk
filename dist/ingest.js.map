{"version":3,"sources":["webpack:///webpack/universalModuleDefinition","webpack:///ingest.js","webpack:///webpack/bootstrap 076eb97b9b208374c67c","webpack:///./index.js","webpack:///./src/IngestAPI.js","webpack:///./~/extend/index.js","webpack:///./src/Request.js","webpack:///./~/pinkyswear/pinkyswear.js","webpack:///./~/timers-browserify/main.js","webpack:///./~/process/browser.js","webpack:///./src/JWTUtils.js","webpack:///./src/RequestManager.js","webpack:///./src/Utils.js","webpack:///./src/Uploader.js","webpack:///./src/Cache.js","webpack:///./src/resources/Resource.js","webpack:///./src/resources/PlaybackContent.js","webpack:///./src/resources/Users.js","webpack:///./src/resources/Networks.js","webpack:///./src/resources/Videos.js","webpack:///./src/resources/Playlists.js","webpack:///./src/resources/Jobs.js","webpack:///./src/resources/Profiles.js","webpack:///./src/resources/Inputs.js","webpack:///./src/resources/Events.js"],"names":["root","factory","exports","module","define","amd","this","modules","__webpack_require__","moduleId","installedModules","id","loaded","call","m","c","p","IngestAPI","options","defaults","maxRequests","host","cacheAge","config","extend","token","setToken","request","Request","JWTUtils","utils","resource","Resource","playbackContent","Media","usersResource","Users","networksResource","Networks","videosResource","Videos","playlistsResource","Playlists","jobsResource","Jobs","profilesResource","Profiles","inputsResource","Inputs","uploader","Uploader","eventsResource","Events","cache","Cache","enabled","requestManager","RequestManager","setMaxRequests","_getToken","getToken","bind","videos","tokenSource","playlists","inputs","users","networks","profiles","jobs","events","prototype","Error","max","upload","file","api","hasOwn","Object","hasOwnProperty","toStr","toString","isArray","arr","Array","isPlainObject","obj","hasOwnConstructor","hasIsPrototypeOf","constructor","key","name","src","copy","copyIsArray","clone","target","arguments","i","length","deep","Promise","VALID_RESPONSE_CODES","async","method","ignoreAcceptHeader","XMLHttpRequest","setupListeners","send","promise","url","makeRequest","requestError","then","_sendNextRequest","sendSync","callback","onreadystatechange","readyStateChange","postData","preparePostData","data","headers","hasContentType","success","open","setRequestHeader","applyRequestHeaders","isExpired","type","addRequest","isValidResponseCode","status","result","FormData","Blob","JSON","stringify","error","keys","keysLength","requestComplete","response","processResponse","responseType","getResponseHeader","hasContent","indexOf","parse","stack","statusCode","message","getAllResponseHeaders","readyState","responseText","resp","responseCode","responseCodeCount","cancel","abort","__WEBPACK_AMD_DEFINE_FACTORY__","__WEBPACK_AMD_DEFINE_ARRAY__","__WEBPACK_AMD_DEFINE_RESULT__","setImmediate","process","apply","undefined","isFunction","f","isObject","defer","setTimeout","undef","pinkySwear","state","values","deferred","set","newState","newValues","onFulfilled","onRejected","promise2","callCallbacks","resolve","x","cbCalled","TypeError","value","e","push","clearImmediate","Timeout","clearFn","_id","_clearFn","nextTick","Function","slice","immediateIds","nextImmediateId","window","clearTimeout","setInterval","clearInterval","timeout","close","unref","ref","enroll","item","msecs","_idleTimeoutId","_idleTimeout","unenroll","_unrefActive","active","_onTimeout","fn","args","defaultSetTimout","defaultClearTimeout","runTimeout","fun","cachedSetTimeout","runClearTimeout","marker","cachedClearTimeout","cleanUpNextTick","draining","currentQueue","queue","concat","queueIndex","drainQueue","len","run","Item","array","noop","title","browser","env","argv","version","versions","on","addListener","once","off","removeListener","removeAllListeners","emit","prependListener","prependOnceListener","listeners","binding","cwd","chdir","dir","umask","parseTokenPayload","parts","split","payload","atob","exp","now","Date","getTime","pending","activeRequests","currentSetRequests","lastRequestSetStart","resetTimer","sendNextRequest","_resetCurrentSet","resetCurrentSet","newDate","requestData","sendRequest","XRatelimitRemaining","moreRequests","delay","XRatelimitLimit","XRatelimitReset","shift","Utils","parseTokens","template","hash","replace","promisify","series","promises","paused","promisesCount","all","total","complete","responses","pause","_seriesPause","resume","_seriesResume","_seriesCancel","_seriesCallPromise","_seriesComplete","_seriesError","canceled","isImage","Upload","sign","uploadComplete","uploadAbort","uploadMethods","param","singlePart","multiPart","chunks","chunkSize","chunkCount","chunksComplete","uploadedBytes","aborted","created","initialized","fileRecord","filename","size","_checkMultipart","contentType","progress","save","_create","_initialize","_prepareUpload","_updateProgress","percent","record","add","_createSuccess","input","tokens","signing","_initializeComplete","uploadId","pieceSize","pieceCount","_createChunks","_completeUpload","_uploadFile","_onCompleteUpload","blob","chunk","start","end","sliceMethod","_getSliceMethod","chunkPromises","Math","min","partNumber","_uploadChunk","multiPartPromise","_signUpload","_sendUpload","_completeChunk","singlePartPromise","_sendSinglepartComplete","_uploadFileComplete","authorization","authHeader","dateHeader","securityToken","requestPromise","round","_abortComplete","abortSync","deleteSync","abortSyncComplete","_checkCacheSupport","support","sessionStorage","setItem","removeItem","retrieve","cacheKey","getItem","expiry","remove","JSONResult","diff","forced","property","properties","propertiesLength","forcedLength","n","original","diffArray","items","itemsLength","results","byId","trash","deleteMethods","permanent","search","_tokenSource","getAll","_updateCachedResources","getById","cachedResult","_updateCachedResource","getTrashed","update","_deleteResource","permanentDelete","_deleteCachedResource","_deleteResourceSync","permanentDeleteSync","encodeURIComponent","searchTrash","count","_handleCountResponse","trashCount","parseInt","dataLength","PlaybackContent","overrides","thumbnail","thumbnails","deleteThumbnail","create","getThumbnails","addExternalThumbnails","images","imagesToAdd","uploadThumbnail","image","formData","File","append","thumbnailId","currentUser","transfer","revoke","getCurrentUserInfo","transferUserAuthorship","oldId","newId","revokeCurrentUser","keysById","invite","invoices","invoicesById","currentUsage","customers","customerById","customerCardInformation","getPendingUsers","deletePendingUser","linkUser","networkId","userId","unlinkUser","inviteUser","email","resend","getSecureKeys","addSecureKey","getSecureKeyById","keyId","updateSecureKey","deleteSecureKey","createCustomer","stripeToken","updateCustomer","cusId","networkName","deleteCustomer","getCustomerCardInformation","customerId","deleteCustomerCard","getInvoices","getInvoiceById","invoiceId","getCurrentUsage","pendingUserId","variants","withVariants","missingVariants","publish","getPlaylists","getVariants","getVideosWithVariants","getVideosMissingVariants","ids","playlistVideoById","playlistReorder","playlistAddRemove","addVideos","playlistId","videoIds","position","removeVideos","reorderVideo","videoId","oldPosition","newPosition","old_position","new_position","video","allWithFilters","searchWithFilters","filters","urlTemplate","filterChain","join","filter"],"mappings":"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","file":"ingest.js","sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"IngestAPI\"] = factory();\n\telse\n\t\troot[\"IngestAPI\"] = factory();\n})(this, function() {\nreturn \n\n\n/** WEBPACK FOOTER **\n ** webpack/universalModuleDefinition\n **/","(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"IngestAPI\"] = factory();\n\telse\n\t\troot[\"IngestAPI\"] = factory();\n})(this, function() {\nreturn /******/ (function(modules) { // webpackBootstrap\n/******/ \t// The module cache\n/******/ \tvar installedModules = {};\n/******/\n/******/ \t// The require function\n/******/ \tfunction __webpack_require__(moduleId) {\n/******/\n/******/ \t\t// Check if module is in cache\n/******/ \t\tif(installedModules[moduleId])\n/******/ \t\t\treturn installedModules[moduleId].exports;\n/******/\n/******/ \t\t// Create a new module (and put it into the cache)\n/******/ \t\tvar module = installedModules[moduleId] = {\n/******/ \t\t\texports: {},\n/******/ \t\t\tid: moduleId,\n/******/ \t\t\tloaded: false\n/******/ \t\t};\n/******/\n/******/ \t\t// Execute the module function\n/******/ \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n/******/\n/******/ \t\t// Flag the module as loaded\n/******/ \t\tmodule.loaded = true;\n/******/\n/******/ \t\t// Return the exports of the module\n/******/ \t\treturn module.exports;\n/******/ \t}\n/******/\n/******/\n/******/ \t// expose the modules object (__webpack_modules__)\n/******/ \t__webpack_require__.m = modules;\n/******/\n/******/ \t// expose the module cache\n/******/ \t__webpack_require__.c = installedModules;\n/******/\n/******/ \t// __webpack_public_path__\n/******/ \t__webpack_require__.p = \"\";\n/******/\n/******/ \t// Load entry module and return exports\n/******/ \treturn __webpack_require__(0);\n/******/ })\n/************************************************************************/\n/******/ ([\n/* 0 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\tmodule.exports = __webpack_require__(1);\n\n\n/***/ },\n/* 1 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\t\n\tvar extend = __webpack_require__(2);\n\tvar Request = __webpack_require__(3);\n\tvar JWTUtils = __webpack_require__(7);\n\tvar utils = __webpack_require__(9);\n\tvar Uploader = __webpack_require__(10);\n\tvar Cache = __webpack_require__(11);\n\tvar RequestManager = __webpack_require__(8);\n\t\n\tvar Resource = __webpack_require__(12);\n\tvar Media = __webpack_require__(13);\n\tvar Users = __webpack_require__(14);\n\tvar Networks = __webpack_require__(15);\n\tvar Videos = __webpack_require__(16);\n\tvar Playlists = __webpack_require__(17);\n\tvar Jobs = __webpack_require__(18);\n\tvar Profiles = __webpack_require__(19);\n\tvar Inputs = __webpack_require__(20);\n\tvar Events = __webpack_require__(21);\n\t\n\t/**\n\t * IngestAPI Object\n\t * @class\n\t * @param {object}  options        Options to override the default.\n\t * @param {string}  options.host   Override the default live host.\n\t * @param {string}  options.token  Auth token to use for requests.\n\t */\n\tfunction IngestAPI (options) {\n\t\n\t  this.defaults = {\n\t    'maxRequests': 6, // Active Requests\n\t    'host': 'https://api.ingest.io',\n\t    'cacheAge': 300000, // 5 minutes\n\t  };\n\t\n\t  // Create a config object by extending the defaults with the pass options.\n\t  this.config = extend(true, {}, this.defaults, options);\n\t\n\t  this.token = null;\n\t\n\t  if (this.config.token) {\n\t    // Store the token for future use.\n\t    this.setToken(this.config.token);\n\t  }\n\t\n\t  /* Exposed for testing */\n\t  this.request = Request;\n\t  this.JWTUtils = JWTUtils;\n\t  this.utils = utils;\n\t  this.resource = Resource;\n\t  this.playbackContent = Media;\n\t  this.usersResource = Users;\n\t  this.networksResource = Networks;\n\t  this.videosResource = Videos;\n\t  this.playlistsResource = Playlists;\n\t  this.jobsResource = Jobs;\n\t  this.profilesResource = Profiles;\n\t  this.inputsResource = Inputs;\n\t  this.uploader = Uploader;\n\t  this.eventsResource = Events;\n\t\n\t  // Construct my cache\n\t  this.cache = new Cache(this.config.cacheAge);\n\t  this.cache.enabled = false;\n\t\n\t  // Set my max requests\n\t  this.requestManager = RequestManager;\n\t  this.setMaxRequests(this.config.maxRequests);\n\t\n\t  this._getToken = this.getToken.bind(this);\n\t\n\t  this.videos = new Videos({\n\t    host: this.config.host,\n\t    resource: 'videos',\n\t    tokenSource: this._getToken,\n\t    cache: this.cache\n\t  });\n\t\n\t  this.playlists = new Playlists({\n\t    host: this.config.host,\n\t    resource: 'playlists',\n\t    tokenSource: this._getToken\n\t  });\n\t\n\t  this.inputs = new Inputs({\n\t    host: this.config.host,\n\t    resource: 'encoding/inputs',\n\t    tokenSource: this._getToken,\n\t    cache: this.cache\n\t  });\n\t\n\t  this.users = new Users({\n\t    host: this.config.host,\n\t    resource: 'users',\n\t    tokenSource: this._getToken\n\t  });\n\t\n\t  this.networks = new Networks({\n\t    host: this.config.host,\n\t    resource: 'networks',\n\t    tokenSource: this._getToken\n\t  });\n\t\n\t  this.profiles = new Profiles({\n\t    host: this.config.host,\n\t    resource: 'encoding/profiles',\n\t    tokenSource: this._getToken\n\t  });\n\t\n\t  this.jobs = new Jobs({\n\t    host: this.config.host,\n\t    resource: 'encoding/jobs',\n\t    tokenSource: this._getToken,\n\t    cache: this.cache\n\t  });\n\t\n\t  this.events = new Events({\n\t    host: this.config.host,\n\t    resource: 'events',\n\t    tokenSource: this._getToken,\n\t    cache: this.cache\n\t  });\n\t\n\t}\n\t\n\t/** Token **/\n\t/**\n\t * Set the auth token to use.\n\t * @param   {String}        token Auth token to use.\n\t */\n\tIngestAPI.prototype.setToken = function (token) {\n\t\n\t  // Make sure a valid value is passed.\n\t  if (typeof token !== 'string') {\n\t    throw new Error('IngestAPI requires an authentication token passed as a string.');\n\t  }\n\t\n\t  this.token = token;\n\t};\n\t\n\t/**\n\t * Sets the maxrequests in the Request Manager\n\t * @param {number} max - The max amount of requests at once\n\t */\n\tIngestAPI.prototype.setMaxRequests = function (max) {\n\t  // Make sure we have a valid number.\n\t  if (typeof max !== 'number' || max < 1) {\n\t    throw new Error('IngestAPI requires a maxRequest count to be passed as a positive number.');\n\t  }\n\t\n\t  RequestManager.setMaxRequests(max);\n\t};\n\t\n\t/**\n\t * Return the current auth token.\n\t * @return  {String}        Current auth token, or null if a token has not been set.\n\t */\n\tIngestAPI.prototype.getToken = function () {\n\t  return this.token;\n\t};\n\t\n\t/**\n\t * Create a new input and upload a file.\n\t * @param  {File}   file    File to upload.\n\t * @return {Promise} A promise which resolves when the upload is complete.\n\t */\n\tIngestAPI.prototype.upload = function (file) {\n\t  return new Uploader({\n\t    file: file,\n\t    api: this,\n\t    host: this.config.host\n\t  });\n\t};\n\t\n\tmodule.exports = IngestAPI;\n\n\n/***/ },\n/* 2 */\n/***/ function(module, exports) {\n\n\t'use strict';\n\t\n\tvar hasOwn = Object.prototype.hasOwnProperty;\n\tvar toStr = Object.prototype.toString;\n\t\n\tvar isArray = function isArray(arr) {\n\t\tif (typeof Array.isArray === 'function') {\n\t\t\treturn Array.isArray(arr);\n\t\t}\n\t\n\t\treturn toStr.call(arr) === '[object Array]';\n\t};\n\t\n\tvar isPlainObject = function isPlainObject(obj) {\n\t\tif (!obj || toStr.call(obj) !== '[object Object]') {\n\t\t\treturn false;\n\t\t}\n\t\n\t\tvar hasOwnConstructor = hasOwn.call(obj, 'constructor');\n\t\tvar hasIsPrototypeOf = obj.constructor && obj.constructor.prototype && hasOwn.call(obj.constructor.prototype, 'isPrototypeOf');\n\t\t// Not own constructor property must be Object\n\t\tif (obj.constructor && !hasOwnConstructor && !hasIsPrototypeOf) {\n\t\t\treturn false;\n\t\t}\n\t\n\t\t// Own properties are enumerated firstly, so to speed up,\n\t\t// if last one is own, then all properties are own.\n\t\tvar key;\n\t\tfor (key in obj) { /**/ }\n\t\n\t\treturn typeof key === 'undefined' || hasOwn.call(obj, key);\n\t};\n\t\n\tmodule.exports = function extend() {\n\t\tvar options, name, src, copy, copyIsArray, clone;\n\t\tvar target = arguments[0];\n\t\tvar i = 1;\n\t\tvar length = arguments.length;\n\t\tvar deep = false;\n\t\n\t\t// Handle a deep copy situation\n\t\tif (typeof target === 'boolean') {\n\t\t\tdeep = target;\n\t\t\ttarget = arguments[1] || {};\n\t\t\t// skip the boolean and the target\n\t\t\ti = 2;\n\t\t}\n\t\tif (target == null || (typeof target !== 'object' && typeof target !== 'function')) {\n\t\t\ttarget = {};\n\t\t}\n\t\n\t\tfor (; i < length; ++i) {\n\t\t\toptions = arguments[i];\n\t\t\t// Only deal with non-null/undefined values\n\t\t\tif (options != null) {\n\t\t\t\t// Extend the base object\n\t\t\t\tfor (name in options) {\n\t\t\t\t\tsrc = target[name];\n\t\t\t\t\tcopy = options[name];\n\t\n\t\t\t\t\t// Prevent never-ending loop\n\t\t\t\t\tif (target !== copy) {\n\t\t\t\t\t\t// Recurse if we're merging plain objects or arrays\n\t\t\t\t\t\tif (deep && copy && (isPlainObject(copy) || (copyIsArray = isArray(copy)))) {\n\t\t\t\t\t\t\tif (copyIsArray) {\n\t\t\t\t\t\t\t\tcopyIsArray = false;\n\t\t\t\t\t\t\t\tclone = src && isArray(src) ? src : [];\n\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\tclone = src && isPlainObject(src) ? src : {};\n\t\t\t\t\t\t\t}\n\t\n\t\t\t\t\t\t\t// Never move original objects, clone them\n\t\t\t\t\t\t\ttarget[name] = extend(deep, clone, copy);\n\t\n\t\t\t\t\t\t// Don't bring in undefined values\n\t\t\t\t\t\t} else if (typeof copy !== 'undefined') {\n\t\t\t\t\t\t\ttarget[name] = copy;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\n\t\t// Return the modified object\n\t\treturn target;\n\t};\n\n\n/***/ },\n/* 3 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\t\n\tvar Promise = __webpack_require__(4);\n\tvar extend = __webpack_require__(2);\n\t\n\tvar JWTUtils = __webpack_require__(7);\n\tvar RequestManager = __webpack_require__(8);\n\t\n\tvar VALID_RESPONSE_CODES = [200, 201, 202, 204];\n\t\n\t/**\n\t * A wrapper around the XMLHttpRequest object.\n\t * @param {object}  options         Options for the request.\n\t * @param {boolean} options.async   Whether to perform the request asynchronously\n\t * @param {string}  options.method  REST verb to use for the request.\n\t * @param {string}  options.url     URL for the request.\n\t */\n\tvar Request = function (options) {\n\t\n\t  this.defaults = {\n\t    async: true,\n\t    method: 'GET',\n\t    ignoreAcceptHeader: false\n\t  };\n\t\n\t  // Create the XHR object for this request.\n\t  this.request = new XMLHttpRequest();\n\t\n\t  // Set up event listeners for this request.\n\t  this.setupListeners();\n\t\n\t  // Todo, merge some defaults with this.\n\t  this.options = extend(true, this.defaults, options);\n\t\n\t};\n\t\n\t/**\n\t * Send the request and return a promise to resolve when the request is complete.\n\t * @return {Promise} A promise which resolves when the request is complete.\n\t */\n\tRequest.prototype.send = function () {\n\t  this.promise = Promise();\n\t\n\t  // Make sure a url is passed before attempting to make the request.\n\t  if (this.options.url) {\n\t    // Add the request to the queue and send it\n\t    this.makeRequest();\n\t  } else {\n\t    this.requestError('Request Error : a url is required to make the request.');\n\t  }\n\t\n\t  // Return the promise. Once complete send of the next request if necessary\n\t  return this.promise\n\t    .then(RequestManager._sendNextRequest);\n\t};\n\t\n\t/**\n\t * Send the request synchronously\n\t * @param {function} callback Function to call when the request is completed.\n\t * @return {object} The result of the request.\n\t */\n\tRequest.prototype.sendSync = function (callback) {\n\t\n\t  if (typeof callback === 'function') {\n\t    this.callback = callback;\n\t  }\n\t\n\t  // Make sure a url is passed before attempting to make the request.\n\t  if (this.options.url) {\n\t    // Add the request to the queue and send it\n\t    return this.makeRequest();\n\t  } else {\n\t    this.requestError('Request Error : a url is required to make the request.');\n\t  }\n\t};\n\t\n\t/**\n\t * Add event listeners to the XMLHttpRequest object.\n\t */\n\tRequest.prototype.setupListeners = function () {\n\t  this.request.onreadystatechange = this.readyStateChange.bind(this);\n\t};\n\t\n\t/**\n\t * Execute the open and construction of the XMLHttpRequest and its data\n\t */\n\tRequest.prototype.makeRequest = function () {\n\t  var postData = this.preparePostData(this.options.data);\n\t  var headers = this.options.headers;\n\t  var hasContentType = headers && headers.hasOwnProperty('Content-Type');\n\t\n\t  if (!postData.success) {\n\t    this.requestError('Request Error : error preparing post data.');\n\t    return;\n\t  }\n\t\n\t  this.request.open(this.options.method, this.options.url, this.options.async);\n\t\n\t  // Set before we apply the headers so it can be overridden on a per request basis.\n\t  if (!this.options.ignoreAcceptHeader) {\n\t    this.request.setRequestHeader('Accept', 'application/vnd.ingest.v1+json');\n\t  }\n\t\n\t  if (headers) {\n\t    this.applyRequestHeaders(headers);\n\t  }\n\t\n\t  // Make the token optional.\n\t  if (this.options.token) {\n\t\n\t    // If there is a token present ensure that it's still valid.\n\t    if (JWTUtils.isExpired(this.options.token)) {\n\t      this.requestError('Request Error : token is expired.');\n\t      return;\n\t    }\n\t\n\t    this.request.setRequestHeader('Authorization', this.options.token);\n\t\n\t  }\n\t\n\t  // Set the default content type when posting data.\n\t  if (postData.data && postData.type === 'JSON' && !hasContentType) {\n\t    this.request.setRequestHeader('Content-Type', 'application/vnd.ingest.v1+json');\n\t  }\n\t\n\t  // If the request should be made synchronously then we don't want to add it to the RequestManager.\n\t  if (!this.options.async) {\n\t\n\t    if (postData.data) {\n\t      this.request.send(postData.data);\n\t    } else {\n\t      this.request.send();\n\t    }\n\t\n\t    if (!this.isValidResponseCode(this.request.status)) {\n\t      this.requestError('Request Error : invalid response code : ' + this.request.status);\n\t    }\n\t\n\t  } else {\n\t    // If everything is good lets add it to the queue\n\t    RequestManager.addRequest([this.request, postData.data]);\n\t  }\n\t};\n\t\n\t/**\n\t * Stringify the post data if it is present.\n\t * @param  {object} data Object to be parsed.\n\t * @return {object}      Result object with the parsed string, and a success boolean flag.\n\t */\n\tRequest.prototype.preparePostData = function (data) {\n\t\n\t  var result = {\n\t    success: true,\n\t    data: data,\n\t    type: 'JSON'\n\t  };\n\t\n\t  // In the case of file uploads, all FormData to be passed to the request.\n\t  if (data instanceof FormData) {\n\t    result.type = 'FormData';\n\t    return result;\n\t  }\n\t\n\t  if (data instanceof Blob) {\n\t    result.type = 'File';\n\t    return result;\n\t  }\n\t\n\t  // If the data is populated, and its not already a string parse it.\n\t  if (data) {\n\t    try {\n\t      result.data = JSON.stringify(data);\n\t    } catch (error) {\n\t      result.success = false;\n\t      result.data = null;\n\t    }\n\t  }\n\t\n\t  return result;\n\t};\n\t\n\t/**\n\t * Apply any supplied headers to the request object.\n\t * @param  {object} headers Array of headers to apply to the request object.\n\t */\n\tRequest.prototype.applyRequestHeaders = function (headers) {\n\t\n\t  var key, i;\n\t  var keys = Object.keys(headers);\n\t  var keysLength = keys.length;\n\t\n\t  // Loop through and add the keys to the requestHeaders.\n\t  for (i = 0; i < keysLength; i++) {\n\t    key = keys[i];\n\t    this.request.setRequestHeader(key, headers[key]);\n\t  }\n\t\n\t};\n\t\n\t/**\n\t * Handle the completion of the request and fulfill the promise.\n\t * @param  {String} Response test of the request.\n\t */\n\tRequest.prototype.requestComplete = function (response) {\n\t\n\t  // Process the result.\n\t  this.response = this.processResponse(response);\n\t\n\t  if (!this.promise) {\n\t\n\t    if (typeof this.callback === 'function') {\n\t      this.callback(null, this.response);\n\t    }\n\t\n\t    return;\n\t  }\n\t\n\t  // Either resolve or reject the promise.\n\t  this.promise(!this.response.data.error, [this.response]);\n\t\n\t};\n\t\n\t/**\n\t * Process the response and parse certain content types.\n\t * @param  {*}  response  Response data from request.\n\t * @return {*}            Processed response data.\n\t */\n\tRequest.prototype.processResponse = function (response) {\n\t  var responseType = this.request.getResponseHeader('Content-Type');\n\t  var result = response;\n\t  var hasContent = this.request.status !== 202 && this.request.status !== 204;\n\t\n\t  // Parse JSON if the result is JSON.\n\t  if (hasContent && responseType && responseType.indexOf('json') !== -1) {\n\t    try {\n\t      result = JSON.parse(response);\n\t    } catch (error) {\n\t      result = {\n\t        error: 'JSON parsing failed. ' + error.stack\n\t      };\n\t    }\n\t  }\n\t\n\t  return {\n\t    data: result,\n\t    headers: this.request.getResponseHeader.bind(this.request),\n\t    statusCode: this.request.status\n\t  };\n\t\n\t};\n\t\n\t/**\n\t * Resolve the promise.\n\t * @param  {String} message   Error message.\n\t */\n\tRequest.prototype.requestError = function (message) {\n\t  var error;\n\t  // If there isn't a promise, in the case of a synchronous request, handle the error.\n\t  if (!this.promise) {\n\t\n\t    error = new Error(message);\n\t\n\t    if (typeof this.callback === 'function') {\n\t      this.callback(error);\n\t      return;\n\t    } else {\n\t      throw error;\n\t    }\n\t\n\t  }\n\t\n\t  // Reject the promise.\n\t  this.promise(false, [{\n\t    message: message,\n\t    headers: this.request.getAllResponseHeaders(),\n\t    statusCode: this.request.status\n\t  }]);\n\t};\n\t\n\t/**\n\t * Handle ready state change events.\n\t */\n\tRequest.prototype.readyStateChange = function () {\n\t  switch (this.request.readyState) {\n\t  case 4:\n\t    // Check if the final response code is valid\n\t    if (this.isValidResponseCode(this.request.status)) {\n\t      return this.requestComplete(this.request.responseText);\n\t    } else if (this.request.getResponseHeader('Content-Length') === '0') {\n\t      return this.requestError('Request Error: Invalid response code : ' + this.request.status);\n\t    }\n\t\n\t    // Special case error handling with response body\n\t    var resp = this.processResponse(this.request.response);\n\t    this.requestError(resp.data.error);\n\t    break;\n\t  default:\n\t    // silence is golden\n\t  }\n\t};\n\t\n\t/**\n\t * Validate the current response code to see if the request was a success.\n\t * @param  {Number}  responseCode Response Code.\n\t * @return {Boolean}              Should this be treated as a successful response code.\n\t */\n\tRequest.prototype.isValidResponseCode = function (responseCode) {\n\t\n\t  var result = false,\n\t    responseCodeCount = VALID_RESPONSE_CODES.length,\n\t    i;\n\t\n\t  // Check if the supplied code is in our list of valid codes.\n\t  for (i = 0; i < responseCodeCount; i++) {\n\t\n\t    if (responseCode === VALID_RESPONSE_CODES[i]) {\n\t      result = true;\n\t      break;\n\t    }\n\t\n\t  }\n\t\n\t  return result;\n\t\n\t};\n\t\n\t/**\n\t * Cancel the current XHR request.\n\t */\n\tRequest.prototype.cancel = function () {\n\t  // Remove the event listener.\n\t  this.request.onreadystatechange = null;\n\t  this.request.abort();\n\t  this.requestError('Request has been canceled.');\n\t};\n\t\n\tmodule.exports = Request;\n\n\n/***/ },\n/* 4 */\n/***/ function(module, exports, __webpack_require__) {\n\n\tvar __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;/* WEBPACK VAR INJECTION */(function(setImmediate, process) {/*\n\t * PinkySwear.js 2.2.2 - Minimalistic implementation of the Promises/A+ spec\n\t * \n\t * Public Domain. Use, modify and distribute it any way you like. No attribution required.\n\t *\n\t * NO WARRANTY EXPRESSED OR IMPLIED. USE AT YOUR OWN RISK.\n\t *\n\t * PinkySwear is a very small implementation of the Promises/A+ specification. After compilation with the\n\t * Google Closure Compiler and gzipping it weighs less than 500 bytes. It is based on the implementation for \n\t * Minified.js and should be perfect for embedding. \n\t *\n\t *\n\t * PinkySwear has just three functions.\n\t *\n\t * To create a new promise in pending state, call pinkySwear():\n\t *         var promise = pinkySwear();\n\t *\n\t * The returned object has a Promises/A+ compatible then() implementation:\n\t *          promise.then(function(value) { alert(\"Success!\"); }, function(value) { alert(\"Failure!\"); });\n\t *\n\t *\n\t * The promise returned by pinkySwear() is a function. To fulfill the promise, call the function with true as first argument and\n\t * an optional array of values to pass to the then() handler. By putting more than one value in the array, you can pass more than one\n\t * value to the then() handlers. Here an example to fulfill a promsise, this time with only one argument: \n\t *         promise(true, [42]);\n\t *\n\t * When the promise has been rejected, call it with false. Again, there may be more than one argument for the then() handler:\n\t *         promise(true, [6, 6, 6]);\n\t *         \n\t * You can obtain the promise's current state by calling the function without arguments. It will be true if fulfilled,\n\t * false if rejected, and otherwise undefined.\n\t * \t\t   var state = promise(); \n\t * \n\t * https://github.com/timjansen/PinkySwear.js\n\t */\n\t(function (root, factory) {\n\t\tif (true) {\n\t\t\t!(__WEBPACK_AMD_DEFINE_ARRAY__ = [], __WEBPACK_AMD_DEFINE_FACTORY__ = (factory), __WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ? (__WEBPACK_AMD_DEFINE_FACTORY__.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__)) : __WEBPACK_AMD_DEFINE_FACTORY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n\t\t} else if (typeof module === 'object' && module.exports) {\n\t\t\tmodule.exports = factory();\n\t\t} else {\n\t\t\troot.pinkySwear = factory();\n\t\t}\n\t}(this, function() {\n\t\tvar undef;\n\t\n\t\tfunction isFunction(f) {\n\t\t\treturn typeof f == 'function';\n\t\t}\n\t\tfunction isObject(f) {\n\t\t\treturn typeof f == 'object';\n\t\t}\n\t\tfunction defer(callback) {\n\t\t\tif (typeof setImmediate != 'undefined')\n\t\t\t\tsetImmediate(callback);\n\t\t\telse if (typeof process != 'undefined' && process['nextTick'])\n\t\t\t\tprocess['nextTick'](callback);\n\t\t\telse\n\t\t\t\tsetTimeout(callback, 0);\n\t\t}\n\t\n\t\treturn function pinkySwear(extend) {\n\t\t\tvar state;           // undefined/null = pending, true = fulfilled, false = rejected\n\t\t\tvar values = [];     // an array of values as arguments for the then() handlers\n\t\t\tvar deferred = [];   // functions to call when set() is invoked\n\t\n\t\t\tvar set = function(newState, newValues) {\n\t\t\t\tif (state == null && newState != null) {\n\t\t\t\t\tstate = newState;\n\t\t\t\t\tvalues = newValues;\n\t\t\t\t\tif (deferred.length)\n\t\t\t\t\t\tdefer(function() {\n\t\t\t\t\t\t\tfor (var i = 0; i < deferred.length; i++)\n\t\t\t\t\t\t\t\tdeferred[i]();\n\t\t\t\t\t\t});\n\t\t\t\t}\n\t\t\t\treturn state;\n\t\t\t};\n\t\n\t\t\tset['then'] = function (onFulfilled, onRejected) {\n\t\t\t\tvar promise2 = pinkySwear(extend);\n\t\t\t\tvar callCallbacks = function() {\n\t\t    \t\ttry {\n\t\t    \t\t\tvar f = (state ? onFulfilled : onRejected);\n\t\t    \t\t\tif (isFunction(f)) {\n\t\t\t   \t\t\t\tfunction resolve(x) {\n\t\t\t\t\t\t\t    var then, cbCalled = 0;\n\t\t\t   \t\t\t\t\ttry {\n\t\t\t\t\t   \t\t\t\tif (x && (isObject(x) || isFunction(x)) && isFunction(then = x['then'])) {\n\t\t\t\t\t\t\t\t\t\t\tif (x === promise2)\n\t\t\t\t\t\t\t\t\t\t\t\tthrow new TypeError();\n\t\t\t\t\t\t\t\t\t\t\tthen['call'](x,\n\t\t\t\t\t\t\t\t\t\t\t\tfunction() { if (!cbCalled++) resolve.apply(undef,arguments); } ,\n\t\t\t\t\t\t\t\t\t\t\t\tfunction(value){ if (!cbCalled++) promise2(false,[value]);});\n\t\t\t\t\t   \t\t\t\t}\n\t\t\t\t\t   \t\t\t\telse\n\t\t\t\t\t   \t\t\t\t\tpromise2(true, arguments);\n\t\t\t   \t\t\t\t\t}\n\t\t\t   \t\t\t\t\tcatch(e) {\n\t\t\t   \t\t\t\t\t\tif (!cbCalled++)\n\t\t\t   \t\t\t\t\t\t\tpromise2(false, [e]);\n\t\t\t   \t\t\t\t\t}\n\t\t\t   \t\t\t\t}\n\t\t\t   \t\t\t\tresolve(f.apply(undef, values || []));\n\t\t\t   \t\t\t}\n\t\t\t   \t\t\telse\n\t\t\t   \t\t\t\tpromise2(state, values);\n\t\t\t\t\t}\n\t\t\t\t\tcatch (e) {\n\t\t\t\t\t\tpromise2(false, [e]);\n\t\t\t\t\t}\n\t\t\t\t};\n\t\t\t\tif (state != null)\n\t\t\t\t\tdefer(callCallbacks);\n\t\t\t\telse\n\t\t\t\t\tdeferred.push(callCallbacks);\n\t\t\t\treturn promise2;\n\t\t\t};\n\t        if(extend){\n\t            set = extend(set);\n\t        }\n\t\t\treturn set;\n\t\t};\n\t}));\n\t\n\t\n\t/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(5).setImmediate, __webpack_require__(6)))\n\n/***/ },\n/* 5 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t/* WEBPACK VAR INJECTION */(function(setImmediate, clearImmediate) {var nextTick = __webpack_require__(6).nextTick;\n\tvar apply = Function.prototype.apply;\n\tvar slice = Array.prototype.slice;\n\tvar immediateIds = {};\n\tvar nextImmediateId = 0;\n\t\n\t// DOM APIs, for completeness\n\t\n\texports.setTimeout = function() {\n\t  return new Timeout(apply.call(setTimeout, window, arguments), clearTimeout);\n\t};\n\texports.setInterval = function() {\n\t  return new Timeout(apply.call(setInterval, window, arguments), clearInterval);\n\t};\n\texports.clearTimeout =\n\texports.clearInterval = function(timeout) { timeout.close(); };\n\t\n\tfunction Timeout(id, clearFn) {\n\t  this._id = id;\n\t  this._clearFn = clearFn;\n\t}\n\tTimeout.prototype.unref = Timeout.prototype.ref = function() {};\n\tTimeout.prototype.close = function() {\n\t  this._clearFn.call(window, this._id);\n\t};\n\t\n\t// Does not start the time, just sets up the members needed.\n\texports.enroll = function(item, msecs) {\n\t  clearTimeout(item._idleTimeoutId);\n\t  item._idleTimeout = msecs;\n\t};\n\t\n\texports.unenroll = function(item) {\n\t  clearTimeout(item._idleTimeoutId);\n\t  item._idleTimeout = -1;\n\t};\n\t\n\texports._unrefActive = exports.active = function(item) {\n\t  clearTimeout(item._idleTimeoutId);\n\t\n\t  var msecs = item._idleTimeout;\n\t  if (msecs >= 0) {\n\t    item._idleTimeoutId = setTimeout(function onTimeout() {\n\t      if (item._onTimeout)\n\t        item._onTimeout();\n\t    }, msecs);\n\t  }\n\t};\n\t\n\t// That's not how node.js implements it but the exposed api is the same.\n\texports.setImmediate = typeof setImmediate === \"function\" ? setImmediate : function(fn) {\n\t  var id = nextImmediateId++;\n\t  var args = arguments.length < 2 ? false : slice.call(arguments, 1);\n\t\n\t  immediateIds[id] = true;\n\t\n\t  nextTick(function onNextTick() {\n\t    if (immediateIds[id]) {\n\t      // fn.call() is faster so we optimize for the common use-case\n\t      // @see http://jsperf.com/call-apply-segu\n\t      if (args) {\n\t        fn.apply(null, args);\n\t      } else {\n\t        fn.call(null);\n\t      }\n\t      // Prevent ids from leaking\n\t      exports.clearImmediate(id);\n\t    }\n\t  });\n\t\n\t  return id;\n\t};\n\t\n\texports.clearImmediate = typeof clearImmediate === \"function\" ? clearImmediate : function(id) {\n\t  delete immediateIds[id];\n\t};\n\t/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(5).setImmediate, __webpack_require__(5).clearImmediate))\n\n/***/ },\n/* 6 */\n/***/ function(module, exports) {\n\n\t// shim for using process in browser\n\tvar process = module.exports = {};\n\t\n\t// cached from whatever global is present so that test runners that stub it\n\t// don't break things.  But we need to wrap it in a try catch in case it is\n\t// wrapped in strict mode code which doesn't define any globals.  It's inside a\n\t// function because try/catches deoptimize in certain engines.\n\t\n\tvar cachedSetTimeout;\n\tvar cachedClearTimeout;\n\t\n\tfunction defaultSetTimout() {\n\t    throw new Error('setTimeout has not been defined');\n\t}\n\tfunction defaultClearTimeout () {\n\t    throw new Error('clearTimeout has not been defined');\n\t}\n\t(function () {\n\t    try {\n\t        if (typeof setTimeout === 'function') {\n\t            cachedSetTimeout = setTimeout;\n\t        } else {\n\t            cachedSetTimeout = defaultSetTimout;\n\t        }\n\t    } catch (e) {\n\t        cachedSetTimeout = defaultSetTimout;\n\t    }\n\t    try {\n\t        if (typeof clearTimeout === 'function') {\n\t            cachedClearTimeout = clearTimeout;\n\t        } else {\n\t            cachedClearTimeout = defaultClearTimeout;\n\t        }\n\t    } catch (e) {\n\t        cachedClearTimeout = defaultClearTimeout;\n\t    }\n\t} ())\n\tfunction runTimeout(fun) {\n\t    if (cachedSetTimeout === setTimeout) {\n\t        //normal enviroments in sane situations\n\t        return setTimeout(fun, 0);\n\t    }\n\t    // if setTimeout wasn't available but was latter defined\n\t    if ((cachedSetTimeout === defaultSetTimout || !cachedSetTimeout) && setTimeout) {\n\t        cachedSetTimeout = setTimeout;\n\t        return setTimeout(fun, 0);\n\t    }\n\t    try {\n\t        // when when somebody has screwed with setTimeout but no I.E. maddness\n\t        return cachedSetTimeout(fun, 0);\n\t    } catch(e){\n\t        try {\n\t            // When we are in I.E. but the script has been evaled so I.E. doesn't trust the global object when called normally\n\t            return cachedSetTimeout.call(null, fun, 0);\n\t        } catch(e){\n\t            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error\n\t            return cachedSetTimeout.call(this, fun, 0);\n\t        }\n\t    }\n\t\n\t\n\t}\n\tfunction runClearTimeout(marker) {\n\t    if (cachedClearTimeout === clearTimeout) {\n\t        //normal enviroments in sane situations\n\t        return clearTimeout(marker);\n\t    }\n\t    // if clearTimeout wasn't available but was latter defined\n\t    if ((cachedClearTimeout === defaultClearTimeout || !cachedClearTimeout) && clearTimeout) {\n\t        cachedClearTimeout = clearTimeout;\n\t        return clearTimeout(marker);\n\t    }\n\t    try {\n\t        // when when somebody has screwed with setTimeout but no I.E. maddness\n\t        return cachedClearTimeout(marker);\n\t    } catch (e){\n\t        try {\n\t            // When we are in I.E. but the script has been evaled so I.E. doesn't  trust the global object when called normally\n\t            return cachedClearTimeout.call(null, marker);\n\t        } catch (e){\n\t            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error.\n\t            // Some versions of I.E. have different rules for clearTimeout vs setTimeout\n\t            return cachedClearTimeout.call(this, marker);\n\t        }\n\t    }\n\t\n\t\n\t\n\t}\n\tvar queue = [];\n\tvar draining = false;\n\tvar currentQueue;\n\tvar queueIndex = -1;\n\t\n\tfunction cleanUpNextTick() {\n\t    if (!draining || !currentQueue) {\n\t        return;\n\t    }\n\t    draining = false;\n\t    if (currentQueue.length) {\n\t        queue = currentQueue.concat(queue);\n\t    } else {\n\t        queueIndex = -1;\n\t    }\n\t    if (queue.length) {\n\t        drainQueue();\n\t    }\n\t}\n\t\n\tfunction drainQueue() {\n\t    if (draining) {\n\t        return;\n\t    }\n\t    var timeout = runTimeout(cleanUpNextTick);\n\t    draining = true;\n\t\n\t    var len = queue.length;\n\t    while(len) {\n\t        currentQueue = queue;\n\t        queue = [];\n\t        while (++queueIndex < len) {\n\t            if (currentQueue) {\n\t                currentQueue[queueIndex].run();\n\t            }\n\t        }\n\t        queueIndex = -1;\n\t        len = queue.length;\n\t    }\n\t    currentQueue = null;\n\t    draining = false;\n\t    runClearTimeout(timeout);\n\t}\n\t\n\tprocess.nextTick = function (fun) {\n\t    var args = new Array(arguments.length - 1);\n\t    if (arguments.length > 1) {\n\t        for (var i = 1; i < arguments.length; i++) {\n\t            args[i - 1] = arguments[i];\n\t        }\n\t    }\n\t    queue.push(new Item(fun, args));\n\t    if (queue.length === 1 && !draining) {\n\t        runTimeout(drainQueue);\n\t    }\n\t};\n\t\n\t// v8 likes predictible objects\n\tfunction Item(fun, array) {\n\t    this.fun = fun;\n\t    this.array = array;\n\t}\n\tItem.prototype.run = function () {\n\t    this.fun.apply(null, this.array);\n\t};\n\tprocess.title = 'browser';\n\tprocess.browser = true;\n\tprocess.env = {};\n\tprocess.argv = [];\n\tprocess.version = ''; // empty string to avoid regexp issues\n\tprocess.versions = {};\n\t\n\tfunction noop() {}\n\t\n\tprocess.on = noop;\n\tprocess.addListener = noop;\n\tprocess.once = noop;\n\tprocess.off = noop;\n\tprocess.removeListener = noop;\n\tprocess.removeAllListeners = noop;\n\tprocess.emit = noop;\n\tprocess.prependListener = noop;\n\tprocess.prependOnceListener = noop;\n\t\n\tprocess.listeners = function (name) { return [] }\n\t\n\tprocess.binding = function (name) {\n\t    throw new Error('process.binding is not supported');\n\t};\n\t\n\tprocess.cwd = function () { return '/' };\n\tprocess.chdir = function (dir) {\n\t    throw new Error('process.chdir is not supported');\n\t};\n\tprocess.umask = function() { return 0; };\n\n\n/***/ },\n/* 7 */\n/***/ function(module, exports) {\n\n\t'use strict';\n\t\n\t/**\n\t * UTILS for dealing with jwt tokens.\n\t */\n\t\n\t/**\n\t * Parse the payload out of the JWT token.\n\t * @param  {string} token JWT Token.\n\t * @return {object}       Parsed payload object.\n\t */\n\tvar parseTokenPayload = function (token) {\n\t  var parts = token.split('.');\n\t\n\t  // Return false if the token is invalid.\n\t  if (parts.length <= 1) {\n\t    return false;\n\t  }\n\t\n\t  // decode the payload portion.\n\t  var payload = window.atob(parts[1]);\n\t\n\t  // parse it as JSON\n\t  payload = JSON.parse(payload);\n\t\n\t  return payload;\n\t};\n\t\n\t/**\n\t * Return true if the provided token has expired.\n\t * @param  {string}  token JWT Token\n\t * @return {Boolean}       True if expired.\n\t */\n\tmodule.exports.isExpired = function (token) {\n\t  var data, exp, result, now;\n\t\n\t  data = parseTokenPayload(token);\n\t\n\t  result = true;\n\t\n\t  // Return true if the token does not parse properly.\n\t  if (!data) {\n\t    return result;\n\t  }\n\t\n\t  exp = data.exp;\n\t\n\t  // Get the unix timestamp in seconds.\n\t  now = new Date();\n\t  now = now.getTime() / 1000;\n\t\n\t  if (!exp) {\n\t    return result;\n\t  }\n\t\n\t  // If the expiry data is still in the future.\n\t  if (now < exp) {\n\t    result = false;\n\t  }\n\t\n\t  return result;\n\t\n\t};\n\n\n/***/ },\n/* 8 */\n/***/ function(module, exports) {\n\n\t'use strict';\n\t\n\t/**\n\t * Manages request objects in a queueing system\n\t */\n\tvar RequestManager = function () {\n\t  this.pending = [];\n\t  this.activeRequests = 0;\n\t  this.currentSetRequests = 0;\n\t  this.lastRequestSetStart = null;\n\t  this.resetTimer = null;\n\t\n\t  this._sendNextRequest = this.sendNextRequest.bind(this);\n\t  this._resetCurrentSet = this.resetCurrentSet.bind(this);\n\t};\n\t\n\t/**\n\t * Sets the max requests for the Request Manager\n\t *\n\t * @param {number} maxRequests - The maximum allowed requests at one time\n\t */\n\tRequestManager.prototype.setMaxRequests = function (maxRequests) {\n\t  this.maxRequests = maxRequests;\n\t};\n\t\n\t/**\n\t * Resets the current set and sets the last request start to the passed in value\n\t *\n\t * @param {any} newDate - The new date timestamp or null\n\t */\n\tRequestManager.prototype.resetCurrentSet = function (newDate) {\n\t  this.currentSetRequests = 0;\n\t  this.lastRequestSetStart = newDate;\n\t};\n\t\n\t/**\n\t * Sends a request or adds it to the queue if it can't be sent\n\t *\n\t * @param {array} requestData - The request object and request data in an array\n\t *\n\t * @return\n\t */\n\tRequestManager.prototype.addRequest = function (requestData) {\n\t  // If we have too many out then queue the request\n\t  if (this.activeRequests >= this.maxRequests) {\n\t    this.pending.push(requestData);\n\t    return;\n\t  }\n\t\n\t  // Otherwise send the request\n\t  this.sendRequest(requestData[0], requestData[1]);\n\t};\n\t\n\t/**\n\t * Sends the request\n\t *\n\t * @param {object} request - The request object\n\t * @param {object} data    - The request data\n\t */\n\tRequestManager.prototype.sendRequest = function (request, data) {\n\t\n\t  // If there is a reset timer, we need to clear it so its not run\n\t  if (this.resetTimer) {\n\t    clearTimeout(this.resetTimer);\n\t  }\n\t\n\t  // If this request is the start of a set, lets reset the set data\n\t  if (this.currentSetRequests % this.maxRequests === 0) {\n\t    this.resetCurrentSet(Date.now());\n\t  }\n\t\n\t  // Increment counters\n\t  this.activeRequests++;\n\t  this.currentSetRequests++;\n\t\n\t  // Send data\n\t  if (data) {\n\t    request.send(data);\n\t  } else {\n\t    request.send();\n\t  }\n\t};\n\t\n\t/**\n\t * Sends the next available request if applicable\n\t *\n\t * @param {object}  response - The http response data\n\t *\n\t * @return {object} response - The http response data\n\t */\n\tRequestManager.prototype.sendNextRequest = function (response) {\n\t  var XRatelimitRemaining, moreRequests, requestData, delay;\n\t\n\t  // Deincrement counter\n\t  this.activeRequests--;\n\t\n\t  // No more to send, reset data if enough time passes\n\t  if (this.pending.length === 0) {\n\t\n\t    // If i don't have a timer already and have no active requests\n\t    if (!this.resetTimer && this.activeRequests === 0) {\n\t      // set the reset timer so new calls are in sync\n\t      this.resetTimer = setTimeout(this._resetCurrentSet, this.XRatelimitLimit * 1000);\n\t    }\n\t\n\t    // Return response\n\t    return response;\n\t  }\n\t\n\t  // Only run the first time to get the limits\n\t  if (!this.XRatelimitReset) {\n\t    // Set the reset and the limit\n\t    this.XRatelimitReset = response.headers('X-Ratelimit-Reset');\n\t    this.XRatelimitLimit = response.headers('X-Ratelimit-Limit');\n\t\n\t    // If the limit returned from the server is less than the set max limit, lets override it\n\t    if (this.XRatelimitLimit < this.maxRequests) {\n\t      this.maxRequests = this.XRatelimitLimit;\n\t    }\n\t  }\n\t\n\t  // Get my next request and requests remaining\n\t  requestData = this.pending.shift();\n\t  XRatelimitRemaining = response.headers('X-Ratelimit-Remaining');\n\t\n\t  // See if I can send more requests right now\n\t  moreRequests = (this.activeRequests < this.maxRequests) && (XRatelimitRemaining > 0);\n\t\n\t  // If I can send more requests send them\n\t  if (moreRequests) {\n\t    this.sendRequest(requestData[0], requestData[1]);\n\t  } else {\n\t    // Otherwise lets delay so these get sent in the next tick\n\t    delay = (Date.now() - this.lastRequestSetStart) < 100 ? 100 : (Date.now() - this.lastRequestSetStart);\n\t\n\t    // Delay the call of the next send request\n\t    setTimeout(this.sendRequest.bind(this, requestData[0], requestData[1]), delay);\n\t  }\n\t\n\t  // Return the response\n\t  return response;\n\t};\n\t\n\tmodule.exports = new RequestManager();\n\n/***/ },\n/* 9 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\t\n\tvar Promise = __webpack_require__(4);\n\tvar Utils = {};\n\t/**\n\t * Replace all tokens within a given template based on the given key/value pair.\n\t * @param  {string}     template    Template for the url.\n\t * @param  {object}     hash        Key/Value pair for replacing tokens in the template.\n\t *\n\t * @example\n\t * var tokens = {\n\t *  keyInTemplate: 'replacedWith'\n\t * };\n\t *\n\t * var template = '<%=keyInTemplate%>';\n\t *\n\t * var result = parseTokens(template, tokens);  // 'replacedWith'\n\t *\n\t * @return {string}                 Parsed string.\n\t */\n\tUtils.parseTokens = function (template, hash) {\n\t  if (!template) {\n\t    return null;\n\t  }\n\t\n\t  var keys = Object.keys(hash);\n\t  var i;\n\t  var length = keys.length;\n\t\n\t  for (i = 0; i < length; i++) {\n\t    template = template.replace('<%=' + keys[i] + '%>', hash[keys[i]]);\n\t  }\n\t\n\t  return template;\n\t};\n\t\n\t/**\n\t * Wrapper function to wrap a value in either a reject or resolve.\n\t * @param  {boolean} state Rejection or Approval.\n\t * @param  {*}       value Value to pass back to the promise.\n\t * @return {Promise}       Promise/A+ spec promise.\n\t */\n\tUtils.promisify = function (state, value) {\n\t  var promise = Promise();\n\t\n\t  promise(state, [value]);\n\t\n\t  return promise;\n\t};\n\t\n\t/**\n\t * Wrap an array of promises and return when they have all completed.\n\t * @param   {Array}     promises  An array of promises to manage.\n\t * @param   {boolean}   paused    A boolean to pause the execution of the promises.\n\t * @return  {Promise}             A promise that is resolved when all of the promises have fulfilled.\n\t */\n\tUtils.series = function (promises, paused) {\n\t\n\t  var promisesCount = promises.length;\n\t  var all = Promise();\n\t\n\t  var state = {\n\t    total: promisesCount,\n\t    complete: 0,\n\t    responses: [],\n\t    promises: promises,\n\t    paused: true\n\t  };\n\t\n\t  all.pause = Utils._seriesPause.bind(undefined, all, state);\n\t  all.resume = Utils._seriesResume.bind(undefined, all, state);\n\t  all.cancel = Utils._seriesCancel.bind(undefined, all, state);\n\t\n\t  if (!paused) {\n\t    state.paused = false;\n\t    Utils._seriesCallPromise(promises[0], state, all);\n\t  }\n\t\n\t  return all;\n\t\n\t};\n\t\n\t/**\n\t * Call a promise and pass the complete and error functions.\n\t * @param  {Promise} promise Promise to execute on.\n\t * @param  {Object} state   Persistent state of the series of promises.\n\t */\n\tUtils._seriesCallPromise = function (promise, state, all) {\n\t  // call the promise;\n\t  if (!state.paused) {\n\t    promise().then(Utils._seriesComplete.bind(undefined, all, state),\n\t      Utils._seriesError.bind(undefined, all, state));\n\t  }\n\t};\n\t\n\t/**\n\t * Manage the progress of the promises.\n\t * @private\n\t * @param  {Promise} all      All promise.\n\t * @param  {Object}  state    State object used to persist the promise count.\n\t * @param  {Object}  response Response of the promise being fulfilled.\n\t */\n\tUtils._seriesComplete = function (all, state, response) {\n\t\n\t  // Early return if this has been canceled.\n\t  if (state.canceled) {\n\t    return;\n\t  }\n\t\n\t  // Increment the complete promises.\n\t  state.complete++;\n\t  state.responses.push(response);\n\t\n\t  if (state.complete >= state.total) {\n\t    all(true, state.responses);\n\t  } else {\n\t    if (!state.paused) {\n\t      // Execute the next promise.\n\t      Utils._seriesCallPromise(state.promises[state.complete], state, all);\n\t    }\n\t  }\n\t\n\t};\n\t\n\t/**\n\t * Immediately reject the promise if there is an error.\n\t * @param  {Promise} all  All promise.\n\t * @param  {Object}  state    State object used to persist the promise count.\n\t * @param  {Object}  response Response of the promise being fulfilled.\n\t */\n\tUtils._seriesError = function (all, state, error) {\n\t  all(false, [error]);\n\t};\n\t\n\t/**\n\t * Pause the current series of promises.\n\t * @param  {Promise} all  All promise.\n\t * @param  {Object}  state    State object used to persist the promise count.\n\t */\n\tUtils._seriesPause = function (all, state) {\n\t  state.paused = true;\n\t};\n\t\n\t/**\n\t * Resume the current series of promises.\n\t * @param  {Promise} all  All promise.\n\t * @param  {Object}  state    State object used to persist the promise count.\n\t */\n\tUtils._seriesResume = function (all, state) {\n\t  state.paused = false;\n\t\n\t  if (state.complete !== state.total) {\n\t    Utils._seriesCallPromise(state.promises[state.complete], state, all);\n\t  }\n\t};\n\t\n\t/**\n\t * Resolve the promise but return an empty response.\n\t * @param  {Promise}  all     All promise.\n\t * @param  {Object}   state   State object used to persist the promise count.\n\t */\n\tUtils._seriesCancel = function (all, state) {\n\t  state.canceled = true;\n\t  all(true, []);\n\t};\n\t\n\t/**\n\t * Return true if a file provided matches a support image type.\n\t * @param  {file}     file  A reference to an image file.\n\t * @return {Boolean}        True if the type matches a known image type.\n\t */\n\tUtils.isImage = function (file) {\n\t  return file.type.indexOf('image') !== -1;\n\t};\n\t\n\tmodule.exports = Utils;\n\n\n/***/ },\n/* 10 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\t\n\tvar extend = __webpack_require__(2);\n\tvar Request = __webpack_require__(3);\n\tvar Promise = __webpack_require__(4);\n\tvar utils = __webpack_require__(9);\n\tvar JWTUtils = __webpack_require__(7);\n\t\n\t/**\n\t * Create a new upload wrapper.  Manages the entire upload of a file.\n\t * @class\n\t * @param   {object}  options                   Configuration options to override the defaults.\n\t * @param   {object}  options.api               A reference to the parent API instance.\n\t * @param   {object}  options.file              The file to upload.\n\t * @param   {object}  options.upload            REST endpoint for creating an input.\n\t * @param   {object}  options.sign              REST endpoint for signing a blob before upload.\n\t * @param   {object}  options.uploadComplete    REST endpoint to notify the API that the upload is complete.\n\t * @param   {object}  options.uploadAbort       REST endpoint to abort the upload.\n\t */\n\tfunction Upload (options) {\n\t\n\t  this.defaults = {\n\t    api: null,\n\t    file: null,\n\t    upload: '/encoding/inputs/<%=id%>/upload<%=method%>',\n\t    sign: '/encoding/inputs/<%=id%>/upload/sign<%=method%>',\n\t    uploadComplete: '/encoding/inputs/<%=id%>/upload/complete',\n\t    uploadAbort: '/encoding/inputs/<%=id%>/upload/abort<%=method%>',\n\t    uploadMethods: {\n\t      param: '?type=',\n\t      singlePart: 'amazon',\n\t      multiPart: 'amazonMP'\n\t    }\n\t  };\n\t\n\t  // Create a config object by extending the defaults with the pass options.\n\t  this.config = extend(true, {}, this.defaults, options);\n\t\n\t  this.api = this.config.api;\n\t  this.file = this.config.file;\n\t\n\t  this.chunks = [];\n\t  this.chunkSize = 0;\n\t  this.chunkCount = 0;\n\t  this.chunksComplete = 0;\n\t  this.uploadedBytes = 0;\n\t\n\t  this.aborted = false;\n\t  this.paused = false;\n\t  this.created = false;\n\t  this.initialized = false;\n\t\n\t  // Set to true when all the chunks are uploaded, but before the complete call is made.\n\t  this.uploadComplete = false;\n\t\n\t  this.fileRecord = {\n\t    filename: this.file.name,\n\t    type: this.file.type,\n\t    size: this.file.size,\n\t    method: this._checkMultipart(this.file),\n\t    contentType: 'application/octet-stream'\n\t  };\n\t\n\t};\n\t\n\t/**\n\t * Register a function to execute when a chunk completes uploading.\n\t * @param  {Function} callback A callback to execute when progress is made.\n\t */\n\tUpload.prototype.progress = function (callback) {\n\t  this.config.progress = callback.bind(this);\n\t};\n\t\n\t/**\n\t * Create a new input record and upload the files to amazon.\n\t * @return  {Promise}         A promise which resolves when the new input record is created and uploaded.\n\t */\n\tUpload.prototype.save = function () {\n\t  return this._create(this.fileRecord)\n\t    .then(this._initialize.bind(this))\n\t    .then(this._prepareUpload.bind(this));\n\t};\n\t\n\t/**\n\t * Call the progress callback and pass the current progress percentage.\n\t * @private\n\t * @param  {number} message Current progress percentage.\n\t */\n\tUpload.prototype._updateProgress = function (percent, chunkSize) {\n\t\n\t  if (!this.config.progress) {\n\t    return;\n\t  }\n\t\n\t  this.config.progress.call(this, percent, chunkSize);\n\t};\n\t\n\t/**\n\t * Create a new input record.\n\t * @private\n\t * @param   {object}  record  A JSON object representing the input record to create.\n\t * @return  {Promise}         A promise which resolves when the new input record is created.\n\t */\n\tUpload.prototype._create = function (record) {\n\t\n\t  if (this.created) {\n\t    return utils.promisify(true, this.fileRecord.id);\n\t  }\n\t\n\t  if (this.aborted) {\n\t    return utils.promisify(false, 'upload aborted');\n\t  }\n\t\n\t  return this.api.inputs.add(record).then(this._createSuccess.bind(this));\n\t};\n\t\n\t/**\n\t * Return the data object from the response.\n\t * @private\n\t * @param  {JSON}   response  JSON response containing the new input record id.\n\t * @return {string}           new input record id.\n\t */\n\tUpload.prototype._createSuccess = function (response) {\n\t\n\t  this.created = true;\n\t\n\t  this._updateProgress(0, 0);\n\t\n\t  // Store the input record.\n\t  this.input = response.data;\n\t\n\t  this.fileRecord.id = response.data.id;\n\t\n\t  return this.fileRecord.id;\n\t};\n\t\n\t/**\n\t * Initializes an Input for upload\n\t * @private\n\t * @return {Promise} A promise which resolves when the request is complete.\n\t */\n\tUpload.prototype._initialize = function () {\n\t  var url;\n\t  var tokens;\n\t  var signing = '';\n\t  var request;\n\t\n\t  if (this.aborted) {\n\t    return utils.promisify(false, 'upload aborted');\n\t  }\n\t\n\t  if (!this.fileRecord.method) {\n\t    signing = this.config.uploadMethods.param + this.config.uploadMethods.singlePart;\n\t  }\n\t\n\t  tokens = {\n\t    id: this.fileRecord.id,\n\t    method: signing\n\t  };\n\t\n\t  url = utils.parseTokens(this.api.config.host + this.config.upload, tokens);\n\t\n\t  request = new Request({\n\t    url: url,\n\t    token: this.api.getToken(),\n\t    method: 'POST',\n\t    data: this.fileRecord\n\t  });\n\t\n\t  return request.send()\n\t          .then(this._initializeComplete.bind(this));\n\t\n\t};\n\t\n\t/**\n\t * Store the information returned from the initialize request.\n\t * @private\n\t */\n\tUpload.prototype._initializeComplete = function (response) {\n\t  this.initialized = true;\n\t  this.fileRecord.key = response.data.key;\n\t  this.fileRecord.uploadId = response.data.uploadId;\n\t  this.chunkSize = response.data.pieceSize;\n\t  this.chunkCount = response.data.pieceCount;\n\t};\n\t\n\t/**\n\t * Setup the upload depending on its type, single or multi part.\n\t * @return {Promise} A promise which resolves when all of the pieces have completed uploading.\n\t */\n\tUpload.prototype._prepareUpload = function () {\n\t  if (!this.fileRecord.method) {\n\t    // Singlepart.\n\t    return this._uploadFile()\n\t      .then(this._onCompleteUpload.bind(this));\n\t  } else {\n\t    // Multipart.\n\t    return this._createChunks()\n\t      .then(this._completeUpload.bind(this));\n\t  }\n\t};\n\t\n\t/**\n\t * Break a file into blobs and create a chunk object for each piece.\n\t * @private\n\t * @return {Promise} A promise which resolves when all of the pieces have completed uploading.\n\t */\n\tUpload.prototype._createChunks = function () {\n\t  var sliceMethod = this._getSliceMethod(this.file);\n\t  var i, blob, chunk, start, end,\n\t    chunkPromises = [];\n\t\n\t  if (this.aborted) {\n\t    this.abort();\n\t    return utils.promisify(false, 'upload aborted');\n\t  }\n\t\n\t  for (i = 0; i < this.chunkCount; i++) {\n\t\n\t    start = i * this.chunkSize;\n\t    // Choose the smaller value, so that we don't go over the filesize.\n\t    end = Math.min((i + 1) * this.chunkSize, this.fileRecord.size);\n\t\n\t    blob = this.file[sliceMethod](start, end);\n\t\n\t    chunk = {\n\t      partNumber: i + 1,\n\t      data: blob\n\t    };\n\t\n\t    this.chunks.push(chunk);\n\t\n\t    chunkPromises.push(this._uploadChunk.bind(this, chunk));\n\t\n\t  }\n\t\n\t  // Store a reference for pausing and resuming.\n\t  this.multiPartPromise = utils.series(chunkPromises, this.paused);\n\t\n\t  return this.multiPartPromise;\n\t};\n\t\n\t/**\n\t * Create a promise chain for each chunk to be uploaded.\n\t * @private\n\t * @return {Promise} A promise which resolves when the request is complete.\n\t */\n\tUpload.prototype._uploadChunk = function (chunk) {\n\t  var promise = Promise();\n\t\n\t  // Break the promise chain.\n\t  this._signUpload(chunk)\n\t    .then(this._sendUpload.bind(this, chunk))\n\t    .then(this._completeChunk.bind(this, chunk, promise));\n\t\n\t  return promise;\n\t};\n\t\n\t/**\n\t * Create a promise chain for a single part file upload.\n\t * @param  {file}   file    A file reference to upload.\n\t * @return {Promise} A promise which resolves when the request is complete.\n\t */\n\tUpload.prototype._uploadFile = function () {\n\t  var chunk = {\n\t    data: this.file\n\t  };\n\t\n\t  // Create a new promise if one doesn't exist.\n\t  if (!this.singlePartPromise) {\n\t    this.singlePartPromise = Promise();\n\t  }\n\t\n\t  // Broken off the chain, this will allow us to cancel single part uploads without breaking the\n\t  // initial chain.\n\t  this._signUpload(chunk)\n\t    .then(this._sendUpload.bind(this, chunk))\n\t    .then(this._sendSinglepartComplete.bind(this))\n\t    .then(this._updateProgress.bind(this, 100, this.fileRecord.size))\n\t    .then(this._uploadFileComplete.bind(this));\n\t\n\t  return this.singlePartPromise;\n\t};\n\t\n\t/**\n\t *  Resolve the single part upload promise;\n\t */\n\tUpload.prototype._uploadFileComplete = function () {\n\t  this.singlePartPromise(true, []);\n\t};\n\t\n\t/**\n\t * Make a request and sign the chunk to be uploaded.\n\t * @private\n\t * @param  {object}   chunk           Information about the chunk to be uploaded.\n\t * @return {Promise}                  A promise which resolves when the request is complete.\n\t */\n\tUpload.prototype._signUpload = function (chunk) {\n\t  var url;\n\t  var signing = '';\n\t  var headers = {};\n\t  var request;\n\t\n\t  // Set the part number for the current chunk.\n\t  if (chunk.partNumber) {\n\t    this.fileRecord.partNumber = chunk.partNumber;\n\t  }\n\t\n\t  headers['Content-Type'] = 'multipart/form-data';\n\t\n\t  if (!this.fileRecord.method) {\n\t    signing = this.config.uploadMethods.param + this.config.uploadMethods.singlePart;\n\t  }\n\t\n\t  url = utils.parseTokens(this.api.config.host + this.config.sign, {\n\t    id: this.fileRecord.id,\n\t    method: signing\n\t  });\n\t\n\t  request = new Request({\n\t    url: url,\n\t    token: this.api.getToken(),\n\t    method: 'POST',\n\t    headers: headers,\n\t    data: this.fileRecord\n\t  });\n\t\n\t  return request.send();\n\t};\n\t\n\t/**\n\t * Send the upload to the server.\n\t * @private\n\t * @param   {object} upload  An object representing the upload to send to the server.\n\t * @return  {Promise}       A promise which resolves when the request is complete.\n\t */\n\tUpload.prototype._sendUpload = function (upload, response) {\n\t  var headers = {};\n\t  var request;\n\t\n\t  // Set the proper headers to send with the file.\n\t  headers['Content-Type'] = this.fileRecord.contentType;\n\t\n\t  headers.authorization = response.data.authHeader;\n\t  headers['x-amz-date'] = response.data.dateHeader;\n\t  headers['x-amz-security-token'] = response.data.securityToken;\n\t\n\t  request = new Request({\n\t    url: response.data.url,\n\t    method: 'PUT',\n\t    headers: headers,\n\t    data: upload.data,\n\t    ignoreAcceptHeader: true\n\t  });\n\t\n\t  this.requestPromise = request;\n\t\n\t  return request.send();\n\t};\n\t\n\t/**\n\t * Update the upload bytes value when a single part file is uploaded.\n\t */\n\tUpload.prototype._sendSinglepartComplete = function () {\n\t  this.uploadComplete = true;\n\t  this.uploadedBytes = this.fileRecord.size;\n\t};\n\t\n\t/**\n\t *  Executed when a chunk is finished uploading.\n\t *  @private\n\t *  @param {object}   chunk   The current chunk that was uploaded.\n\t *  @param {Promise}  promise The promise to resolve when the chunk is complete.\n\t */\n\tUpload.prototype._completeChunk = function (chunk, promise) {\n\t  var progress;\n\t\n\t  this.chunksComplete++;\n\t  chunk.complete = true;\n\t\n\t  this.uploadedBytes += chunk.data.size;\n\t\n\t  // Upload is complete.\n\t  if (this.chunksComplete === this.chunkCount) {\n\t    this.uploadComplete = true;\n\t  }\n\t\n\t  progress = this.uploadedBytes / this.fileRecord.size;\n\t  // 0 - 99 for actual upload progress, 1% for the complete call.\n\t  progress = progress * 99;\n\t  progress = Math.round(progress);\n\t\n\t  this._updateProgress(progress, chunk.data.size);\n\t\n\t  // Resolve the promise.\n\t  promise(true, []);\n\t};\n\t\n\t/**\n\t * Notify the server that the upload is complete.\n\t *\n\t * @private\n\t * @return  {Promise} A promise which resolves when the request is complete.\n\t */\n\tUpload.prototype._completeUpload = function () {\n\t  var url;\n\t  var tokens;\n\t  var request;\n\t\n\t  // Early return so we don't process any of the complete information on an aborted upload.\n\t  if (this.aborted) {\n\t    return utils.promisify(false, 'Upload Aborted.');\n\t  }\n\t\n\t  tokens = {\n\t    id: this.fileRecord.id\n\t  };\n\t\n\t  url = utils.parseTokens(this.api.config.host + this.config.uploadComplete, tokens);\n\t\n\t  request = new Request({\n\t    url: url,\n\t    token: this.api.getToken(),\n\t    method: 'POST',\n\t    data: this.fileRecord\n\t  });\n\t\n\t  return request.send()\n\t          .then(this._onCompleteUpload.bind(this));\n\t};\n\t\n\t/**\n\t * Return the id for the current file record.\n\t * @private\n\t * @return {string} ID for the input record that was created.\n\t */\n\tUpload.prototype._onCompleteUpload = function () {\n\t  // Send the final progress update once the upload is actually complete.\n\t  this._updateProgress(100);\n\t\n\t  this.uploadComplete = true;\n\t  this.multiPartPromise = null;\n\t  this.requestPromise = null;\n\t  this.singlePartPromise = null;\n\t  return this.fileRecord.id;\n\t};\n\t\n\t/**\n\t * Aborts an input upload\n\t *\n\t * @return {Promise} A promise which resolves when the request is complete.\n\t */\n\tUpload.prototype.abort = function () {\n\t  var url;\n\t  var tokens;\n\t  var request;\n\t\n\t  this.aborted = true;\n\t\n\t  // If initialize hasn't been called yet there is no need to abort the upload as it doesn't\n\t  // exist yet.\n\t  if (!this.initialized) {\n\t\n\t    if (this.created) {\n\t      // If the input has been created simply return early with a\n\t      // promise to delete the created input record.\n\t      return this.api.inputs.delete(this.fileRecord.id);\n\t    } else {\n\t      // Resolve as a successful promise. This case would be fulfilled when an upload\n\t      // has been created but save() hasn't yet been called.\n\t      return utils.promisify(true);\n\t    }\n\t\n\t  }\n\t\n\t  // Cancel the current request.\n\t  if (this.requestPromise) {\n\t    this.requestPromise.cancel();\n\t    this.requestPromise = null;\n\t  }\n\t\n\t  if (this.singlePartPromise) {\n\t    this.singlePartPromise = null;\n\t    // return here because there is no need to abort a single part upload.\n\t    return this._abortComplete();\n\t  }\n\t\n\t  if (this.multiPartPromise) {\n\t    this.multiPartPromise.cancel();\n\t    this.multiPartPromise = null;\n\t  }\n\t\n\t  tokens = {\n\t    id: this.fileRecord.id,\n\t    method: ''\n\t  };\n\t\n\t  url = utils.parseTokens(this.api.config.host + this.config.uploadAbort, tokens);\n\t\n\t  request = new Request({\n\t    url: url,\n\t    token: this.api.getToken(),\n\t    method: 'POST',\n\t    data: this.fileRecord\n\t  });\n\t\n\t  return request.send()\n\t    .then(this._abortComplete.bind(this));\n\t\n\t};\n\t\n\t/**\n\t * Aborts an input upload\n\t * @param {function} callback Callback executed when the request is complete, or an error occurs.\n\t */\n\tUpload.prototype.abortSync = function (callback) {\n\t  var url;\n\t  var tokens;\n\t  var request;\n\t\n\t  this.aborted = true;\n\t\n\t  // If initialize hasn't been called yet there is no need to abort the upload as it doesn't\n\t  // exist yet.\n\t  if (!this.initialized) {\n\t\n\t    if (this.created) {\n\t      // If the input has been created simply return early and delete the input.\n\t      this.api.inputs.deleteSync(this.fileRecord.id, callback);\n\t      return;\n\t    } else {\n\t      // Resolve as a successful promise. This case would be fulfilled when an upload\n\t      // has been created but save() hasn't yet been called.\n\t      callback(null);\n\t      return;\n\t    }\n\t\n\t  }\n\t\n\t  // Cancel the current request.\n\t  if (this.requestPromise) {\n\t    this.requestPromise.cancel();\n\t    this.requestPromise = null;\n\t  }\n\t\n\t  if (this.singlePartPromise) {\n\t    this.singlePartPromise = null;\n\t    // return here because there is no need to abort a single part upload.\n\t    this.api.inputs.deleteSync(this.fileRecord.id, callback);\n\t    return;\n\t  }\n\t\n\t  // If we have a multi part promise we need to cancel it\n\t  if (this.multiPartPromise) {\n\t    this.multiPartPromise.cancel();\n\t    this.multiPartPromise = null;\n\t  }\n\t\n\t  tokens = {\n\t    id: this.fileRecord.id,\n\t    method: ''\n\t  };\n\t\n\t  url = utils.parseTokens(this.api.config.host + this.config.uploadAbort, tokens);\n\t\n\t  request = new Request({\n\t    url: url,\n\t    async: false,\n\t    token: this.api.getToken(),\n\t    method: 'POST',\n\t    data: this.fileRecord\n\t  });\n\t\n\t  request.sendSync(this.abortSyncComplete.bind(this, callback));\n\t};\n\t\n\t/**\n\t * Delete the input when the abort call completes and then execute the callback.\n\t * @param  {Function} callback Synchronous callback\n\t * @param  {object}   error    Error from abort call.\n\t * @param  {object}   response Response from abort call.\n\t */\n\tUpload.prototype.abortSyncComplete = function (callback, error, response) {\n\t\n\t  if (!error) {\n\t    this.api.inputs.deleteSync(this.fileRecord.id, callback);\n\t  } else if (typeof callback === 'function') {\n\t    callback(error);\n\t  } else {\n\t    throw error;\n\t  }\n\t\n\t};\n\t\n\t/**\n\t * Delete the input that was created.\n\t * @private\n\t * @return {Promise} A promise which resolves when the request is complete.\n\t */\n\tUpload.prototype._abortComplete = function () {\n\t  return this.api.inputs.delete(this.fileRecord.id);\n\t};\n\t\n\t/**\n\t * Pause the current upload.\n\t */\n\tUpload.prototype.pause = function () {\n\t  // Return early if the upload portion is complete.\n\t  // The work is done by now so we might as well fire the\n\t  // complete call.\n\t  if (this.uploadComplete) {\n\t    return;\n\t  }\n\t\n\t  this.paused = true;\n\t\n\t  // Is there a multipart upload\n\t  if (this.multiPartPromise) {\n\t    // Pause the series if its a multipart upload.\n\t    this.multiPartPromise.pause();\n\t  }\n\t\n\t  // Abort the upload if its a singlepart upload and cancel the request if it is a multipart promise\n\t  if (this.requestPromise) {\n\t    this.requestPromise.cancel();\n\t  }\n\t};\n\t\n\t/**\n\t * Resume the current upload.\n\t */\n\tUpload.prototype.resume = function () {\n\t  this.paused = false;\n\t\n\t  // resume the series if its multi part.\n\t  if (this.multiPartPromise) {\n\t    // resume the series if its multipart.\n\t    this.multiPartPromise.resume();\n\t  } else if (this.requestPromise) {\n\t    // Restart the file upload.\n\t    this._uploadFile();\n\t  }\n\t\n\t};\n\t\n\t/**\n\t * Check the file size to determine if it should be a multipart upload, returns false for singlepart uploads.\n\t * @private\n\t * @param  {file}   file  The file to evaluate.\n\t * @return {boolean}      True if the file will be uploading using mutlipart upload.\n\t */\n\tUpload.prototype._checkMultipart = function (file) {\n\t  if (!file) {\n\t    return;\n\t  }\n\t\n\t  return (file.size <= (5 * 1024 * 1024) ? false : true);\n\t};\n\t\n\t/**\n\t * Function that determines the slice method to be used\n\t * @private\n\t * @param {object} file - The file object you wish to determine the slice method for\n\t * @return {string} sliceMethod - The slice method to use.\n\t */\n\tUpload.prototype._getSliceMethod = function (file) {\n\t  var sliceMethod;\n\t\n\t  if ('mozSlice' in file) {\n\t    sliceMethod = 'mozSlice';\n\t  } else if ('webkitSlice' in file) {\n\t    sliceMethod = 'webkitSlice';\n\t  } else {\n\t    sliceMethod = 'slice';\n\t  }\n\t\n\t  return sliceMethod;\n\t};\n\t\n\tmodule.exports = Upload;\n\n\n/***/ },\n/* 11 */\n/***/ function(module, exports) {\n\n\t'use strict';\n\t\n\t/**\n\t * A management layer for storing app cache in session storage.\n\t */\n\tvar Cache = function (cacheAge) {\n\t  this.cacheAge = cacheAge;\n\t  this.enabled = this._checkCacheSupport();\n\t};\n\t\n\t/**\n\t * Return true if sessionStorage is supported.\n\t * @private\n\t * @return {boolean} True if sessionStorage is supported.\n\t */\n\tCache.prototype._checkCacheSupport = function () {\n\t\n\t  var support = 'support';\n\t\n\t  try {\n\t    window.sessionStorage.setItem(support, support);\n\t    window.sessionStorage.removeItem(support);\n\t    return true;\n\t  } catch (e) {\n\t    return false;\n\t  }\n\t\n\t};\n\t\n\t/**\n\t * Retrieve the cached result for the provided cacheKey.\n\t * @param  {string}   cacheKey  Key associated with the cached result.\n\t * @return {object}             Parse results object.\n\t */\n\tCache.prototype.retrieve = function (cacheKey) {\n\t  var data;\n\t  var value = null;\n\t  var expiry;\n\t\n\t  try {\n\t\n\t    data = window.sessionStorage.getItem(cacheKey);\n\t    data = JSON.parse(data);\n\t\n\t    if (!data) {\n\t      return value;\n\t    }\n\t\n\t    value = data.value;\n\t\n\t    if (data.expiry < Date.now()) {\n\t      // Cache is expired;\n\t      window.sessionStorage.removeItem(cacheKey);\n\t      value = null;\n\t    }\n\t\n\t  } catch (error) {\n\t    // Silent capture so that caching never gets in the way of returning a result.\n\t    value = null;\n\t  }\n\t\n\t  return value;\n\t};\n\t\n\t/**\n\t * Remove a result from the cache.\n\t * @param  {string}   cacheKey  Key associated with the cached result.\n\t * @return {boolean}            A boolean indicating success of the removal.\n\t */\n\tCache.prototype.remove = function (cacheKey) {\n\t  var result = true;\n\t\n\t  try {\n\t    window.sessionStorage.removeItem(cacheKey);\n\t  } catch (error) {\n\t    // Silent capture so that caching never gets in the way of returning a result.\n\t    result = false;\n\t  }\n\t\n\t  return result;\n\t};\n\t\n\t/**\n\t * Save the new result with its expiry date.\n\t * @param  {string}   cacheKey Unique cache key for the request.\n\t * @param  {number}   expiry   Unix timestamp for the expiry.\n\t * @param  {object}   result   Object to be cached.\n\t * @return {boolean}            A boolean indicating success of the save.\n\t */\n\tCache.prototype.save = function (cacheKey, value) {\n\t  var result = true;\n\t  var data = {};\n\t  var JSONResult;\n\t\n\t  try {\n\t\n\t    data.expiry = Date.now() + this.cacheAge;\n\t    data.value = value;\n\t\n\t    JSONResult = JSON.stringify(data);\n\t\n\t    window.sessionStorage.setItem(cacheKey, JSONResult);\n\t\n\t  } catch (error) {\n\t    // Silent capture so that caching never gets in the way of returning a result.\n\t    result = false;\n\t  }\n\t\n\t  return result;\n\t};\n\t\n\t/**\n\t * Return an object representing the differences between the provided object and the cached object.\n\t * @example\n\t * //'cachedObject' = {id: '12345'};\n\t * cache.diff('cachedObject', {title: 'test'});\n\t * // returns {title: 'test'}\n\t * @example\n\t * //'cachedObject' = {id: '12345', title: 'test'};\n\t * cache.diff('cachedObject', {title: 'test2'});\n\t * // returns {title: 'test2'}\n\t *\n\t * @param  {string} cacheKey  Cachekey of the object to compare against.\n\t * @param  {object} item      Object to compare against the cached object.\n\t * @param  {array}  forced    An array of properties to be returned in the resulting object regardless of difference.\n\t * @return {object}           An object containing the differences.\n\t */\n\tCache.prototype.diff = function (cacheKey, item, forced) {\n\t  var property, properties, propertiesLength, i;\n\t  var force, forcedLength, n;\n\t  var original = this.retrieve(cacheKey);\n\t  var diff = null;\n\t\n\t  if (forced) {\n\t    forcedLength = forced.length;\n\t  }\n\t\n\t  properties = Object.keys(item);\n\t  propertiesLength = properties.length;\n\t\n\t  if (!original) {\n\t    // return the compare object if the original item wasn't found.\n\t    return item;\n\t  }\n\t\n\t  // Walk the object and compare the properties.\n\t  for (i = 0; i < propertiesLength; i++) {\n\t    property = properties[i];\n\t\n\t    // Check the values if both objects have the property.\n\t    if (original.hasOwnProperty(property)) {\n\t      if (item[property] === original[property]) {\n\t        // If the values are the same we don't need to add it to the diff so continue.\n\t        continue;\n\t      }\n\t    }\n\t\n\t    // If the diff item is still null we need to create a new object to store the properties in.\n\t    if (!diff) {\n\t      diff = {};\n\t    }\n\t\n\t    // If we've made it this far the property is either a new one, or the item doesn't match.\n\t    diff[property] = item[property];\n\t\n\t  }\n\t\n\t  // As long as changes were found append the forced properties.\n\t  if (diff) {\n\t    for (n = 0; n < forcedLength; n++) {\n\t      property = forced[n];\n\t      diff[property] = item[property];\n\t    }\n\t  }\n\t\n\t  return diff;\n\t\n\t};\n\t\n\t/**\n\t * Return an object representing the differences between the provided objects and the cached object.\n\t * Similar to diff, but accepts an array of objects.\n\t *\n\t * @param  {string} cacheKey  Property on the provided objects that represents the cache key.\n\t * @param  {object} item      Object to compare against the cached object.\n\t * @param  {array}  forced    An array of properties to be returned in the resulting object regardless of difference.\n\t * @return {object}           An object containing the differences.\n\t */\n\tCache.prototype.diffArray = function (cacheKey, items, forced) {\n\t\n\t  var i;\n\t  var itemsLength = items.length;\n\t  var item;\n\t  var result = null;\n\t  var results = [];\n\t\n\t  for (i = 0; i < itemsLength; i++) {\n\t    item = items[i];\n\t\n\t    result = this.diff(item[cacheKey], item, forced);\n\t\n\t    // Only add it to the result set if changes were found.\n\t    if (result !== null) {\n\t      results.push(result);\n\t    }\n\t\n\t  }\n\t\n\t  return results;\n\t\n\t};\n\t\n\tmodule.exports = Cache;\n\n\n/***/ },\n/* 12 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\t\n\tvar extend = __webpack_require__(2);\n\tvar Request = __webpack_require__(3);\n\tvar utils = __webpack_require__(9);\n\t\n\t/**\n\t * Resource Object\n\t * @class\n\t */\n\tfunction Resource (options) {\n\t\n\t  this.defaults = {\n\t    host: 'https://api.ingest.io',\n\t    all: '/<%=resource%>',\n\t    byId: '/<%=resource%>/<%=id%>',\n\t    trash: '/<%=resource%>?filter=trashed',\n\t    deleteMethods: {\n\t      'permanent': '?permanent=1'\n\t    },\n\t    search: '/<%=resource%>?search=<%=input%>',\n\t    tokenSource: null,\n\t    resource: null\n\t  };\n\t\n\t  this.config = extend(true, {}, this.defaults, options);\n\t\n\t  this.cache = this.config.cache;\n\t\n\t}\n\t\n\t/**\n\t * Proxy the request to token source to ensure a value is always returned.\n\t * @private\n\t * @return {string} Auth token.\n\t */\n\tResource.prototype._tokenSource = function () {\n\t  var result = null;\n\t\n\t  if (this.config.tokenSource) {\n\t    result = this.config.tokenSource.call();\n\t  }\n\t\n\t  return result;\n\t};\n\t\n\t/**\n\t * Return a list of the requested resource for the current user and network.\n\t * @param  {object}   headers   Object representing headers to apply to the request.\n\t * @return {promise}            A promise which resolves when the request is complete.\n\t */\n\tResource.prototype.getAll = function (headers) {\n\t  var request;\n\t  var url = utils.parseTokens(this.config.host + this.config.all, {\n\t    resource: this.config.resource\n\t  });\n\t\n\t  request = new Request({\n\t    url: url,\n\t    token: this._tokenSource(),\n\t    headers: headers\n\t  });\n\t\n\t  return request.send()\n\t          .then(this._updateCachedResources.bind(this));\n\t};\n\t\n\t/**\n\t * Return a resource that matches the supplied id.\n\t * @param  {string}   id    Resource id.\n\t * @return {promise}        A promise which resolves when the request is complete.\n\t */\n\tResource.prototype.getById = function (id) {\n\t  var url, cachedResult, request;\n\t\n\t  if (typeof id !== 'string' || id.length <= 0) {\n\t    return utils.promisify(false,\n\t      'IngestAPI Resource getById requires a valid id passed as a string.');\n\t  }\n\t\n\t  url = utils.parseTokens(this.config.host + this.config.byId, {\n\t    resource: this.config.resource,\n\t    id: id\n\t  });\n\t\n\t  if (this.cache && this.cache.enabled) {\n\t    // retrieve the cached item.\n\t    cachedResult = this.cache.retrieve(id);\n\t  }\n\t\n\t  // Return a cached result if we've found one.\n\t  if (cachedResult) {\n\t    return utils.promisify(true, {\n\t      data: cachedResult\n\t    });\n\t  } else {\n\t\n\t    request = new Request({\n\t      url: url,\n\t      token: this._tokenSource()\n\t    });\n\t\n\t    return request.send()\n\t      .then(this._updateCachedResource.bind(this));\n\t\n\t  }\n\t};\n\t\n\t/**\n\t * Return the resources currently in the trash.\n\t * @param  {object} headers Headers to be passed along with the request for pagination.\n\t * @return {promise}         A promise which resolves when the request is complete.\n\t */\n\tResource.prototype.getTrashed = function (headers) {\n\t  var request;\n\t  var url = utils.parseTokens(this.config.host + this.config.trash, {\n\t    resource: this.config.resource\n\t  });\n\t\n\t  request = new Request({\n\t    url: url,\n\t    token: this._tokenSource(),\n\t    headers: headers\n\t  });\n\t\n\t  return request.send();\n\t};\n\t\n\t/**\n\t * Add a new resource.\n\t * @param   {object}  resource  An object representing the resource to add.\n\t * @return  {promise}           A promise which resolves when the request is complete.\n\t */\n\tResource.prototype.add = function (resource) {\n\t  var url, request;\n\t\n\t  if (typeof resource !== 'object') {\n\t    return utils.promisify(false,\n\t      'IngestAPI Resource add requires a resource passed as an object.');\n\t  }\n\t\n\t  url = utils.parseTokens(this.config.host + this.config.all, {\n\t    resource: this.config.resource\n\t  });\n\t\n\t  request = new Request({\n\t    url: url,\n\t    token: this._tokenSource(),\n\t    method: 'POST',\n\t    data: resource\n\t  });\n\t\n\t  return request.send()\n\t          .then(this._updateCachedResource.bind(this));\n\t};\n\t\n\t/**\n\t * Update an existing resource with new content.\n\t * @param  {object|array} resource  An object or an array of objects representing the resource(s) to be updated.\n\t * @return {promise}                A promise which resolves when the request is complete.\n\t */\n\tResource.prototype.update = function (resource) {\n\t  var request, data, url;\n\t\n\t  if (typeof resource !== 'object') {\n\t    return utils.promisify(false,\n\t      'IngestAPI Resource update requires a resource to be passed as an object.');\n\t  }\n\t\n\t  data = resource;\n\t\n\t  url = utils.parseTokens(this.config.host + this.config.byId, {\n\t    resource: this.config.resource,\n\t    id: resource.id\n\t  });\n\t\n\t  if (this.cache && this.cache.enabled) {\n\t    data = this.cache.diff(resource.id, resource);\n\t  }\n\t\n\t  // Null is returned in the case that the two objects match.\n\t  if (!data) {\n\t    // Return a fulfilled promise with the cached object.\n\t    return utils.promisify(true, {\n\t      data: this.cache.retrieve(resource.id)\n\t    });\n\t  }\n\t\n\t  request = new Request({\n\t    url: url,\n\t    token: this._tokenSource(),\n\t    method: 'PATCH',\n\t    data: data\n\t  });\n\t\n\t  return request.send()\n\t          .then(this._updateCachedResource.bind(this));\n\t};\n\t\n\t/**\n\t * Delete an existing resource\n\t * @param  {string}   resource  The id for the resource to be deleted.\n\t * @param  {boolean}  async     A flag to indicate if this should be an async request to delete.\n\t *\n\t * @return {Promise}            A promise which resolves when the request is complete.\n\t */\n\tResource.prototype.delete = function (resource, async) {\n\t  if (typeof async !== 'boolean') {\n\t    async = true;\n\t  }\n\t\n\t  if (typeof resource !== 'string') {\n\t    return utils.promisify(false,\n\t      'IngestAPI Resource delete requires a resource to be passed as a string.');\n\t  }\n\t\n\t  return this._deleteResource(resource, false, async);\n\t};\n\t\n\t/**\n\t * Permanently delete an existing resource.\n\t * @param  {string}   resource  The id for the resource to be deleted.\n\t * @param  {boolean}  async     A flag to indicate if this should be an async request to delete.\n\t *\n\t * @return {Promise}            A promise which resolves when the request is complete.\n\t */\n\tResource.prototype.permanentDelete = function (resource, async) {\n\t  if (typeof async !== 'boolean') {\n\t    async = true;\n\t  }\n\t\n\t  if (typeof resource !== 'string') {\n\t    return utils.promisify(false,\n\t      'IngestAPI Resource delete requires a resource to be passed as a string.');\n\t  }\n\t\n\t  return this._deleteResource(resource, true, async);\n\t};\n\t\n\t/**\n\t * Delete a single resource\n\t * @private\n\t * @param   {object}    resource    The id of the resource to be deleted.\n\t * @param   {boolean}   permanent   A flag to permanently delete each video.\n\t * @return  {promise}               A promise which resolves when the request is complete.\n\t */\n\tResource.prototype._deleteResource = function (resource, permanent) {\n\t  var request;\n\t\n\t  var url = utils.parseTokens(this.config.host + this.config.byId, {\n\t    resource: this.config.resource,\n\t    id: resource\n\t  });\n\t\n\t  if (permanent === true) {\n\t    url += this.config.deleteMethods.permanent;\n\t  }\n\t\n\t  request = new Request({\n\t    url: url,\n\t    token: this._tokenSource(),\n\t    method: 'DELETE'\n\t  });\n\t\n\t  return request.send()\n\t    .then(this._deleteCachedResource.bind(this, resource));\n\t};\n\t\n\t/**\n\t * Delete an existing resource\n\t * @param  {string}     resource    The id for the resource to be deleted.\n\t * @param  {function}   callback    A Synchronous callback for handling any errors, or working with the http response.\n\t */\n\tResource.prototype.deleteSync = function (resource, callback) {\n\t\n\t  if (typeof resource !== 'string') {\n\t    callback(new Error('IngestAPI Resource delete requires a resource to be passed as a string.'));\n\t    return;\n\t  }\n\t\n\t  this._deleteResourceSync(resource, false, callback);\n\t\n\t};\n\t\n\t/**\n\t * Permanently delete an existing resource.\n\t * @param   {string}    resource    The id for the resource to be deleted.\n\t * @param   {function}  callback    A Synchronous callback for handling any errors, or working with the http response.\n\t */\n\tResource.prototype.permanentDeleteSync = function (resource, callback) {\n\t\n\t  if (typeof resource !== 'string') {\n\t    callback(new Error('IngestAPI Resource delete requires a resource to be passed as a string.'));\n\t    return;\n\t  }\n\t\n\t  this._deleteResourceSync(resource, true, callback);\n\t\n\t};\n\t\n\t/**\n\t * Delete a single resource synchronously\n\t * @private\n\t * @param   {object}    resource    The id of the resource to be deleted.\n\t * @param   {boolean}   permanent   A flag to permanently delete each video.\n\t * @param   {function}  callback    A Synchronous callback for handling any errors, or working with the http response.\n\t */\n\tResource.prototype._deleteResourceSync = function (resource, permanent, callback) {\n\t  var request;\n\t\n\t  var url = utils.parseTokens(this.config.host + this.config.byId, {\n\t    resource: this.config.resource,\n\t    id: resource\n\t  });\n\t\n\t  if (permanent === true) {\n\t    url += this.config.deleteMethods.permanent;\n\t  }\n\t\n\t  request = new Request({\n\t    url: url,\n\t    async: false,\n\t    token: this._tokenSource(),\n\t    method: 'DELETE'\n\t  });\n\t\n\t  request.sendSync(callback);\n\t\n\t};\n\t\n\t/**\n\t * Return a subset of items that match the search terms.\n\t * @param  {string}   input     The search terms to match against.\n\t * @param  {object}   headers   The headers to be passed to the request.\n\t * @param  {boolean}  trash     Should we be searching the trash.\n\t * @return {Promise}          A promise which resolves when the request is complete.\n\t */\n\tResource.prototype.search = function (input, headers, trash) {\n\t  var url, request;\n\t\n\t  if (typeof input !== 'string') {\n\t    return utils.promisify(false,\n\t      'IngestAPI Resource search requires search input to be passed as a string.');\n\t  }\n\t\n\t  url = utils.parseTokens(this.config.host + this.config.search, {\n\t    resource: this.config.resource,\n\t    input: encodeURIComponent(input)\n\t  });\n\t\n\t  if (trash) {\n\t    url = url + '&filter=trashed';\n\t  }\n\t\n\t  request = new Request({\n\t    url: url,\n\t    token: this._tokenSource(),\n\t    headers: headers\n\t  });\n\t\n\t  return request.send();\n\t};\n\t\n\t/**\n\t * Return a subset of items that match the search terms in the trash.\n\t * @param  {string} input    The search terms to match against.\n\t * @param  {object} headers  The headers to be passed to the request.\n\t * @return {Promise}          A promise which resolves when the request is complete.\n\t */\n\tResource.prototype.searchTrash = function (input, headers) {\n\t  return this.search(input, headers, true);\n\t};\n\t\n\t/**\n\t * Get the total count of resources.\n\t * @return {promise} A promise which resolves when the request is complete.\n\t */\n\tResource.prototype.count = function () {\n\t  var request;\n\t  var url = utils.parseTokens(this.config.host + this.config.all, {\n\t    resource: this.config.resource\n\t  });\n\t\n\t  request = new Request({\n\t    url: url,\n\t    token: this._tokenSource(),\n\t    method: 'HEAD'\n\t  });\n\t\n\t  return request.send()\n\t          .then(this._handleCountResponse);\n\t};\n\t\n\t/**\n\t * Get the total count of resources in the trash.\n\t * @return {promise} A promise which resolves when the request is complete.\n\t */\n\tResource.prototype.trashCount = function () {\n\t  var request;\n\t  var url = utils.parseTokens(this.config.host + this.config.trash, {\n\t    resource: this.config.resource\n\t  });\n\t\n\t  request = new Request({\n\t    url: url,\n\t    token: this._tokenSource(),\n\t    method: 'HEAD'\n\t  });\n\t\n\t  return request.send()\n\t          .then(this._handleCountResponse);\n\t};\n\t\n\t/**\n\t * Return the resource count from the response.\n\t * @private\n\t * @param  {object} response Request response object.\n\t * @return {number}          The resource count.\n\t */\n\tResource.prototype._handleCountResponse = function (response) {\n\t  return parseInt(response.headers('Resource-Count'), 10);\n\t};\n\t\n\t/**\n\t * Update a single cached resource based on the response data.\n\t * @param  {object}   response   Response object from the getAll request.\n\t * @return {response}            Response object from the getAll request.\n\t */\n\tResource.prototype._updateCachedResource = function (response) {\n\t  if (this.cache && this.cache.enabled) {\n\t    this.cache.save(response.data.id, response.data);\n\t  }\n\t\n\t  return response;\n\t};\n\t\n\t/**\n\t * Store the returned items in cache.\n\t * @param  {object}   response   Response object from the getAll request.\n\t * @return {response}            Response object from the getAll request.\n\t */\n\tResource.prototype._updateCachedResources = function (response) {\n\t  var data = response.data;\n\t  var dataLength = data.length;\n\t  var i;\n\t\n\t  if (this.cache && this.cache.enabled) {\n\t    for (i = 0; i < dataLength; i++) {\n\t      this.cache.save(data[i].id, data[i]);\n\t    }\n\t\n\t  }\n\t\n\t  return response;\n\t};\n\t\n\t/**\n\t * Delete a single cached resource.\n\t * @param  {string} id            ID of the resource to remove.\n\t * @param  {object}   response    Response object from the getAll request.\n\t * @return {response}             Response object from the getAll request.\n\t */\n\tResource.prototype._deleteCachedResource = function (id, response) {\n\t  if (this.cache && this.cache.enabled) {\n\t    this.cache.remove(id);\n\t  }\n\t\n\t  return response;\n\t};\n\t\n\tmodule.exports = Resource;\n\n\n/***/ },\n/* 13 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\t\n\tvar Resource = __webpack_require__(12);\n\tvar Request = __webpack_require__(3);\n\tvar utils = __webpack_require__(9);\n\tvar extend = __webpack_require__(2);\n\t\n\tfunction PlaybackContent (options) {\n\t\n\t  var overrides = {\n\t    thumbnail: '/<%=resource%>/<%=id%>/thumbnail',\n\t    thumbnails: '/<%=resource%>/<%=id%>/thumbnails',\n\t    deleteThumbnail: '/<%=resource%>/<%=id%>/thumbnail/<%=thumbnailId%>'\n\t  };\n\t\n\t  options = extend(true, {}, overrides, options);\n\t\n\t  Resource.call(this, options);\n\t\n\t};\n\t\n\t// This extends the base class of 'Resource'.\n\tPlaybackContent.prototype = Object.create(Resource.prototype);\n\tPlaybackContent.prototype.constructor = PlaybackContent;\n\t\n\t/**\n\t * Retrieve all thumbnails for a provided resource id.\n\t * @param {string}    id    ID of the resource to retrieve thumbnails for.\n\t * @return {promise}        A promise which resolves when the request is complete.\n\t */\n\tPlaybackContent.prototype.getThumbnails = function (id) {\n\t  var url, request;\n\t\n\t  if (typeof id !== 'string') {\n\t    return utils.promisify(false,\n\t      'IngestAPI PlaybackContent getThumbnails requires an id to be passed as a string.');\n\t  }\n\t\n\t  url = utils.parseTokens(this.config.host + this.config.thumbnails, {\n\t    resource: this.config.resource,\n\t    id: id\n\t  });\n\t\n\t  request = new Request({\n\t    url: url,\n\t    token: this._tokenSource()\n\t  });\n\t\n\t  return request.send();\n\t};\n\t\n\t/**\n\t * Add external images to the resource id.\n\t * @param   {string}          id      ID of the resource to add the external thumbnails to.\n\t * @param   {string|array}    images  A path to the image, or an array of image paths.\n\t * @return  {promise}                 A promise which resolves when the request is complete.\n\t */\n\tPlaybackContent.prototype.addExternalThumbnails = function (id, images) {\n\t\n\t  var url, request;\n\t\n\t  var imagesToAdd = [];\n\t\n\t  if (typeof id !== 'string') {\n\t    return utils.promisify(false,\n\t      'IngestAPI PlaybackContent addExternal requires an id to be passed as a string.');\n\t  }\n\t\n\t  // Early return if the types do not match what we are expecting.\n\t  if (!Array.isArray(images) && typeof images !== 'string') {\n\t    return utils.promisify(false,\n\t      'IngestAPI PlaybackContent addExternal requires images as a string or an array of strings.');\n\t  }\n\t\n\t  // If we already have an array replace the outgoing array, otherwise push the image path to the array.\n\t  // This ensures we are always passing an array.\n\t  if (Array.isArray(images)) {\n\t    imagesToAdd = images;\n\t  } else {\n\t    imagesToAdd.push(images);\n\t  }\n\t\n\t  url = utils.parseTokens(this.config.host + this.config.thumbnails, {\n\t    resource: this.config.resource,\n\t    id: id\n\t  });\n\t\n\t  request = new Request({\n\t    method: 'POST',\n\t    url: url,\n\t    token: this._tokenSource(),\n\t    data: imagesToAdd\n\t  });\n\t\n\t  return request.send();\n\t\n\t};\n\t\n\t/**\n\t * Add external images to the resource id.\n\t * @param   {string}        id        ID of the resource to add the external thumbnails to.\n\t * @param   {file}          image     A JavaScript File interface representing the image to upload.\n\t * @return  {promise}                 A promise which resolves when the request is complete.\n\t */\n\tPlaybackContent.prototype.uploadThumbnail = function (id, image) {\n\t\n\t  var request, url, formData;\n\t\n\t  if (typeof id !== 'string') {\n\t    return utils.promisify(false,\n\t      'IngestAPI PlaybackContent uploadThumbnail requires an id to be passed as a string.');\n\t  }\n\t\n\t  // Early return if the types do not match what we are expecting.\n\t  if (!image || !(image instanceof File) || !utils.isImage(image)) {\n\t    return utils.promisify(false,\n\t      'IngestAPI PlaybackContent uploadThumbnail requires a valid image.');\n\t  }\n\t\n\t  url = utils.parseTokens(this.config.host + this.config.thumbnail, {\n\t    resource: this.config.resource,\n\t    id: id\n\t  });\n\t\n\t  // Create a new FormData object so the request is properly sent as multipart.\n\t  formData = new FormData();\n\t  formData.append('image', image);\n\t\n\t  request = new Request({\n\t    method: 'POST',\n\t    url: url,\n\t    token: this._tokenSource(),\n\t    data: formData\n\t  });\n\t\n\t  return request.send();\n\t\n\t};\n\t\n\t/**\n\t * Remove an external thumbnail image.\n\t *\n\t * @param   {string}    id            ID of the resource to remove the thumbnail from.\n\t * @param   {string}    thumbnailId   ID of the thumbnail to remove from the resource.\n\t * @return  {promise}                 A promise which resolves when the request is complete.\n\t */\n\tPlaybackContent.prototype.deleteThumbnail = function (id, thumbnailId) {\n\t\n\t  var request, url;\n\t\n\t  if (typeof id !== 'string') {\n\t    return utils.promisify(false,\n\t      'IngestAPI PlaybackContent deleteThumbnail requires an id to be passed as a string.');\n\t  }\n\t\n\t  if (typeof thumbnailId !== 'string') {\n\t    return utils.promisify(false,\n\t      'IngestAPI PlaybackContent deleteThumbanil requires a thumbnailId to be passed as a string.');\n\t  }\n\t\n\t  url = utils.parseTokens(this.config.host + this.config.deleteThumbnail, {\n\t    resource: this.config.resource,\n\t    id: id,\n\t    thumbnailId: thumbnailId\n\t  });\n\t\n\t  request = new Request({\n\t    method: 'DELETE',\n\t    url: url,\n\t    token: this._tokenSource()\n\t  });\n\t\n\t  return request.send();\n\t\n\t};\n\t\n\tmodule.exports = PlaybackContent;\n\n\n/***/ },\n/* 14 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\t\n\tvar Resource = __webpack_require__(12);\n\tvar Request = __webpack_require__(3);\n\tvar utils = __webpack_require__(9);\n\tvar extend = __webpack_require__(2);\n\t\n\tfunction Users (options) {\n\t\n\t  var overrides = {\n\t    currentUser: '/users/me',\n\t    transfer: '/users/<%=oldId%>/transfer/<%=newId%>',\n\t    revoke: '/revoke'\n\t  };\n\t\n\t  options = extend(true, {}, overrides, options);\n\t\n\t  Resource.call(this, options);\n\t\n\t};\n\t\n\t// This extends the base class of 'Resource'.\n\tUsers.prototype = Object.create(Resource.prototype);\n\tUsers.prototype.constructor = Users;\n\t\n\t/**\n\t * Retrieve information for the current user.\n\t *\n\t * @return {Promise} A promise which resolves when the request is complete.\n\t */\n\tUsers.prototype.getCurrentUserInfo = function () {\n\t  var request = new Request({\n\t    url: this.config.host + this.config.currentUser,\n\t    token: this._tokenSource()\n\t  });\n\t\n\t  return request.send();\n\t};\n\t\n\t/**\n\t * Transfer all authorship currently under the specified user onto another.\n\t * This includes all videos & playlists.\n\t * This task is commonly used in conjunction with permanently deleting a user.\n\t *\n\t * @param {string} oldId - The user who currently has authorship.\n\t * @param {string} newId - The user to transfer authorship to.\n\t *\n\t * @return {Promise} A promise which resolves when the request is complete.\n\t */\n\tUsers.prototype.transferUserAuthorship = function (oldId, newId) {\n\t  var tokens, url, request;\n\t\n\t  if (typeof oldId !== 'string') {\n\t    return utils.promisify(false,\n\t      'IngestAPI transferUserAuthorship requires \"oldId\" to be passed as a string.');\n\t  }\n\t\n\t  if (typeof newId !== 'string') {\n\t    return utils.promisify(false,\n\t      'IngestAPI transferUserAuthorship requires \"newId\" to be passed as a string');\n\t  }\n\t\n\t  tokens = {\n\t    oldId: oldId,\n\t    newId: newId\n\t  };\n\t\n\t  url = utils.parseTokens(this.config.host + this.config.transfer, tokens);\n\t\n\t  request = new Request({\n\t    url: url,\n\t    token: this._tokenSource(),\n\t    method: 'PATCH'\n\t  });\n\t\n\t  return request.send();\n\t};\n\t\n\t/**\n\t * Revokes the authorization token for the current user.\n\t *\n\t * @return {Promise} A promise which resolves when the request is complete.\n\t */\n\tUsers.prototype.revokeCurrentUser = function () {\n\t  var request = new Request({\n\t    url: this.config.host + this.config.currentUser + this.config.revoke,\n\t    token: this._tokenSource(),\n\t    method: 'DELETE'\n\t  });\n\t\n\t  return request.send();\n\t};\n\t\n\tmodule.exports = Users;\n\n\n/***/ },\n/* 15 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\t\n\tvar Resource = __webpack_require__(12);\n\tvar Request = __webpack_require__(3);\n\tvar utils = __webpack_require__(9);\n\tvar extend = __webpack_require__(2);\n\t\n\tfunction Networks (options) {\n\t\n\t  var overrides = {\n\t    keys: '/<%=resource%>/<%=networkId%>/keys',\n\t    keysById: '/<%=resource%>/<%=networkId%>/keys/<%=keyId%>',\n\t    invite: '/<%=resource%>/<%=networkId%>/invite',\n\t    invoices: '/<%=resource%>/<%=networkId%>/invoices',\n\t    invoicesById: '/<%=resource%>/<%=networkId%>/invoices/<%=invoiceId%>',\n\t    currentUsage: '/<%=resource%>/<%=networkId%>/invoices?currentUsage=true',\n\t    customers: '/<%=resource%>/<%=networkId%>/customers',\n\t    customerById: '/<%=resource%>/<%=networkId%>/customers/<%=cusId%>',\n\t    customerCardInformation: '/<%=resource%>/<%=networkId%>/customers/<%=cusId%>/card',\n\t    getPendingUsers: '/<%=resource%>/<%=networkId%>?filter=pending',\n\t    deletePendingUser: '/<%=resource%>/<%=networkId%>/pending-users/<%=pendingUserId%>',\n\t  };\n\t\n\t  options = extend(true, {}, overrides, options);\n\t\n\t  Resource.call(this, options);\n\t\n\t};\n\t\n\t// This extends the base class of 'Resource'.\n\tNetworks.prototype = Object.create(Resource.prototype);\n\tNetworks.prototype.constructor = Networks;\n\t\n\t/**\n\t * Link an existing user to the specified network.\n\t *\n\t * @param {string}  networkId  The unique ID of the network.\n\t * @param {string}  userId     The unique ID of the user to link.\n\t *\n\t * @return {Promise}  A promise which resolves when the request is complete.\n\t */\n\tNetworks.prototype.linkUser = function (networkId, userId) {\n\t  var data, request, url;\n\t\n\t  if (typeof networkId !== 'string') {\n\t    return utils.promisify(false,\n\t      'IngestAPI linkUser requires \"networkId\" to be passed as a string.');\n\t  }\n\t\n\t  if (typeof userId !== 'string') {\n\t    return utils.promisify(false,\n\t      'IngestAPI linkUser requires \"userId\" to be passed as a string.');\n\t  }\n\t\n\t  data = {\n\t    id: userId\n\t  };\n\t\n\t  url = utils.parseTokens(this.config.host + this.config.byId, {\n\t    resource: this.config.resource,\n\t    id: networkId\n\t  });\n\t\n\t  request = new Request({\n\t    url: url,\n\t    data: data,\n\t    token: this._tokenSource(),\n\t    method: 'LINK'\n\t  });\n\t\n\t  return request.send();\n\t};\n\t\n\t/**\n\t * Removes the specified user from the specified network.\n\t *\n\t * @param {string}  networkId  The unique ID of the network.\n\t * @param {string}  userId     The unique ID of the user to unlink.\n\t *\n\t * @return {Promise}  A promise which resolves when the request is complete.\n\t */\n\tNetworks.prototype.unlinkUser = function (networkId, userId) {\n\t  var data, request, url;\n\t\n\t  if (typeof networkId !== 'string') {\n\t    return utils.promisify(false,\n\t      'IngestAPI unlinkUser requires \"networkId\" to be passed as a string.');\n\t  }\n\t\n\t  if (typeof userId !== 'string') {\n\t    return utils.promisify(false,\n\t      'IngestAPI unlinkUser requires \"userId\" to be passed as a string.');\n\t  }\n\t\n\t  data = {\n\t    id: userId\n\t  };\n\t\n\t  url = utils.parseTokens(this.config.host + this.config.byId, {\n\t    resource: this.config.resource,\n\t    id: networkId\n\t  });\n\t\n\t  request = new Request({\n\t    url: url,\n\t    data: data,\n\t    token: this._tokenSource(),\n\t    method: 'UNLINK'\n\t  });\n\t\n\t  return request.send();\n\t};\n\t\n\t/**\n\t * Invites a user to the specified network.\n\t *\n\t * @param {string}  networkId  The unique ID of the network.\n\t * @param {string}  email      The email to send the invite to.\n\t * @param {string}  name       The name of the person to invite.\n\t * @param {boolean} resend     [Optional] True: Resend an invite. False for first time invite. Default value is false.\n\t *\n\t * @return {Promise} A promise which resolves when the request is complete.\n\t */\n\tNetworks.prototype.inviteUser = function (networkId, email, name, resend) {\n\t  var data, request, url;\n\t\n\t  if (typeof networkId !== 'string') {\n\t    return utils.promisify(false,\n\t      'IngestAPI inviteUser requires \"networkId\" to be passed as a string.');\n\t  }\n\t\n\t  if (typeof email !== 'string') {\n\t    return utils.promisify(false,\n\t      'IngestAPI inviteUser requires \"email\" to be passed as a string.');\n\t  }\n\t\n\t  if (typeof name !== 'string') {\n\t    return utils.promisify(false,\n\t      'IngestAPI inviteUser requires \"name\" to be passed as a string.');\n\t  }\n\t\n\t  data = {\n\t    email: email,\n\t    name: name\n\t  };\n\t\n\t  if (typeof resend === 'boolean') {\n\t    data.resend = resend;\n\t  }\n\t\n\t  url = utils.parseTokens(this.config.host + this.config.invite, {\n\t    resource: this.config.resource,\n\t    networkId: networkId\n\t  });\n\t\n\t  request = new Request({\n\t    url: url,\n\t    data: data,\n\t    token: this._tokenSource(),\n\t    method: 'POST'\n\t  });\n\t\n\t  return request.send();\n\t};\n\t\n\t/**\n\t * Gets a list of all secure keys for the network given.\n\t *\n\t * @param {string}  networkId  The unique ID of the network.\n\t *\n\t * @return {Promise}  A promise which resolves when the request is complete.\n\t */\n\tNetworks.prototype.getSecureKeys = function (networkId) {\n\t  var request, url;\n\t\n\t  if (typeof networkId !== 'string') {\n\t    return utils.promisify(false,\n\t      'IngestAPI getSecureKeys requires \"networkId\" to be passed as a string.');\n\t  }\n\t\n\t  url = utils.parseTokens(this.config.host + this.config.keys, {\n\t    resource: this.config.resource,\n\t    networkId: networkId\n\t  });\n\t\n\t  request = new Request({\n\t    url: url,\n\t    token: this._tokenSource()\n\t  });\n\t\n\t  return request.send();\n\t};\n\t\n\t/**\n\t * Adds a new secure key to the specified network.\n\t *\n\t * @param {string}  networkId   The unique ID of the network.\n\t * @param {object}  data        The object containing data for the secure key entry.\n\t * @param {string}  data.title  Optional. The title of the secure key. Will default to \"Default Key Title\"\n\t * @param {string}  data.key    The public key in RSA format.\n\t *\n\t * @return {Promise}  A promise which resolves when the request is complete.\n\t */\n\tNetworks.prototype.addSecureKey = function (networkId, data) {\n\t  var request, url;\n\t\n\t  if (typeof networkId !== 'string') {\n\t    return utils.promisify(false,\n\t      'IngestAPI addSecureKey requires \"networkId\" to be passed as a string.');\n\t  }\n\t\n\t  if (typeof data !== 'object') {\n\t    return utils.promisify(false,\n\t      'IngestAPI addSecureKey requires \"data\" to be passed as an object.');\n\t  }\n\t\n\t  if (typeof data.key !== 'string') {\n\t    return utils.promisify(false,\n\t      'IngestAPI addSecureKey requires that the key be a string in RSA public key format.');\n\t  }\n\t\n\t  // The title must be a string.\n\t  if (typeof data.title !== 'string') {\n\t    data.title = '';\n\t  }\n\t\n\t  url = utils.parseTokens(this.config.host + this.config.keys, {\n\t    resource: this.config.resource,\n\t    networkId: networkId\n\t  });\n\t\n\t  request = new Request({\n\t    url: url,\n\t    token: this._tokenSource(),\n\t    method: 'POST',\n\t    data: data\n\t  });\n\t\n\t  return request.send();\n\t};\n\t\n\t/**\n\t * Retrieves a single network secure key entry based on the unique ID given.\n\t *\n\t * @param {string}  networkId  The unique ID of the network.\n\t * @param {string}  keyId      The unique ID of the secure key entry.\n\t *\n\t * @return {Promise}  A promise which resolves when the request is complete.\n\t */\n\tNetworks.prototype.getSecureKeyById = function (networkId, keyId) {\n\t  var url, request;\n\t\n\t  if (typeof networkId !== 'string') {\n\t    return utils.promisify(false,\n\t      'IngestAPI getSecureKeyById requires a \"networkId\" to be passed as a string.');\n\t  }\n\t\n\t  if (typeof keyId !== 'string') {\n\t    return utils.promisify(false,\n\t      'IngestAPI getSecureKeyById requires a \"keyId\" to be passed as a string.');\n\t  }\n\t\n\t  url = utils.parseTokens(this.config.host + this.config.keysById, {\n\t    resource: this.config.resource,\n\t    networkId: networkId,\n\t    keyId: keyId\n\t  });\n\t\n\t  request = new Request({\n\t    url: url,\n\t    token: this._tokenSource()\n\t  });\n\t\n\t  return request.send();\n\t};\n\t\n\t/**\n\t * Updates an individual secure key entry in the network specified.\n\t *\n\t * @param {string}  networkId   The unique ID of the network.\n\t * @param {object}  data        The object containing data for the secure key entry.\n\t * @param {string}  data.title  The title for the current network.\n\t *\n\t * @return {Promise} A promise which resolves when the request is complete.\n\t */\n\tNetworks.prototype.updateSecureKey = function (networkId, data) {\n\t  var url, request;\n\t\n\t  if (typeof networkId !== 'string') {\n\t    return utils.promisify(false,\n\t      'IngestAPI updateSecureKeyById requires \"networkId\" to be passed as a string.');\n\t  }\n\t\n\t  if (typeof data !== 'object') {\n\t    return utils.promisify(false,\n\t      'IngestAPI updateSecureKeyById requires \"data\" to be passed as an object.');\n\t  }\n\t\n\t  if (typeof data.id !== 'string') {\n\t    return utils.promisify(false,\n\t      'IngestAPI updateSecureKeyById requires param \"data.id\" to be a string.');\n\t  }\n\t\n\t  if (typeof data.title !== 'string') {\n\t    data.title = '';\n\t  }\n\t\n\t  url = utils.parseTokens(this.config.host + this.config.keysById, {\n\t    resource: this.config.resource,\n\t    networkId: networkId,\n\t    keyId: data.id\n\t  });\n\t\n\t  request = new Request({\n\t    url: url,\n\t    token: this._tokenSource(),\n\t    method: 'PATCH',\n\t    data: data\n\t  });\n\t\n\t  return request.send();\n\t};\n\t\n\t/**\n\t * Deletes a single network secure key entry based on the unique ID given.\n\t *\n\t * @param {string}  networkId  The unique ID of the network.\n\t * @param {string}  keyId      The unique ID of the secure key entry.\n\t *\n\t * @return {Promise}  A promise which resolves when the request is complete.\n\t */\n\tNetworks.prototype.deleteSecureKey = function (networkId, keyId) {\n\t  var url, request;\n\t\n\t  if (typeof networkId !== 'string') {\n\t    return utils.promisify(false,\n\t      'IngestAPI deleteSecureKeyById requires a \"networkId\" to be passed as a string.');\n\t  }\n\t\n\t  if (typeof keyId !== 'string') {\n\t    return utils.promisify(false,\n\t      'IngestAPI deleteSecureKeyById requires a \"keyId\" to be passed as a string.');\n\t  }\n\t\n\t  url = utils.parseTokens(this.config.host + this.config.keysById, {\n\t    resource: this.config.resource,\n\t    networkId: networkId,\n\t    keyId: keyId\n\t  });\n\t\n\t  request = new Request({\n\t    url: url,\n\t    token: this._tokenSource(),\n\t    method: 'DELETE'\n\t  });\n\t\n\t  return request.send();\n\t\n\t};\n\t\n\t/**\n\t * Creates a Stripe customer for the given network ID.\n\t *\n\t * @param {string} stripeToken - The Stripe token to reference submitted payment details.\n\t * @param {string} networkId   - The network UUID for this Stripe customer.\n\t *\n\t * @return {Promise} A promise which resolves when the request is complete.\n\t */\n\tNetworks.prototype.createCustomer = function (stripeToken, networkId) {\n\t  var url, request, data;\n\t\n\t  if (typeof stripeToken !== 'string' || typeof networkId !== 'string') {\n\t    return utils.promisify(false,\n\t      'IngestAPI Networks createCustomer requires stripeToken and networkId to be strings.');\n\t  }\n\t\n\t  url = utils.parseTokens(this.config.host + this.config.customers, {\n\t    networkId: networkId,\n\t    resource: this.config.resource\n\t  });\n\t\n\t  data = {\n\t    stripeToken: stripeToken\n\t  };\n\t\n\t  request = new Request({\n\t    url: url,\n\t    data: data,\n\t    token: this._tokenSource(),\n\t    method: 'POST'\n\t  });\n\t\n\t  return request.send();\n\t};\n\t\n\t/**\n\t * Updates an existing Stripe customer for the given network ID.\n\t *\n\t * @param {string} networkId   - The networkID that this Stripe customer belongs to.\n\t * @param {string} cusId       - The Stripe customer ID you wish to update.\n\t * @param {string} networkName - [Optional] Only provide if you wish to update the network name on the Stripe customer.\n\t * @param {string} stripeToken - [Optional] Provide only if payment details have been updated.\n\t *\n\t * @return {Promise} A promise which resolves when the request is complete.\n\t *\n\t */\n\tNetworks.prototype.updateCustomer = function (networkId, cusId, networkName, stripeToken) {\n\t  var url, request, data;\n\t\n\t  if (typeof networkId !== 'string' || typeof cusId !== 'string') {\n\t    return utils.promisify(false,\n\t      'IngestAPI Networks updateCustomer requires `networkId` and `cusID` to be a string.');\n\t  }\n\t\n\t  if (typeof networkName !== 'string' && typeof stripeToken !== 'string') {\n\t    return utils.promisify(false,\n\t      'IngestAPI Networks updateCustomer requires either networkName or stripeToken passed as a string.');\n\t  }\n\t\n\t  url = utils.parseTokens(this.config.host + this.config.customerById, {\n\t    resource: this.config.resource,\n\t    networkId: networkId,\n\t    cusId: cusId\n\t  });\n\t\n\t  data = {\n\t    networkName: networkName,\n\t    stripeToken: stripeToken\n\t  };\n\t\n\t  request = new Request({\n\t    url: url,\n\t    data: data,\n\t    token: this._tokenSource(),\n\t    method: 'PATCH'\n\t  });\n\t\n\t  return request.send();\n\t};\n\t\n\t/**\n\t * Deletes an existing Stripe customer for the given network ID.\n\t *\n\t * @param {string} networkId - The network ID that the customer belongs to.\n\t * @param {string} cusId     - The Stripe customer ID to be deleted.\n\t *\n\t * @return {Promise} A promise which resolves when the request is complete.\n\t *\n\t */\n\tNetworks.prototype.deleteCustomer = function (networkId, cusId) {\n\t\n\t  var url, request;\n\t\n\t  if (typeof networkId !== 'string' || typeof cusId !== 'string') {\n\t    return utils.promisify(false,\n\t      'IngestAPI Networks deleteCustomer requires `networkId` and `cusId` to be strings.');\n\t  }\n\t\n\t  url = utils.parseTokens(this.config.host + this.config.customerById, {\n\t    resource: this.config.resource,\n\t    networkId: networkId,\n\t    cusId: cusId\n\t  });\n\t\n\t  request = new Request({\n\t    url: url,\n\t    token: this._tokenSource(),\n\t    method: 'DELETE'\n\t  });\n\t\n\t  return request.send();\n\t\n\t};\n\t\n\t/**\n\t * Gets a customers card information on file\n\t *\n\t * @param {string} customerId - The customer ID you wish to get the information for.\n\t * @param {string} networkId  - The network ID the customer belongs to.\n\t *\n\t * @return {Promise} A promise which resolves when the request is complete.\n\t *\n\t */\n\tNetworks.prototype.getCustomerCardInformation = function (networkId, customerId) {\n\t  var url, request;\n\t\n\t  if (typeof customerId !== 'string' || typeof networkId !== 'string') {\n\t    return utils.promisify(false,\n\t      'IngestAPI Networks getCustomerCardInformation requires networkId and customerId to be strings');\n\t  }\n\t\n\t  url = utils.parseTokens(this.config.host + this.config.customerCardInformation, {\n\t    resource: this.config.resource,\n\t    networkId: networkId,\n\t    cusId: customerId\n\t  });\n\t\n\t  request = new Request({\n\t    url: url,\n\t    token: this._tokenSource()\n\t  });\n\t\n\t  return request.send();\n\t};\n\t\n\t/**\n\t * Remove the credit card currently associated with the proviced customer.\n\t * @param {string} networkId  - The network ID the customer belongs to.\n\t * @param {string} networkId  - The customer ID.\n\t *\n\t * @return {Promise} A promise which resolves when the request is complete.\n\t */\n\tNetworks.prototype.deleteCustomerCard = function (networkId, customerId) {\n\t  var url, request;\n\t\n\t  if (typeof customerId !== 'string' || typeof networkId !== 'string') {\n\t    return utils.promisify(false,\n\t      'IngestAPI Networks deleteCustomerCard requires networkId and customerId to be strings');\n\t  }\n\t\n\t  url = utils.parseTokens(this.config.host + this.config.customerCardInformation, {\n\t    resource: this.config.resource,\n\t    networkId: networkId,\n\t    cusId: customerId\n\t  });\n\t\n\t  request = new Request({\n\t    url: url,\n\t    token: this._tokenSource(),\n\t    method: 'DELETE'\n\t  });\n\t\n\t  return request.send();\n\t};\n\t\n\t/**\n\t * Gets a networks invoices\n\t *\n\t * @param {string} networkId  - The network ID that you wish to get the invoices for.\n\t *\n\t * @return {Promise} A promise which resolves when the request is complete.\n\t *\n\t */\n\tNetworks.prototype.getInvoices = function (networkId) {\n\t  var url, request;\n\t\n\t  if (typeof networkId !== 'string') {\n\t    return utils.promisify(false, 'IngestAPI Networks getInvoices requires networkId to be a string');\n\t  }\n\t\n\t  url = utils.parseTokens(this.config.host + this.config.invoices, {\n\t    resource: this.config.resource,\n\t    networkId: networkId,\n\t  });\n\t\n\t  request = new Request({\n\t    url: url,\n\t    token: this._tokenSource()\n\t  });\n\t\n\t  return request.send();\n\t};\n\t\n\t/**\n\t * Gets a specific invoice for a network\n\t *\n\t * @param {string} networkId  - The network ID the customer belongs to.\n\t * @param {string} invoiceId  - The invoice ID you wish to get the information for.\n\t *\n\t * @return {Promise} A promise which resolves when the request is complete.\n\t *\n\t */\n\tNetworks.prototype.getInvoiceById = function (networkId, invoiceId) {\n\t  var url, request;\n\t\n\t  if (typeof networkId !== 'string') {\n\t    return utils.promisify(false,\n\t      'IngestAPI getInvoiceById requires networkId to be passed as a string.');\n\t  }\n\t\n\t  if (typeof invoiceId !== 'string') {\n\t    return utils.promisify(false,\n\t      'IngestAPI getInvoiceById requires invoiceId to be passed as a string.');\n\t  }\n\t\n\t  url = utils.parseTokens(this.config.host + this.config.invoicesById, {\n\t    resource: this.config.resource,\n\t    networkId: networkId,\n\t    invoiceId: invoiceId\n\t  });\n\t\n\t  request = new Request({\n\t    url: url,\n\t    token: this._tokenSource()\n\t  });\n\t\n\t  return request.send();\n\t};\n\t\n\t/**\n\t * Gets current usage for a network\n\t *\n\t * @param {string} networkId  - The network ID the customer belongs to.\n\t *\n\t * @return {Promise} A promise which resolves when the request is complete.\n\t *\n\t */\n\tNetworks.prototype.getCurrentUsage = function (networkId) {\n\t  var url, request;\n\t\n\t  if (typeof networkId !== 'string') {\n\t    return utils.promisify(false,\n\t      'IngestAPI getCurrentUsage requires networkId to be passed as a string.');\n\t  }\n\t\n\t  url = utils.parseTokens(this.config.host + this.config.currentUsage, {\n\t    resource: this.config.resource,\n\t    networkId: networkId\n\t  });\n\t\n\t  request = new Request({\n\t    url: url,\n\t    token: this._tokenSource()\n\t  });\n\t\n\t  return request.send();\n\t};\n\t\n\t/**\n\t * Gets all pending users for the specified network.\n\t *\n\t * @param {string} networkId - The network ID.\n\t *\n\t * @return {Promise} - A promise which resolves when the request is complete.\n\t */\n\tNetworks.prototype.getPendingUsers = function (networkId) {\n\t  var url, request;\n\t\n\t  if (typeof networkId !== 'string') {\n\t    return utils.promisify(false,\n\t      'IngestAPI getPendingUsers requires networkId to be passed as a string.');\n\t  }\n\t\n\t  url = utils.parseTokens(this.config.host + this.config.getPendingUsers, {\n\t    resource:  this.config.resource,\n\t    networkId: networkId\n\t  });\n\t\n\t  request = new Request({\n\t    url: url,\n\t    token: this._tokenSource()\n\t  });\n\t\n\t  return request.send();\n\t};\n\t\n\t/**\n\t * Deletes a pending user from the specified network.\n\t *\n\t * @param {string} networkId     - The network ID that the pending user belongs to.\n\t * @param {string} pendingUserId - The pending user to delete from the network.\n\t *\n\t * @return {Promise} - A promise which resolves when the request is complete.\n\t */\n\tNetworks.prototype.deletePendingUser = function (networkId, pendingUserId) {\n\t  var url, request;\n\t\n\t  if (typeof networkId !== 'string' || typeof pendingUserId !== 'string') {\n\t    return utils.promisify(false,\n\t      'IngestAPI deletePendingUser requires networkId and pendingUserId to be passed as strings.');\n\t  }\n\t\n\t  url = utils.parseTokens(this.config.host + this.config.deletePendingUser, {\n\t    resource: this.config.resource,\n\t    networkId: networkId,\n\t    pendingUserId: pendingUserId\n\t  });\n\t\n\t  request = new Request({\n\t    method: 'DELETE',\n\t    url: url,\n\t    token: this._tokenSource()\n\t  });\n\t\n\t  return request.send();\n\t};\n\t\n\tmodule.exports = Networks;\n\n\n/***/ },\n/* 16 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\t\n\tvar PlaybackContent = __webpack_require__(13);\n\tvar Request = __webpack_require__(3);\n\tvar utils = __webpack_require__(9);\n\tvar extend = __webpack_require__(2);\n\t\n\tfunction Videos (options) {\n\t\n\t  var overrides = {\n\t    playlists: '/<%=resource%>/<%=id%>/playlists',\n\t    variants: '/<%=resource%>/<%=id%>/variants',\n\t    withVariants: '/<%=resource%>?filter=variants',\n\t    missingVariants: '/<%=resource%>?filter=missing_variants',\n\t    publish: '/<%=resource%>/publish'\n\t  };\n\t\n\t  options = extend(true, {}, overrides, options);\n\t\n\t  PlaybackContent.call(this, options);\n\t\n\t};\n\t\n\t// This extends the base class of 'PlaybackContent'.\n\tVideos.prototype = Object.create(PlaybackContent.prototype);\n\tVideos.prototype.constructor = Videos;\n\t\n\t/**\n\t * Return any playlists that contains the provided video.\n\t * @param   {string}   id   Video id.\n\t * @return  {promise}       A promise which resolves when the request is complete.\n\t */\n\tVideos.prototype.getPlaylists = function (id) {\n\t  var url, request;\n\t\n\t  if (typeof id !== 'string') {\n\t    return utils.promisify(false,\n\t      'IngestAPI Resource getPlaylists requires a valid video id passed as a string.');\n\t  }\n\t\n\t  url = utils.parseTokens(this.config.host + this.config.playlists, {\n\t    resource: this.config.resource,\n\t    id: id\n\t  });\n\t\n\t  request = new Request({\n\t    url: url,\n\t    token: this._tokenSource()\n\t  });\n\t\n\t  return request.send();\n\t\n\t};\n\t\n\t/**\n\t * Get all of the variants for the supplied video id.\n\t * @param   {string}    id     Video id.\n\t * @return  {promise}          A promise which resolves when the request is complete.\n\t */\n\tVideos.prototype.getVariants = function (id) {\n\t  var url, request;\n\t\n\t  if (typeof id !== 'string') {\n\t    return utils.promisify(false,\n\t      'IngestAPI Resource getPlaylists requires a valid video id passed as a string.');\n\t  }\n\t\n\t  url = utils.parseTokens(this.config.host + this.config.variants, {\n\t    resource: this.config.resource,\n\t    id: id\n\t  });\n\t\n\t  request = new Request({\n\t    url: url,\n\t    token: this._tokenSource()\n\t  });\n\t\n\t  return request.send();\n\t};\n\t\n\t/**\n\t * Return a list of the videos for the current user and network that contain variants.\n\t * @param  {object}   headers   Object representing headers to apply to the request.\n\t * @return {promise}            A promise which resolves when the request is complete.\n\t */\n\tVideos.prototype.getVideosWithVariants = function (headers) {\n\t  var request;\n\t  var url = utils.parseTokens(this.config.host + this.config.withVariants, {\n\t    resource: this.config.resource\n\t  });\n\t\n\t  request = new Request({\n\t    url: url,\n\t    token: this._tokenSource(),\n\t    headers: headers\n\t  });\n\t\n\t  return request.send()\n\t          .then(this._updateCachedResources.bind(this));\n\t};\n\t\n\t/**\n\t * Return a list of the videos for the current user and network that are missing variants.\n\t * @param  {object}   headers   Object representing headers to apply to the request.\n\t * @return {promise}            A promise which resolves when the request is complete.\n\t */\n\tVideos.prototype.getVideosMissingVariants = function (headers) {\n\t  var request;\n\t  var url = utils.parseTokens(this.config.host + this.config.missingVariants, {\n\t    resource: this.config.resource\n\t  });\n\t\n\t  request = new Request({\n\t    url: url,\n\t    token: this._tokenSource(),\n\t    headers: headers\n\t  });\n\t\n\t  return request.send()\n\t          .then(this._updateCachedResources.bind(this));\n\t};\n\t\n\t/**\n\t * Publishes a video based on the server time\n\t *\n\t * @param  {array}   ids   An array of video ids to publish\n\t * @return {promise}       A promise which resolves when the request is complete\n\t */\n\tVideos.prototype.publish = function (ids) {\n\t  var request, url;\n\t\n\t  // Check to make sure the ids are in an array\n\t  if (!Array.isArray(ids) || ids.length === 0) {\n\t    return utils.promisify(false,\n\t      'IngestAPI Videos publish requires an array of ids to be passed in.');\n\t  }\n\t\n\t  url = utils.parseTokens(this.config.host + this.config.publish, {\n\t    resource: this.config.resource,\n\t  });\n\t\n\t  request = new Request({\n\t    url: url,\n\t    token: this._tokenSource(),\n\t    method: 'POST',\n\t    data: ids\n\t  });\n\t\n\t  return request.send();\n\t};\n\t\n\tmodule.exports = Videos;\n\n\n/***/ },\n/* 17 */\n/***/ function(module, exports, __webpack_require__) {\n\n\tvar PlaybackContent = __webpack_require__(13);\n\tvar Request = __webpack_require__(3);\n\tvar utils = __webpack_require__(9);\n\tvar extend = __webpack_require__(2);\n\t\n\tfunction Playlists (options) {\n\t\n\t  var overrides = {\n\t    'playlistVideoById': '/<%=resource%>/<%=playlistId%>/video/<%=videoId%>',\n\t    'playlistReorder': '/<%=resource%>/<%=playlistId%>/reorder/<%=videoId%>',\n\t    'playlistAddRemove': '/<%=resource%>/<%=playlistId%>/videos'\n\t  };\n\t\n\t  options = extend(true, {}, overrides, options);\n\t\n\t  PlaybackContent.call(this, options);\n\t\n\t};\n\t\n\t// This extends the base class of 'PlaybackContent'.\n\tPlaylists.prototype = Object.create(PlaybackContent.prototype);\n\tPlaylists.prototype.constructor = Playlists;\n\t\n\t/**\n\t * Add the supplied video to the supplied playlist.\n\t * @param   {string}   playlistId  The UUID of the playlist to add the videoId to.\n\t * @param   {array}    videoIds    The UUID of the video to add to the playlist.\n\t * @param   {number}   position    [Optional] Position of the new video in the playlist.\n\t *                                 If omitted, the video in question will be added to the end of the given playlist.\n\t * @return  {promise}              A promise which resolves when the request is complete.\n\t */\n\tPlaylists.prototype.addVideos = function (playlistId, videoIds, position) {\n\t  var request, url, data;\n\t\n\t  if (typeof playlistId !== 'string') {\n\t    return utils.promisify(false,\n\t      'IngestAPI Playlists addVideo requires \"playlistId\" be a string.');\n\t  }\n\t\n\t  if (!Array.isArray(videoIds)) {\n\t    return utils.promisify(false,\n\t      'IngestAPI Playlists addVideo requires \"videoId\" be an array of videoIds.');\n\t  }\n\t\n\t  url = utils.parseTokens(this.config.host + this.config.playlistAddRemove, {\n\t    resource: this.config.resource,\n\t    playlistId: playlistId\n\t  });\n\t\n\t  data = {\n\t    videos: videoIds\n\t  };\n\t\n\t  if (typeof position === 'number') {\n\t    data.position = position;\n\t  }\n\t\n\t  request = new Request({\n\t    method: 'POST',\n\t    url: url,\n\t    token: this._tokenSource(),\n\t    data: data\n\t  });\n\t\n\t  return request.send().then(this._updateCachedResources.bind(this));\n\t};\n\t\n\t/**\n\t * Remove the supplied videos from the supplied playlist.\n\t * @param   {string}   playlistId    The UUID of the playlist to remove the videoId from.\n\t * @param   {array}    videos        An array of objects containing both the id and position of the video to remove.\n\t * @return  {promise}                A promise which resolves when the request is complete.\n\t */\n\tPlaylists.prototype.removeVideos = function (playlistId, videos) {\n\t  var request, url, data;\n\t\n\t  if (typeof playlistId !== 'string') {\n\t    return utils.promisify(false,\n\t      'IngestAPI Playlists removeVideo requires \"playlistId\" to be a string.');\n\t  }\n\t\n\t  if (!Array.isArray(videos)) {\n\t    return utils.promisify(false,\n\t      'IngestAPI Playlists removeVideo requires \"videos\" be an array of video objects.');\n\t  }\n\t\n\t  url = utils.parseTokens(this.config.host + this.config.playlistAddRemove, {\n\t    resource: this.config.resource,\n\t    playlistId: playlistId\n\t  });\n\t\n\t  request = new Request({\n\t    method: 'DELETE',\n\t    url: url,\n\t    token: this._tokenSource(),\n\t    data: videos\n\t  });\n\t\n\t  return request.send().then(this._updateCachedResources.bind(this));\n\t\n\t};\n\t\n\t/**\n\t * Re-orders a supplied playlist based on the given old and new positions.\n\t * @param  {string}   playlistId   The UUID of the playlist to re-order.\n\t * @param  {string}   videoId      The UUID of the video to re-order.\n\t * @param  {number}   oldPosition  The old position to move to the given new position.\n\t * @param  {number}   newPosition  The new position to move to.\n\t */\n\tPlaylists.prototype.reorderVideo = function (playlistId, videoId, oldPosition, newPosition) {\n\t  var request, url, data;\n\t\n\t  if (typeof playlistId !== 'string') {\n\t    return utils.promisify(false,\n\t      'IngestAPI Playlists reorderVideo requires \"playlistId\" to be a string');\n\t  }\n\t\n\t  if (typeof videoId !== 'string') {\n\t    return utils.promisify(false,\n\t      'IngestAPI Playlists reorderVideo requires \"videoId\" to be a string');\n\t  }\n\t\n\t  if (typeof oldPosition !== 'number' || typeof newPosition !== 'number') {\n\t    return utils.promisify(false,\n\t      'IngestAPI Playlists reorderVideo requires \"oldPosition\" and \"newPosition\" to be numbers.');\n\t  }\n\t\n\t  url = utils.parseTokens(this.config.host + this.config.playlistReorder, {\n\t    resource: this.config.resource,\n\t    playlistId: playlistId,\n\t    videoId: videoId\n\t  });\n\t\n\t  data = {\n\t    old_position: oldPosition,\n\t    new_position: newPosition\n\t  };\n\t\n\t  request = new Request({\n\t    method: 'PUT',\n\t    url: url,\n\t    token: this._tokenSource(),\n\t    data: data\n\t  });\n\t\n\t  return request.send().then(this._updateCachedResources.bind(this));\n\t\n\t};\n\t\n\tmodule.exports = Playlists;\n\n\n/***/ },\n/* 18 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\t\n\tvar Resource = __webpack_require__(12);\n\tvar Request = __webpack_require__(3);\n\tvar utils = __webpack_require__(9);\n\tvar extend = __webpack_require__(2);\n\t\n\tfunction Jobs (options) {\n\t\n\t  var overrides = {\n\t    progress: '/<%=resource%>/<%=id%>/progress'\n\t  };\n\t\n\t  options = extend(true, {}, overrides, options);\n\t\n\t  Resource.call(this, options);\n\t\n\t};\n\t\n\t// This extends the base class of 'Resource'.\n\tJobs.prototype = Object.create(Resource.prototype);\n\tJobs.prototype.constructor = Jobs;\n\t\n\t/**\n\t * Creates a new encoding job.\n\t *\n\t * @return {Promise} A promise which resolves when the request is complete.\n\t */\n\tJobs.prototype.add = function (resource) {\n\t\n\t  var url, request;\n\t\n\t  if (typeof resource !== 'object') {\n\t    return utils.promisify(false,\n\t      'IngestAPI Jobs `add` requires a resource passed as an object.');\n\t  }\n\t\n\t  url = utils.parseTokens(this.config.host + this.config.all, {\n\t    resource: this.config.resource\n\t  });\n\t\n\t  // Deletes the cached version of the associated video.\n\t  if (resource.hasOwnProperty('video') && typeof resource.video === 'string') {\n\t    this._deleteCachedResource(resource.video);\n\t  }\n\t\n\t  request = new Request({\n\t    url: url,\n\t    token: this._tokenSource(),\n\t    method: 'POST',\n\t    data: resource\n\t  });\n\t\n\t  return request.send()\n\t      .then(this._updateCachedResource.bind(this));\n\t\n\t};\n\t\n\t/**\n\t * Gets the progress of a current encoding job\n\t *\n\t * @param  {string}  id The id of the job\n\t * @return {Promise}    A promise which resolves when the request is complete.\n\t */\n\tJobs.prototype.progress = function (id) {\n\t  var url, request;\n\t\n\t  if (typeof id !== 'string') {\n\t    return utils.promisify(false,\n\t      'IngestAPI Jobs `progress` requires \"jobId\" to be passed as a string.');\n\t  }\n\t\n\t  url = utils.parseTokens(this.config.host + this.config.progress, {\n\t    resource: this.config.resource,\n\t    id: id\n\t  });\n\t\n\t  request = new Request({\n\t    url: url,\n\t    token: this._tokenSource(),\n\t    method: 'GET'\n\t  });\n\t\n\t  return request.send()\n\t      .then(this._updateCachedResource.bind(this));\n\t};\n\t\n\tmodule.exports = Jobs;\n\n\n/***/ },\n/* 19 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\t\n\tvar Resource = __webpack_require__(12);\n\tvar Request = __webpack_require__(3);\n\tvar utils = __webpack_require__(9);\n\tvar extend = __webpack_require__(2);\n\t\n\tfunction Profiles (options) {\n\t\n\t  Resource.call(this, options);\n\t\n\t};\n\t\n\t// This extends the base class of 'Resource'.\n\tProfiles.prototype = Object.create(Resource.prototype);\n\tProfiles.prototype.constructor = Profiles;\n\t\n\t/**\n\t * Update an existing profile with new content.\n\t * @param  {object|array} resource  An object or an array of objects representing the profile to be updated.\n\t * @return {promise}                A promise which resolves when the request is complete.\n\t */\n\tProfiles.prototype.update = function (resource) {\n\t  var request, data, url;\n\t\n\t  if (typeof resource !== 'object') {\n\t    return utils.promisify(false,\n\t      'IngestAPI Profiles update requires a resource to be passed as an object.');\n\t  }\n\t\n\t  data = resource;\n\t\n\t  url = utils.parseTokens(this.config.host + this.config.byId, {\n\t    resource: this.config.resource,\n\t    id: resource.id\n\t  });\n\t\n\t  if (this.cache && this.cache.enabled) {\n\t    data = this.cache.diff(resource.id, resource);\n\t  }\n\t\n\t  // Null is returned in the case that the two objects match.\n\t  if (!data) {\n\t    // Return a fulfilled promise with the cached object.\n\t    return utils.promisify(true, {\n\t      data: this.cache.retrieve(resource.id)\n\t    });\n\t  }\n\t\n\t  request = new Request({\n\t    url: url,\n\t    token: this._tokenSource(),\n\t    method: 'PUT',\n\t    data: data\n\t  });\n\t\n\t  return request.send()\n\t    .then(this._updateCachedResource.bind(this));\n\t\n\t};\n\t\n\tmodule.exports = Profiles;\n\n\n/***/ },\n/* 20 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\t\n\tvar Resource = __webpack_require__(12);\n\tvar Request = __webpack_require__(3);\n\tvar utils = __webpack_require__(9);\n\tvar extend = __webpack_require__(2);\n\t\n\tfunction Inputs (options) {\n\t\n\t  var overrides = {\n\t    'allWithFilters'   : '/<%=resource%>?filter=<%=filterChain%>',\n\t    'searchWithFilters': '/<%=resource%>?search=<%=input%>&filter=<%=filterChain%>'\n\t  };\n\t\n\t  options = extend(true, {}, overrides, options);\n\t\n\t  Resource.call(this, options);\n\t\n\t};\n\t\n\t// This extends the base class of 'Resource'.\n\tInputs.prototype = Object.create(Resource.prototype);\n\tInputs.prototype.constructor = Inputs;\n\t\n\t/**\n\t * Return a list of Inputs for the current user and network.\n\t *\n\t * @param  {object} headers - Object representing headers to apply to the request.\n\t * @param  {Array}  filters - [Optional] A list of filters to send along with the request to return Inputs that match the criteria.\n\t *\n\t * @return {Promise} - A promise which resolves when the request is complete.\n\t */\n\tInputs.prototype.getAll = function (headers, filters) {\n\t  var request, url, urlTemplate, tokens;\n\t\n\t  tokens = { resource: this.config.resource };\n\t  urlTemplate = this.config.host + this.config.all;\n\t\n\t  // If there are filters, join them as a comma seperated string and update our tokens and url template.\n\t  if (Array.isArray(filters) && filters.length > 0) {\n\t    tokens.filterChain = filters.join(',');\n\t    urlTemplate = this.config.host + this.config.allWithFilters;\n\t  }\n\t\n\t  url = utils.parseTokens(urlTemplate, tokens);\n\t\n\t  request = new Request({\n\t    url: url,\n\t    token: this._tokenSource(),\n\t    headers: headers\n\t  });\n\t\n\t  return request.send()\n\t    .then(this._updateCachedResources.bind(this));\n\t};\n\t\n\t/**\n\t * Return a subset of Inputs that match the search terms.\n\t *\n\t * @param  {string} input   - The search terms to match against.\n\t * @param  {object} headers - The headers to be passed to the request.\n\t * @param  {Array}  filters - [Optional] A list of filters to send along with the request to return Inputs that match the criteria.\n\t *\n\t * @return {Promise} - A promise which resolves when the request is complete.\n\t */\n\tInputs.prototype.search = function (input, headers, filters) {\n\t  var url, request, urlTemplate, tokens;\n\t\n\t  if (typeof input !== 'string') {\n\t    return utils.promisify(false,\n\t      'IngestAPI Inputs search requires search input to be passed as a string.');\n\t  }\n\t\n\t  tokens = { resource: this.config.resource, input: encodeURIComponent(input) };\n\t  urlTemplate = this.config.host + this.config.search;\n\t\n\t  // If there are filters, join them as a comma seperated string and update our tokens and url template.\n\t  if (Array.isArray(filters) && filters.length > 0) {\n\t    tokens.filterChain = filters.join(',');\n\t    urlTemplate = this.config.host + this.config.searchWithFilters;\n\t  }\n\t\n\t  url = utils.parseTokens(urlTemplate, tokens);\n\t\n\t  request = new Request({\n\t    url: url,\n\t    token: this._tokenSource(),\n\t    headers: headers\n\t  });\n\t\n\t  return request.send();\n\t};\n\t\n\tmodule.exports = Inputs;\n\n\n/***/ },\n/* 21 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\t\n\tvar Resource = __webpack_require__(12);\n\tvar Request = __webpack_require__(3);\n\tvar utils = __webpack_require__(9);\n\tvar extend = __webpack_require__(2);\n\t\n\tfunction Events (options) {\n\t\n\t  var overrides = {\n\t    filter: '/<%=resource%>?filter=<%=input%>'\n\t  };\n\t\n\t  options = extend(true, {}, overrides, options);\n\t\n\t  Resource.call(this, options);\n\t\n\t};\n\t\n\t// This extends the base class of 'Resource'.\n\tEvents.prototype = Object.create(Resource.prototype);\n\tEvents.prototype.constructor = Events;\n\t\n\t/**\n\t * Return a subset of items that match the filter terms.\n\t * @param  {string}   input     The filter terms to match against.\n\t *\n\t * @return {Promise}          A promise which resolves when the request is complete.\n\t */\n\tEvents.prototype.filter = function (input) {\n\t  var url, request;\n\t\n\t  url = utils.parseTokens(this.config.host + this.config.filter, {\n\t    resource: this.config.resource,\n\t    input: encodeURIComponent(input)\n\t  });\n\t\n\t  request = new Request({\n\t    method: 'GET',\n\t    url: url,\n\t    token: this._tokenSource()\n\t  });\n\t\n\t  return request.send();\n\t};\n\t\n\tmodule.exports = Events;\n\n\n/***/ }\n/******/ ])\n});\n;\n\n\n/** WEBPACK FOOTER **\n ** ingest.js\n **/"," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId])\n \t\t\treturn installedModules[moduleId].exports;\n\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\texports: {},\n \t\t\tid: moduleId,\n \t\t\tloaded: false\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.loaded = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(0);\n\n\n\n/** WEBPACK FOOTER **\n ** webpack/bootstrap 076eb97b9b208374c67c\n **/","'use strict';\nmodule.exports = require('./src/IngestAPI.js');\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./index.js\n ** module id = 0\n ** module chunks = 0\n **/","'use strict';\n\nvar extend = require('extend');\nvar Request = require('./Request');\nvar JWTUtils = require('./JWTUtils');\nvar utils = require('./Utils');\nvar Uploader = require('./Uploader');\nvar Cache = require('./Cache');\nvar RequestManager = require('./RequestManager');\n\nvar Resource = require('./resources/Resource');\nvar Media = require('./resources/PlaybackContent');\nvar Users = require('./resources/Users');\nvar Networks = require('./resources/Networks');\nvar Videos = require('./resources/Videos');\nvar Playlists = require('./resources/Playlists');\nvar Jobs = require('./resources/Jobs');\nvar Profiles = require('./resources/Profiles');\nvar Inputs = require('./resources/Inputs');\nvar Events = require('./resources/Events');\n\n/**\n * IngestAPI Object\n * @class\n * @param {object}  options        Options to override the default.\n * @param {string}  options.host   Override the default live host.\n * @param {string}  options.token  Auth token to use for requests.\n */\nfunction IngestAPI (options) {\n\n  this.defaults = {\n    'maxRequests': 6, // Active Requests\n    'host': 'https://api.ingest.io',\n    'cacheAge': 300000, // 5 minutes\n  };\n\n  // Create a config object by extending the defaults with the pass options.\n  this.config = extend(true, {}, this.defaults, options);\n\n  this.token = null;\n\n  if (this.config.token) {\n    // Store the token for future use.\n    this.setToken(this.config.token);\n  }\n\n  /* Exposed for testing */\n  this.request = Request;\n  this.JWTUtils = JWTUtils;\n  this.utils = utils;\n  this.resource = Resource;\n  this.playbackContent = Media;\n  this.usersResource = Users;\n  this.networksResource = Networks;\n  this.videosResource = Videos;\n  this.playlistsResource = Playlists;\n  this.jobsResource = Jobs;\n  this.profilesResource = Profiles;\n  this.inputsResource = Inputs;\n  this.uploader = Uploader;\n  this.eventsResource = Events;\n\n  // Construct my cache\n  this.cache = new Cache(this.config.cacheAge);\n  this.cache.enabled = false;\n\n  // Set my max requests\n  this.requestManager = RequestManager;\n  this.setMaxRequests(this.config.maxRequests);\n\n  this._getToken = this.getToken.bind(this);\n\n  this.videos = new Videos({\n    host: this.config.host,\n    resource: 'videos',\n    tokenSource: this._getToken,\n    cache: this.cache\n  });\n\n  this.playlists = new Playlists({\n    host: this.config.host,\n    resource: 'playlists',\n    tokenSource: this._getToken\n  });\n\n  this.inputs = new Inputs({\n    host: this.config.host,\n    resource: 'encoding/inputs',\n    tokenSource: this._getToken,\n    cache: this.cache\n  });\n\n  this.users = new Users({\n    host: this.config.host,\n    resource: 'users',\n    tokenSource: this._getToken\n  });\n\n  this.networks = new Networks({\n    host: this.config.host,\n    resource: 'networks',\n    tokenSource: this._getToken\n  });\n\n  this.profiles = new Profiles({\n    host: this.config.host,\n    resource: 'encoding/profiles',\n    tokenSource: this._getToken\n  });\n\n  this.jobs = new Jobs({\n    host: this.config.host,\n    resource: 'encoding/jobs',\n    tokenSource: this._getToken,\n    cache: this.cache\n  });\n\n  this.events = new Events({\n    host: this.config.host,\n    resource: 'events',\n    tokenSource: this._getToken,\n    cache: this.cache\n  });\n\n}\n\n/** Token **/\n/**\n * Set the auth token to use.\n * @param   {String}        token Auth token to use.\n */\nIngestAPI.prototype.setToken = function (token) {\n\n  // Make sure a valid value is passed.\n  if (typeof token !== 'string') {\n    throw new Error('IngestAPI requires an authentication token passed as a string.');\n  }\n\n  this.token = token;\n};\n\n/**\n * Sets the maxrequests in the Request Manager\n * @param {number} max - The max amount of requests at once\n */\nIngestAPI.prototype.setMaxRequests = function (max) {\n  // Make sure we have a valid number.\n  if (typeof max !== 'number' || max < 1) {\n    throw new Error('IngestAPI requires a maxRequest count to be passed as a positive number.');\n  }\n\n  RequestManager.setMaxRequests(max);\n};\n\n/**\n * Return the current auth token.\n * @return  {String}        Current auth token, or null if a token has not been set.\n */\nIngestAPI.prototype.getToken = function () {\n  return this.token;\n};\n\n/**\n * Create a new input and upload a file.\n * @param  {File}   file    File to upload.\n * @return {Promise} A promise which resolves when the upload is complete.\n */\nIngestAPI.prototype.upload = function (file) {\n  return new Uploader({\n    file: file,\n    api: this,\n    host: this.config.host\n  });\n};\n\nmodule.exports = IngestAPI;\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./src/IngestAPI.js\n ** module id = 1\n ** module chunks = 0\n **/","'use strict';\n\nvar hasOwn = Object.prototype.hasOwnProperty;\nvar toStr = Object.prototype.toString;\n\nvar isArray = function isArray(arr) {\n\tif (typeof Array.isArray === 'function') {\n\t\treturn Array.isArray(arr);\n\t}\n\n\treturn toStr.call(arr) === '[object Array]';\n};\n\nvar isPlainObject = function isPlainObject(obj) {\n\tif (!obj || toStr.call(obj) !== '[object Object]') {\n\t\treturn false;\n\t}\n\n\tvar hasOwnConstructor = hasOwn.call(obj, 'constructor');\n\tvar hasIsPrototypeOf = obj.constructor && obj.constructor.prototype && hasOwn.call(obj.constructor.prototype, 'isPrototypeOf');\n\t// Not own constructor property must be Object\n\tif (obj.constructor && !hasOwnConstructor && !hasIsPrototypeOf) {\n\t\treturn false;\n\t}\n\n\t// Own properties are enumerated firstly, so to speed up,\n\t// if last one is own, then all properties are own.\n\tvar key;\n\tfor (key in obj) { /**/ }\n\n\treturn typeof key === 'undefined' || hasOwn.call(obj, key);\n};\n\nmodule.exports = function extend() {\n\tvar options, name, src, copy, copyIsArray, clone;\n\tvar target = arguments[0];\n\tvar i = 1;\n\tvar length = arguments.length;\n\tvar deep = false;\n\n\t// Handle a deep copy situation\n\tif (typeof target === 'boolean') {\n\t\tdeep = target;\n\t\ttarget = arguments[1] || {};\n\t\t// skip the boolean and the target\n\t\ti = 2;\n\t}\n\tif (target == null || (typeof target !== 'object' && typeof target !== 'function')) {\n\t\ttarget = {};\n\t}\n\n\tfor (; i < length; ++i) {\n\t\toptions = arguments[i];\n\t\t// Only deal with non-null/undefined values\n\t\tif (options != null) {\n\t\t\t// Extend the base object\n\t\t\tfor (name in options) {\n\t\t\t\tsrc = target[name];\n\t\t\t\tcopy = options[name];\n\n\t\t\t\t// Prevent never-ending loop\n\t\t\t\tif (target !== copy) {\n\t\t\t\t\t// Recurse if we're merging plain objects or arrays\n\t\t\t\t\tif (deep && copy && (isPlainObject(copy) || (copyIsArray = isArray(copy)))) {\n\t\t\t\t\t\tif (copyIsArray) {\n\t\t\t\t\t\t\tcopyIsArray = false;\n\t\t\t\t\t\t\tclone = src && isArray(src) ? src : [];\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tclone = src && isPlainObject(src) ? src : {};\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\t// Never move original objects, clone them\n\t\t\t\t\t\ttarget[name] = extend(deep, clone, copy);\n\n\t\t\t\t\t// Don't bring in undefined values\n\t\t\t\t\t} else if (typeof copy !== 'undefined') {\n\t\t\t\t\t\ttarget[name] = copy;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\t// Return the modified object\n\treturn target;\n};\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./~/extend/index.js\n ** module id = 2\n ** module chunks = 0\n **/","'use strict';\n\nvar Promise = require('pinkyswear');\nvar extend = require('extend');\n\nvar JWTUtils = require('./JWTUtils');\nvar RequestManager = require('./RequestManager');\n\nvar VALID_RESPONSE_CODES = [200, 201, 202, 204];\n\n/**\n * A wrapper around the XMLHttpRequest object.\n * @param {object}  options         Options for the request.\n * @param {boolean} options.async   Whether to perform the request asynchronously\n * @param {string}  options.method  REST verb to use for the request.\n * @param {string}  options.url     URL for the request.\n */\nvar Request = function (options) {\n\n  this.defaults = {\n    async: true,\n    method: 'GET',\n    ignoreAcceptHeader: false\n  };\n\n  // Create the XHR object for this request.\n  this.request = new XMLHttpRequest();\n\n  // Set up event listeners for this request.\n  this.setupListeners();\n\n  // Todo, merge some defaults with this.\n  this.options = extend(true, this.defaults, options);\n\n};\n\n/**\n * Send the request and return a promise to resolve when the request is complete.\n * @return {Promise} A promise which resolves when the request is complete.\n */\nRequest.prototype.send = function () {\n  this.promise = Promise();\n\n  // Make sure a url is passed before attempting to make the request.\n  if (this.options.url) {\n    // Add the request to the queue and send it\n    this.makeRequest();\n  } else {\n    this.requestError('Request Error : a url is required to make the request.');\n  }\n\n  // Return the promise. Once complete send of the next request if necessary\n  return this.promise\n    .then(RequestManager._sendNextRequest);\n};\n\n/**\n * Send the request synchronously\n * @param {function} callback Function to call when the request is completed.\n * @return {object} The result of the request.\n */\nRequest.prototype.sendSync = function (callback) {\n\n  if (typeof callback === 'function') {\n    this.callback = callback;\n  }\n\n  // Make sure a url is passed before attempting to make the request.\n  if (this.options.url) {\n    // Add the request to the queue and send it\n    return this.makeRequest();\n  } else {\n    this.requestError('Request Error : a url is required to make the request.');\n  }\n};\n\n/**\n * Add event listeners to the XMLHttpRequest object.\n */\nRequest.prototype.setupListeners = function () {\n  this.request.onreadystatechange = this.readyStateChange.bind(this);\n};\n\n/**\n * Execute the open and construction of the XMLHttpRequest and its data\n */\nRequest.prototype.makeRequest = function () {\n  var postData = this.preparePostData(this.options.data);\n  var headers = this.options.headers;\n  var hasContentType = headers && headers.hasOwnProperty('Content-Type');\n\n  if (!postData.success) {\n    this.requestError('Request Error : error preparing post data.');\n    return;\n  }\n\n  this.request.open(this.options.method, this.options.url, this.options.async);\n\n  // Set before we apply the headers so it can be overridden on a per request basis.\n  if (!this.options.ignoreAcceptHeader) {\n    this.request.setRequestHeader('Accept', 'application/vnd.ingest.v1+json');\n  }\n\n  if (headers) {\n    this.applyRequestHeaders(headers);\n  }\n\n  // Make the token optional.\n  if (this.options.token) {\n\n    // If there is a token present ensure that it's still valid.\n    if (JWTUtils.isExpired(this.options.token)) {\n      this.requestError('Request Error : token is expired.');\n      return;\n    }\n\n    this.request.setRequestHeader('Authorization', this.options.token);\n\n  }\n\n  // Set the default content type when posting data.\n  if (postData.data && postData.type === 'JSON' && !hasContentType) {\n    this.request.setRequestHeader('Content-Type', 'application/vnd.ingest.v1+json');\n  }\n\n  // If the request should be made synchronously then we don't want to add it to the RequestManager.\n  if (!this.options.async) {\n\n    if (postData.data) {\n      this.request.send(postData.data);\n    } else {\n      this.request.send();\n    }\n\n    if (!this.isValidResponseCode(this.request.status)) {\n      this.requestError('Request Error : invalid response code : ' + this.request.status);\n    }\n\n  } else {\n    // If everything is good lets add it to the queue\n    RequestManager.addRequest([this.request, postData.data]);\n  }\n};\n\n/**\n * Stringify the post data if it is present.\n * @param  {object} data Object to be parsed.\n * @return {object}      Result object with the parsed string, and a success boolean flag.\n */\nRequest.prototype.preparePostData = function (data) {\n\n  var result = {\n    success: true,\n    data: data,\n    type: 'JSON'\n  };\n\n  // In the case of file uploads, all FormData to be passed to the request.\n  if (data instanceof FormData) {\n    result.type = 'FormData';\n    return result;\n  }\n\n  if (data instanceof Blob) {\n    result.type = 'File';\n    return result;\n  }\n\n  // If the data is populated, and its not already a string parse it.\n  if (data) {\n    try {\n      result.data = JSON.stringify(data);\n    } catch (error) {\n      result.success = false;\n      result.data = null;\n    }\n  }\n\n  return result;\n};\n\n/**\n * Apply any supplied headers to the request object.\n * @param  {object} headers Array of headers to apply to the request object.\n */\nRequest.prototype.applyRequestHeaders = function (headers) {\n\n  var key, i;\n  var keys = Object.keys(headers);\n  var keysLength = keys.length;\n\n  // Loop through and add the keys to the requestHeaders.\n  for (i = 0; i < keysLength; i++) {\n    key = keys[i];\n    this.request.setRequestHeader(key, headers[key]);\n  }\n\n};\n\n/**\n * Handle the completion of the request and fulfill the promise.\n * @param  {String} Response test of the request.\n */\nRequest.prototype.requestComplete = function (response) {\n\n  // Process the result.\n  this.response = this.processResponse(response);\n\n  if (!this.promise) {\n\n    if (typeof this.callback === 'function') {\n      this.callback(null, this.response);\n    }\n\n    return;\n  }\n\n  // Either resolve or reject the promise.\n  this.promise(!this.response.data.error, [this.response]);\n\n};\n\n/**\n * Process the response and parse certain content types.\n * @param  {*}  response  Response data from request.\n * @return {*}            Processed response data.\n */\nRequest.prototype.processResponse = function (response) {\n  var responseType = this.request.getResponseHeader('Content-Type');\n  var result = response;\n  var hasContent = this.request.status !== 202 && this.request.status !== 204;\n\n  // Parse JSON if the result is JSON.\n  if (hasContent && responseType && responseType.indexOf('json') !== -1) {\n    try {\n      result = JSON.parse(response);\n    } catch (error) {\n      result = {\n        error: 'JSON parsing failed. ' + error.stack\n      };\n    }\n  }\n\n  return {\n    data: result,\n    headers: this.request.getResponseHeader.bind(this.request),\n    statusCode: this.request.status\n  };\n\n};\n\n/**\n * Resolve the promise.\n * @param  {String} message   Error message.\n */\nRequest.prototype.requestError = function (message) {\n  var error;\n  // If there isn't a promise, in the case of a synchronous request, handle the error.\n  if (!this.promise) {\n\n    error = new Error(message);\n\n    if (typeof this.callback === 'function') {\n      this.callback(error);\n      return;\n    } else {\n      throw error;\n    }\n\n  }\n\n  // Reject the promise.\n  this.promise(false, [{\n    message: message,\n    headers: this.request.getAllResponseHeaders(),\n    statusCode: this.request.status\n  }]);\n};\n\n/**\n * Handle ready state change events.\n */\nRequest.prototype.readyStateChange = function () {\n  switch (this.request.readyState) {\n  case 4:\n    // Check if the final response code is valid\n    if (this.isValidResponseCode(this.request.status)) {\n      return this.requestComplete(this.request.responseText);\n    } else if (this.request.getResponseHeader('Content-Length') === '0') {\n      return this.requestError('Request Error: Invalid response code : ' + this.request.status);\n    }\n\n    // Special case error handling with response body\n    var resp = this.processResponse(this.request.response);\n    this.requestError(resp.data.error);\n    break;\n  default:\n    // silence is golden\n  }\n};\n\n/**\n * Validate the current response code to see if the request was a success.\n * @param  {Number}  responseCode Response Code.\n * @return {Boolean}              Should this be treated as a successful response code.\n */\nRequest.prototype.isValidResponseCode = function (responseCode) {\n\n  var result = false,\n    responseCodeCount = VALID_RESPONSE_CODES.length,\n    i;\n\n  // Check if the supplied code is in our list of valid codes.\n  for (i = 0; i < responseCodeCount; i++) {\n\n    if (responseCode === VALID_RESPONSE_CODES[i]) {\n      result = true;\n      break;\n    }\n\n  }\n\n  return result;\n\n};\n\n/**\n * Cancel the current XHR request.\n */\nRequest.prototype.cancel = function () {\n  // Remove the event listener.\n  this.request.onreadystatechange = null;\n  this.request.abort();\n  this.requestError('Request has been canceled.');\n};\n\nmodule.exports = Request;\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./src/Request.js\n ** module id = 3\n ** module chunks = 0\n **/","/*\n * PinkySwear.js 2.2.2 - Minimalistic implementation of the Promises/A+ spec\n * \n * Public Domain. Use, modify and distribute it any way you like. No attribution required.\n *\n * NO WARRANTY EXPRESSED OR IMPLIED. USE AT YOUR OWN RISK.\n *\n * PinkySwear is a very small implementation of the Promises/A+ specification. After compilation with the\n * Google Closure Compiler and gzipping it weighs less than 500 bytes. It is based on the implementation for \n * Minified.js and should be perfect for embedding. \n *\n *\n * PinkySwear has just three functions.\n *\n * To create a new promise in pending state, call pinkySwear():\n *         var promise = pinkySwear();\n *\n * The returned object has a Promises/A+ compatible then() implementation:\n *          promise.then(function(value) { alert(\"Success!\"); }, function(value) { alert(\"Failure!\"); });\n *\n *\n * The promise returned by pinkySwear() is a function. To fulfill the promise, call the function with true as first argument and\n * an optional array of values to pass to the then() handler. By putting more than one value in the array, you can pass more than one\n * value to the then() handlers. Here an example to fulfill a promsise, this time with only one argument: \n *         promise(true, [42]);\n *\n * When the promise has been rejected, call it with false. Again, there may be more than one argument for the then() handler:\n *         promise(true, [6, 6, 6]);\n *         \n * You can obtain the promise's current state by calling the function without arguments. It will be true if fulfilled,\n * false if rejected, and otherwise undefined.\n * \t\t   var state = promise(); \n * \n * https://github.com/timjansen/PinkySwear.js\n */\n(function (root, factory) {\n\tif (typeof define === 'function' && define.amd) {\n\t\tdefine([], factory);\n\t} else if (typeof module === 'object' && module.exports) {\n\t\tmodule.exports = factory();\n\t} else {\n\t\troot.pinkySwear = factory();\n\t}\n}(this, function() {\n\tvar undef;\n\n\tfunction isFunction(f) {\n\t\treturn typeof f == 'function';\n\t}\n\tfunction isObject(f) {\n\t\treturn typeof f == 'object';\n\t}\n\tfunction defer(callback) {\n\t\tif (typeof setImmediate != 'undefined')\n\t\t\tsetImmediate(callback);\n\t\telse if (typeof process != 'undefined' && process['nextTick'])\n\t\t\tprocess['nextTick'](callback);\n\t\telse\n\t\t\tsetTimeout(callback, 0);\n\t}\n\n\treturn function pinkySwear(extend) {\n\t\tvar state;           // undefined/null = pending, true = fulfilled, false = rejected\n\t\tvar values = [];     // an array of values as arguments for the then() handlers\n\t\tvar deferred = [];   // functions to call when set() is invoked\n\n\t\tvar set = function(newState, newValues) {\n\t\t\tif (state == null && newState != null) {\n\t\t\t\tstate = newState;\n\t\t\t\tvalues = newValues;\n\t\t\t\tif (deferred.length)\n\t\t\t\t\tdefer(function() {\n\t\t\t\t\t\tfor (var i = 0; i < deferred.length; i++)\n\t\t\t\t\t\t\tdeferred[i]();\n\t\t\t\t\t});\n\t\t\t}\n\t\t\treturn state;\n\t\t};\n\n\t\tset['then'] = function (onFulfilled, onRejected) {\n\t\t\tvar promise2 = pinkySwear(extend);\n\t\t\tvar callCallbacks = function() {\n\t    \t\ttry {\n\t    \t\t\tvar f = (state ? onFulfilled : onRejected);\n\t    \t\t\tif (isFunction(f)) {\n\t\t   \t\t\t\tfunction resolve(x) {\n\t\t\t\t\t\t    var then, cbCalled = 0;\n\t\t   \t\t\t\t\ttry {\n\t\t\t\t   \t\t\t\tif (x && (isObject(x) || isFunction(x)) && isFunction(then = x['then'])) {\n\t\t\t\t\t\t\t\t\t\tif (x === promise2)\n\t\t\t\t\t\t\t\t\t\t\tthrow new TypeError();\n\t\t\t\t\t\t\t\t\t\tthen['call'](x,\n\t\t\t\t\t\t\t\t\t\t\tfunction() { if (!cbCalled++) resolve.apply(undef,arguments); } ,\n\t\t\t\t\t\t\t\t\t\t\tfunction(value){ if (!cbCalled++) promise2(false,[value]);});\n\t\t\t\t   \t\t\t\t}\n\t\t\t\t   \t\t\t\telse\n\t\t\t\t   \t\t\t\t\tpromise2(true, arguments);\n\t\t   \t\t\t\t\t}\n\t\t   \t\t\t\t\tcatch(e) {\n\t\t   \t\t\t\t\t\tif (!cbCalled++)\n\t\t   \t\t\t\t\t\t\tpromise2(false, [e]);\n\t\t   \t\t\t\t\t}\n\t\t   \t\t\t\t}\n\t\t   \t\t\t\tresolve(f.apply(undef, values || []));\n\t\t   \t\t\t}\n\t\t   \t\t\telse\n\t\t   \t\t\t\tpromise2(state, values);\n\t\t\t\t}\n\t\t\t\tcatch (e) {\n\t\t\t\t\tpromise2(false, [e]);\n\t\t\t\t}\n\t\t\t};\n\t\t\tif (state != null)\n\t\t\t\tdefer(callCallbacks);\n\t\t\telse\n\t\t\t\tdeferred.push(callCallbacks);\n\t\t\treturn promise2;\n\t\t};\n        if(extend){\n            set = extend(set);\n        }\n\t\treturn set;\n\t};\n}));\n\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./~/pinkyswear/pinkyswear.js\n ** module id = 4\n ** module chunks = 0\n **/","var nextTick = require('process/browser.js').nextTick;\nvar apply = Function.prototype.apply;\nvar slice = Array.prototype.slice;\nvar immediateIds = {};\nvar nextImmediateId = 0;\n\n// DOM APIs, for completeness\n\nexports.setTimeout = function() {\n  return new Timeout(apply.call(setTimeout, window, arguments), clearTimeout);\n};\nexports.setInterval = function() {\n  return new Timeout(apply.call(setInterval, window, arguments), clearInterval);\n};\nexports.clearTimeout =\nexports.clearInterval = function(timeout) { timeout.close(); };\n\nfunction Timeout(id, clearFn) {\n  this._id = id;\n  this._clearFn = clearFn;\n}\nTimeout.prototype.unref = Timeout.prototype.ref = function() {};\nTimeout.prototype.close = function() {\n  this._clearFn.call(window, this._id);\n};\n\n// Does not start the time, just sets up the members needed.\nexports.enroll = function(item, msecs) {\n  clearTimeout(item._idleTimeoutId);\n  item._idleTimeout = msecs;\n};\n\nexports.unenroll = function(item) {\n  clearTimeout(item._idleTimeoutId);\n  item._idleTimeout = -1;\n};\n\nexports._unrefActive = exports.active = function(item) {\n  clearTimeout(item._idleTimeoutId);\n\n  var msecs = item._idleTimeout;\n  if (msecs >= 0) {\n    item._idleTimeoutId = setTimeout(function onTimeout() {\n      if (item._onTimeout)\n        item._onTimeout();\n    }, msecs);\n  }\n};\n\n// That's not how node.js implements it but the exposed api is the same.\nexports.setImmediate = typeof setImmediate === \"function\" ? setImmediate : function(fn) {\n  var id = nextImmediateId++;\n  var args = arguments.length < 2 ? false : slice.call(arguments, 1);\n\n  immediateIds[id] = true;\n\n  nextTick(function onNextTick() {\n    if (immediateIds[id]) {\n      // fn.call() is faster so we optimize for the common use-case\n      // @see http://jsperf.com/call-apply-segu\n      if (args) {\n        fn.apply(null, args);\n      } else {\n        fn.call(null);\n      }\n      // Prevent ids from leaking\n      exports.clearImmediate(id);\n    }\n  });\n\n  return id;\n};\n\nexports.clearImmediate = typeof clearImmediate === \"function\" ? clearImmediate : function(id) {\n  delete immediateIds[id];\n};\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./~/timers-browserify/main.js\n ** module id = 5\n ** module chunks = 0\n **/","// shim for using process in browser\nvar process = module.exports = {};\n\n// cached from whatever global is present so that test runners that stub it\n// don't break things.  But we need to wrap it in a try catch in case it is\n// wrapped in strict mode code which doesn't define any globals.  It's inside a\n// function because try/catches deoptimize in certain engines.\n\nvar cachedSetTimeout;\nvar cachedClearTimeout;\n\nfunction defaultSetTimout() {\n    throw new Error('setTimeout has not been defined');\n}\nfunction defaultClearTimeout () {\n    throw new Error('clearTimeout has not been defined');\n}\n(function () {\n    try {\n        if (typeof setTimeout === 'function') {\n            cachedSetTimeout = setTimeout;\n        } else {\n            cachedSetTimeout = defaultSetTimout;\n        }\n    } catch (e) {\n        cachedSetTimeout = defaultSetTimout;\n    }\n    try {\n        if (typeof clearTimeout === 'function') {\n            cachedClearTimeout = clearTimeout;\n        } else {\n            cachedClearTimeout = defaultClearTimeout;\n        }\n    } catch (e) {\n        cachedClearTimeout = defaultClearTimeout;\n    }\n} ())\nfunction runTimeout(fun) {\n    if (cachedSetTimeout === setTimeout) {\n        //normal enviroments in sane situations\n        return setTimeout(fun, 0);\n    }\n    // if setTimeout wasn't available but was latter defined\n    if ((cachedSetTimeout === defaultSetTimout || !cachedSetTimeout) && setTimeout) {\n        cachedSetTimeout = setTimeout;\n        return setTimeout(fun, 0);\n    }\n    try {\n        // when when somebody has screwed with setTimeout but no I.E. maddness\n        return cachedSetTimeout(fun, 0);\n    } catch(e){\n        try {\n            // When we are in I.E. but the script has been evaled so I.E. doesn't trust the global object when called normally\n            return cachedSetTimeout.call(null, fun, 0);\n        } catch(e){\n            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error\n            return cachedSetTimeout.call(this, fun, 0);\n        }\n    }\n\n\n}\nfunction runClearTimeout(marker) {\n    if (cachedClearTimeout === clearTimeout) {\n        //normal enviroments in sane situations\n        return clearTimeout(marker);\n    }\n    // if clearTimeout wasn't available but was latter defined\n    if ((cachedClearTimeout === defaultClearTimeout || !cachedClearTimeout) && clearTimeout) {\n        cachedClearTimeout = clearTimeout;\n        return clearTimeout(marker);\n    }\n    try {\n        // when when somebody has screwed with setTimeout but no I.E. maddness\n        return cachedClearTimeout(marker);\n    } catch (e){\n        try {\n            // When we are in I.E. but the script has been evaled so I.E. doesn't  trust the global object when called normally\n            return cachedClearTimeout.call(null, marker);\n        } catch (e){\n            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error.\n            // Some versions of I.E. have different rules for clearTimeout vs setTimeout\n            return cachedClearTimeout.call(this, marker);\n        }\n    }\n\n\n\n}\nvar queue = [];\nvar draining = false;\nvar currentQueue;\nvar queueIndex = -1;\n\nfunction cleanUpNextTick() {\n    if (!draining || !currentQueue) {\n        return;\n    }\n    draining = false;\n    if (currentQueue.length) {\n        queue = currentQueue.concat(queue);\n    } else {\n        queueIndex = -1;\n    }\n    if (queue.length) {\n        drainQueue();\n    }\n}\n\nfunction drainQueue() {\n    if (draining) {\n        return;\n    }\n    var timeout = runTimeout(cleanUpNextTick);\n    draining = true;\n\n    var len = queue.length;\n    while(len) {\n        currentQueue = queue;\n        queue = [];\n        while (++queueIndex < len) {\n            if (currentQueue) {\n                currentQueue[queueIndex].run();\n            }\n        }\n        queueIndex = -1;\n        len = queue.length;\n    }\n    currentQueue = null;\n    draining = false;\n    runClearTimeout(timeout);\n}\n\nprocess.nextTick = function (fun) {\n    var args = new Array(arguments.length - 1);\n    if (arguments.length > 1) {\n        for (var i = 1; i < arguments.length; i++) {\n            args[i - 1] = arguments[i];\n        }\n    }\n    queue.push(new Item(fun, args));\n    if (queue.length === 1 && !draining) {\n        runTimeout(drainQueue);\n    }\n};\n\n// v8 likes predictible objects\nfunction Item(fun, array) {\n    this.fun = fun;\n    this.array = array;\n}\nItem.prototype.run = function () {\n    this.fun.apply(null, this.array);\n};\nprocess.title = 'browser';\nprocess.browser = true;\nprocess.env = {};\nprocess.argv = [];\nprocess.version = ''; // empty string to avoid regexp issues\nprocess.versions = {};\n\nfunction noop() {}\n\nprocess.on = noop;\nprocess.addListener = noop;\nprocess.once = noop;\nprocess.off = noop;\nprocess.removeListener = noop;\nprocess.removeAllListeners = noop;\nprocess.emit = noop;\nprocess.prependListener = noop;\nprocess.prependOnceListener = noop;\n\nprocess.listeners = function (name) { return [] }\n\nprocess.binding = function (name) {\n    throw new Error('process.binding is not supported');\n};\n\nprocess.cwd = function () { return '/' };\nprocess.chdir = function (dir) {\n    throw new Error('process.chdir is not supported');\n};\nprocess.umask = function() { return 0; };\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./~/process/browser.js\n ** module id = 6\n ** module chunks = 0\n **/","'use strict';\n\n/**\n * UTILS for dealing with jwt tokens.\n */\n\n/**\n * Parse the payload out of the JWT token.\n * @param  {string} token JWT Token.\n * @return {object}       Parsed payload object.\n */\nvar parseTokenPayload = function (token) {\n  var parts = token.split('.');\n\n  // Return false if the token is invalid.\n  if (parts.length <= 1) {\n    return false;\n  }\n\n  // decode the payload portion.\n  var payload = window.atob(parts[1]);\n\n  // parse it as JSON\n  payload = JSON.parse(payload);\n\n  return payload;\n};\n\n/**\n * Return true if the provided token has expired.\n * @param  {string}  token JWT Token\n * @return {Boolean}       True if expired.\n */\nmodule.exports.isExpired = function (token) {\n  var data, exp, result, now;\n\n  data = parseTokenPayload(token);\n\n  result = true;\n\n  // Return true if the token does not parse properly.\n  if (!data) {\n    return result;\n  }\n\n  exp = data.exp;\n\n  // Get the unix timestamp in seconds.\n  now = new Date();\n  now = now.getTime() / 1000;\n\n  if (!exp) {\n    return result;\n  }\n\n  // If the expiry data is still in the future.\n  if (now < exp) {\n    result = false;\n  }\n\n  return result;\n\n};\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./src/JWTUtils.js\n ** module id = 7\n ** module chunks = 0\n **/","'use strict';\n\n/**\n * Manages request objects in a queueing system\n */\nvar RequestManager = function () {\n  this.pending = [];\n  this.activeRequests = 0;\n  this.currentSetRequests = 0;\n  this.lastRequestSetStart = null;\n  this.resetTimer = null;\n\n  this._sendNextRequest = this.sendNextRequest.bind(this);\n  this._resetCurrentSet = this.resetCurrentSet.bind(this);\n};\n\n/**\n * Sets the max requests for the Request Manager\n *\n * @param {number} maxRequests - The maximum allowed requests at one time\n */\nRequestManager.prototype.setMaxRequests = function (maxRequests) {\n  this.maxRequests = maxRequests;\n};\n\n/**\n * Resets the current set and sets the last request start to the passed in value\n *\n * @param {any} newDate - The new date timestamp or null\n */\nRequestManager.prototype.resetCurrentSet = function (newDate) {\n  this.currentSetRequests = 0;\n  this.lastRequestSetStart = newDate;\n};\n\n/**\n * Sends a request or adds it to the queue if it can't be sent\n *\n * @param {array} requestData - The request object and request data in an array\n *\n * @return\n */\nRequestManager.prototype.addRequest = function (requestData) {\n  // If we have too many out then queue the request\n  if (this.activeRequests >= this.maxRequests) {\n    this.pending.push(requestData);\n    return;\n  }\n\n  // Otherwise send the request\n  this.sendRequest(requestData[0], requestData[1]);\n};\n\n/**\n * Sends the request\n *\n * @param {object} request - The request object\n * @param {object} data    - The request data\n */\nRequestManager.prototype.sendRequest = function (request, data) {\n\n  // If there is a reset timer, we need to clear it so its not run\n  if (this.resetTimer) {\n    clearTimeout(this.resetTimer);\n  }\n\n  // If this request is the start of a set, lets reset the set data\n  if (this.currentSetRequests % this.maxRequests === 0) {\n    this.resetCurrentSet(Date.now());\n  }\n\n  // Increment counters\n  this.activeRequests++;\n  this.currentSetRequests++;\n\n  // Send data\n  if (data) {\n    request.send(data);\n  } else {\n    request.send();\n  }\n};\n\n/**\n * Sends the next available request if applicable\n *\n * @param {object}  response - The http response data\n *\n * @return {object} response - The http response data\n */\nRequestManager.prototype.sendNextRequest = function (response) {\n  var XRatelimitRemaining, moreRequests, requestData, delay;\n\n  // Deincrement counter\n  this.activeRequests--;\n\n  // No more to send, reset data if enough time passes\n  if (this.pending.length === 0) {\n\n    // If i don't have a timer already and have no active requests\n    if (!this.resetTimer && this.activeRequests === 0) {\n      // set the reset timer so new calls are in sync\n      this.resetTimer = setTimeout(this._resetCurrentSet, this.XRatelimitLimit * 1000);\n    }\n\n    // Return response\n    return response;\n  }\n\n  // Only run the first time to get the limits\n  if (!this.XRatelimitReset) {\n    // Set the reset and the limit\n    this.XRatelimitReset = response.headers('X-Ratelimit-Reset');\n    this.XRatelimitLimit = response.headers('X-Ratelimit-Limit');\n\n    // If the limit returned from the server is less than the set max limit, lets override it\n    if (this.XRatelimitLimit < this.maxRequests) {\n      this.maxRequests = this.XRatelimitLimit;\n    }\n  }\n\n  // Get my next request and requests remaining\n  requestData = this.pending.shift();\n  XRatelimitRemaining = response.headers('X-Ratelimit-Remaining');\n\n  // See if I can send more requests right now\n  moreRequests = (this.activeRequests < this.maxRequests) && (XRatelimitRemaining > 0);\n\n  // If I can send more requests send them\n  if (moreRequests) {\n    this.sendRequest(requestData[0], requestData[1]);\n  } else {\n    // Otherwise lets delay so these get sent in the next tick\n    delay = (Date.now() - this.lastRequestSetStart) < 100 ? 100 : (Date.now() - this.lastRequestSetStart);\n\n    // Delay the call of the next send request\n    setTimeout(this.sendRequest.bind(this, requestData[0], requestData[1]), delay);\n  }\n\n  // Return the response\n  return response;\n};\n\nmodule.exports = new RequestManager();\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./src/RequestManager.js\n ** module id = 8\n ** module chunks = 0\n **/","'use strict';\n\nvar Promise = require('pinkyswear');\nvar Utils = {};\n/**\n * Replace all tokens within a given template based on the given key/value pair.\n * @param  {string}     template    Template for the url.\n * @param  {object}     hash        Key/Value pair for replacing tokens in the template.\n *\n * @example\n * var tokens = {\n *  keyInTemplate: 'replacedWith'\n * };\n *\n * var template = '<%=keyInTemplate%>';\n *\n * var result = parseTokens(template, tokens);  // 'replacedWith'\n *\n * @return {string}                 Parsed string.\n */\nUtils.parseTokens = function (template, hash) {\n  if (!template) {\n    return null;\n  }\n\n  var keys = Object.keys(hash);\n  var i;\n  var length = keys.length;\n\n  for (i = 0; i < length; i++) {\n    template = template.replace('<%=' + keys[i] + '%>', hash[keys[i]]);\n  }\n\n  return template;\n};\n\n/**\n * Wrapper function to wrap a value in either a reject or resolve.\n * @param  {boolean} state Rejection or Approval.\n * @param  {*}       value Value to pass back to the promise.\n * @return {Promise}       Promise/A+ spec promise.\n */\nUtils.promisify = function (state, value) {\n  var promise = Promise();\n\n  promise(state, [value]);\n\n  return promise;\n};\n\n/**\n * Wrap an array of promises and return when they have all completed.\n * @param   {Array}     promises  An array of promises to manage.\n * @param   {boolean}   paused    A boolean to pause the execution of the promises.\n * @return  {Promise}             A promise that is resolved when all of the promises have fulfilled.\n */\nUtils.series = function (promises, paused) {\n\n  var promisesCount = promises.length;\n  var all = Promise();\n\n  var state = {\n    total: promisesCount,\n    complete: 0,\n    responses: [],\n    promises: promises,\n    paused: true\n  };\n\n  all.pause = Utils._seriesPause.bind(undefined, all, state);\n  all.resume = Utils._seriesResume.bind(undefined, all, state);\n  all.cancel = Utils._seriesCancel.bind(undefined, all, state);\n\n  if (!paused) {\n    state.paused = false;\n    Utils._seriesCallPromise(promises[0], state, all);\n  }\n\n  return all;\n\n};\n\n/**\n * Call a promise and pass the complete and error functions.\n * @param  {Promise} promise Promise to execute on.\n * @param  {Object} state   Persistent state of the series of promises.\n */\nUtils._seriesCallPromise = function (promise, state, all) {\n  // call the promise;\n  if (!state.paused) {\n    promise().then(Utils._seriesComplete.bind(undefined, all, state),\n      Utils._seriesError.bind(undefined, all, state));\n  }\n};\n\n/**\n * Manage the progress of the promises.\n * @private\n * @param  {Promise} all      All promise.\n * @param  {Object}  state    State object used to persist the promise count.\n * @param  {Object}  response Response of the promise being fulfilled.\n */\nUtils._seriesComplete = function (all, state, response) {\n\n  // Early return if this has been canceled.\n  if (state.canceled) {\n    return;\n  }\n\n  // Increment the complete promises.\n  state.complete++;\n  state.responses.push(response);\n\n  if (state.complete >= state.total) {\n    all(true, state.responses);\n  } else {\n    if (!state.paused) {\n      // Execute the next promise.\n      Utils._seriesCallPromise(state.promises[state.complete], state, all);\n    }\n  }\n\n};\n\n/**\n * Immediately reject the promise if there is an error.\n * @param  {Promise} all  All promise.\n * @param  {Object}  state    State object used to persist the promise count.\n * @param  {Object}  response Response of the promise being fulfilled.\n */\nUtils._seriesError = function (all, state, error) {\n  all(false, [error]);\n};\n\n/**\n * Pause the current series of promises.\n * @param  {Promise} all  All promise.\n * @param  {Object}  state    State object used to persist the promise count.\n */\nUtils._seriesPause = function (all, state) {\n  state.paused = true;\n};\n\n/**\n * Resume the current series of promises.\n * @param  {Promise} all  All promise.\n * @param  {Object}  state    State object used to persist the promise count.\n */\nUtils._seriesResume = function (all, state) {\n  state.paused = false;\n\n  if (state.complete !== state.total) {\n    Utils._seriesCallPromise(state.promises[state.complete], state, all);\n  }\n};\n\n/**\n * Resolve the promise but return an empty response.\n * @param  {Promise}  all     All promise.\n * @param  {Object}   state   State object used to persist the promise count.\n */\nUtils._seriesCancel = function (all, state) {\n  state.canceled = true;\n  all(true, []);\n};\n\n/**\n * Return true if a file provided matches a support image type.\n * @param  {file}     file  A reference to an image file.\n * @return {Boolean}        True if the type matches a known image type.\n */\nUtils.isImage = function (file) {\n  return file.type.indexOf('image') !== -1;\n};\n\nmodule.exports = Utils;\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./src/Utils.js\n ** module id = 9\n ** module chunks = 0\n **/","'use strict';\n\nvar extend = require('extend');\nvar Request = require('./Request');\nvar Promise = require('pinkyswear');\nvar utils = require('./Utils');\nvar JWTUtils = require('./JWTUtils');\n\n/**\n * Create a new upload wrapper.  Manages the entire upload of a file.\n * @class\n * @param   {object}  options                   Configuration options to override the defaults.\n * @param   {object}  options.api               A reference to the parent API instance.\n * @param   {object}  options.file              The file to upload.\n * @param   {object}  options.upload            REST endpoint for creating an input.\n * @param   {object}  options.sign              REST endpoint for signing a blob before upload.\n * @param   {object}  options.uploadComplete    REST endpoint to notify the API that the upload is complete.\n * @param   {object}  options.uploadAbort       REST endpoint to abort the upload.\n */\nfunction Upload (options) {\n\n  this.defaults = {\n    api: null,\n    file: null,\n    upload: '/encoding/inputs/<%=id%>/upload<%=method%>',\n    sign: '/encoding/inputs/<%=id%>/upload/sign<%=method%>',\n    uploadComplete: '/encoding/inputs/<%=id%>/upload/complete',\n    uploadAbort: '/encoding/inputs/<%=id%>/upload/abort<%=method%>',\n    uploadMethods: {\n      param: '?type=',\n      singlePart: 'amazon',\n      multiPart: 'amazonMP'\n    }\n  };\n\n  // Create a config object by extending the defaults with the pass options.\n  this.config = extend(true, {}, this.defaults, options);\n\n  this.api = this.config.api;\n  this.file = this.config.file;\n\n  this.chunks = [];\n  this.chunkSize = 0;\n  this.chunkCount = 0;\n  this.chunksComplete = 0;\n  this.uploadedBytes = 0;\n\n  this.aborted = false;\n  this.paused = false;\n  this.created = false;\n  this.initialized = false;\n\n  // Set to true when all the chunks are uploaded, but before the complete call is made.\n  this.uploadComplete = false;\n\n  this.fileRecord = {\n    filename: this.file.name,\n    type: this.file.type,\n    size: this.file.size,\n    method: this._checkMultipart(this.file),\n    contentType: 'application/octet-stream'\n  };\n\n};\n\n/**\n * Register a function to execute when a chunk completes uploading.\n * @param  {Function} callback A callback to execute when progress is made.\n */\nUpload.prototype.progress = function (callback) {\n  this.config.progress = callback.bind(this);\n};\n\n/**\n * Create a new input record and upload the files to amazon.\n * @return  {Promise}         A promise which resolves when the new input record is created and uploaded.\n */\nUpload.prototype.save = function () {\n  return this._create(this.fileRecord)\n    .then(this._initialize.bind(this))\n    .then(this._prepareUpload.bind(this));\n};\n\n/**\n * Call the progress callback and pass the current progress percentage.\n * @private\n * @param  {number} message Current progress percentage.\n */\nUpload.prototype._updateProgress = function (percent, chunkSize) {\n\n  if (!this.config.progress) {\n    return;\n  }\n\n  this.config.progress.call(this, percent, chunkSize);\n};\n\n/**\n * Create a new input record.\n * @private\n * @param   {object}  record  A JSON object representing the input record to create.\n * @return  {Promise}         A promise which resolves when the new input record is created.\n */\nUpload.prototype._create = function (record) {\n\n  if (this.created) {\n    return utils.promisify(true, this.fileRecord.id);\n  }\n\n  if (this.aborted) {\n    return utils.promisify(false, 'upload aborted');\n  }\n\n  return this.api.inputs.add(record).then(this._createSuccess.bind(this));\n};\n\n/**\n * Return the data object from the response.\n * @private\n * @param  {JSON}   response  JSON response containing the new input record id.\n * @return {string}           new input record id.\n */\nUpload.prototype._createSuccess = function (response) {\n\n  this.created = true;\n\n  this._updateProgress(0, 0);\n\n  // Store the input record.\n  this.input = response.data;\n\n  this.fileRecord.id = response.data.id;\n\n  return this.fileRecord.id;\n};\n\n/**\n * Initializes an Input for upload\n * @private\n * @return {Promise} A promise which resolves when the request is complete.\n */\nUpload.prototype._initialize = function () {\n  var url;\n  var tokens;\n  var signing = '';\n  var request;\n\n  if (this.aborted) {\n    return utils.promisify(false, 'upload aborted');\n  }\n\n  if (!this.fileRecord.method) {\n    signing = this.config.uploadMethods.param + this.config.uploadMethods.singlePart;\n  }\n\n  tokens = {\n    id: this.fileRecord.id,\n    method: signing\n  };\n\n  url = utils.parseTokens(this.api.config.host + this.config.upload, tokens);\n\n  request = new Request({\n    url: url,\n    token: this.api.getToken(),\n    method: 'POST',\n    data: this.fileRecord\n  });\n\n  return request.send()\n          .then(this._initializeComplete.bind(this));\n\n};\n\n/**\n * Store the information returned from the initialize request.\n * @private\n */\nUpload.prototype._initializeComplete = function (response) {\n  this.initialized = true;\n  this.fileRecord.key = response.data.key;\n  this.fileRecord.uploadId = response.data.uploadId;\n  this.chunkSize = response.data.pieceSize;\n  this.chunkCount = response.data.pieceCount;\n};\n\n/**\n * Setup the upload depending on its type, single or multi part.\n * @return {Promise} A promise which resolves when all of the pieces have completed uploading.\n */\nUpload.prototype._prepareUpload = function () {\n  if (!this.fileRecord.method) {\n    // Singlepart.\n    return this._uploadFile()\n      .then(this._onCompleteUpload.bind(this));\n  } else {\n    // Multipart.\n    return this._createChunks()\n      .then(this._completeUpload.bind(this));\n  }\n};\n\n/**\n * Break a file into blobs and create a chunk object for each piece.\n * @private\n * @return {Promise} A promise which resolves when all of the pieces have completed uploading.\n */\nUpload.prototype._createChunks = function () {\n  var sliceMethod = this._getSliceMethod(this.file);\n  var i, blob, chunk, start, end,\n    chunkPromises = [];\n\n  if (this.aborted) {\n    this.abort();\n    return utils.promisify(false, 'upload aborted');\n  }\n\n  for (i = 0; i < this.chunkCount; i++) {\n\n    start = i * this.chunkSize;\n    // Choose the smaller value, so that we don't go over the filesize.\n    end = Math.min((i + 1) * this.chunkSize, this.fileRecord.size);\n\n    blob = this.file[sliceMethod](start, end);\n\n    chunk = {\n      partNumber: i + 1,\n      data: blob\n    };\n\n    this.chunks.push(chunk);\n\n    chunkPromises.push(this._uploadChunk.bind(this, chunk));\n\n  }\n\n  // Store a reference for pausing and resuming.\n  this.multiPartPromise = utils.series(chunkPromises, this.paused);\n\n  return this.multiPartPromise;\n};\n\n/**\n * Create a promise chain for each chunk to be uploaded.\n * @private\n * @return {Promise} A promise which resolves when the request is complete.\n */\nUpload.prototype._uploadChunk = function (chunk) {\n  var promise = Promise();\n\n  // Break the promise chain.\n  this._signUpload(chunk)\n    .then(this._sendUpload.bind(this, chunk))\n    .then(this._completeChunk.bind(this, chunk, promise));\n\n  return promise;\n};\n\n/**\n * Create a promise chain for a single part file upload.\n * @param  {file}   file    A file reference to upload.\n * @return {Promise} A promise which resolves when the request is complete.\n */\nUpload.prototype._uploadFile = function () {\n  var chunk = {\n    data: this.file\n  };\n\n  // Create a new promise if one doesn't exist.\n  if (!this.singlePartPromise) {\n    this.singlePartPromise = Promise();\n  }\n\n  // Broken off the chain, this will allow us to cancel single part uploads without breaking the\n  // initial chain.\n  this._signUpload(chunk)\n    .then(this._sendUpload.bind(this, chunk))\n    .then(this._sendSinglepartComplete.bind(this))\n    .then(this._updateProgress.bind(this, 100, this.fileRecord.size))\n    .then(this._uploadFileComplete.bind(this));\n\n  return this.singlePartPromise;\n};\n\n/**\n *  Resolve the single part upload promise;\n */\nUpload.prototype._uploadFileComplete = function () {\n  this.singlePartPromise(true, []);\n};\n\n/**\n * Make a request and sign the chunk to be uploaded.\n * @private\n * @param  {object}   chunk           Information about the chunk to be uploaded.\n * @return {Promise}                  A promise which resolves when the request is complete.\n */\nUpload.prototype._signUpload = function (chunk) {\n  var url;\n  var signing = '';\n  var headers = {};\n  var request;\n\n  // Set the part number for the current chunk.\n  if (chunk.partNumber) {\n    this.fileRecord.partNumber = chunk.partNumber;\n  }\n\n  headers['Content-Type'] = 'multipart/form-data';\n\n  if (!this.fileRecord.method) {\n    signing = this.config.uploadMethods.param + this.config.uploadMethods.singlePart;\n  }\n\n  url = utils.parseTokens(this.api.config.host + this.config.sign, {\n    id: this.fileRecord.id,\n    method: signing\n  });\n\n  request = new Request({\n    url: url,\n    token: this.api.getToken(),\n    method: 'POST',\n    headers: headers,\n    data: this.fileRecord\n  });\n\n  return request.send();\n};\n\n/**\n * Send the upload to the server.\n * @private\n * @param   {object} upload  An object representing the upload to send to the server.\n * @return  {Promise}       A promise which resolves when the request is complete.\n */\nUpload.prototype._sendUpload = function (upload, response) {\n  var headers = {};\n  var request;\n\n  // Set the proper headers to send with the file.\n  headers['Content-Type'] = this.fileRecord.contentType;\n\n  headers.authorization = response.data.authHeader;\n  headers['x-amz-date'] = response.data.dateHeader;\n  headers['x-amz-security-token'] = response.data.securityToken;\n\n  request = new Request({\n    url: response.data.url,\n    method: 'PUT',\n    headers: headers,\n    data: upload.data,\n    ignoreAcceptHeader: true\n  });\n\n  this.requestPromise = request;\n\n  return request.send();\n};\n\n/**\n * Update the upload bytes value when a single part file is uploaded.\n */\nUpload.prototype._sendSinglepartComplete = function () {\n  this.uploadComplete = true;\n  this.uploadedBytes = this.fileRecord.size;\n};\n\n/**\n *  Executed when a chunk is finished uploading.\n *  @private\n *  @param {object}   chunk   The current chunk that was uploaded.\n *  @param {Promise}  promise The promise to resolve when the chunk is complete.\n */\nUpload.prototype._completeChunk = function (chunk, promise) {\n  var progress;\n\n  this.chunksComplete++;\n  chunk.complete = true;\n\n  this.uploadedBytes += chunk.data.size;\n\n  // Upload is complete.\n  if (this.chunksComplete === this.chunkCount) {\n    this.uploadComplete = true;\n  }\n\n  progress = this.uploadedBytes / this.fileRecord.size;\n  // 0 - 99 for actual upload progress, 1% for the complete call.\n  progress = progress * 99;\n  progress = Math.round(progress);\n\n  this._updateProgress(progress, chunk.data.size);\n\n  // Resolve the promise.\n  promise(true, []);\n};\n\n/**\n * Notify the server that the upload is complete.\n *\n * @private\n * @return  {Promise} A promise which resolves when the request is complete.\n */\nUpload.prototype._completeUpload = function () {\n  var url;\n  var tokens;\n  var request;\n\n  // Early return so we don't process any of the complete information on an aborted upload.\n  if (this.aborted) {\n    return utils.promisify(false, 'Upload Aborted.');\n  }\n\n  tokens = {\n    id: this.fileRecord.id\n  };\n\n  url = utils.parseTokens(this.api.config.host + this.config.uploadComplete, tokens);\n\n  request = new Request({\n    url: url,\n    token: this.api.getToken(),\n    method: 'POST',\n    data: this.fileRecord\n  });\n\n  return request.send()\n          .then(this._onCompleteUpload.bind(this));\n};\n\n/**\n * Return the id for the current file record.\n * @private\n * @return {string} ID for the input record that was created.\n */\nUpload.prototype._onCompleteUpload = function () {\n  // Send the final progress update once the upload is actually complete.\n  this._updateProgress(100);\n\n  this.uploadComplete = true;\n  this.multiPartPromise = null;\n  this.requestPromise = null;\n  this.singlePartPromise = null;\n  return this.fileRecord.id;\n};\n\n/**\n * Aborts an input upload\n *\n * @return {Promise} A promise which resolves when the request is complete.\n */\nUpload.prototype.abort = function () {\n  var url;\n  var tokens;\n  var request;\n\n  this.aborted = true;\n\n  // If initialize hasn't been called yet there is no need to abort the upload as it doesn't\n  // exist yet.\n  if (!this.initialized) {\n\n    if (this.created) {\n      // If the input has been created simply return early with a\n      // promise to delete the created input record.\n      return this.api.inputs.delete(this.fileRecord.id);\n    } else {\n      // Resolve as a successful promise. This case would be fulfilled when an upload\n      // has been created but save() hasn't yet been called.\n      return utils.promisify(true);\n    }\n\n  }\n\n  // Cancel the current request.\n  if (this.requestPromise) {\n    this.requestPromise.cancel();\n    this.requestPromise = null;\n  }\n\n  if (this.singlePartPromise) {\n    this.singlePartPromise = null;\n    // return here because there is no need to abort a single part upload.\n    return this._abortComplete();\n  }\n\n  if (this.multiPartPromise) {\n    this.multiPartPromise.cancel();\n    this.multiPartPromise = null;\n  }\n\n  tokens = {\n    id: this.fileRecord.id,\n    method: ''\n  };\n\n  url = utils.parseTokens(this.api.config.host + this.config.uploadAbort, tokens);\n\n  request = new Request({\n    url: url,\n    token: this.api.getToken(),\n    method: 'POST',\n    data: this.fileRecord\n  });\n\n  return request.send()\n    .then(this._abortComplete.bind(this));\n\n};\n\n/**\n * Aborts an input upload\n * @param {function} callback Callback executed when the request is complete, or an error occurs.\n */\nUpload.prototype.abortSync = function (callback) {\n  var url;\n  var tokens;\n  var request;\n\n  this.aborted = true;\n\n  // If initialize hasn't been called yet there is no need to abort the upload as it doesn't\n  // exist yet.\n  if (!this.initialized) {\n\n    if (this.created) {\n      // If the input has been created simply return early and delete the input.\n      this.api.inputs.deleteSync(this.fileRecord.id, callback);\n      return;\n    } else {\n      // Resolve as a successful promise. This case would be fulfilled when an upload\n      // has been created but save() hasn't yet been called.\n      callback(null);\n      return;\n    }\n\n  }\n\n  // Cancel the current request.\n  if (this.requestPromise) {\n    this.requestPromise.cancel();\n    this.requestPromise = null;\n  }\n\n  if (this.singlePartPromise) {\n    this.singlePartPromise = null;\n    // return here because there is no need to abort a single part upload.\n    this.api.inputs.deleteSync(this.fileRecord.id, callback);\n    return;\n  }\n\n  // If we have a multi part promise we need to cancel it\n  if (this.multiPartPromise) {\n    this.multiPartPromise.cancel();\n    this.multiPartPromise = null;\n  }\n\n  tokens = {\n    id: this.fileRecord.id,\n    method: ''\n  };\n\n  url = utils.parseTokens(this.api.config.host + this.config.uploadAbort, tokens);\n\n  request = new Request({\n    url: url,\n    async: false,\n    token: this.api.getToken(),\n    method: 'POST',\n    data: this.fileRecord\n  });\n\n  request.sendSync(this.abortSyncComplete.bind(this, callback));\n};\n\n/**\n * Delete the input when the abort call completes and then execute the callback.\n * @param  {Function} callback Synchronous callback\n * @param  {object}   error    Error from abort call.\n * @param  {object}   response Response from abort call.\n */\nUpload.prototype.abortSyncComplete = function (callback, error, response) {\n\n  if (!error) {\n    this.api.inputs.deleteSync(this.fileRecord.id, callback);\n  } else if (typeof callback === 'function') {\n    callback(error);\n  } else {\n    throw error;\n  }\n\n};\n\n/**\n * Delete the input that was created.\n * @private\n * @return {Promise} A promise which resolves when the request is complete.\n */\nUpload.prototype._abortComplete = function () {\n  return this.api.inputs.delete(this.fileRecord.id);\n};\n\n/**\n * Pause the current upload.\n */\nUpload.prototype.pause = function () {\n  // Return early if the upload portion is complete.\n  // The work is done by now so we might as well fire the\n  // complete call.\n  if (this.uploadComplete) {\n    return;\n  }\n\n  this.paused = true;\n\n  // Is there a multipart upload\n  if (this.multiPartPromise) {\n    // Pause the series if its a multipart upload.\n    this.multiPartPromise.pause();\n  }\n\n  // Abort the upload if its a singlepart upload and cancel the request if it is a multipart promise\n  if (this.requestPromise) {\n    this.requestPromise.cancel();\n  }\n};\n\n/**\n * Resume the current upload.\n */\nUpload.prototype.resume = function () {\n  this.paused = false;\n\n  // resume the series if its multi part.\n  if (this.multiPartPromise) {\n    // resume the series if its multipart.\n    this.multiPartPromise.resume();\n  } else if (this.requestPromise) {\n    // Restart the file upload.\n    this._uploadFile();\n  }\n\n};\n\n/**\n * Check the file size to determine if it should be a multipart upload, returns false for singlepart uploads.\n * @private\n * @param  {file}   file  The file to evaluate.\n * @return {boolean}      True if the file will be uploading using mutlipart upload.\n */\nUpload.prototype._checkMultipart = function (file) {\n  if (!file) {\n    return;\n  }\n\n  return (file.size <= (5 * 1024 * 1024) ? false : true);\n};\n\n/**\n * Function that determines the slice method to be used\n * @private\n * @param {object} file - The file object you wish to determine the slice method for\n * @return {string} sliceMethod - The slice method to use.\n */\nUpload.prototype._getSliceMethod = function (file) {\n  var sliceMethod;\n\n  if ('mozSlice' in file) {\n    sliceMethod = 'mozSlice';\n  } else if ('webkitSlice' in file) {\n    sliceMethod = 'webkitSlice';\n  } else {\n    sliceMethod = 'slice';\n  }\n\n  return sliceMethod;\n};\n\nmodule.exports = Upload;\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./src/Uploader.js\n ** module id = 10\n ** module chunks = 0\n **/","'use strict';\n\n/**\n * A management layer for storing app cache in session storage.\n */\nvar Cache = function (cacheAge) {\n  this.cacheAge = cacheAge;\n  this.enabled = this._checkCacheSupport();\n};\n\n/**\n * Return true if sessionStorage is supported.\n * @private\n * @return {boolean} True if sessionStorage is supported.\n */\nCache.prototype._checkCacheSupport = function () {\n\n  var support = 'support';\n\n  try {\n    window.sessionStorage.setItem(support, support);\n    window.sessionStorage.removeItem(support);\n    return true;\n  } catch (e) {\n    return false;\n  }\n\n};\n\n/**\n * Retrieve the cached result for the provided cacheKey.\n * @param  {string}   cacheKey  Key associated with the cached result.\n * @return {object}             Parse results object.\n */\nCache.prototype.retrieve = function (cacheKey) {\n  var data;\n  var value = null;\n  var expiry;\n\n  try {\n\n    data = window.sessionStorage.getItem(cacheKey);\n    data = JSON.parse(data);\n\n    if (!data) {\n      return value;\n    }\n\n    value = data.value;\n\n    if (data.expiry < Date.now()) {\n      // Cache is expired;\n      window.sessionStorage.removeItem(cacheKey);\n      value = null;\n    }\n\n  } catch (error) {\n    // Silent capture so that caching never gets in the way of returning a result.\n    value = null;\n  }\n\n  return value;\n};\n\n/**\n * Remove a result from the cache.\n * @param  {string}   cacheKey  Key associated with the cached result.\n * @return {boolean}            A boolean indicating success of the removal.\n */\nCache.prototype.remove = function (cacheKey) {\n  var result = true;\n\n  try {\n    window.sessionStorage.removeItem(cacheKey);\n  } catch (error) {\n    // Silent capture so that caching never gets in the way of returning a result.\n    result = false;\n  }\n\n  return result;\n};\n\n/**\n * Save the new result with its expiry date.\n * @param  {string}   cacheKey Unique cache key for the request.\n * @param  {number}   expiry   Unix timestamp for the expiry.\n * @param  {object}   result   Object to be cached.\n * @return {boolean}            A boolean indicating success of the save.\n */\nCache.prototype.save = function (cacheKey, value) {\n  var result = true;\n  var data = {};\n  var JSONResult;\n\n  try {\n\n    data.expiry = Date.now() + this.cacheAge;\n    data.value = value;\n\n    JSONResult = JSON.stringify(data);\n\n    window.sessionStorage.setItem(cacheKey, JSONResult);\n\n  } catch (error) {\n    // Silent capture so that caching never gets in the way of returning a result.\n    result = false;\n  }\n\n  return result;\n};\n\n/**\n * Return an object representing the differences between the provided object and the cached object.\n * @example\n * //'cachedObject' = {id: '12345'};\n * cache.diff('cachedObject', {title: 'test'});\n * // returns {title: 'test'}\n * @example\n * //'cachedObject' = {id: '12345', title: 'test'};\n * cache.diff('cachedObject', {title: 'test2'});\n * // returns {title: 'test2'}\n *\n * @param  {string} cacheKey  Cachekey of the object to compare against.\n * @param  {object} item      Object to compare against the cached object.\n * @param  {array}  forced    An array of properties to be returned in the resulting object regardless of difference.\n * @return {object}           An object containing the differences.\n */\nCache.prototype.diff = function (cacheKey, item, forced) {\n  var property, properties, propertiesLength, i;\n  var force, forcedLength, n;\n  var original = this.retrieve(cacheKey);\n  var diff = null;\n\n  if (forced) {\n    forcedLength = forced.length;\n  }\n\n  properties = Object.keys(item);\n  propertiesLength = properties.length;\n\n  if (!original) {\n    // return the compare object if the original item wasn't found.\n    return item;\n  }\n\n  // Walk the object and compare the properties.\n  for (i = 0; i < propertiesLength; i++) {\n    property = properties[i];\n\n    // Check the values if both objects have the property.\n    if (original.hasOwnProperty(property)) {\n      if (item[property] === original[property]) {\n        // If the values are the same we don't need to add it to the diff so continue.\n        continue;\n      }\n    }\n\n    // If the diff item is still null we need to create a new object to store the properties in.\n    if (!diff) {\n      diff = {};\n    }\n\n    // If we've made it this far the property is either a new one, or the item doesn't match.\n    diff[property] = item[property];\n\n  }\n\n  // As long as changes were found append the forced properties.\n  if (diff) {\n    for (n = 0; n < forcedLength; n++) {\n      property = forced[n];\n      diff[property] = item[property];\n    }\n  }\n\n  return diff;\n\n};\n\n/**\n * Return an object representing the differences between the provided objects and the cached object.\n * Similar to diff, but accepts an array of objects.\n *\n * @param  {string} cacheKey  Property on the provided objects that represents the cache key.\n * @param  {object} item      Object to compare against the cached object.\n * @param  {array}  forced    An array of properties to be returned in the resulting object regardless of difference.\n * @return {object}           An object containing the differences.\n */\nCache.prototype.diffArray = function (cacheKey, items, forced) {\n\n  var i;\n  var itemsLength = items.length;\n  var item;\n  var result = null;\n  var results = [];\n\n  for (i = 0; i < itemsLength; i++) {\n    item = items[i];\n\n    result = this.diff(item[cacheKey], item, forced);\n\n    // Only add it to the result set if changes were found.\n    if (result !== null) {\n      results.push(result);\n    }\n\n  }\n\n  return results;\n\n};\n\nmodule.exports = Cache;\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./src/Cache.js\n ** module id = 11\n ** module chunks = 0\n **/","'use strict';\n\nvar extend = require('extend');\nvar Request = require('../Request');\nvar utils = require('../Utils');\n\n/**\n * Resource Object\n * @class\n */\nfunction Resource (options) {\n\n  this.defaults = {\n    host: 'https://api.ingest.io',\n    all: '/<%=resource%>',\n    byId: '/<%=resource%>/<%=id%>',\n    trash: '/<%=resource%>?filter=trashed',\n    deleteMethods: {\n      'permanent': '?permanent=1'\n    },\n    search: '/<%=resource%>?search=<%=input%>',\n    tokenSource: null,\n    resource: null\n  };\n\n  this.config = extend(true, {}, this.defaults, options);\n\n  this.cache = this.config.cache;\n\n}\n\n/**\n * Proxy the request to token source to ensure a value is always returned.\n * @private\n * @return {string} Auth token.\n */\nResource.prototype._tokenSource = function () {\n  var result = null;\n\n  if (this.config.tokenSource) {\n    result = this.config.tokenSource.call();\n  }\n\n  return result;\n};\n\n/**\n * Return a list of the requested resource for the current user and network.\n * @param  {object}   headers   Object representing headers to apply to the request.\n * @return {promise}            A promise which resolves when the request is complete.\n */\nResource.prototype.getAll = function (headers) {\n  var request;\n  var url = utils.parseTokens(this.config.host + this.config.all, {\n    resource: this.config.resource\n  });\n\n  request = new Request({\n    url: url,\n    token: this._tokenSource(),\n    headers: headers\n  });\n\n  return request.send()\n          .then(this._updateCachedResources.bind(this));\n};\n\n/**\n * Return a resource that matches the supplied id.\n * @param  {string}   id    Resource id.\n * @return {promise}        A promise which resolves when the request is complete.\n */\nResource.prototype.getById = function (id) {\n  var url, cachedResult, request;\n\n  if (typeof id !== 'string' || id.length <= 0) {\n    return utils.promisify(false,\n      'IngestAPI Resource getById requires a valid id passed as a string.');\n  }\n\n  url = utils.parseTokens(this.config.host + this.config.byId, {\n    resource: this.config.resource,\n    id: id\n  });\n\n  if (this.cache && this.cache.enabled) {\n    // retrieve the cached item.\n    cachedResult = this.cache.retrieve(id);\n  }\n\n  // Return a cached result if we've found one.\n  if (cachedResult) {\n    return utils.promisify(true, {\n      data: cachedResult\n    });\n  } else {\n\n    request = new Request({\n      url: url,\n      token: this._tokenSource()\n    });\n\n    return request.send()\n      .then(this._updateCachedResource.bind(this));\n\n  }\n};\n\n/**\n * Return the resources currently in the trash.\n * @param  {object} headers Headers to be passed along with the request for pagination.\n * @return {promise}         A promise which resolves when the request is complete.\n */\nResource.prototype.getTrashed = function (headers) {\n  var request;\n  var url = utils.parseTokens(this.config.host + this.config.trash, {\n    resource: this.config.resource\n  });\n\n  request = new Request({\n    url: url,\n    token: this._tokenSource(),\n    headers: headers\n  });\n\n  return request.send();\n};\n\n/**\n * Add a new resource.\n * @param   {object}  resource  An object representing the resource to add.\n * @return  {promise}           A promise which resolves when the request is complete.\n */\nResource.prototype.add = function (resource) {\n  var url, request;\n\n  if (typeof resource !== 'object') {\n    return utils.promisify(false,\n      'IngestAPI Resource add requires a resource passed as an object.');\n  }\n\n  url = utils.parseTokens(this.config.host + this.config.all, {\n    resource: this.config.resource\n  });\n\n  request = new Request({\n    url: url,\n    token: this._tokenSource(),\n    method: 'POST',\n    data: resource\n  });\n\n  return request.send()\n          .then(this._updateCachedResource.bind(this));\n};\n\n/**\n * Update an existing resource with new content.\n * @param  {object|array} resource  An object or an array of objects representing the resource(s) to be updated.\n * @return {promise}                A promise which resolves when the request is complete.\n */\nResource.prototype.update = function (resource) {\n  var request, data, url;\n\n  if (typeof resource !== 'object') {\n    return utils.promisify(false,\n      'IngestAPI Resource update requires a resource to be passed as an object.');\n  }\n\n  data = resource;\n\n  url = utils.parseTokens(this.config.host + this.config.byId, {\n    resource: this.config.resource,\n    id: resource.id\n  });\n\n  if (this.cache && this.cache.enabled) {\n    data = this.cache.diff(resource.id, resource);\n  }\n\n  // Null is returned in the case that the two objects match.\n  if (!data) {\n    // Return a fulfilled promise with the cached object.\n    return utils.promisify(true, {\n      data: this.cache.retrieve(resource.id)\n    });\n  }\n\n  request = new Request({\n    url: url,\n    token: this._tokenSource(),\n    method: 'PATCH',\n    data: data\n  });\n\n  return request.send()\n          .then(this._updateCachedResource.bind(this));\n};\n\n/**\n * Delete an existing resource\n * @param  {string}   resource  The id for the resource to be deleted.\n * @param  {boolean}  async     A flag to indicate if this should be an async request to delete.\n *\n * @return {Promise}            A promise which resolves when the request is complete.\n */\nResource.prototype.delete = function (resource, async) {\n  if (typeof async !== 'boolean') {\n    async = true;\n  }\n\n  if (typeof resource !== 'string') {\n    return utils.promisify(false,\n      'IngestAPI Resource delete requires a resource to be passed as a string.');\n  }\n\n  return this._deleteResource(resource, false, async);\n};\n\n/**\n * Permanently delete an existing resource.\n * @param  {string}   resource  The id for the resource to be deleted.\n * @param  {boolean}  async     A flag to indicate if this should be an async request to delete.\n *\n * @return {Promise}            A promise which resolves when the request is complete.\n */\nResource.prototype.permanentDelete = function (resource, async) {\n  if (typeof async !== 'boolean') {\n    async = true;\n  }\n\n  if (typeof resource !== 'string') {\n    return utils.promisify(false,\n      'IngestAPI Resource delete requires a resource to be passed as a string.');\n  }\n\n  return this._deleteResource(resource, true, async);\n};\n\n/**\n * Delete a single resource\n * @private\n * @param   {object}    resource    The id of the resource to be deleted.\n * @param   {boolean}   permanent   A flag to permanently delete each video.\n * @return  {promise}               A promise which resolves when the request is complete.\n */\nResource.prototype._deleteResource = function (resource, permanent) {\n  var request;\n\n  var url = utils.parseTokens(this.config.host + this.config.byId, {\n    resource: this.config.resource,\n    id: resource\n  });\n\n  if (permanent === true) {\n    url += this.config.deleteMethods.permanent;\n  }\n\n  request = new Request({\n    url: url,\n    token: this._tokenSource(),\n    method: 'DELETE'\n  });\n\n  return request.send()\n    .then(this._deleteCachedResource.bind(this, resource));\n};\n\n/**\n * Delete an existing resource\n * @param  {string}     resource    The id for the resource to be deleted.\n * @param  {function}   callback    A Synchronous callback for handling any errors, or working with the http response.\n */\nResource.prototype.deleteSync = function (resource, callback) {\n\n  if (typeof resource !== 'string') {\n    callback(new Error('IngestAPI Resource delete requires a resource to be passed as a string.'));\n    return;\n  }\n\n  this._deleteResourceSync(resource, false, callback);\n\n};\n\n/**\n * Permanently delete an existing resource.\n * @param   {string}    resource    The id for the resource to be deleted.\n * @param   {function}  callback    A Synchronous callback for handling any errors, or working with the http response.\n */\nResource.prototype.permanentDeleteSync = function (resource, callback) {\n\n  if (typeof resource !== 'string') {\n    callback(new Error('IngestAPI Resource delete requires a resource to be passed as a string.'));\n    return;\n  }\n\n  this._deleteResourceSync(resource, true, callback);\n\n};\n\n/**\n * Delete a single resource synchronously\n * @private\n * @param   {object}    resource    The id of the resource to be deleted.\n * @param   {boolean}   permanent   A flag to permanently delete each video.\n * @param   {function}  callback    A Synchronous callback for handling any errors, or working with the http response.\n */\nResource.prototype._deleteResourceSync = function (resource, permanent, callback) {\n  var request;\n\n  var url = utils.parseTokens(this.config.host + this.config.byId, {\n    resource: this.config.resource,\n    id: resource\n  });\n\n  if (permanent === true) {\n    url += this.config.deleteMethods.permanent;\n  }\n\n  request = new Request({\n    url: url,\n    async: false,\n    token: this._tokenSource(),\n    method: 'DELETE'\n  });\n\n  request.sendSync(callback);\n\n};\n\n/**\n * Return a subset of items that match the search terms.\n * @param  {string}   input     The search terms to match against.\n * @param  {object}   headers   The headers to be passed to the request.\n * @param  {boolean}  trash     Should we be searching the trash.\n * @return {Promise}          A promise which resolves when the request is complete.\n */\nResource.prototype.search = function (input, headers, trash) {\n  var url, request;\n\n  if (typeof input !== 'string') {\n    return utils.promisify(false,\n      'IngestAPI Resource search requires search input to be passed as a string.');\n  }\n\n  url = utils.parseTokens(this.config.host + this.config.search, {\n    resource: this.config.resource,\n    input: encodeURIComponent(input)\n  });\n\n  if (trash) {\n    url = url + '&filter=trashed';\n  }\n\n  request = new Request({\n    url: url,\n    token: this._tokenSource(),\n    headers: headers\n  });\n\n  return request.send();\n};\n\n/**\n * Return a subset of items that match the search terms in the trash.\n * @param  {string} input    The search terms to match against.\n * @param  {object} headers  The headers to be passed to the request.\n * @return {Promise}          A promise which resolves when the request is complete.\n */\nResource.prototype.searchTrash = function (input, headers) {\n  return this.search(input, headers, true);\n};\n\n/**\n * Get the total count of resources.\n * @return {promise} A promise which resolves when the request is complete.\n */\nResource.prototype.count = function () {\n  var request;\n  var url = utils.parseTokens(this.config.host + this.config.all, {\n    resource: this.config.resource\n  });\n\n  request = new Request({\n    url: url,\n    token: this._tokenSource(),\n    method: 'HEAD'\n  });\n\n  return request.send()\n          .then(this._handleCountResponse);\n};\n\n/**\n * Get the total count of resources in the trash.\n * @return {promise} A promise which resolves when the request is complete.\n */\nResource.prototype.trashCount = function () {\n  var request;\n  var url = utils.parseTokens(this.config.host + this.config.trash, {\n    resource: this.config.resource\n  });\n\n  request = new Request({\n    url: url,\n    token: this._tokenSource(),\n    method: 'HEAD'\n  });\n\n  return request.send()\n          .then(this._handleCountResponse);\n};\n\n/**\n * Return the resource count from the response.\n * @private\n * @param  {object} response Request response object.\n * @return {number}          The resource count.\n */\nResource.prototype._handleCountResponse = function (response) {\n  return parseInt(response.headers('Resource-Count'), 10);\n};\n\n/**\n * Update a single cached resource based on the response data.\n * @param  {object}   response   Response object from the getAll request.\n * @return {response}            Response object from the getAll request.\n */\nResource.prototype._updateCachedResource = function (response) {\n  if (this.cache && this.cache.enabled) {\n    this.cache.save(response.data.id, response.data);\n  }\n\n  return response;\n};\n\n/**\n * Store the returned items in cache.\n * @param  {object}   response   Response object from the getAll request.\n * @return {response}            Response object from the getAll request.\n */\nResource.prototype._updateCachedResources = function (response) {\n  var data = response.data;\n  var dataLength = data.length;\n  var i;\n\n  if (this.cache && this.cache.enabled) {\n    for (i = 0; i < dataLength; i++) {\n      this.cache.save(data[i].id, data[i]);\n    }\n\n  }\n\n  return response;\n};\n\n/**\n * Delete a single cached resource.\n * @param  {string} id            ID of the resource to remove.\n * @param  {object}   response    Response object from the getAll request.\n * @return {response}             Response object from the getAll request.\n */\nResource.prototype._deleteCachedResource = function (id, response) {\n  if (this.cache && this.cache.enabled) {\n    this.cache.remove(id);\n  }\n\n  return response;\n};\n\nmodule.exports = Resource;\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./src/resources/Resource.js\n ** module id = 12\n ** module chunks = 0\n **/","'use strict';\n\nvar Resource = require('./Resource');\nvar Request = require('../Request');\nvar utils = require('../Utils');\nvar extend = require('extend');\n\nfunction PlaybackContent (options) {\n\n  var overrides = {\n    thumbnail: '/<%=resource%>/<%=id%>/thumbnail',\n    thumbnails: '/<%=resource%>/<%=id%>/thumbnails',\n    deleteThumbnail: '/<%=resource%>/<%=id%>/thumbnail/<%=thumbnailId%>'\n  };\n\n  options = extend(true, {}, overrides, options);\n\n  Resource.call(this, options);\n\n};\n\n// This extends the base class of 'Resource'.\nPlaybackContent.prototype = Object.create(Resource.prototype);\nPlaybackContent.prototype.constructor = PlaybackContent;\n\n/**\n * Retrieve all thumbnails for a provided resource id.\n * @param {string}    id    ID of the resource to retrieve thumbnails for.\n * @return {promise}        A promise which resolves when the request is complete.\n */\nPlaybackContent.prototype.getThumbnails = function (id) {\n  var url, request;\n\n  if (typeof id !== 'string') {\n    return utils.promisify(false,\n      'IngestAPI PlaybackContent getThumbnails requires an id to be passed as a string.');\n  }\n\n  url = utils.parseTokens(this.config.host + this.config.thumbnails, {\n    resource: this.config.resource,\n    id: id\n  });\n\n  request = new Request({\n    url: url,\n    token: this._tokenSource()\n  });\n\n  return request.send();\n};\n\n/**\n * Add external images to the resource id.\n * @param   {string}          id      ID of the resource to add the external thumbnails to.\n * @param   {string|array}    images  A path to the image, or an array of image paths.\n * @return  {promise}                 A promise which resolves when the request is complete.\n */\nPlaybackContent.prototype.addExternalThumbnails = function (id, images) {\n\n  var url, request;\n\n  var imagesToAdd = [];\n\n  if (typeof id !== 'string') {\n    return utils.promisify(false,\n      'IngestAPI PlaybackContent addExternal requires an id to be passed as a string.');\n  }\n\n  // Early return if the types do not match what we are expecting.\n  if (!Array.isArray(images) && typeof images !== 'string') {\n    return utils.promisify(false,\n      'IngestAPI PlaybackContent addExternal requires images as a string or an array of strings.');\n  }\n\n  // If we already have an array replace the outgoing array, otherwise push the image path to the array.\n  // This ensures we are always passing an array.\n  if (Array.isArray(images)) {\n    imagesToAdd = images;\n  } else {\n    imagesToAdd.push(images);\n  }\n\n  url = utils.parseTokens(this.config.host + this.config.thumbnails, {\n    resource: this.config.resource,\n    id: id\n  });\n\n  request = new Request({\n    method: 'POST',\n    url: url,\n    token: this._tokenSource(),\n    data: imagesToAdd\n  });\n\n  return request.send();\n\n};\n\n/**\n * Add external images to the resource id.\n * @param   {string}        id        ID of the resource to add the external thumbnails to.\n * @param   {file}          image     A JavaScript File interface representing the image to upload.\n * @return  {promise}                 A promise which resolves when the request is complete.\n */\nPlaybackContent.prototype.uploadThumbnail = function (id, image) {\n\n  var request, url, formData;\n\n  if (typeof id !== 'string') {\n    return utils.promisify(false,\n      'IngestAPI PlaybackContent uploadThumbnail requires an id to be passed as a string.');\n  }\n\n  // Early return if the types do not match what we are expecting.\n  if (!image || !(image instanceof File) || !utils.isImage(image)) {\n    return utils.promisify(false,\n      'IngestAPI PlaybackContent uploadThumbnail requires a valid image.');\n  }\n\n  url = utils.parseTokens(this.config.host + this.config.thumbnail, {\n    resource: this.config.resource,\n    id: id\n  });\n\n  // Create a new FormData object so the request is properly sent as multipart.\n  formData = new FormData();\n  formData.append('image', image);\n\n  request = new Request({\n    method: 'POST',\n    url: url,\n    token: this._tokenSource(),\n    data: formData\n  });\n\n  return request.send();\n\n};\n\n/**\n * Remove an external thumbnail image.\n *\n * @param   {string}    id            ID of the resource to remove the thumbnail from.\n * @param   {string}    thumbnailId   ID of the thumbnail to remove from the resource.\n * @return  {promise}                 A promise which resolves when the request is complete.\n */\nPlaybackContent.prototype.deleteThumbnail = function (id, thumbnailId) {\n\n  var request, url;\n\n  if (typeof id !== 'string') {\n    return utils.promisify(false,\n      'IngestAPI PlaybackContent deleteThumbnail requires an id to be passed as a string.');\n  }\n\n  if (typeof thumbnailId !== 'string') {\n    return utils.promisify(false,\n      'IngestAPI PlaybackContent deleteThumbanil requires a thumbnailId to be passed as a string.');\n  }\n\n  url = utils.parseTokens(this.config.host + this.config.deleteThumbnail, {\n    resource: this.config.resource,\n    id: id,\n    thumbnailId: thumbnailId\n  });\n\n  request = new Request({\n    method: 'DELETE',\n    url: url,\n    token: this._tokenSource()\n  });\n\n  return request.send();\n\n};\n\nmodule.exports = PlaybackContent;\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./src/resources/PlaybackContent.js\n ** module id = 13\n ** module chunks = 0\n **/","'use strict';\n\nvar Resource = require('./Resource');\nvar Request = require('../Request');\nvar utils = require('../Utils');\nvar extend = require('extend');\n\nfunction Users (options) {\n\n  var overrides = {\n    currentUser: '/users/me',\n    transfer: '/users/<%=oldId%>/transfer/<%=newId%>',\n    revoke: '/revoke'\n  };\n\n  options = extend(true, {}, overrides, options);\n\n  Resource.call(this, options);\n\n};\n\n// This extends the base class of 'Resource'.\nUsers.prototype = Object.create(Resource.prototype);\nUsers.prototype.constructor = Users;\n\n/**\n * Retrieve information for the current user.\n *\n * @return {Promise} A promise which resolves when the request is complete.\n */\nUsers.prototype.getCurrentUserInfo = function () {\n  var request = new Request({\n    url: this.config.host + this.config.currentUser,\n    token: this._tokenSource()\n  });\n\n  return request.send();\n};\n\n/**\n * Transfer all authorship currently under the specified user onto another.\n * This includes all videos & playlists.\n * This task is commonly used in conjunction with permanently deleting a user.\n *\n * @param {string} oldId - The user who currently has authorship.\n * @param {string} newId - The user to transfer authorship to.\n *\n * @return {Promise} A promise which resolves when the request is complete.\n */\nUsers.prototype.transferUserAuthorship = function (oldId, newId) {\n  var tokens, url, request;\n\n  if (typeof oldId !== 'string') {\n    return utils.promisify(false,\n      'IngestAPI transferUserAuthorship requires \"oldId\" to be passed as a string.');\n  }\n\n  if (typeof newId !== 'string') {\n    return utils.promisify(false,\n      'IngestAPI transferUserAuthorship requires \"newId\" to be passed as a string');\n  }\n\n  tokens = {\n    oldId: oldId,\n    newId: newId\n  };\n\n  url = utils.parseTokens(this.config.host + this.config.transfer, tokens);\n\n  request = new Request({\n    url: url,\n    token: this._tokenSource(),\n    method: 'PATCH'\n  });\n\n  return request.send();\n};\n\n/**\n * Revokes the authorization token for the current user.\n *\n * @return {Promise} A promise which resolves when the request is complete.\n */\nUsers.prototype.revokeCurrentUser = function () {\n  var request = new Request({\n    url: this.config.host + this.config.currentUser + this.config.revoke,\n    token: this._tokenSource(),\n    method: 'DELETE'\n  });\n\n  return request.send();\n};\n\nmodule.exports = Users;\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./src/resources/Users.js\n ** module id = 14\n ** module chunks = 0\n **/","'use strict';\n\nvar Resource = require('./Resource');\nvar Request = require('../Request');\nvar utils = require('../Utils');\nvar extend = require('extend');\n\nfunction Networks (options) {\n\n  var overrides = {\n    keys: '/<%=resource%>/<%=networkId%>/keys',\n    keysById: '/<%=resource%>/<%=networkId%>/keys/<%=keyId%>',\n    invite: '/<%=resource%>/<%=networkId%>/invite',\n    invoices: '/<%=resource%>/<%=networkId%>/invoices',\n    invoicesById: '/<%=resource%>/<%=networkId%>/invoices/<%=invoiceId%>',\n    currentUsage: '/<%=resource%>/<%=networkId%>/invoices?currentUsage=true',\n    customers: '/<%=resource%>/<%=networkId%>/customers',\n    customerById: '/<%=resource%>/<%=networkId%>/customers/<%=cusId%>',\n    customerCardInformation: '/<%=resource%>/<%=networkId%>/customers/<%=cusId%>/card',\n    getPendingUsers: '/<%=resource%>/<%=networkId%>?filter=pending',\n    deletePendingUser: '/<%=resource%>/<%=networkId%>/pending-users/<%=pendingUserId%>',\n  };\n\n  options = extend(true, {}, overrides, options);\n\n  Resource.call(this, options);\n\n};\n\n// This extends the base class of 'Resource'.\nNetworks.prototype = Object.create(Resource.prototype);\nNetworks.prototype.constructor = Networks;\n\n/**\n * Link an existing user to the specified network.\n *\n * @param {string}  networkId  The unique ID of the network.\n * @param {string}  userId     The unique ID of the user to link.\n *\n * @return {Promise}  A promise which resolves when the request is complete.\n */\nNetworks.prototype.linkUser = function (networkId, userId) {\n  var data, request, url;\n\n  if (typeof networkId !== 'string') {\n    return utils.promisify(false,\n      'IngestAPI linkUser requires \"networkId\" to be passed as a string.');\n  }\n\n  if (typeof userId !== 'string') {\n    return utils.promisify(false,\n      'IngestAPI linkUser requires \"userId\" to be passed as a string.');\n  }\n\n  data = {\n    id: userId\n  };\n\n  url = utils.parseTokens(this.config.host + this.config.byId, {\n    resource: this.config.resource,\n    id: networkId\n  });\n\n  request = new Request({\n    url: url,\n    data: data,\n    token: this._tokenSource(),\n    method: 'LINK'\n  });\n\n  return request.send();\n};\n\n/**\n * Removes the specified user from the specified network.\n *\n * @param {string}  networkId  The unique ID of the network.\n * @param {string}  userId     The unique ID of the user to unlink.\n *\n * @return {Promise}  A promise which resolves when the request is complete.\n */\nNetworks.prototype.unlinkUser = function (networkId, userId) {\n  var data, request, url;\n\n  if (typeof networkId !== 'string') {\n    return utils.promisify(false,\n      'IngestAPI unlinkUser requires \"networkId\" to be passed as a string.');\n  }\n\n  if (typeof userId !== 'string') {\n    return utils.promisify(false,\n      'IngestAPI unlinkUser requires \"userId\" to be passed as a string.');\n  }\n\n  data = {\n    id: userId\n  };\n\n  url = utils.parseTokens(this.config.host + this.config.byId, {\n    resource: this.config.resource,\n    id: networkId\n  });\n\n  request = new Request({\n    url: url,\n    data: data,\n    token: this._tokenSource(),\n    method: 'UNLINK'\n  });\n\n  return request.send();\n};\n\n/**\n * Invites a user to the specified network.\n *\n * @param {string}  networkId  The unique ID of the network.\n * @param {string}  email      The email to send the invite to.\n * @param {string}  name       The name of the person to invite.\n * @param {boolean} resend     [Optional] True: Resend an invite. False for first time invite. Default value is false.\n *\n * @return {Promise} A promise which resolves when the request is complete.\n */\nNetworks.prototype.inviteUser = function (networkId, email, name, resend) {\n  var data, request, url;\n\n  if (typeof networkId !== 'string') {\n    return utils.promisify(false,\n      'IngestAPI inviteUser requires \"networkId\" to be passed as a string.');\n  }\n\n  if (typeof email !== 'string') {\n    return utils.promisify(false,\n      'IngestAPI inviteUser requires \"email\" to be passed as a string.');\n  }\n\n  if (typeof name !== 'string') {\n    return utils.promisify(false,\n      'IngestAPI inviteUser requires \"name\" to be passed as a string.');\n  }\n\n  data = {\n    email: email,\n    name: name\n  };\n\n  if (typeof resend === 'boolean') {\n    data.resend = resend;\n  }\n\n  url = utils.parseTokens(this.config.host + this.config.invite, {\n    resource: this.config.resource,\n    networkId: networkId\n  });\n\n  request = new Request({\n    url: url,\n    data: data,\n    token: this._tokenSource(),\n    method: 'POST'\n  });\n\n  return request.send();\n};\n\n/**\n * Gets a list of all secure keys for the network given.\n *\n * @param {string}  networkId  The unique ID of the network.\n *\n * @return {Promise}  A promise which resolves when the request is complete.\n */\nNetworks.prototype.getSecureKeys = function (networkId) {\n  var request, url;\n\n  if (typeof networkId !== 'string') {\n    return utils.promisify(false,\n      'IngestAPI getSecureKeys requires \"networkId\" to be passed as a string.');\n  }\n\n  url = utils.parseTokens(this.config.host + this.config.keys, {\n    resource: this.config.resource,\n    networkId: networkId\n  });\n\n  request = new Request({\n    url: url,\n    token: this._tokenSource()\n  });\n\n  return request.send();\n};\n\n/**\n * Adds a new secure key to the specified network.\n *\n * @param {string}  networkId   The unique ID of the network.\n * @param {object}  data        The object containing data for the secure key entry.\n * @param {string}  data.title  Optional. The title of the secure key. Will default to \"Default Key Title\"\n * @param {string}  data.key    The public key in RSA format.\n *\n * @return {Promise}  A promise which resolves when the request is complete.\n */\nNetworks.prototype.addSecureKey = function (networkId, data) {\n  var request, url;\n\n  if (typeof networkId !== 'string') {\n    return utils.promisify(false,\n      'IngestAPI addSecureKey requires \"networkId\" to be passed as a string.');\n  }\n\n  if (typeof data !== 'object') {\n    return utils.promisify(false,\n      'IngestAPI addSecureKey requires \"data\" to be passed as an object.');\n  }\n\n  if (typeof data.key !== 'string') {\n    return utils.promisify(false,\n      'IngestAPI addSecureKey requires that the key be a string in RSA public key format.');\n  }\n\n  // The title must be a string.\n  if (typeof data.title !== 'string') {\n    data.title = '';\n  }\n\n  url = utils.parseTokens(this.config.host + this.config.keys, {\n    resource: this.config.resource,\n    networkId: networkId\n  });\n\n  request = new Request({\n    url: url,\n    token: this._tokenSource(),\n    method: 'POST',\n    data: data\n  });\n\n  return request.send();\n};\n\n/**\n * Retrieves a single network secure key entry based on the unique ID given.\n *\n * @param {string}  networkId  The unique ID of the network.\n * @param {string}  keyId      The unique ID of the secure key entry.\n *\n * @return {Promise}  A promise which resolves when the request is complete.\n */\nNetworks.prototype.getSecureKeyById = function (networkId, keyId) {\n  var url, request;\n\n  if (typeof networkId !== 'string') {\n    return utils.promisify(false,\n      'IngestAPI getSecureKeyById requires a \"networkId\" to be passed as a string.');\n  }\n\n  if (typeof keyId !== 'string') {\n    return utils.promisify(false,\n      'IngestAPI getSecureKeyById requires a \"keyId\" to be passed as a string.');\n  }\n\n  url = utils.parseTokens(this.config.host + this.config.keysById, {\n    resource: this.config.resource,\n    networkId: networkId,\n    keyId: keyId\n  });\n\n  request = new Request({\n    url: url,\n    token: this._tokenSource()\n  });\n\n  return request.send();\n};\n\n/**\n * Updates an individual secure key entry in the network specified.\n *\n * @param {string}  networkId   The unique ID of the network.\n * @param {object}  data        The object containing data for the secure key entry.\n * @param {string}  data.title  The title for the current network.\n *\n * @return {Promise} A promise which resolves when the request is complete.\n */\nNetworks.prototype.updateSecureKey = function (networkId, data) {\n  var url, request;\n\n  if (typeof networkId !== 'string') {\n    return utils.promisify(false,\n      'IngestAPI updateSecureKeyById requires \"networkId\" to be passed as a string.');\n  }\n\n  if (typeof data !== 'object') {\n    return utils.promisify(false,\n      'IngestAPI updateSecureKeyById requires \"data\" to be passed as an object.');\n  }\n\n  if (typeof data.id !== 'string') {\n    return utils.promisify(false,\n      'IngestAPI updateSecureKeyById requires param \"data.id\" to be a string.');\n  }\n\n  if (typeof data.title !== 'string') {\n    data.title = '';\n  }\n\n  url = utils.parseTokens(this.config.host + this.config.keysById, {\n    resource: this.config.resource,\n    networkId: networkId,\n    keyId: data.id\n  });\n\n  request = new Request({\n    url: url,\n    token: this._tokenSource(),\n    method: 'PATCH',\n    data: data\n  });\n\n  return request.send();\n};\n\n/**\n * Deletes a single network secure key entry based on the unique ID given.\n *\n * @param {string}  networkId  The unique ID of the network.\n * @param {string}  keyId      The unique ID of the secure key entry.\n *\n * @return {Promise}  A promise which resolves when the request is complete.\n */\nNetworks.prototype.deleteSecureKey = function (networkId, keyId) {\n  var url, request;\n\n  if (typeof networkId !== 'string') {\n    return utils.promisify(false,\n      'IngestAPI deleteSecureKeyById requires a \"networkId\" to be passed as a string.');\n  }\n\n  if (typeof keyId !== 'string') {\n    return utils.promisify(false,\n      'IngestAPI deleteSecureKeyById requires a \"keyId\" to be passed as a string.');\n  }\n\n  url = utils.parseTokens(this.config.host + this.config.keysById, {\n    resource: this.config.resource,\n    networkId: networkId,\n    keyId: keyId\n  });\n\n  request = new Request({\n    url: url,\n    token: this._tokenSource(),\n    method: 'DELETE'\n  });\n\n  return request.send();\n\n};\n\n/**\n * Creates a Stripe customer for the given network ID.\n *\n * @param {string} stripeToken - The Stripe token to reference submitted payment details.\n * @param {string} networkId   - The network UUID for this Stripe customer.\n *\n * @return {Promise} A promise which resolves when the request is complete.\n */\nNetworks.prototype.createCustomer = function (stripeToken, networkId) {\n  var url, request, data;\n\n  if (typeof stripeToken !== 'string' || typeof networkId !== 'string') {\n    return utils.promisify(false,\n      'IngestAPI Networks createCustomer requires stripeToken and networkId to be strings.');\n  }\n\n  url = utils.parseTokens(this.config.host + this.config.customers, {\n    networkId: networkId,\n    resource: this.config.resource\n  });\n\n  data = {\n    stripeToken: stripeToken\n  };\n\n  request = new Request({\n    url: url,\n    data: data,\n    token: this._tokenSource(),\n    method: 'POST'\n  });\n\n  return request.send();\n};\n\n/**\n * Updates an existing Stripe customer for the given network ID.\n *\n * @param {string} networkId   - The networkID that this Stripe customer belongs to.\n * @param {string} cusId       - The Stripe customer ID you wish to update.\n * @param {string} networkName - [Optional] Only provide if you wish to update the network name on the Stripe customer.\n * @param {string} stripeToken - [Optional] Provide only if payment details have been updated.\n *\n * @return {Promise} A promise which resolves when the request is complete.\n *\n */\nNetworks.prototype.updateCustomer = function (networkId, cusId, networkName, stripeToken) {\n  var url, request, data;\n\n  if (typeof networkId !== 'string' || typeof cusId !== 'string') {\n    return utils.promisify(false,\n      'IngestAPI Networks updateCustomer requires `networkId` and `cusID` to be a string.');\n  }\n\n  if (typeof networkName !== 'string' && typeof stripeToken !== 'string') {\n    return utils.promisify(false,\n      'IngestAPI Networks updateCustomer requires either networkName or stripeToken passed as a string.');\n  }\n\n  url = utils.parseTokens(this.config.host + this.config.customerById, {\n    resource: this.config.resource,\n    networkId: networkId,\n    cusId: cusId\n  });\n\n  data = {\n    networkName: networkName,\n    stripeToken: stripeToken\n  };\n\n  request = new Request({\n    url: url,\n    data: data,\n    token: this._tokenSource(),\n    method: 'PATCH'\n  });\n\n  return request.send();\n};\n\n/**\n * Deletes an existing Stripe customer for the given network ID.\n *\n * @param {string} networkId - The network ID that the customer belongs to.\n * @param {string} cusId     - The Stripe customer ID to be deleted.\n *\n * @return {Promise} A promise which resolves when the request is complete.\n *\n */\nNetworks.prototype.deleteCustomer = function (networkId, cusId) {\n\n  var url, request;\n\n  if (typeof networkId !== 'string' || typeof cusId !== 'string') {\n    return utils.promisify(false,\n      'IngestAPI Networks deleteCustomer requires `networkId` and `cusId` to be strings.');\n  }\n\n  url = utils.parseTokens(this.config.host + this.config.customerById, {\n    resource: this.config.resource,\n    networkId: networkId,\n    cusId: cusId\n  });\n\n  request = new Request({\n    url: url,\n    token: this._tokenSource(),\n    method: 'DELETE'\n  });\n\n  return request.send();\n\n};\n\n/**\n * Gets a customers card information on file\n *\n * @param {string} customerId - The customer ID you wish to get the information for.\n * @param {string} networkId  - The network ID the customer belongs to.\n *\n * @return {Promise} A promise which resolves when the request is complete.\n *\n */\nNetworks.prototype.getCustomerCardInformation = function (networkId, customerId) {\n  var url, request;\n\n  if (typeof customerId !== 'string' || typeof networkId !== 'string') {\n    return utils.promisify(false,\n      'IngestAPI Networks getCustomerCardInformation requires networkId and customerId to be strings');\n  }\n\n  url = utils.parseTokens(this.config.host + this.config.customerCardInformation, {\n    resource: this.config.resource,\n    networkId: networkId,\n    cusId: customerId\n  });\n\n  request = new Request({\n    url: url,\n    token: this._tokenSource()\n  });\n\n  return request.send();\n};\n\n/**\n * Remove the credit card currently associated with the proviced customer.\n * @param {string} networkId  - The network ID the customer belongs to.\n * @param {string} networkId  - The customer ID.\n *\n * @return {Promise} A promise which resolves when the request is complete.\n */\nNetworks.prototype.deleteCustomerCard = function (networkId, customerId) {\n  var url, request;\n\n  if (typeof customerId !== 'string' || typeof networkId !== 'string') {\n    return utils.promisify(false,\n      'IngestAPI Networks deleteCustomerCard requires networkId and customerId to be strings');\n  }\n\n  url = utils.parseTokens(this.config.host + this.config.customerCardInformation, {\n    resource: this.config.resource,\n    networkId: networkId,\n    cusId: customerId\n  });\n\n  request = new Request({\n    url: url,\n    token: this._tokenSource(),\n    method: 'DELETE'\n  });\n\n  return request.send();\n};\n\n/**\n * Gets a networks invoices\n *\n * @param {string} networkId  - The network ID that you wish to get the invoices for.\n *\n * @return {Promise} A promise which resolves when the request is complete.\n *\n */\nNetworks.prototype.getInvoices = function (networkId) {\n  var url, request;\n\n  if (typeof networkId !== 'string') {\n    return utils.promisify(false, 'IngestAPI Networks getInvoices requires networkId to be a string');\n  }\n\n  url = utils.parseTokens(this.config.host + this.config.invoices, {\n    resource: this.config.resource,\n    networkId: networkId,\n  });\n\n  request = new Request({\n    url: url,\n    token: this._tokenSource()\n  });\n\n  return request.send();\n};\n\n/**\n * Gets a specific invoice for a network\n *\n * @param {string} networkId  - The network ID the customer belongs to.\n * @param {string} invoiceId  - The invoice ID you wish to get the information for.\n *\n * @return {Promise} A promise which resolves when the request is complete.\n *\n */\nNetworks.prototype.getInvoiceById = function (networkId, invoiceId) {\n  var url, request;\n\n  if (typeof networkId !== 'string') {\n    return utils.promisify(false,\n      'IngestAPI getInvoiceById requires networkId to be passed as a string.');\n  }\n\n  if (typeof invoiceId !== 'string') {\n    return utils.promisify(false,\n      'IngestAPI getInvoiceById requires invoiceId to be passed as a string.');\n  }\n\n  url = utils.parseTokens(this.config.host + this.config.invoicesById, {\n    resource: this.config.resource,\n    networkId: networkId,\n    invoiceId: invoiceId\n  });\n\n  request = new Request({\n    url: url,\n    token: this._tokenSource()\n  });\n\n  return request.send();\n};\n\n/**\n * Gets current usage for a network\n *\n * @param {string} networkId  - The network ID the customer belongs to.\n *\n * @return {Promise} A promise which resolves when the request is complete.\n *\n */\nNetworks.prototype.getCurrentUsage = function (networkId) {\n  var url, request;\n\n  if (typeof networkId !== 'string') {\n    return utils.promisify(false,\n      'IngestAPI getCurrentUsage requires networkId to be passed as a string.');\n  }\n\n  url = utils.parseTokens(this.config.host + this.config.currentUsage, {\n    resource: this.config.resource,\n    networkId: networkId\n  });\n\n  request = new Request({\n    url: url,\n    token: this._tokenSource()\n  });\n\n  return request.send();\n};\n\n/**\n * Gets all pending users for the specified network.\n *\n * @param {string} networkId - The network ID.\n *\n * @return {Promise} - A promise which resolves when the request is complete.\n */\nNetworks.prototype.getPendingUsers = function (networkId) {\n  var url, request;\n\n  if (typeof networkId !== 'string') {\n    return utils.promisify(false,\n      'IngestAPI getPendingUsers requires networkId to be passed as a string.');\n  }\n\n  url = utils.parseTokens(this.config.host + this.config.getPendingUsers, {\n    resource:  this.config.resource,\n    networkId: networkId\n  });\n\n  request = new Request({\n    url: url,\n    token: this._tokenSource()\n  });\n\n  return request.send();\n};\n\n/**\n * Deletes a pending user from the specified network.\n *\n * @param {string} networkId     - The network ID that the pending user belongs to.\n * @param {string} pendingUserId - The pending user to delete from the network.\n *\n * @return {Promise} - A promise which resolves when the request is complete.\n */\nNetworks.prototype.deletePendingUser = function (networkId, pendingUserId) {\n  var url, request;\n\n  if (typeof networkId !== 'string' || typeof pendingUserId !== 'string') {\n    return utils.promisify(false,\n      'IngestAPI deletePendingUser requires networkId and pendingUserId to be passed as strings.');\n  }\n\n  url = utils.parseTokens(this.config.host + this.config.deletePendingUser, {\n    resource: this.config.resource,\n    networkId: networkId,\n    pendingUserId: pendingUserId\n  });\n\n  request = new Request({\n    method: 'DELETE',\n    url: url,\n    token: this._tokenSource()\n  });\n\n  return request.send();\n};\n\nmodule.exports = Networks;\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./src/resources/Networks.js\n ** module id = 15\n ** module chunks = 0\n **/","'use strict';\n\nvar PlaybackContent = require('./PlaybackContent');\nvar Request = require('../Request');\nvar utils = require('../Utils');\nvar extend = require('extend');\n\nfunction Videos (options) {\n\n  var overrides = {\n    playlists: '/<%=resource%>/<%=id%>/playlists',\n    variants: '/<%=resource%>/<%=id%>/variants',\n    withVariants: '/<%=resource%>?filter=variants',\n    missingVariants: '/<%=resource%>?filter=missing_variants',\n    publish: '/<%=resource%>/publish'\n  };\n\n  options = extend(true, {}, overrides, options);\n\n  PlaybackContent.call(this, options);\n\n};\n\n// This extends the base class of 'PlaybackContent'.\nVideos.prototype = Object.create(PlaybackContent.prototype);\nVideos.prototype.constructor = Videos;\n\n/**\n * Return any playlists that contains the provided video.\n * @param   {string}   id   Video id.\n * @return  {promise}       A promise which resolves when the request is complete.\n */\nVideos.prototype.getPlaylists = function (id) {\n  var url, request;\n\n  if (typeof id !== 'string') {\n    return utils.promisify(false,\n      'IngestAPI Resource getPlaylists requires a valid video id passed as a string.');\n  }\n\n  url = utils.parseTokens(this.config.host + this.config.playlists, {\n    resource: this.config.resource,\n    id: id\n  });\n\n  request = new Request({\n    url: url,\n    token: this._tokenSource()\n  });\n\n  return request.send();\n\n};\n\n/**\n * Get all of the variants for the supplied video id.\n * @param   {string}    id     Video id.\n * @return  {promise}          A promise which resolves when the request is complete.\n */\nVideos.prototype.getVariants = function (id) {\n  var url, request;\n\n  if (typeof id !== 'string') {\n    return utils.promisify(false,\n      'IngestAPI Resource getPlaylists requires a valid video id passed as a string.');\n  }\n\n  url = utils.parseTokens(this.config.host + this.config.variants, {\n    resource: this.config.resource,\n    id: id\n  });\n\n  request = new Request({\n    url: url,\n    token: this._tokenSource()\n  });\n\n  return request.send();\n};\n\n/**\n * Return a list of the videos for the current user and network that contain variants.\n * @param  {object}   headers   Object representing headers to apply to the request.\n * @return {promise}            A promise which resolves when the request is complete.\n */\nVideos.prototype.getVideosWithVariants = function (headers) {\n  var request;\n  var url = utils.parseTokens(this.config.host + this.config.withVariants, {\n    resource: this.config.resource\n  });\n\n  request = new Request({\n    url: url,\n    token: this._tokenSource(),\n    headers: headers\n  });\n\n  return request.send()\n          .then(this._updateCachedResources.bind(this));\n};\n\n/**\n * Return a list of the videos for the current user and network that are missing variants.\n * @param  {object}   headers   Object representing headers to apply to the request.\n * @return {promise}            A promise which resolves when the request is complete.\n */\nVideos.prototype.getVideosMissingVariants = function (headers) {\n  var request;\n  var url = utils.parseTokens(this.config.host + this.config.missingVariants, {\n    resource: this.config.resource\n  });\n\n  request = new Request({\n    url: url,\n    token: this._tokenSource(),\n    headers: headers\n  });\n\n  return request.send()\n          .then(this._updateCachedResources.bind(this));\n};\n\n/**\n * Publishes a video based on the server time\n *\n * @param  {array}   ids   An array of video ids to publish\n * @return {promise}       A promise which resolves when the request is complete\n */\nVideos.prototype.publish = function (ids) {\n  var request, url;\n\n  // Check to make sure the ids are in an array\n  if (!Array.isArray(ids) || ids.length === 0) {\n    return utils.promisify(false,\n      'IngestAPI Videos publish requires an array of ids to be passed in.');\n  }\n\n  url = utils.parseTokens(this.config.host + this.config.publish, {\n    resource: this.config.resource,\n  });\n\n  request = new Request({\n    url: url,\n    token: this._tokenSource(),\n    method: 'POST',\n    data: ids\n  });\n\n  return request.send();\n};\n\nmodule.exports = Videos;\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./src/resources/Videos.js\n ** module id = 16\n ** module chunks = 0\n **/","var PlaybackContent = require('./PlaybackContent');\nvar Request = require('../Request');\nvar utils = require('../Utils');\nvar extend = require('extend');\n\nfunction Playlists (options) {\n\n  var overrides = {\n    'playlistVideoById': '/<%=resource%>/<%=playlistId%>/video/<%=videoId%>',\n    'playlistReorder': '/<%=resource%>/<%=playlistId%>/reorder/<%=videoId%>',\n    'playlistAddRemove': '/<%=resource%>/<%=playlistId%>/videos'\n  };\n\n  options = extend(true, {}, overrides, options);\n\n  PlaybackContent.call(this, options);\n\n};\n\n// This extends the base class of 'PlaybackContent'.\nPlaylists.prototype = Object.create(PlaybackContent.prototype);\nPlaylists.prototype.constructor = Playlists;\n\n/**\n * Add the supplied video to the supplied playlist.\n * @param   {string}   playlistId  The UUID of the playlist to add the videoId to.\n * @param   {array}    videoIds    The UUID of the video to add to the playlist.\n * @param   {number}   position    [Optional] Position of the new video in the playlist.\n *                                 If omitted, the video in question will be added to the end of the given playlist.\n * @return  {promise}              A promise which resolves when the request is complete.\n */\nPlaylists.prototype.addVideos = function (playlistId, videoIds, position) {\n  var request, url, data;\n\n  if (typeof playlistId !== 'string') {\n    return utils.promisify(false,\n      'IngestAPI Playlists addVideo requires \"playlistId\" be a string.');\n  }\n\n  if (!Array.isArray(videoIds)) {\n    return utils.promisify(false,\n      'IngestAPI Playlists addVideo requires \"videoId\" be an array of videoIds.');\n  }\n\n  url = utils.parseTokens(this.config.host + this.config.playlistAddRemove, {\n    resource: this.config.resource,\n    playlistId: playlistId\n  });\n\n  data = {\n    videos: videoIds\n  };\n\n  if (typeof position === 'number') {\n    data.position = position;\n  }\n\n  request = new Request({\n    method: 'POST',\n    url: url,\n    token: this._tokenSource(),\n    data: data\n  });\n\n  return request.send().then(this._updateCachedResources.bind(this));\n};\n\n/**\n * Remove the supplied videos from the supplied playlist.\n * @param   {string}   playlistId    The UUID of the playlist to remove the videoId from.\n * @param   {array}    videos        An array of objects containing both the id and position of the video to remove.\n * @return  {promise}                A promise which resolves when the request is complete.\n */\nPlaylists.prototype.removeVideos = function (playlistId, videos) {\n  var request, url, data;\n\n  if (typeof playlistId !== 'string') {\n    return utils.promisify(false,\n      'IngestAPI Playlists removeVideo requires \"playlistId\" to be a string.');\n  }\n\n  if (!Array.isArray(videos)) {\n    return utils.promisify(false,\n      'IngestAPI Playlists removeVideo requires \"videos\" be an array of video objects.');\n  }\n\n  url = utils.parseTokens(this.config.host + this.config.playlistAddRemove, {\n    resource: this.config.resource,\n    playlistId: playlistId\n  });\n\n  request = new Request({\n    method: 'DELETE',\n    url: url,\n    token: this._tokenSource(),\n    data: videos\n  });\n\n  return request.send().then(this._updateCachedResources.bind(this));\n\n};\n\n/**\n * Re-orders a supplied playlist based on the given old and new positions.\n * @param  {string}   playlistId   The UUID of the playlist to re-order.\n * @param  {string}   videoId      The UUID of the video to re-order.\n * @param  {number}   oldPosition  The old position to move to the given new position.\n * @param  {number}   newPosition  The new position to move to.\n */\nPlaylists.prototype.reorderVideo = function (playlistId, videoId, oldPosition, newPosition) {\n  var request, url, data;\n\n  if (typeof playlistId !== 'string') {\n    return utils.promisify(false,\n      'IngestAPI Playlists reorderVideo requires \"playlistId\" to be a string');\n  }\n\n  if (typeof videoId !== 'string') {\n    return utils.promisify(false,\n      'IngestAPI Playlists reorderVideo requires \"videoId\" to be a string');\n  }\n\n  if (typeof oldPosition !== 'number' || typeof newPosition !== 'number') {\n    return utils.promisify(false,\n      'IngestAPI Playlists reorderVideo requires \"oldPosition\" and \"newPosition\" to be numbers.');\n  }\n\n  url = utils.parseTokens(this.config.host + this.config.playlistReorder, {\n    resource: this.config.resource,\n    playlistId: playlistId,\n    videoId: videoId\n  });\n\n  data = {\n    old_position: oldPosition,\n    new_position: newPosition\n  };\n\n  request = new Request({\n    method: 'PUT',\n    url: url,\n    token: this._tokenSource(),\n    data: data\n  });\n\n  return request.send().then(this._updateCachedResources.bind(this));\n\n};\n\nmodule.exports = Playlists;\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./src/resources/Playlists.js\n ** module id = 17\n ** module chunks = 0\n **/","'use strict';\n\nvar Resource = require('./Resource');\nvar Request = require('../Request');\nvar utils = require('../Utils');\nvar extend = require('extend');\n\nfunction Jobs (options) {\n\n  var overrides = {\n    progress: '/<%=resource%>/<%=id%>/progress'\n  };\n\n  options = extend(true, {}, overrides, options);\n\n  Resource.call(this, options);\n\n};\n\n// This extends the base class of 'Resource'.\nJobs.prototype = Object.create(Resource.prototype);\nJobs.prototype.constructor = Jobs;\n\n/**\n * Creates a new encoding job.\n *\n * @return {Promise} A promise which resolves when the request is complete.\n */\nJobs.prototype.add = function (resource) {\n\n  var url, request;\n\n  if (typeof resource !== 'object') {\n    return utils.promisify(false,\n      'IngestAPI Jobs `add` requires a resource passed as an object.');\n  }\n\n  url = utils.parseTokens(this.config.host + this.config.all, {\n    resource: this.config.resource\n  });\n\n  // Deletes the cached version of the associated video.\n  if (resource.hasOwnProperty('video') && typeof resource.video === 'string') {\n    this._deleteCachedResource(resource.video);\n  }\n\n  request = new Request({\n    url: url,\n    token: this._tokenSource(),\n    method: 'POST',\n    data: resource\n  });\n\n  return request.send()\n      .then(this._updateCachedResource.bind(this));\n\n};\n\n/**\n * Gets the progress of a current encoding job\n *\n * @param  {string}  id The id of the job\n * @return {Promise}    A promise which resolves when the request is complete.\n */\nJobs.prototype.progress = function (id) {\n  var url, request;\n\n  if (typeof id !== 'string') {\n    return utils.promisify(false,\n      'IngestAPI Jobs `progress` requires \"jobId\" to be passed as a string.');\n  }\n\n  url = utils.parseTokens(this.config.host + this.config.progress, {\n    resource: this.config.resource,\n    id: id\n  });\n\n  request = new Request({\n    url: url,\n    token: this._tokenSource(),\n    method: 'GET'\n  });\n\n  return request.send()\n      .then(this._updateCachedResource.bind(this));\n};\n\nmodule.exports = Jobs;\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./src/resources/Jobs.js\n ** module id = 18\n ** module chunks = 0\n **/","'use strict';\n\nvar Resource = require('./Resource');\nvar Request = require('../Request');\nvar utils = require('../Utils');\nvar extend = require('extend');\n\nfunction Profiles (options) {\n\n  Resource.call(this, options);\n\n};\n\n// This extends the base class of 'Resource'.\nProfiles.prototype = Object.create(Resource.prototype);\nProfiles.prototype.constructor = Profiles;\n\n/**\n * Update an existing profile with new content.\n * @param  {object|array} resource  An object or an array of objects representing the profile to be updated.\n * @return {promise}                A promise which resolves when the request is complete.\n */\nProfiles.prototype.update = function (resource) {\n  var request, data, url;\n\n  if (typeof resource !== 'object') {\n    return utils.promisify(false,\n      'IngestAPI Profiles update requires a resource to be passed as an object.');\n  }\n\n  data = resource;\n\n  url = utils.parseTokens(this.config.host + this.config.byId, {\n    resource: this.config.resource,\n    id: resource.id\n  });\n\n  if (this.cache && this.cache.enabled) {\n    data = this.cache.diff(resource.id, resource);\n  }\n\n  // Null is returned in the case that the two objects match.\n  if (!data) {\n    // Return a fulfilled promise with the cached object.\n    return utils.promisify(true, {\n      data: this.cache.retrieve(resource.id)\n    });\n  }\n\n  request = new Request({\n    url: url,\n    token: this._tokenSource(),\n    method: 'PUT',\n    data: data\n  });\n\n  return request.send()\n    .then(this._updateCachedResource.bind(this));\n\n};\n\nmodule.exports = Profiles;\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./src/resources/Profiles.js\n ** module id = 19\n ** module chunks = 0\n **/","'use strict';\n\nvar Resource = require('./Resource');\nvar Request = require('../Request');\nvar utils = require('../Utils');\nvar extend = require('extend');\n\nfunction Inputs (options) {\n\n  var overrides = {\n    'allWithFilters'   : '/<%=resource%>?filter=<%=filterChain%>',\n    'searchWithFilters': '/<%=resource%>?search=<%=input%>&filter=<%=filterChain%>'\n  };\n\n  options = extend(true, {}, overrides, options);\n\n  Resource.call(this, options);\n\n};\n\n// This extends the base class of 'Resource'.\nInputs.prototype = Object.create(Resource.prototype);\nInputs.prototype.constructor = Inputs;\n\n/**\n * Return a list of Inputs for the current user and network.\n *\n * @param  {object} headers - Object representing headers to apply to the request.\n * @param  {Array}  filters - [Optional] A list of filters to send along with the request to return Inputs that match the criteria.\n *\n * @return {Promise} - A promise which resolves when the request is complete.\n */\nInputs.prototype.getAll = function (headers, filters) {\n  var request, url, urlTemplate, tokens;\n\n  tokens = { resource: this.config.resource };\n  urlTemplate = this.config.host + this.config.all;\n\n  // If there are filters, join them as a comma seperated string and update our tokens and url template.\n  if (Array.isArray(filters) && filters.length > 0) {\n    tokens.filterChain = filters.join(',');\n    urlTemplate = this.config.host + this.config.allWithFilters;\n  }\n\n  url = utils.parseTokens(urlTemplate, tokens);\n\n  request = new Request({\n    url: url,\n    token: this._tokenSource(),\n    headers: headers\n  });\n\n  return request.send()\n    .then(this._updateCachedResources.bind(this));\n};\n\n/**\n * Return a subset of Inputs that match the search terms.\n *\n * @param  {string} input   - The search terms to match against.\n * @param  {object} headers - The headers to be passed to the request.\n * @param  {Array}  filters - [Optional] A list of filters to send along with the request to return Inputs that match the criteria.\n *\n * @return {Promise} - A promise which resolves when the request is complete.\n */\nInputs.prototype.search = function (input, headers, filters) {\n  var url, request, urlTemplate, tokens;\n\n  if (typeof input !== 'string') {\n    return utils.promisify(false,\n      'IngestAPI Inputs search requires search input to be passed as a string.');\n  }\n\n  tokens = { resource: this.config.resource, input: encodeURIComponent(input) };\n  urlTemplate = this.config.host + this.config.search;\n\n  // If there are filters, join them as a comma seperated string and update our tokens and url template.\n  if (Array.isArray(filters) && filters.length > 0) {\n    tokens.filterChain = filters.join(',');\n    urlTemplate = this.config.host + this.config.searchWithFilters;\n  }\n\n  url = utils.parseTokens(urlTemplate, tokens);\n\n  request = new Request({\n    url: url,\n    token: this._tokenSource(),\n    headers: headers\n  });\n\n  return request.send();\n};\n\nmodule.exports = Inputs;\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./src/resources/Inputs.js\n ** module id = 20\n ** module chunks = 0\n **/","'use strict';\n\nvar Resource = require('./Resource');\nvar Request = require('../Request');\nvar utils = require('../Utils');\nvar extend = require('extend');\n\nfunction Events (options) {\n\n  var overrides = {\n    filter: '/<%=resource%>?filter=<%=input%>'\n  };\n\n  options = extend(true, {}, overrides, options);\n\n  Resource.call(this, options);\n\n};\n\n// This extends the base class of 'Resource'.\nEvents.prototype = Object.create(Resource.prototype);\nEvents.prototype.constructor = Events;\n\n/**\n * Return a subset of items that match the filter terms.\n * @param  {string}   input     The filter terms to match against.\n *\n * @return {Promise}          A promise which resolves when the request is complete.\n */\nEvents.prototype.filter = function (input) {\n  var url, request;\n\n  url = utils.parseTokens(this.config.host + this.config.filter, {\n    resource: this.config.resource,\n    input: encodeURIComponent(input)\n  });\n\n  request = new Request({\n    method: 'GET',\n    url: url,\n    token: this._tokenSource()\n  });\n\n  return request.send();\n};\n\nmodule.exports = Events;\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./src/resources/Events.js\n ** module id = 21\n ** module chunks = 0\n **/"],"sourceRoot":""}
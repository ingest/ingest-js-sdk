{"version":3,"sources":["webpack:///webpack/universalModuleDefinition","webpack:///ingest.js","webpack:///webpack/bootstrap 241f144445fc6556ea0b","webpack:///./index.js","webpack:///./src/IngestAPI.js","webpack:///./src/Request.js","webpack:///./~/pinkyswear/pinkyswear.js","webpack:///(webpack)/buildin/module.js","webpack:///(webpack)/~/node-libs-browser/~/timers-browserify/main.js","webpack:///(webpack)/~/node-libs-browser/~/process/browser.js","webpack:///./~/extend/index.js","webpack:///./src/JWTUtils.js","webpack:///./src/Utils.js","webpack:///./src/Resource.js","webpack:///./src/Uploader.js","webpack:///./src/Cache.js"],"names":["root","factory","exports","module","define","amd","this","modules","__webpack_require__","moduleId","installedModules","id","loaded","call","m","c","p","IngestAPI","options","defaults","host","cacheAge","networks","networksKeys","networksKeysById","inputs","inputsById","inputsUpload","inputsUploadSign","inputsUploadComplete","inputsUploadAbort","uploadMethods","param","singlePart","multiPart","currentUserInfo","config","extend","token","setToken","request","Request","JWTUtils","utils","resource","Resource","uploader","Uploader","cache","Cache","videos","tokenSource","getToken","bind","playlists","prototype","Error","getNetworkSecureKeys","url","addNetworkSecureKey","data","promisify","title","key","method","getNetworkSecureKeyById","tokens","parseTokens","updateNetworkSecureKey","deleteNetworkSecureKeyById","getCurrentUserInfo","upload","file","api","Promise","VALID_RESPONSE_CODES","async","promise","XMLHttpRequest","setupListeners","makeRequest","requestError","onreadystatechange","readyStateChange","postData","preparePostData","headers","hasContentType","hasOwnProperty","success","open","applyRequestHeaders","isExpired","setRequestHeader","type","send","result","FormData","JSON","stringify","error","i","keys","Object","keysLength","length","requestComplete","response","processResponse","responseType","getResponseHeader","indexOf","parse","stack","statusCode","status","message","readyState","isValidResponseCode","responseText","responseCode","responseCodeCount","setImmediate","process","target","isFunction","f","isObject","defer","callback","setTimeout","undef","pinkySwear","state","values","deferred","set","newState","newValues","onFulfilled","onRejected","promise2","callCallbacks","resolve","x","then","cbCalled","TypeError","apply","arguments","value","e","push","webpackPolyfill","deprecate","paths","children","clearImmediate","Timeout","clearFn","_id","_clearFn","nextTick","Function","slice","Array","immediateIds","nextImmediateId","window","clearTimeout","setInterval","clearInterval","timeout","close","unref","ref","enroll","item","msecs","_idleTimeoutId","_idleTimeout","unenroll","_unrefActive","active","_onTimeout","fn","args","cleanUpNextTick","draining","currentQueue","queue","concat","queueIndex","drainQueue","len","run","Item","fun","array","noop","browser","env","argv","version","versions","on","addListener","once","off","removeListener","removeAllListeners","emit","binding","name","cwd","chdir","dir","umask","hasOwn","toStr","toString","isArray","arr","isPlainObject","obj","hasOwnConstructor","hasIsPrototypeOf","constructor","src","copy","copyIsArray","clone","deep","parseTokenPayload","parts","split","payload","atob","exp","now","Date","getTime","Utils","template","hash","replace","series","promises","paused","promisesCount","all","total","complete","responses","pause","_seriesPause","undefined","resume","_seriesResume","_seriesCallPromise","_seriesComplete","_seriesError","byId","thumbnails","trash","deleteMethods","permanent","search","_tokenSource","getAll","_updateCachedResources","getById","cachedResult","enabled","retrieve","getTrashed","getThumbnails","add","_updateCachedResource","update","_updateResourceArray","_updateResource","resources","_deleteResourceArray","_deleteResource","permanentDelete","_deleteCachedResource","_deleteCachedResources","input","count","_handleCountResponse","trashCount","parseInt","save","dataLength","remove","ids","Upload","sign","uploadComplete","uploadAbort","chunks","chunkSize","chunkCount","chunksComplete","uploadedBytes","aborted","fileRecord","filename","size","_checkMultipart","progress","_create","_initialize","_prepareUpload","_updateProgress","percent","record","_createSuccess","signing","_initializeComplete","uploadId","pieceSize","pieceCount","_createChunks","_completeUpload","_uploadFile","_onCompleteUpload","blob","chunk","sliceMethod","_getSliceMethod","chunkPromises","abort","partNumber","_uploadChunk","currentUpload","_signUpload","_sendUpload","_completeChunk","formData","append","authHeader","dateHeader","Math","round","_checkCacheSupport","support","localStorage","setItem","removeItem","cacheKey","getItem","expiry","JSONResult"],"mappings":"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","file":"ingest.js","sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"IngestAPI\"] = factory();\n\telse\n\t\troot[\"IngestAPI\"] = factory();\n})(this, function() {\nreturn \n\n\n/** WEBPACK FOOTER **\n ** webpack/universalModuleDefinition\n **/","(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"IngestAPI\"] = factory();\n\telse\n\t\troot[\"IngestAPI\"] = factory();\n})(this, function() {\nreturn /******/ (function(modules) { // webpackBootstrap\n/******/ \t// The module cache\n/******/ \tvar installedModules = {};\n/******/\n/******/ \t// The require function\n/******/ \tfunction __webpack_require__(moduleId) {\n/******/\n/******/ \t\t// Check if module is in cache\n/******/ \t\tif(installedModules[moduleId])\n/******/ \t\t\treturn installedModules[moduleId].exports;\n/******/\n/******/ \t\t// Create a new module (and put it into the cache)\n/******/ \t\tvar module = installedModules[moduleId] = {\n/******/ \t\t\texports: {},\n/******/ \t\t\tid: moduleId,\n/******/ \t\t\tloaded: false\n/******/ \t\t};\n/******/\n/******/ \t\t// Execute the module function\n/******/ \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n/******/\n/******/ \t\t// Flag the module as loaded\n/******/ \t\tmodule.loaded = true;\n/******/\n/******/ \t\t// Return the exports of the module\n/******/ \t\treturn module.exports;\n/******/ \t}\n/******/\n/******/\n/******/ \t// expose the modules object (__webpack_modules__)\n/******/ \t__webpack_require__.m = modules;\n/******/\n/******/ \t// expose the module cache\n/******/ \t__webpack_require__.c = installedModules;\n/******/\n/******/ \t// __webpack_public_path__\n/******/ \t__webpack_require__.p = \"\";\n/******/\n/******/ \t// Load entry module and return exports\n/******/ \treturn __webpack_require__(0);\n/******/ })\n/************************************************************************/\n/******/ ([\n/* 0 */\n/***/ function(module, exports, __webpack_require__) {\n\n\tmodule.exports = __webpack_require__(1);\n\n\n/***/ },\n/* 1 */\n/***/ function(module, exports, __webpack_require__) {\n\n\tvar Request = __webpack_require__(2);\n\tvar Promise = __webpack_require__(3);\n\tvar extend = __webpack_require__(7);\n\tvar JWTUtils = __webpack_require__(8);\n\tvar utils = __webpack_require__(9);\n\tvar Resource = __webpack_require__(10);\n\tvar Uploader = __webpack_require__(11);\n\tvar Cache = __webpack_require__(12);\n\t\n\t/**\n\t * IngestAPI Object\n\t * @class\n\t * @param {object}  options        Options to override the default.\n\t * @param {string}  options.host   Override the default live host.\n\t * @param {string}  options.token  Auth token to use for requests.\n\t */\n\tfunction IngestAPI (options) {\n\t\n\t  this.defaults = {\n\t    'host': 'https://api.ingest.io',\n\t    'cacheAge': 300000, // 5 minutes\n\t    'networks': '/networks',\n\t    'networksKeys': '/networks/keys',\n\t    'networksKeysById': '/networks/keys/<%=id%>',\n\t    'inputs': '/encoding/inputs',\n\t    'inputsById' : '/encoding/inputs/<%=id%>',\n\t    'inputsUpload': '/encoding/inputs/<%=id%>/upload<%=method%>',\n\t    'inputsUploadSign': '/encoding/inputs/<%=id%>/upload/sign<%=method%>',\n\t    'inputsUploadComplete': '/encoding/inputs/<%=id%>/upload/complete',\n\t    'inputsUploadAbort': '/encoding/inputs/<%=id%>/upload/abort',\n\t    'uploadMethods': {\n\t      'param': '?type=',\n\t      'singlePart': 'amazon',\n\t      'multiPart': 'amazonMP'\n\t    },\n\t    'currentUserInfo': '/users/me'\n\t  };\n\t\n\t  // Create a config object by extending the defaults with the pass options.\n\t  this.config = extend(true, {}, this.defaults, options);\n\t\n\t  this.token = null;\n\t\n\t  if (this.config.token) {\n\t    // Store the token for future use.\n\t    this.setToken(this.config.token);\n\t  }\n\t\n\t  /* Exposed for testing */\n\t  this.request = Request;\n\t  this.JWTUtils = JWTUtils;\n\t  this.utils = utils;\n\t  this.resource = Resource;\n\t  this.uploader = Uploader;\n\t\n\t  this.cache = new Cache(this.config.cacheAge);\n\t\n\t  this.videos = new Resource({\n\t    host: this.config.host,\n\t    resource: 'videos',\n\t    tokenSource: this.getToken.bind(this),\n\t    cache: this.cache\n\t  });\n\t\n\t  this.playlists = new Resource({\n\t    host: this.config.host,\n\t    resource: 'playlists',\n\t    tokenSource: this.getToken.bind(this),\n\t    cache: this.cache\n\t  });\n\t\n\t  this.inputs = new Resource({\n\t    host: this.config.host,\n\t    resource: 'encoding/inputs',\n\t    tokenSource: this.getToken.bind(this),\n\t    cache: this.cache\n\t  });\n\t\n\t}\n\t/** Token **/\n\t/**\n\t * Set the auth token to use.\n\t * @param   {String}        token Auth token to use.\n\t */\n\tIngestAPI.prototype.setToken = function (token) {\n\t\n\t  // Make sure a valid value is passed.\n\t  if (typeof token !== 'string') {\n\t    throw new Error('IngestAPI requires an authentication token passed as a string.');\n\t  }\n\t\n\t  this.token = token;\n\t};\n\t\n\t/**\n\t * Return the current auth token.\n\t * @return  {String}        Current auth token, or null if a token has not been set.\n\t */\n\tIngestAPI.prototype.getToken = function () {\n\t  return this.token;\n\t};\n\t\n\t/** Network Information **/\n\t\n\t/**\n\t * Get the current network primary key in RSA format.\n\t * @return {Promise} Promise/A+ spec which resolves with the primary network key.\n\t */\n\tIngestAPI.prototype.getNetworkSecureKeys = function () {\n\t  return new Request({\n\t    url: this.config.host + this.config.networksKeys,\n\t    token: this.getToken()\n\t  });\n\t};\n\t\n\t/**\n\t * Adds a new secure key to the current network.\n\t * @param {object}  data        The object containing data for the secure key entry.\n\t * @param {string}  data.title  Optional. The title of the secure key. Will default to \"Default Key Title\"\n\t * @param {string}  data.key    The public key in RSA format.\n\t *\n\t * @return {Promise}          A promise which resolves when the request is complete.\n\t */\n\tIngestAPI.prototype.addNetworkSecureKey = function (data) {\n\t  if (typeof data !== 'object') {\n\t    return utils.promisify(false,\n\t      'IngestAPI addNetworkSecureKey requires data to be passed as an object.');\n\t  }\n\t\n\t  // The title must be a string.\n\t  if (typeof data.title !== 'string') {\n\t    data.title = '';\n\t  }\n\t\n\t  if (typeof data.key !== 'string') {\n\t    return utils.promisify(false,\n\t      'IngestAPI addNetworkSecureKey requires that the key be a string in RSA public key format.');\n\t  }\n\t\n\t  return new Request({\n\t    url: this.config.host + this.config.networksKeys,\n\t    token: this.getToken(),\n\t    method: 'POST',\n\t    data: data\n\t  });\n\t};\n\t\n\t/**\n\t * Retrieves a single network secure key entry based on the UUID given.\n\t * @param {string}  id  The UUID of the secure key entry.\n\t *\n\t * @return {Promise} A promise which resolves when the request is complete.\n\t */\n\tIngestAPI.prototype.getNetworkSecureKeyById = function (id) {\n\t  var tokens, url;\n\t\n\t  if (typeof id !== 'string') {\n\t    return utils.promisify(false,\n\t      'IngestAPI getNetworkSecureKeyById requires an id to be passed as a string.');\n\t  }\n\t\n\t  tokens = {\n\t    id: id\n\t  };\n\t\n\t  url = utils.parseTokens(this.config.host + this.config.networksKeysById, tokens);\n\t\n\t  return new Request({\n\t    url: url,\n\t    token: this.getToken()\n\t  });\n\t};\n\t\n\t/**\n\t * Updates an individual secure key entry in the current network.\n\t * @param {object}  data        The object containing data for the secure key entry.\n\t * @param {string}  data.title  The title for the current network.\n\t *\n\t * @return {Promise} A promise which resolves when the request is complete.\n\t */\n\tIngestAPI.prototype.updateNetworkSecureKey = function (data) {\n\t  var tokens, url;\n\t\n\t  if (typeof data !== 'object') {\n\t    return utils.promisify(false,\n\t      'IngestAPI updateNetworkSecureKeyById requires data to be passed as an object.');\n\t  }\n\t\n\t  if (typeof data.id !== 'string') {\n\t    return utils.promisify(false,\n\t      'IngestAPI updateNetworkSecureKeyById requires a param \"id\" to be a string.');\n\t  }\n\t\n\t  if (typeof data.title !== 'string') {\n\t    data.title = '';\n\t  }\n\t\n\t  tokens = {\n\t    id: data.id\n\t  };\n\t\n\t  url = utils.parseTokens(this.config.host + this.config.networksKeysById, tokens);\n\t\n\t  return new Request({\n\t    url: url,\n\t    token: this.getToken(),\n\t    method: 'PATCH',\n\t    data: data\n\t  });\n\t};\n\t\n\t/**\n\t * Deletes a single network secure key entry based on the UUID given.\n\t * @param {string}  id  The UUID of the secure key entry.\n\t *\n\t * @return {Promise} A promise which resolves when the request is complete.\n\t */\n\tIngestAPI.prototype.deleteNetworkSecureKeyById = function (id) {\n\t  var tokens, url;\n\t\n\t  if (typeof id !== 'string') {\n\t    return utils.promisify(false,\n\t      'IngestAPI deleteNetworkSecureKeyById requires an id to be passed as a string.');\n\t  }\n\t\n\t  tokens = {\n\t    id: id\n\t  };\n\t\n\t  url = utils.parseTokens(this.config.host + this.config.networksKeysById, tokens);\n\t\n\t  return new Request({\n\t    url: url,\n\t    token: this.getToken(),\n\t    method: 'DELETE'\n\t  });\n\t};\n\t\n\t/** User Information **/\n\t\n\t/*\n\t * Retrieve information for the current user.\n\t * @return {object} A data object representing the user.\n\t */\n\tIngestAPI.prototype.getCurrentUserInfo = function () {\n\t  return new Request({\n\t    url: this.config.host + this.config.currentUserInfo,\n\t    token: this.getToken()\n\t  });\n\t};\n\t\n\t/**\n\t * Create a new input and upload a file.\n\t * @param  {File}   file    File to upload.\n\t * @return {Promise} A promise which resolves when the upload is complete.\n\t */\n\tIngestAPI.prototype.upload = function (file) {\n\t  return new Uploader({\n\t    file: file,\n\t    api: this,\n\t    host: this.config.host\n\t  });\n\t};\n\t\n\tmodule.exports = IngestAPI;\n\n\n/***/ },\n/* 2 */\n/***/ function(module, exports, __webpack_require__) {\n\n\tvar Promise = __webpack_require__(3);\n\tvar extend = __webpack_require__(7);\n\t\n\tvar JWTUtils = __webpack_require__(8);\n\t\n\tvar VALID_RESPONSE_CODES = [200, 201, 202, 204];\n\t\n\t/**\n\t * A wrapper around the XMLHttpRequest object.\n\t * @param {object}  options         Options for the request.\n\t * @param {boolean} options.async   Whether to perform the request asynchronously\n\t * @param {string}  options.method  REST verb to use for the request.\n\t * @param {string}  options.url     URL for the request.\n\t *\n\t * @return {Promise} A promise which resolves when the request is complete.\n\t */\n\tvar Request = function (options) {\n\t\n\t  this.defaults = {\n\t    async: true,\n\t    method: 'GET'\n\t  };\n\t\n\t  this.promise = Promise();\n\t\n\t  // Create the XHR object for this request.\n\t  this.request = new XMLHttpRequest();\n\t\n\t  // Set up event listeners for this request.\n\t  this.setupListeners();\n\t\n\t  // Todo, merge some defaults with this.\n\t  this.options = extend(true, this.defaults, options);\n\t\n\t  // Make sure a url is passed before attempting to make the request.\n\t  if (!this.options.url) {\n\t    this.requestError('Request Error : a url is required to make the request.');\n\t    return this.promise;\n\t  }\n\t\n\t  // Make the actual request.\n\t  this.makeRequest();\n\t\n\t  // Return the promise.\n\t  return this.promise;\n\t\n\t};\n\t\n\t/**\n\t * Add event listeners to the XMLHttpRequest object.\n\t */\n\tRequest.prototype.setupListeners = function () {\n\t  this.request.onreadystatechange = this.readyStateChange.bind(this);\n\t};\n\t\n\t/**\n\t * Execute the open and send of the XMLHttpRequest\n\t */\n\tRequest.prototype.makeRequest = function () {\n\t\n\t  var postData = this.preparePostData(this.options.data);\n\t  var headers = this.options.headers;\n\t  var hasContentType = headers && headers.hasOwnProperty('Content-Type');\n\t\n\t  if (!postData.success) {\n\t    this.requestError('Request Error : error preparing post data.');\n\t    return;\n\t  }\n\t\n\t  this.request.open(this.options.method, this.options.url, this.options.async);\n\t\n\t  if (headers) {\n\t    this.applyRequestHeaders(headers);\n\t  }\n\t\n\t  // Make the token optional.\n\t  if (this.options.token) {\n\t\n\t    // If there is a token present ensure that it's still valid.\n\t    if (JWTUtils.isExpired(this.options.token)) {\n\t      this.requestError('Request Error : token is expired.');\n\t      return;\n\t    }\n\t\n\t    this.request.setRequestHeader('Authorization', this.options.token);\n\t\n\t  }\n\t\n\t  // Set the default content type when posting data.\n\t  if (postData.data && postData.type === 'JSON' && !hasContentType) {\n\t    this.request.setRequestHeader('Content-Type', 'application/json; charset=utf-8');\n\t  }\n\t\n\t  // If there is data then we need to pass that along with the request.\n\t  if (postData.data) {\n\t    this.request.send(postData.data);\n\t  } else {\n\t    this.request.send();\n\t  }\n\t\n\t};\n\t\n\t/**\n\t * Stringify the post data if it is present.\n\t * @param  {object} data Object to be parsed.\n\t * @return {object}      Result object with the parsed string, and a success boolean flag.\n\t */\n\tRequest.prototype.preparePostData = function (data) {\n\t\n\t  var result = {\n\t    success: true,\n\t    data: data,\n\t    type: 'JSON'\n\t  };\n\t\n\t  // In the case of file uploads, all FormData to be passed to the request.\n\t  if (data instanceof FormData) {\n\t    result.type = 'FormData';\n\t    return result;\n\t  }\n\t\n\t  // If the data is populated, and its not already a string parse it.\n\t  if (data) {\n\t    try {\n\t      result.data = JSON.stringify(data);\n\t    } catch (error) {\n\t      result.success = false;\n\t      result.data = null;\n\t    }\n\t  }\n\t\n\t  return result;\n\t\n\t};\n\t\n\t/**\n\t * Apply any supplied headers to the request object.\n\t * @param  {object} headers Array of headers to apply to the request object.\n\t */\n\tRequest.prototype.applyRequestHeaders = function (headers) {\n\t\n\t  var key, i;\n\t  var keys = Object.keys(headers);\n\t  var keysLength = keys.length;\n\t\n\t  // Loop through and add the keys to the requestHeaders.\n\t  for (i = 0; i < keysLength; i++) {\n\t    key = keys[i];\n\t    this.request.setRequestHeader(key, headers[key]);\n\t  }\n\t\n\t};\n\t\n\t/**\n\t * Handle the completion of the request and fulfill the promise.\n\t * @param  {String} Response test of the request.\n\t */\n\tRequest.prototype.requestComplete = function (response) {\n\t\n\t  // Process the result.\n\t  this.response = this.processResponse(response);\n\t\n\t  // Either resolve or reject the promise.\n\t  this.promise(!this.response.data.error, [this.response]);\n\t\n\t};\n\t\n\t/**\n\t * Process the response and parse certain content types.\n\t * @param  {*}  response  Response data from request.\n\t * @return {*}            Processed response data.\n\t */\n\tRequest.prototype.processResponse = function (response) {\n\t  var responseType = this.request.getResponseHeader('Content-Type');\n\t  var result = response;\n\t\n\t  // Parse JSON if the result is JSON.\n\t  if (responseType && responseType.indexOf('application/json') !== -1) {\n\t    try {\n\t      result = JSON.parse(response);\n\t    } catch (error) {\n\t      result = {\n\t        error: 'JSON parsing failed. ' + error.stack\n\t      };\n\t    }\n\t  }\n\t\n\t  return {\n\t    data: result,\n\t    headers: this.request.getResponseHeader.bind(this.request),\n\t    statusCode: this.request.status\n\t  };\n\t\n\t};\n\t\n\t/**\n\t * Resolve the promise.\n\t * @param  {String} message   Error message.\n\t */\n\tRequest.prototype.requestError = function (message) {\n\t  // Reject the promise.\n\t  this.promise(false, [message]);\n\t};\n\t\n\t/**\n\t * Handle ready state change events.\n\t */\n\tRequest.prototype.readyStateChange = function () {\n\t\n\t  // Request is complete.\n\t  if (this.request.readyState === 4) {\n\t\n\t    // Check if the final response code is valid.\n\t    if (this.isValidResponseCode(this.request.status)) {\n\t      this.requestComplete(this.request.responseText);\n\t    } else {\n\t      this.requestError('Invalid response code.');\n\t    }\n\t\n\t  }\n\t\n\t};\n\t\n\t/**\n\t * Validate the current response code to see if the request was a success.\n\t * @param  {String}  responseCode Response Code.\n\t * @return {Boolean}              Should this be treated as a successful response code.\n\t */\n\tRequest.prototype.isValidResponseCode = function (responseCode) {\n\t\n\t  var result = false,\n\t    responseCodeCount = VALID_RESPONSE_CODES.length,\n\t    i;\n\t\n\t  // Check if the supplied code is in our list of valid codes.\n\t  for (i = 0; i < responseCodeCount; i++) {\n\t\n\t    if (responseCode === VALID_RESPONSE_CODES[i]) {\n\t      result = true;\n\t      break;\n\t    }\n\t\n\t  }\n\t\n\t  return result;\n\t\n\t};\n\t\n\tmodule.exports = Request;\n\n\n/***/ },\n/* 3 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t/* WEBPACK VAR INJECTION */(function(module, setImmediate, process) {/*\n\t * PinkySwear.js 2.2.2 - Minimalistic implementation of the Promises/A+ spec\n\t * \n\t * Public Domain. Use, modify and distribute it any way you like. No attribution required.\n\t *\n\t * NO WARRANTY EXPRESSED OR IMPLIED. USE AT YOUR OWN RISK.\n\t *\n\t * PinkySwear is a very small implementation of the Promises/A+ specification. After compilation with the\n\t * Google Closure Compiler and gzipping it weighs less than 500 bytes. It is based on the implementation for \n\t * Minified.js and should be perfect for embedding. \n\t *\n\t *\n\t * PinkySwear has just three functions.\n\t *\n\t * To create a new promise in pending state, call pinkySwear():\n\t *         var promise = pinkySwear();\n\t *\n\t * The returned object has a Promises/A+ compatible then() implementation:\n\t *          promise.then(function(value) { alert(\"Success!\"); }, function(value) { alert(\"Failure!\"); });\n\t *\n\t *\n\t * The promise returned by pinkySwear() is a function. To fulfill the promise, call the function with true as first argument and\n\t * an optional array of values to pass to the then() handler. By putting more than one value in the array, you can pass more than one\n\t * value to the then() handlers. Here an example to fulfill a promsise, this time with only one argument: \n\t *         promise(true, [42]);\n\t *\n\t * When the promise has been rejected, call it with false. Again, there may be more than one argument for the then() handler:\n\t *         promise(true, [6, 6, 6]);\n\t *         \n\t * You can obtain the promise's current state by calling the function without arguments. It will be true if fulfilled,\n\t * false if rejected, and otherwise undefined.\n\t * \t\t   var state = promise(); \n\t * \n\t * https://github.com/timjansen/PinkySwear.js\n\t */\n\t(function(target) {\n\t\tvar undef;\n\t\n\t\tfunction isFunction(f) {\n\t\t\treturn typeof f == 'function';\n\t\t}\n\t\tfunction isObject(f) {\n\t\t\treturn typeof f == 'object';\n\t\t}\n\t\tfunction defer(callback) {\n\t\t\tif (typeof setImmediate != 'undefined')\n\t\t\t\tsetImmediate(callback);\n\t\t\telse if (typeof process != 'undefined' && process['nextTick'])\n\t\t\t\tprocess['nextTick'](callback);\n\t\t\telse\n\t\t\t\tsetTimeout(callback, 0);\n\t\t}\n\t\n\t\ttarget[0][target[1]] = function pinkySwear(extend) {\n\t\t\tvar state;           // undefined/null = pending, true = fulfilled, false = rejected\n\t\t\tvar values = [];     // an array of values as arguments for the then() handlers\n\t\t\tvar deferred = [];   // functions to call when set() is invoked\n\t\n\t\t\tvar set = function(newState, newValues) {\n\t\t\t\tif (state == null && newState != null) {\n\t\t\t\t\tstate = newState;\n\t\t\t\t\tvalues = newValues;\n\t\t\t\t\tif (deferred.length)\n\t\t\t\t\t\tdefer(function() {\n\t\t\t\t\t\t\tfor (var i = 0; i < deferred.length; i++)\n\t\t\t\t\t\t\t\tdeferred[i]();\n\t\t\t\t\t\t});\n\t\t\t\t}\n\t\t\t\treturn state;\n\t\t\t};\n\t\n\t\t\tset['then'] = function (onFulfilled, onRejected) {\n\t\t\t\tvar promise2 = pinkySwear(extend);\n\t\t\t\tvar callCallbacks = function() {\n\t\t    \t\ttry {\n\t\t    \t\t\tvar f = (state ? onFulfilled : onRejected);\n\t\t    \t\t\tif (isFunction(f)) {\n\t\t\t   \t\t\t\tfunction resolve(x) {\n\t\t\t\t\t\t\t    var then, cbCalled = 0;\n\t\t\t   \t\t\t\t\ttry {\n\t\t\t\t\t   \t\t\t\tif (x && (isObject(x) || isFunction(x)) && isFunction(then = x['then'])) {\n\t\t\t\t\t\t\t\t\t\t\tif (x === promise2)\n\t\t\t\t\t\t\t\t\t\t\t\tthrow new TypeError();\n\t\t\t\t\t\t\t\t\t\t\tthen['call'](x,\n\t\t\t\t\t\t\t\t\t\t\t\tfunction() { if (!cbCalled++) resolve.apply(undef,arguments); } ,\n\t\t\t\t\t\t\t\t\t\t\t\tfunction(value){ if (!cbCalled++) promise2(false,[value]);});\n\t\t\t\t\t   \t\t\t\t}\n\t\t\t\t\t   \t\t\t\telse\n\t\t\t\t\t   \t\t\t\t\tpromise2(true, arguments);\n\t\t\t   \t\t\t\t\t}\n\t\t\t   \t\t\t\t\tcatch(e) {\n\t\t\t   \t\t\t\t\t\tif (!cbCalled++)\n\t\t\t   \t\t\t\t\t\t\tpromise2(false, [e]);\n\t\t\t   \t\t\t\t\t}\n\t\t\t   \t\t\t\t}\n\t\t\t   \t\t\t\tresolve(f.apply(undef, values || []));\n\t\t\t   \t\t\t}\n\t\t\t   \t\t\telse\n\t\t\t   \t\t\t\tpromise2(state, values);\n\t\t\t\t\t}\n\t\t\t\t\tcatch (e) {\n\t\t\t\t\t\tpromise2(false, [e]);\n\t\t\t\t\t}\n\t\t\t\t};\n\t\t\t\tif (state != null)\n\t\t\t\t\tdefer(callCallbacks);\n\t\t\t\telse\n\t\t\t\t\tdeferred.push(callCallbacks);\n\t\t\t\treturn promise2;\n\t\t\t};\n\t        if(extend){\n\t            set = extend(set);\n\t        }\n\t\t\treturn set;\n\t\t};\n\t})( false ? [window, 'pinkySwear'] : [module, 'exports']);\n\t\n\t\n\t/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(4)(module), __webpack_require__(5).setImmediate, __webpack_require__(6)))\n\n/***/ },\n/* 4 */\n/***/ function(module, exports) {\n\n\tmodule.exports = function(module) {\r\n\t\tif(!module.webpackPolyfill) {\r\n\t\t\tmodule.deprecate = function() {};\r\n\t\t\tmodule.paths = [];\r\n\t\t\t// module.parent = undefined by default\r\n\t\t\tmodule.children = [];\r\n\t\t\tmodule.webpackPolyfill = 1;\r\n\t\t}\r\n\t\treturn module;\r\n\t}\r\n\n\n/***/ },\n/* 5 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t/* WEBPACK VAR INJECTION */(function(setImmediate, clearImmediate) {var nextTick = __webpack_require__(6).nextTick;\n\tvar apply = Function.prototype.apply;\n\tvar slice = Array.prototype.slice;\n\tvar immediateIds = {};\n\tvar nextImmediateId = 0;\n\t\n\t// DOM APIs, for completeness\n\t\n\texports.setTimeout = function() {\n\t  return new Timeout(apply.call(setTimeout, window, arguments), clearTimeout);\n\t};\n\texports.setInterval = function() {\n\t  return new Timeout(apply.call(setInterval, window, arguments), clearInterval);\n\t};\n\texports.clearTimeout =\n\texports.clearInterval = function(timeout) { timeout.close(); };\n\t\n\tfunction Timeout(id, clearFn) {\n\t  this._id = id;\n\t  this._clearFn = clearFn;\n\t}\n\tTimeout.prototype.unref = Timeout.prototype.ref = function() {};\n\tTimeout.prototype.close = function() {\n\t  this._clearFn.call(window, this._id);\n\t};\n\t\n\t// Does not start the time, just sets up the members needed.\n\texports.enroll = function(item, msecs) {\n\t  clearTimeout(item._idleTimeoutId);\n\t  item._idleTimeout = msecs;\n\t};\n\t\n\texports.unenroll = function(item) {\n\t  clearTimeout(item._idleTimeoutId);\n\t  item._idleTimeout = -1;\n\t};\n\t\n\texports._unrefActive = exports.active = function(item) {\n\t  clearTimeout(item._idleTimeoutId);\n\t\n\t  var msecs = item._idleTimeout;\n\t  if (msecs >= 0) {\n\t    item._idleTimeoutId = setTimeout(function onTimeout() {\n\t      if (item._onTimeout)\n\t        item._onTimeout();\n\t    }, msecs);\n\t  }\n\t};\n\t\n\t// That's not how node.js implements it but the exposed api is the same.\n\texports.setImmediate = typeof setImmediate === \"function\" ? setImmediate : function(fn) {\n\t  var id = nextImmediateId++;\n\t  var args = arguments.length < 2 ? false : slice.call(arguments, 1);\n\t\n\t  immediateIds[id] = true;\n\t\n\t  nextTick(function onNextTick() {\n\t    if (immediateIds[id]) {\n\t      // fn.call() is faster so we optimize for the common use-case\n\t      // @see http://jsperf.com/call-apply-segu\n\t      if (args) {\n\t        fn.apply(null, args);\n\t      } else {\n\t        fn.call(null);\n\t      }\n\t      // Prevent ids from leaking\n\t      exports.clearImmediate(id);\n\t    }\n\t  });\n\t\n\t  return id;\n\t};\n\t\n\texports.clearImmediate = typeof clearImmediate === \"function\" ? clearImmediate : function(id) {\n\t  delete immediateIds[id];\n\t};\n\t/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(5).setImmediate, __webpack_require__(5).clearImmediate))\n\n/***/ },\n/* 6 */\n/***/ function(module, exports) {\n\n\t// shim for using process in browser\n\t\n\tvar process = module.exports = {};\n\tvar queue = [];\n\tvar draining = false;\n\tvar currentQueue;\n\tvar queueIndex = -1;\n\t\n\tfunction cleanUpNextTick() {\n\t    draining = false;\n\t    if (currentQueue.length) {\n\t        queue = currentQueue.concat(queue);\n\t    } else {\n\t        queueIndex = -1;\n\t    }\n\t    if (queue.length) {\n\t        drainQueue();\n\t    }\n\t}\n\t\n\tfunction drainQueue() {\n\t    if (draining) {\n\t        return;\n\t    }\n\t    var timeout = setTimeout(cleanUpNextTick);\n\t    draining = true;\n\t\n\t    var len = queue.length;\n\t    while(len) {\n\t        currentQueue = queue;\n\t        queue = [];\n\t        while (++queueIndex < len) {\n\t            if (currentQueue) {\n\t                currentQueue[queueIndex].run();\n\t            }\n\t        }\n\t        queueIndex = -1;\n\t        len = queue.length;\n\t    }\n\t    currentQueue = null;\n\t    draining = false;\n\t    clearTimeout(timeout);\n\t}\n\t\n\tprocess.nextTick = function (fun) {\n\t    var args = new Array(arguments.length - 1);\n\t    if (arguments.length > 1) {\n\t        for (var i = 1; i < arguments.length; i++) {\n\t            args[i - 1] = arguments[i];\n\t        }\n\t    }\n\t    queue.push(new Item(fun, args));\n\t    if (queue.length === 1 && !draining) {\n\t        setTimeout(drainQueue, 0);\n\t    }\n\t};\n\t\n\t// v8 likes predictible objects\n\tfunction Item(fun, array) {\n\t    this.fun = fun;\n\t    this.array = array;\n\t}\n\tItem.prototype.run = function () {\n\t    this.fun.apply(null, this.array);\n\t};\n\tprocess.title = 'browser';\n\tprocess.browser = true;\n\tprocess.env = {};\n\tprocess.argv = [];\n\tprocess.version = ''; // empty string to avoid regexp issues\n\tprocess.versions = {};\n\t\n\tfunction noop() {}\n\t\n\tprocess.on = noop;\n\tprocess.addListener = noop;\n\tprocess.once = noop;\n\tprocess.off = noop;\n\tprocess.removeListener = noop;\n\tprocess.removeAllListeners = noop;\n\tprocess.emit = noop;\n\t\n\tprocess.binding = function (name) {\n\t    throw new Error('process.binding is not supported');\n\t};\n\t\n\tprocess.cwd = function () { return '/' };\n\tprocess.chdir = function (dir) {\n\t    throw new Error('process.chdir is not supported');\n\t};\n\tprocess.umask = function() { return 0; };\n\n\n/***/ },\n/* 7 */\n/***/ function(module, exports) {\n\n\t'use strict';\n\t\n\tvar hasOwn = Object.prototype.hasOwnProperty;\n\tvar toStr = Object.prototype.toString;\n\t\n\tvar isArray = function isArray(arr) {\n\t\tif (typeof Array.isArray === 'function') {\n\t\t\treturn Array.isArray(arr);\n\t\t}\n\t\n\t\treturn toStr.call(arr) === '[object Array]';\n\t};\n\t\n\tvar isPlainObject = function isPlainObject(obj) {\n\t\tif (!obj || toStr.call(obj) !== '[object Object]') {\n\t\t\treturn false;\n\t\t}\n\t\n\t\tvar hasOwnConstructor = hasOwn.call(obj, 'constructor');\n\t\tvar hasIsPrototypeOf = obj.constructor && obj.constructor.prototype && hasOwn.call(obj.constructor.prototype, 'isPrototypeOf');\n\t\t// Not own constructor property must be Object\n\t\tif (obj.constructor && !hasOwnConstructor && !hasIsPrototypeOf) {\n\t\t\treturn false;\n\t\t}\n\t\n\t\t// Own properties are enumerated firstly, so to speed up,\n\t\t// if last one is own, then all properties are own.\n\t\tvar key;\n\t\tfor (key in obj) {/**/}\n\t\n\t\treturn typeof key === 'undefined' || hasOwn.call(obj, key);\n\t};\n\t\n\tmodule.exports = function extend() {\n\t\tvar options, name, src, copy, copyIsArray, clone,\n\t\t\ttarget = arguments[0],\n\t\t\ti = 1,\n\t\t\tlength = arguments.length,\n\t\t\tdeep = false;\n\t\n\t\t// Handle a deep copy situation\n\t\tif (typeof target === 'boolean') {\n\t\t\tdeep = target;\n\t\t\ttarget = arguments[1] || {};\n\t\t\t// skip the boolean and the target\n\t\t\ti = 2;\n\t\t} else if ((typeof target !== 'object' && typeof target !== 'function') || target == null) {\n\t\t\ttarget = {};\n\t\t}\n\t\n\t\tfor (; i < length; ++i) {\n\t\t\toptions = arguments[i];\n\t\t\t// Only deal with non-null/undefined values\n\t\t\tif (options != null) {\n\t\t\t\t// Extend the base object\n\t\t\t\tfor (name in options) {\n\t\t\t\t\tsrc = target[name];\n\t\t\t\t\tcopy = options[name];\n\t\n\t\t\t\t\t// Prevent never-ending loop\n\t\t\t\t\tif (target !== copy) {\n\t\t\t\t\t\t// Recurse if we're merging plain objects or arrays\n\t\t\t\t\t\tif (deep && copy && (isPlainObject(copy) || (copyIsArray = isArray(copy)))) {\n\t\t\t\t\t\t\tif (copyIsArray) {\n\t\t\t\t\t\t\t\tcopyIsArray = false;\n\t\t\t\t\t\t\t\tclone = src && isArray(src) ? src : [];\n\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\tclone = src && isPlainObject(src) ? src : {};\n\t\t\t\t\t\t\t}\n\t\n\t\t\t\t\t\t\t// Never move original objects, clone them\n\t\t\t\t\t\t\ttarget[name] = extend(deep, clone, copy);\n\t\n\t\t\t\t\t\t// Don't bring in undefined values\n\t\t\t\t\t\t} else if (typeof copy !== 'undefined') {\n\t\t\t\t\t\t\ttarget[name] = copy;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\n\t\t// Return the modified object\n\t\treturn target;\n\t};\n\t\n\n\n/***/ },\n/* 8 */\n/***/ function(module, exports) {\n\n\t/**\n\t * UTILS for dealing with jwt tokens.\n\t */\n\t\n\t/**\n\t * Parse the payload out of the JWT token.\n\t * @param  {string} token JWT Token.\n\t * @return {object}       Parsed payload object.\n\t */\n\tvar parseTokenPayload = function (token) {\n\t  var parts = token.split('.');\n\t\n\t  // Return false if the token is invalid.\n\t  if (parts.length <= 1) {\n\t    return false;\n\t  }\n\t\n\t  // decode the payload portion.\n\t  var payload = window.atob(parts[1]);\n\t\n\t  // parse it as JSON\n\t  payload = JSON.parse(payload);\n\t\n\t  return payload;\n\t};\n\t\n\t/**\n\t * Return true if the provided token has expired.\n\t * @param  {string}  token JWT Token\n\t * @return {Boolean}       True if expired.\n\t */\n\tmodule.exports.isExpired = function (token) {\n\t  var data, exp, result, now;\n\t\n\t  data = parseTokenPayload(token);\n\t\n\t  result = true;\n\t\n\t  // Return true if the token does not parse properly.\n\t  if (!data) {\n\t    return result;\n\t  }\n\t\n\t  exp = data.exp;\n\t\n\t  // Get the unix timestamp in seconds.\n\t  now = new Date();\n\t  now = now.getTime() / 1000;\n\t\n\t  if (!exp) {\n\t    return result;\n\t  }\n\t\n\t  // If the expiry data is still in the future.\n\t  if (now < exp) {\n\t    result = false;\n\t  }\n\t\n\t  return result;\n\t\n\t};\n\n\n/***/ },\n/* 9 */\n/***/ function(module, exports, __webpack_require__) {\n\n\tvar Promise = __webpack_require__(3);\n\tvar Utils = {};\n\t/**\n\t * Replace all tokens within a given template based on the given key/value pair.\n\t * @param  {string}     template    Template for the url.\n\t * @param  {object}     hash        Key/Value pair for replacing tokens in the template.\n\t *\n\t * @example\n\t * var tokens = {\n\t *  keyInTemplate: 'replacedWith'\n\t * };\n\t *\n\t * var template = '<%=keyInTemplate%>';\n\t *\n\t * var result = parseTokens(template, tokens);  // 'replacedWith'\n\t *\n\t * @return {string}                 Parsed string.\n\t */\n\tUtils.parseTokens = function (template, hash) {\n\t  if (!template) {\n\t    return null;\n\t  }\n\t\n\t  var keys = Object.keys(hash);\n\t  var i;\n\t  var length = keys.length;\n\t\n\t  for (i = 0; i < length; i++) {\n\t    template = template.replace('<%=' + keys[i] + '%>', hash[keys[i]]);\n\t  }\n\t\n\t  return template;\n\t};\n\t\n\t/**\n\t * Wrapper function to wrap a value in either a reject or resolve.\n\t * @param  {boolean} state Rejection or Approval.\n\t * @param  {*}       value Value to pass back to the promise.\n\t * @return {Promise}       Promise/A+ spec promise.\n\t */\n\tUtils.promisify = function (state, value) {\n\t  var promise = Promise();\n\t\n\t  promise(state, [value]);\n\t\n\t  return promise;\n\t};\n\t\n\t/**\n\t * Wrap an array of promises and return when they have all completed.\n\t * @param   {Array}     promises  An array of promises to manage.\n\t * @param   {boolean}   paused    A boolean to pause the execution of the promises.\n\t * @return  {Promise}             A promise that is resolved when all of the promises have fulfilled.\n\t */\n\tUtils.series = function (promises, paused) {\n\t\n\t  var promisesCount = promises.length;\n\t  var all = Promise();\n\t\n\t  var state = {\n\t    total: promisesCount,\n\t    complete: 0,\n\t    responses: [],\n\t    promises: promises,\n\t    paused: true\n\t  };\n\t\n\t  all.pause = Utils._seriesPause.bind(undefined, all, state);\n\t  all.resume = Utils._seriesResume.bind(undefined, all, state);\n\t\n\t  if (!paused) {\n\t    state.paused = false;\n\t    Utils._seriesCallPromise(promises[0], state, all);\n\t  }\n\t\n\t  return all;\n\t\n\t};\n\t\n\t/**\n\t * Call a promise and pass the complete and error functions.\n\t * @param  {Promise} promise Promise to execute on.\n\t * @param  {Object} state   Persistent state of the series of promises.\n\t */\n\tUtils._seriesCallPromise = function (promise, state, all) {\n\t  // call the promise;\n\t  if (!state.paused) {\n\t    promise().then(Utils._seriesComplete.bind(undefined, all, state),\n\t      Utils._seriesError.bind(undefined, all, state));\n\t  }\n\t};\n\t\n\t/**\n\t * Manage the progress of the promises.\n\t * @private\n\t * @param  {Promise} all      All promise.\n\t * @param  {Object}  state    State object used to persist the promise count.\n\t * @param  {Object}  response Response of the promise being fulfilled.\n\t */\n\tUtils._seriesComplete = function (all, state, response) {\n\t\n\t  // Increment the complete promises.\n\t  state.complete++;\n\t  state.responses.push(response);\n\t\n\t  if (state.complete >= state.total) {\n\t    all(true, state.responses);\n\t  } else {\n\t    if (!state.paused) {\n\t      // Execute the next promise.\n\t      Utils._seriesCallPromise(state.promises[state.complete], state, all);\n\t    }\n\t  }\n\t\n\t};\n\t\n\t/**\n\t * Immediately reject the promise if there is an error.\n\t * @param  {Promise} all  All promise.\n\t * @param  {Object}  state    State object used to persist the promise count.\n\t * @param  {Object}  response Response of the promise being fulfilled.\n\t */\n\tUtils._seriesError = function (all, state, error) {\n\t  all(false, [error]);\n\t};\n\t\n\t/**\n\t * Pause the current series of promises.\n\t * @param  {Promise} all  All promise.\n\t * @param  {Object}  state    State object used to persist the promise count.\n\t */\n\tUtils._seriesPause = function (all, state) {\n\t  state.paused = true;\n\t};\n\t\n\t/**\n\t * Resume the current series of promises.\n\t * @param  {Promise} all  All promise.\n\t * @param  {Object}  state    State object used to persist the promise count.\n\t */\n\tUtils._seriesResume = function (all, state) {\n\t  state.paused = false;\n\t\n\t  if (state.complete !== state.total) {\n\t    Utils._seriesCallPromise(state.promises[state.complete], state, all);\n\t  }\n\t};\n\t\n\tmodule.exports = Utils;\n\n\n/***/ },\n/* 10 */\n/***/ function(module, exports, __webpack_require__) {\n\n\tvar Request = __webpack_require__(2);\n\tvar Promise = __webpack_require__(3);\n\tvar extend = __webpack_require__(7);\n\tvar utils = __webpack_require__(9);\n\t\n\t/**\n\t * Resource Object\n\t * @class\n\t */\n\tfunction Resource (options) {\n\t\n\t  this.defaults = {\n\t    host: 'https://api.ingest.io',\n\t    all: '/<%=resource%>',\n\t    byId: '/<%=resource%>/<%=id%>',\n\t    thumbnails: '/<%=resource%>/<%=id%>/thumbnails',\n\t    trash: '/<%=resource%>?filter=trashed',\n\t    deleteMethods: {\n\t      'permanent': '?permanent=1'\n\t    },\n\t    search: '/<%=resource%>?search=<%=input%>',\n\t    tokenSource: null,\n\t    resource: null\n\t  };\n\t\n\t  this.config = extend(true, {}, this.defaults, options);\n\t\n\t  this.cache = this.config.cache;\n\t\n\t}\n\t\n\t/**\n\t * Proxy the request to token source to ensure a value is always returned.\n\t * @private\n\t * @return {string} Auth token.\n\t */\n\tResource.prototype._tokenSource = function () {\n\t  var result = null;\n\t\n\t  if (this.config.tokenSource) {\n\t    result = this.config.tokenSource.call();\n\t  }\n\t\n\t  return result;\n\t};\n\t\n\t/**\n\t * Return a list of the requested resource for the current user and network.\n\t * @param  {object}   headers   Object representing headers to apply to the request.\n\t * @return {promise}            A promise which resolves when the request is complete.\n\t */\n\tResource.prototype.getAll = function (headers) {\n\t  var url = utils.parseTokens(this.config.host + this.config.all, {\n\t    resource: this.config.resource\n\t  });\n\t\n\t  return new Request({\n\t    url: url,\n\t    token: this._tokenSource(),\n\t    headers: headers\n\t  }).then(this._updateCachedResources.bind(this));\n\t};\n\t\n\t/**\n\t * Return a resource that matches the supplied id.\n\t * @param  {string}   id    Resource id.\n\t * @return {promise}        A promise which resolves when the request is complete.\n\t */\n\tResource.prototype.getById = function (id) {\n\t  var url, cachedResult;\n\t\n\t  if (typeof id !== 'string') {\n\t    return utils.promisify(false,\n\t      'IngestAPI Resource getById requires a valid id passed as a string.');\n\t  }\n\t\n\t  url = utils.parseTokens(this.config.host + this.config.byId, {\n\t    resource: this.config.resource,\n\t    id: id\n\t  });\n\t\n\t  if (this.cache && this.cache.enabled) {\n\t    // retrieve the cached item.\n\t    cachedResult = this.cache.retrieve(id);\n\t  }\n\t\n\t  // Return a cached result if we've found one.\n\t  if (cachedResult) {\n\t    return utils.promisify(true, {\n\t      data: cachedResult\n\t    });\n\t  } else {\n\t    return new Request({\n\t      url: url,\n\t      token: this._tokenSource()\n\t    });\n\t  }\n\t};\n\t\n\t/**\n\t * Return the resources currently in the trash.\n\t * @param  {object} headers Headers to be passed along with the request for pagination.\n\t * @return {promise}         A promise which resolves when the request is complete.\n\t */\n\tResource.prototype.getTrashed = function (headers) {\n\t  var url = utils.parseTokens(this.config.host + this.config.trash, {\n\t    resource: this.config.resource\n\t  });\n\t\n\t  return new Request({\n\t    url: url,\n\t    token: this._tokenSource(),\n\t    headers: headers\n\t  });\n\t};\n\t\n\t/**\n\t * Retrieve all thumbnails for a provided resource id.\n\t * @param {string} id ID of the resource to retrieve thumbnails for.\n\t * @return {promise}  A promise which resolves when the request is complete.\n\t */\n\tResource.prototype.getThumbnails = function (id) {\n\t  var url;\n\t\n\t  if (typeof id !== 'string') {\n\t    return utils.promisify(false,\n\t      'IngestAPI Resource getThumbnails requires an id to be passed as a string.');\n\t  }\n\t\n\t  url = utils.parseTokens(this.config.host + this.config.thumbnails, {\n\t    resource: this.config.resource,\n\t    id: id\n\t  });\n\t\n\t  return new Request({\n\t    url: url,\n\t    token: this._tokenSource()\n\t  });\n\t};\n\t\n\t/**\n\t * Add a new resource.\n\t * @param   {object}  resource  An object representing the resource to add.\n\t * @return  {promise}           A promise which resolves when the request is complete.\n\t */\n\tResource.prototype.add = function (resource) {\n\t  var url;\n\t\n\t  if (typeof resource !== 'object') {\n\t    return utils.promisify(false,\n\t      'IngestAPI Resource add requires a resource passed as an object.');\n\t  }\n\t\n\t  url = utils.parseTokens(this.config.host + this.config.all, {\n\t    resource: this.config.resource\n\t  });\n\t\n\t  return new Request({\n\t    url: url,\n\t    token: this._tokenSource(),\n\t    method: 'POST',\n\t    data: resource\n\t  }).then(this._updateCachedResource.bind(this));\n\t};\n\t\n\t/**\n\t * Update an existing resource with new content.\n\t * @param  {object|array} resource  An object or an array of objects representing the resource(s) to be updated.\n\t * @return {promise}                A promise which resolves when the request is complete.\n\t */\n\tResource.prototype.update = function (resource) {\n\t  if (typeof resource !== 'object') {\n\t    return utils.promisify(false,\n\t      'IngestAPI Resource update requires a resource to be passed either as an object or an array of objects.'); //eslint-disable-line\n\t  }\n\t\n\t  // If they've passed an array fire the updateArray function.\n\t  if (Array.isArray(resource)) {\n\t    return this._updateResourceArray(resource);\n\t  } else {\n\t    return this._updateResource(resource);\n\t  }\n\t};\n\t\n\t/**\n\t * Update a single resource.\n\t * @private\n\t * @param  {object}   resource  An object representing the resource to update.\n\t * @return {promise}            A promise which resolves when the request is complete.\n\t */\n\tResource.prototype._updateResource = function (resource) {\n\t  var url = utils.parseTokens(this.config.host + this.config.byId, {\n\t    resource: this.config.resource,\n\t    id: resource.id\n\t  });\n\t\n\t  return new Request({\n\t    url: url,\n\t    token: this._tokenSource(),\n\t    method: 'PATCH',\n\t    data: resource\n\t  }).then(this._updateCachedResource.bind(this));\n\t};\n\t\n\t/**\n\t * Update an array of resources.\n\t * @private\n\t * @param  {array} resources  An array of resource objects to be updated.\n\t * @return {promise}          A promise which resolves when the request is complete.\n\t */\n\tResource.prototype._updateResourceArray = function (resources) {\n\t  var url = utils.parseTokens(this.config.host + this.config.all, {\n\t    resource: this.config.resource\n\t  });\n\t\n\t  return new Request({\n\t    url: url,\n\t    token: this._tokenSource(),\n\t    method: 'PATCH',\n\t    data: resources\n\t  }).then(this._updateCachedResources.bind(this));\n\t};\n\t\n\t/**\n\t * Delete an existing resource\n\t * @param  {object | array} resource The id, or an array of ids for the resource(s) to be deleted.\n\t * @return {promise}          A promise which resolves when the request is complete.\n\t */\n\tResource.prototype.delete = function (resource) {\n\t  if (typeof resource !== 'string') {\n\t    // If they've passed an array fire the updateArray function.\n\t    if (Array.isArray(resource)) {\n\t      return this._deleteResourceArray(resource);\n\t    }\n\t\n\t    return utils.promisify(false,\n\t      'IngestAPI Resource delete requires a resource to be passed either as a string or an array of strings.'); //eslint-disable-line\n\t  }\n\t\n\t  return this._deleteResource(resource);\n\t};\n\t\n\t/**\n\t * Permanently delete an existing resource.\n\t * @param  {object | array} resource The id, or an array of ids for the resource(s) to be deleted.\n\t * @return {promise}          A promise which resolves when the request is complete.\n\t */\n\tResource.prototype.permanentDelete = function (resource) {\n\t  if (typeof resource !== 'string') {\n\t    // If they've passed an array fire the updateArray function.\n\t    if (Array.isArray(resource)) {\n\t      return this._deleteResourceArray(resource, true);\n\t    }\n\t\n\t    return utils.promisify(false,\n\t      'IngestAPI Resource delete requires a resource to be passed either as a string or an array of strings.'); //eslint-disable-line\n\t  }\n\t\n\t  return this._deleteResource(resource, true);\n\t};\n\t\n\t/**\n\t * Delete a single resource\n\t * @private\n\t * @param  {object}   resource  The id of the resource to be deleted.\n\t * @param {boolean}  permanent  A flag to permanently delete each video.\n\t * @return {promise}            A promise which resolves when the request is complete.\n\t */\n\tResource.prototype._deleteResource = function (resource, permanent) {\n\t  var url = utils.parseTokens(this.config.host + this.config.byId, {\n\t    resource: this.config.resource,\n\t    id: resource\n\t  });\n\t\n\t  if (permanent === true) {\n\t    url += this.config.deleteMethods.permanent;\n\t  }\n\t\n\t  return new Request({\n\t    url: url,\n\t    token: this._tokenSource(),\n\t    method: 'DELETE',\n\t  }).then(this._deleteCachedResource.bind(this, resource));\n\t};\n\t\n\t/**\n\t * Delete an array of resources\n\t * @private\n\t * @param  {array}  resources   An array of resource objects to be deleted.\n\t * @param {boolean}  permanent  A flag to permanently delete each video.\n\t * @return {promise}            A promise which resolves when the request is complete.\n\t */\n\tResource.prototype._deleteResourceArray = function (resources, permanent) {\n\t  var url = utils.parseTokens(this.config.host + this.config.all, {\n\t    resource: this.config.resource\n\t  });\n\t\n\t  if (permanent === true) {\n\t    url += this.config.deleteMethods.permanent;\n\t  }\n\t\n\t  return new Request({\n\t    url: url,\n\t    token: this._tokenSource(),\n\t    method: 'DELETE',\n\t    data: resources\n\t  }).then(this._deleteCachedResources.bind(this, resources));\n\t};\n\t\n\t/**\n\t * Return a subset of items that match the search terms.\n\t * @param  {string} input    The search terms to match against.\n\t * @param  {object} headers  The headers to be passed to the request.\n\t * @return {Promise}          A promise which resolves when the request is complete.\n\t */\n\tResource.prototype.search = function (input, headers) {\n\t  var url;\n\t\n\t  if (typeof input !== 'string') {\n\t    return utils.promisify(false,\n\t      'IngestAPI Resource search requires search input to be passed as a string.');\n\t  }\n\t\n\t  url = utils.parseTokens(this.config.host + this.config.search, {\n\t    resource: this.config.resource,\n\t    input: input\n\t  });\n\t\n\t  return new Request({\n\t    url: url,\n\t    token: this._tokenSource(),\n\t    headers: headers\n\t  });\n\t};\n\t\n\t/**\n\t * Get the total count of resources.\n\t * @return {promise} A promise which resolves when the request is complete.\n\t */\n\tResource.prototype.count = function () {\n\t  var url = utils.parseTokens(this.config.host + this.config.all, {\n\t    resource: this.config.resource\n\t  });\n\t\n\t  return new Request({\n\t    url: url,\n\t    token: this._tokenSource(),\n\t    method: 'HEAD'\n\t  }).then(this._handleCountResponse);\n\t};\n\t\n\t/**\n\t * Get the total count of resources in the trash.\n\t * @return {promise} A promise which resolves when the request is complete.\n\t */\n\tResource.prototype.trashCount = function () {\n\t  var url = utils.parseTokens(this.config.host + this.config.trash, {\n\t    resource: this.config.resource\n\t  });\n\t\n\t  return new Request({\n\t    url: url,\n\t    token: this._tokenSource(),\n\t    method: 'HEAD'\n\t  }).then(this._handleCountResponse);\n\t};\n\t\n\t/**\n\t * Return the resource count from the response.\n\t * @private\n\t * @param  {object} response Request response object.\n\t * @return {number}          The resource count.\n\t */\n\tResource.prototype._handleCountResponse = function (response) {\n\t  return parseInt(response.headers('Resource-Count'), 10);\n\t};\n\t\n\t/**\n\t * Update a single cached resource based on the response data.\n\t * @param  {object}   response   Response object from the getAll request.\n\t * @return {response}            Response object from the getAll request.\n\t */\n\tResource.prototype._updateCachedResource = function (response) {\n\t  if (this.cache && this.cache.enabled) {\n\t    this.cache.save(response.data.id, response.data);\n\t  }\n\t\n\t  return response;\n\t};\n\t\n\t/**\n\t * Store the returned items in cache.\n\t * @param  {object}   response   Response object from the getAll request.\n\t * @return {response}            Response object from the getAll request.\n\t */\n\tResource.prototype._updateCachedResources = function (response) {\n\t  var data = response.data;\n\t  var dataLength = data.length;\n\t  var i;\n\t\n\t  if (this.cache && this.cache.enabled) {\n\t\n\t    for (i = 0; i < dataLength; i++) {\n\t      this.cache.save(data[i].id, data[i]);\n\t    }\n\t\n\t  }\n\t\n\t  return response;\n\t};\n\t\n\t/**\n\t * Delete a single cached resource.\n\t * @param  {string} id            ID of the resource to remove.\n\t * @param  {object}   response    Response object from the getAll request.\n\t * @return {response}             Response object from the getAll request.\n\t */\n\tResource.prototype._deleteCachedResource = function (id, response) {\n\t  if (this.cache && this.cache.enabled) {\n\t    this.cache.remove(id);\n\t  }\n\t\n\t  return response;\n\t};\n\t\n\t/**\n\t * Delete an array of cached resources\n\t * @param  {array}    ids         Array of resource id's to delete from cache.\n\t * @param  {object}   response    Response object from the getAll request.\n\t * @return {response}             Response object from the getAll request.\n\t */\n\tResource.prototype._deleteCachedResources = function (ids, response) {\n\t  var dataLength = ids.length;\n\t  var i;\n\t\n\t  if (this.cache && this.cache.enabled) {\n\t\n\t    for (i = 0; i < dataLength; i++) {\n\t      this.cache.remove(ids[i]);\n\t    }\n\t\n\t  }\n\t\n\t  return response;\n\t};\n\t\n\tmodule.exports = Resource;\n\n\n/***/ },\n/* 11 */\n/***/ function(module, exports, __webpack_require__) {\n\n\tvar Request = __webpack_require__(2);\n\tvar Promise = __webpack_require__(3);\n\tvar extend = __webpack_require__(7);\n\tvar utils = __webpack_require__(9);\n\tvar JWTUtils = __webpack_require__(8);\n\t\n\t// TODO Add better pause support, uploads should be able to pause right after creation.\n\t\n\t/**\n\t * Create a new upload wrapper.  Manages the entire upload of a file.\n\t * @class\n\t * @param   {object}  options                   Configuration options to override the defaults.\n\t * @param   {object}  options.api               A reference to the parent API instance.\n\t * @param   {object}  options.file              The file to upload.\n\t * @param   {object}  options.upload            REST endpoint for creating an input.\n\t * @param   {object}  options.sign              REST endpoint for signing a blob before upload.\n\t * @param   {object}  options.uploadComplete    REST endpoint to notify the API that the upload is complete.\n\t * @param   {object}  options.uploadAbort       REST endpoint to abort the upload.\n\t */\n\tfunction Upload (options) {\n\t\n\t  this.defaults = {\n\t    api: null,\n\t    file: null,\n\t    upload: '/encoding/inputs/<%=id%>/upload<%=method%>',\n\t    sign: '/encoding/inputs/<%=id%>/upload/sign<%=method%>',\n\t    uploadComplete: '/encoding/inputs/<%=id%>/upload/complete',\n\t    uploadAbort: '/encoding/inputs/<%=id%>/upload/abort',\n\t    uploadMethods: {\n\t      param: '?type=',\n\t      singlePart: 'amazon',\n\t      multiPart: 'amazonMP'\n\t    }\n\t  };\n\t\n\t  // Create a config object by extending the defaults with the pass options.\n\t  this.config = extend(true, {}, this.defaults, options);\n\t\n\t  this.api = this.config.api;\n\t  this.file = this.config.file;\n\t\n\t  this.chunks = [];\n\t  this.chunkSize = 0;\n\t  this.chunkCount = 0;\n\t  this.chunksComplete = 0;\n\t  this.uploadedBytes = 0;\n\t\n\t  this.aborted = false;\n\t  this.paused = false;\n\t\n\t  this.fileRecord = {\n\t    filename: this.file.name,\n\t    type: this.file.type,\n\t    size: this.file.size,\n\t    method: this._checkMultipart(this.file)\n\t  };\n\t\n\t};\n\t\n\t/**\n\t * Register a function to execute when a chunk completes uploading.\n\t * @param  {Function} callback A callback to execute when progress is made.\n\t */\n\tUpload.prototype.progress = function (callback) {\n\t  this.config.progress = callback.bind(this);\n\t};\n\t\n\t/**\n\t * Create a new input record and upload the files to amazon.\n\t * @return  {Promise}         A promise which resolves when the new input record is created and uploaded.\n\t */\n\tUpload.prototype.save = function () {\n\t  return this._create(this.fileRecord)\n\t    .then(this._initialize.bind(this))\n\t    .then(this._prepareUpload.bind(this));\n\t};\n\t\n\t/**\n\t * Call the progress callback and pass the current progress percentage.\n\t * @private\n\t * @param  {number} message Current progress percentage.\n\t */\n\tUpload.prototype._updateProgress = function (percent, chunkSize) {\n\t\n\t  if (!this.config.progress) {\n\t    return;\n\t  }\n\t\n\t  this.config.progress.call(this, percent, chunkSize);\n\t};\n\t\n\t/**\n\t * Create a new input record.\n\t * @private\n\t * @param   {object}  record  A JSON object representing the input record to create.\n\t * @return  {Promise}         A promise which resolves when the new input record is created.\n\t */\n\tUpload.prototype._create = function (record) {\n\t\n\t  if (this.aborted) {\n\t    return utils.promisify(false, 'upload aborted');\n\t  }\n\t\n\t  return this.api.inputs.add([record]).then(this._createSuccess.bind(this));\n\t};\n\t\n\t/**\n\t * Return the data object from the response.\n\t * @private\n\t * @param  {JSON}   response  JSON response containing the new input record id.\n\t * @return {string}           new input record id.\n\t */\n\tUpload.prototype._createSuccess = function (response) {\n\t\n\t  this._updateProgress(0);\n\t  this.fileRecord.id = response.data[0].id;\n\t\n\t  return this.fileRecord.id;\n\t};\n\t\n\t/**\n\t * Initializes an Input for upload\n\t * @private\n\t * @return {Promise} A promise which resolves when the request is complete.\n\t */\n\tUpload.prototype._initialize = function () {\n\t\n\t  var url;\n\t  var tokens;\n\t  var signing = '';\n\t\n\t  if (this.aborted) {\n\t    return utils.promisify(false, 'upload aborted');\n\t  }\n\t\n\t  if (!this.fileRecord.method) {\n\t    signing = this.config.uploadMethods.param + this.config.uploadMethods.singlePart;\n\t  }\n\t\n\t  tokens = {\n\t    id: this.fileRecord.id,\n\t    method: signing\n\t  };\n\t\n\t  url = utils.parseTokens(this.api.config.host + this.config.upload, tokens);\n\t\n\t  return new Request({\n\t    url: url,\n\t    token: this.api.getToken(),\n\t    method: 'POST',\n\t    data: this.fileRecord\n\t  }).then(this._initializeComplete.bind(this));\n\t\n\t};\n\t\n\t/**\n\t * Store the information returned from the initialize request.\n\t * @private\n\t */\n\tUpload.prototype._initializeComplete = function (response) {\n\t  this.fileRecord.key = response.data.key;\n\t  this.fileRecord.uploadId = response.data.uploadId;\n\t  this.chunkSize = response.data.pieceSize;\n\t  this.chunkCount = response.data.pieceCount;\n\t};\n\t\n\t/**\n\t * Setup the upload depending on its type, single or multi part.\n\t * @return {Promise} A promise which resolves when all of the pieces have completed uploading.\n\t */\n\tUpload.prototype._prepareUpload = function () {\n\t  if (!this.fileRecord.method) {\n\t    // Singlepart.\n\t    return this._uploadFile()\n\t      .then(this._onCompleteUpload.bind(this));\n\t  } else {\n\t    // Multipart.\n\t    return this._createChunks()\n\t      .then(this._completeUpload.bind(this));\n\t  }\n\t};\n\t\n\t/**\n\t * Break a file into blobs and create a chunk object for each piece.\n\t * @private\n\t * @return {Promise} A promise which resolves when all of the pieces have completed uploading.\n\t */\n\tUpload.prototype._createChunks = function () {\n\t  var sliceMethod = this._getSliceMethod(this.file);\n\t  var i, blob, chunk,\n\t    chunkPromises = [];\n\t\n\t  if (this.aborted) {\n\t    this.abort();\n\t    return utils.promisify(false, 'upload aborted');\n\t  }\n\t\n\t  for (i = 0; i < this.chunkCount; i++) {\n\t\n\t    blob = this.file[sliceMethod](i * this.chunkSize, (i + 1) * this.chunkSize);\n\t\n\t    chunk = {\n\t      partNumber: i + 1,\n\t      data: blob\n\t    };\n\t\n\t    this.chunks.push(chunk);\n\t\n\t    chunkPromises.push(this._uploadChunk.bind(this, chunk));\n\t\n\t  }\n\t\n\t  // Store a reference for pausing and resuming.\n\t  this.currentUpload = utils.series(chunkPromises, this.paused);\n\t\n\t  return this.currentUpload;\n\t};\n\t\n\t/**\n\t * Create a promise chain for each chunk to be uploaded.\n\t * @private\n\t * @return {Promise} A promise which resolves when the request is complete.\n\t */\n\tUpload.prototype._uploadChunk = function (chunk) {\n\t  return this._signUpload(chunk)\n\t    .then(this._sendUpload.bind(this, chunk))\n\t    .then(this._completeChunk.bind(this, chunk));\n\t};\n\t\n\t/**\n\t * Create a promise chain for a single part file upload.\n\t * @param  {file}   file    A file reference to upload.\n\t * @return {Promise} A promise which resolves when the request is complete.\n\t */\n\tUpload.prototype._uploadFile = function () {\n\t  var chunk = {\n\t    data: this.file\n\t  };\n\t\n\t  return this._signUpload(chunk)\n\t    .then(this._sendUpload.bind(this, chunk))\n\t    .then(this._updateProgress.bind(this, 100));\n\t};\n\t\n\t/**\n\t * Make a request and sign the chunk to be uploaded.\n\t * @private\n\t * @param  {object}   chunk           Information about the chunk to be uploaded.\n\t * @return {Promise}                  A promise which resolves when the request is complete.\n\t */\n\tUpload.prototype._signUpload = function (chunk) {\n\t  var url;\n\t  var signing = '';\n\t  var headers = {};\n\t\n\t  // Set the part number for the current chunk.\n\t  if (chunk.partNumber) {\n\t    this.fileRecord.partNumber = chunk.partNumber;\n\t  }\n\t\n\t  headers['Content-Type'] = 'multipart/form-data';\n\t\n\t  if (!this.fileRecord.method) {\n\t    signing = this.config.uploadMethods.param + this.config.uploadMethods.singlePart;\n\t  }\n\t\n\t  url = utils.parseTokens(this.api.config.host + this.config.sign, {\n\t    id: this.fileRecord.id,\n\t    method: signing\n\t  });\n\t\n\t  return new Request({\n\t    url: url,\n\t    token: this.api.getToken(),\n\t    method: 'POST',\n\t    headers: headers,\n\t    data: this.fileRecord\n\t  });\n\t};\n\t\n\t/**\n\t * Send the upload to the server.\n\t * @private\n\t * @param   {object} upload  An object representing the upload to send to the server.\n\t * @return  {Promise}       A promise which resolves when the request is complete.\n\t */\n\tUpload.prototype._sendUpload = function (upload, response) {\n\t  var headers = {};\n\t\n\t  var formData = new FormData();\n\t  formData.append('file', upload.data);\n\t\n\t  // Set the proper headers to send with the file.\n\t  headers['Content-Type'] = 'multipart/form-data';\n\t  headers['Authorization'] = response.data.authHeader;\n\t  headers['x-amz-date'] = response.data.dateHeader;\n\t\n\t  return new Request({\n\t    url: response.data.url,\n\t    method: 'PUT',\n\t    headers: headers,\n\t    data: formData\n\t  });\n\t};\n\t\n\t/**\n\t *  Executed when a chunk is finished uploading.\n\t *  @private\n\t */\n\tUpload.prototype._completeChunk = function (chunk) {\n\t  var progress;\n\t\n\t  this.chunksComplete++;\n\t  chunk.complete = true;\n\t\n\t  this.uploadedBytes += chunk.data.size;\n\t\n\t  progress = this.uploadedBytes / this.fileRecord.size;\n\t  progress = progress * 100;\n\t  progress = Math.round(progress);\n\t\n\t  this._updateProgress(progress, chunk.data.size);\n\t};\n\t\n\t/**\n\t * Notify the server that the upload is complete.\n\t *\n\t * @private\n\t * @return {Promise} A promise which resolves when the request is complete.\n\t */\n\tUpload.prototype._completeUpload = function () {\n\t  var url;\n\t  var tokens;\n\t\n\t  if (this.aborted) {\n\t    this.abort();\n\t    return utils.promisify(false, 'upload aborted');\n\t  }\n\t\n\t  tokens = {\n\t    id: this.fileRecord.id\n\t  };\n\t\n\t  url = utils.parseTokens(this.api.config.host + this.config.uploadComplete, tokens);\n\t\n\t  return new Request({\n\t    url: url,\n\t    token: this.api.getToken(),\n\t    method: 'POST',\n\t    data: this.fileRecord\n\t  }).then(this._onCompleteUpload.bind(this));\n\t};\n\t\n\t/**\n\t * Return the id for the current file record.\n\t * @private\n\t * @return {string} ID for the input record that was created.\n\t */\n\tUpload.prototype._onCompleteUpload = function () {\n\t  this.currentUpload = null;\n\t  return this.fileRecord.id;\n\t};\n\t\n\t/**\n\t * Completes an input upload\n\t * @param  {string}  inputId        An id for the input you wish to delete\n\t * @param  {object}  data           The object containing data for the upload completion.\n\t * @param  {string}  data.uploadId  The uploadId you wish to complete the upload for\n\t * @param  {number}  data.key       The key of the upload you wish to complete\n\t *\n\t * @return {Promise} A promise which resolves when the request is complete.\n\t */\n\tUpload.prototype.abort = function () {\n\t  var url;\n\t  var tokens;\n\t  var signing = '';\n\t\n\t  if (this.currentUpload) {\n\t    this.currentUpload.pause();\n\t    this.currentUpload = null;\n\t  }\n\t\n\t  if (!this.fileRecord.method) {\n\t    signing = this.config.uploadMethods.param + this.config.uploadMethods.singlePart;\n\t  }\n\t\n\t  tokens = {\n\t    id: this.fileRecord.id,\n\t    method: signing\n\t  };\n\t\n\t  url = utils.parseTokens(this.api.config.host + this.config.uploadAbort, tokens);\n\t\n\t  return new Request({\n\t    url: url,\n\t    token: this.api.getToken(),\n\t    method: 'POST',\n\t    data: this.fileRecord\n\t  });\n\t};\n\t\n\t/**\n\t * Pause the current upload.\n\t */\n\tUpload.prototype.pause = function () {\n\t  this.paused = true;\n\t  if (this.currentUpload) {\n\t    this.currentUpload.pause();\n\t  }\n\t};\n\t\n\t/**\n\t * Resume the current upload.\n\t */\n\tUpload.prototype.resume = function () {\n\t  this.paused = false;\n\t  if (this.currentUpload) {\n\t    this.currentUpload.resume();\n\t  }\n\t};\n\t\n\t/**\n\t * Check the file size to determine if it should be a multipart upload, returns false for singlepart uploads.\n\t * @private\n\t * @param  {file}   file  The file to evaluate.\n\t * @return {boolean}      True if the file will be uploading using mutlipart upload.\n\t */\n\tUpload.prototype._checkMultipart = function (file) {\n\t  if (!file) {\n\t    return;\n\t  }\n\t\n\t  return (file.size <= (5 * 1024 * 1024) ? false : true);\n\t};\n\t\n\t/**\n\t * Function that determines the slice method to be used\n\t * @private\n\t * @param {object} file - The file object you wish to determine the slice method for\n\t * @return {string} sliceMethod - The slice method to use.\n\t */\n\tUpload.prototype._getSliceMethod = function (file) {\n\t  var sliceMethod;\n\t\n\t  if ('mozSlice' in file) {\n\t    sliceMethod = 'mozSlice';\n\t  } else if ('webkitSlice' in file) {\n\t    sliceMethod = 'webkitSlice';\n\t  } else {\n\t    sliceMethod = 'slice';\n\t  }\n\t\n\t  return sliceMethod;\n\t};\n\t\n\tmodule.exports = Upload;\n\n\n/***/ },\n/* 12 */\n/***/ function(module, exports) {\n\n\t/**\n\t * A management layer for storing app cache in local storage.\n\t */\n\tvar Cache = function (cacheAge) {\n\t  this.cacheAge = cacheAge;\n\t  this.enabled = this._checkCacheSupport();\n\t};\n\t\n\t/**\n\t * Return true if localStorage is supported.\n\t * @private\n\t * @return {boolean} True if localStorage is supported.\n\t */\n\tCache.prototype._checkCacheSupport = function () {\n\t\n\t  var support = 'support';\n\t\n\t  try {\n\t    localStorage.setItem(support, support);\n\t    localStorage.removeItem(support);\n\t    return true;\n\t  } catch (e) {\n\t    return false;\n\t  }\n\t\n\t};\n\t\n\t/**\n\t * Retrieve the cached result for the provided cacheKey.\n\t * @param  {string}   cacheKey  Key associated with the cached result.\n\t * @return {object}             Parse results object.\n\t */\n\tCache.prototype.retrieve = function (cacheKey) {\n\t  var data;\n\t  var value = null;\n\t  var expiry;\n\t\n\t  try {\n\t\n\t    data = localStorage.getItem(cacheKey);\n\t    data = JSON.parse(data);\n\t    value = data.value;\n\t\n\t    if (data.expiry < Date.now()) {\n\t      // Cache is expired;\n\t      localStorage.removeItem(cacheKey);\n\t      value = null;\n\t    }\n\t\n\t  } catch (error) {\n\t    // Silent capture so that caching never gets in the way of returning a result.\n\t    value = null;\n\t  }\n\t\n\t  return value;\n\t};\n\t\n\t/**\n\t * Remove a result from the cache.\n\t * @param  {string}   cacheKey  Key associated with the cached result.\n\t * @return {boolean}            A boolean indicating success of the removal.\n\t */\n\tCache.prototype.remove = function (cacheKey) {\n\t  var result = true;\n\t\n\t  try {\n\t    localStorage.removeItem(cacheKey);\n\t  } catch (error) {\n\t    // Silent capture so that caching never gets in the way of returning a result.\n\t    result = false;\n\t  }\n\t\n\t  return result;\n\t};\n\t\n\t/**\n\t * Save the new result with its expiry date.\n\t * @param  {string}   cacheKey Unique cache key for the request.\n\t * @param  {number}   expiry   Unix timestamp for the expiry.\n\t * @param  {object}   result   Object to be cached.\n\t * @return {boolean}            A boolean indicating success of the save.\n\t */\n\tCache.prototype.save = function (cacheKey, value) {\n\t  var result = true;\n\t  var data = {};\n\t  var JSONResult;\n\t\n\t  try {\n\t\n\t    data.expiry = Date.now() + this.cacheAge;\n\t    data.value = value;\n\t\n\t    JSONResult = JSON.stringify(data);\n\t\n\t    localStorage.setItem(cacheKey, JSONResult);\n\t\n\t  } catch (error) {\n\t    // Silent capture so that caching never gets in the way of returning a result.\n\t    result = false;\n\t  }\n\t\n\t  return result;\n\t};\n\t\n\tmodule.exports = Cache;\n\n\n/***/ }\n/******/ ])\n});\n;\n\n\n/** WEBPACK FOOTER **\n ** ingest.js\n **/"," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId])\n \t\t\treturn installedModules[moduleId].exports;\n\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\texports: {},\n \t\t\tid: moduleId,\n \t\t\tloaded: false\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.loaded = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(0);\n\n\n\n/** WEBPACK FOOTER **\n ** webpack/bootstrap 241f144445fc6556ea0b\n **/","module.exports = require('./src/IngestAPI.js');\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./index.js\n ** module id = 0\n ** module chunks = 0\n **/","var Request = require('./Request.js');\nvar Promise = require('pinkyswear');\nvar extend = require('extend');\nvar JWTUtils = require('./JWTUtils');\nvar utils = require('./Utils');\nvar Resource = require('./Resource');\nvar Uploader = require('./Uploader');\nvar Cache = require('./Cache');\n\n/**\n * IngestAPI Object\n * @class\n * @param {object}  options        Options to override the default.\n * @param {string}  options.host   Override the default live host.\n * @param {string}  options.token  Auth token to use for requests.\n */\nfunction IngestAPI (options) {\n\n  this.defaults = {\n    'host': 'https://api.ingest.io',\n    'cacheAge': 300000, // 5 minutes\n    'networks': '/networks',\n    'networksKeys': '/networks/keys',\n    'networksKeysById': '/networks/keys/<%=id%>',\n    'inputs': '/encoding/inputs',\n    'inputsById' : '/encoding/inputs/<%=id%>',\n    'inputsUpload': '/encoding/inputs/<%=id%>/upload<%=method%>',\n    'inputsUploadSign': '/encoding/inputs/<%=id%>/upload/sign<%=method%>',\n    'inputsUploadComplete': '/encoding/inputs/<%=id%>/upload/complete',\n    'inputsUploadAbort': '/encoding/inputs/<%=id%>/upload/abort',\n    'uploadMethods': {\n      'param': '?type=',\n      'singlePart': 'amazon',\n      'multiPart': 'amazonMP'\n    },\n    'currentUserInfo': '/users/me'\n  };\n\n  // Create a config object by extending the defaults with the pass options.\n  this.config = extend(true, {}, this.defaults, options);\n\n  this.token = null;\n\n  if (this.config.token) {\n    // Store the token for future use.\n    this.setToken(this.config.token);\n  }\n\n  /* Exposed for testing */\n  this.request = Request;\n  this.JWTUtils = JWTUtils;\n  this.utils = utils;\n  this.resource = Resource;\n  this.uploader = Uploader;\n\n  this.cache = new Cache(this.config.cacheAge);\n\n  this.videos = new Resource({\n    host: this.config.host,\n    resource: 'videos',\n    tokenSource: this.getToken.bind(this),\n    cache: this.cache\n  });\n\n  this.playlists = new Resource({\n    host: this.config.host,\n    resource: 'playlists',\n    tokenSource: this.getToken.bind(this),\n    cache: this.cache\n  });\n\n  this.inputs = new Resource({\n    host: this.config.host,\n    resource: 'encoding/inputs',\n    tokenSource: this.getToken.bind(this),\n    cache: this.cache\n  });\n\n}\n/** Token **/\n/**\n * Set the auth token to use.\n * @param   {String}        token Auth token to use.\n */\nIngestAPI.prototype.setToken = function (token) {\n\n  // Make sure a valid value is passed.\n  if (typeof token !== 'string') {\n    throw new Error('IngestAPI requires an authentication token passed as a string.');\n  }\n\n  this.token = token;\n};\n\n/**\n * Return the current auth token.\n * @return  {String}        Current auth token, or null if a token has not been set.\n */\nIngestAPI.prototype.getToken = function () {\n  return this.token;\n};\n\n/** Network Information **/\n\n/**\n * Get the current network primary key in RSA format.\n * @return {Promise} Promise/A+ spec which resolves with the primary network key.\n */\nIngestAPI.prototype.getNetworkSecureKeys = function () {\n  return new Request({\n    url: this.config.host + this.config.networksKeys,\n    token: this.getToken()\n  });\n};\n\n/**\n * Adds a new secure key to the current network.\n * @param {object}  data        The object containing data for the secure key entry.\n * @param {string}  data.title  Optional. The title of the secure key. Will default to \"Default Key Title\"\n * @param {string}  data.key    The public key in RSA format.\n *\n * @return {Promise}          A promise which resolves when the request is complete.\n */\nIngestAPI.prototype.addNetworkSecureKey = function (data) {\n  if (typeof data !== 'object') {\n    return utils.promisify(false,\n      'IngestAPI addNetworkSecureKey requires data to be passed as an object.');\n  }\n\n  // The title must be a string.\n  if (typeof data.title !== 'string') {\n    data.title = '';\n  }\n\n  if (typeof data.key !== 'string') {\n    return utils.promisify(false,\n      'IngestAPI addNetworkSecureKey requires that the key be a string in RSA public key format.');\n  }\n\n  return new Request({\n    url: this.config.host + this.config.networksKeys,\n    token: this.getToken(),\n    method: 'POST',\n    data: data\n  });\n};\n\n/**\n * Retrieves a single network secure key entry based on the UUID given.\n * @param {string}  id  The UUID of the secure key entry.\n *\n * @return {Promise} A promise which resolves when the request is complete.\n */\nIngestAPI.prototype.getNetworkSecureKeyById = function (id) {\n  var tokens, url;\n\n  if (typeof id !== 'string') {\n    return utils.promisify(false,\n      'IngestAPI getNetworkSecureKeyById requires an id to be passed as a string.');\n  }\n\n  tokens = {\n    id: id\n  };\n\n  url = utils.parseTokens(this.config.host + this.config.networksKeysById, tokens);\n\n  return new Request({\n    url: url,\n    token: this.getToken()\n  });\n};\n\n/**\n * Updates an individual secure key entry in the current network.\n * @param {object}  data        The object containing data for the secure key entry.\n * @param {string}  data.title  The title for the current network.\n *\n * @return {Promise} A promise which resolves when the request is complete.\n */\nIngestAPI.prototype.updateNetworkSecureKey = function (data) {\n  var tokens, url;\n\n  if (typeof data !== 'object') {\n    return utils.promisify(false,\n      'IngestAPI updateNetworkSecureKeyById requires data to be passed as an object.');\n  }\n\n  if (typeof data.id !== 'string') {\n    return utils.promisify(false,\n      'IngestAPI updateNetworkSecureKeyById requires a param \"id\" to be a string.');\n  }\n\n  if (typeof data.title !== 'string') {\n    data.title = '';\n  }\n\n  tokens = {\n    id: data.id\n  };\n\n  url = utils.parseTokens(this.config.host + this.config.networksKeysById, tokens);\n\n  return new Request({\n    url: url,\n    token: this.getToken(),\n    method: 'PATCH',\n    data: data\n  });\n};\n\n/**\n * Deletes a single network secure key entry based on the UUID given.\n * @param {string}  id  The UUID of the secure key entry.\n *\n * @return {Promise} A promise which resolves when the request is complete.\n */\nIngestAPI.prototype.deleteNetworkSecureKeyById = function (id) {\n  var tokens, url;\n\n  if (typeof id !== 'string') {\n    return utils.promisify(false,\n      'IngestAPI deleteNetworkSecureKeyById requires an id to be passed as a string.');\n  }\n\n  tokens = {\n    id: id\n  };\n\n  url = utils.parseTokens(this.config.host + this.config.networksKeysById, tokens);\n\n  return new Request({\n    url: url,\n    token: this.getToken(),\n    method: 'DELETE'\n  });\n};\n\n/** User Information **/\n\n/*\n * Retrieve information for the current user.\n * @return {object} A data object representing the user.\n */\nIngestAPI.prototype.getCurrentUserInfo = function () {\n  return new Request({\n    url: this.config.host + this.config.currentUserInfo,\n    token: this.getToken()\n  });\n};\n\n/**\n * Create a new input and upload a file.\n * @param  {File}   file    File to upload.\n * @return {Promise} A promise which resolves when the upload is complete.\n */\nIngestAPI.prototype.upload = function (file) {\n  return new Uploader({\n    file: file,\n    api: this,\n    host: this.config.host\n  });\n};\n\nmodule.exports = IngestAPI;\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./src/IngestAPI.js\n ** module id = 1\n ** module chunks = 0\n **/","var Promise = require('pinkyswear');\nvar extend = require('extend');\n\nvar JWTUtils = require('./JWTUtils');\n\nvar VALID_RESPONSE_CODES = [200, 201, 202, 204];\n\n/**\n * A wrapper around the XMLHttpRequest object.\n * @param {object}  options         Options for the request.\n * @param {boolean} options.async   Whether to perform the request asynchronously\n * @param {string}  options.method  REST verb to use for the request.\n * @param {string}  options.url     URL for the request.\n *\n * @return {Promise} A promise which resolves when the request is complete.\n */\nvar Request = function (options) {\n\n  this.defaults = {\n    async: true,\n    method: 'GET'\n  };\n\n  this.promise = Promise();\n\n  // Create the XHR object for this request.\n  this.request = new XMLHttpRequest();\n\n  // Set up event listeners for this request.\n  this.setupListeners();\n\n  // Todo, merge some defaults with this.\n  this.options = extend(true, this.defaults, options);\n\n  // Make sure a url is passed before attempting to make the request.\n  if (!this.options.url) {\n    this.requestError('Request Error : a url is required to make the request.');\n    return this.promise;\n  }\n\n  // Make the actual request.\n  this.makeRequest();\n\n  // Return the promise.\n  return this.promise;\n\n};\n\n/**\n * Add event listeners to the XMLHttpRequest object.\n */\nRequest.prototype.setupListeners = function () {\n  this.request.onreadystatechange = this.readyStateChange.bind(this);\n};\n\n/**\n * Execute the open and send of the XMLHttpRequest\n */\nRequest.prototype.makeRequest = function () {\n\n  var postData = this.preparePostData(this.options.data);\n  var headers = this.options.headers;\n  var hasContentType = headers && headers.hasOwnProperty('Content-Type');\n\n  if (!postData.success) {\n    this.requestError('Request Error : error preparing post data.');\n    return;\n  }\n\n  this.request.open(this.options.method, this.options.url, this.options.async);\n\n  if (headers) {\n    this.applyRequestHeaders(headers);\n  }\n\n  // Make the token optional.\n  if (this.options.token) {\n\n    // If there is a token present ensure that it's still valid.\n    if (JWTUtils.isExpired(this.options.token)) {\n      this.requestError('Request Error : token is expired.');\n      return;\n    }\n\n    this.request.setRequestHeader('Authorization', this.options.token);\n\n  }\n\n  // Set the default content type when posting data.\n  if (postData.data && postData.type === 'JSON' && !hasContentType) {\n    this.request.setRequestHeader('Content-Type', 'application/json; charset=utf-8');\n  }\n\n  // If there is data then we need to pass that along with the request.\n  if (postData.data) {\n    this.request.send(postData.data);\n  } else {\n    this.request.send();\n  }\n\n};\n\n/**\n * Stringify the post data if it is present.\n * @param  {object} data Object to be parsed.\n * @return {object}      Result object with the parsed string, and a success boolean flag.\n */\nRequest.prototype.preparePostData = function (data) {\n\n  var result = {\n    success: true,\n    data: data,\n    type: 'JSON'\n  };\n\n  // In the case of file uploads, all FormData to be passed to the request.\n  if (data instanceof FormData) {\n    result.type = 'FormData';\n    return result;\n  }\n\n  // If the data is populated, and its not already a string parse it.\n  if (data) {\n    try {\n      result.data = JSON.stringify(data);\n    } catch (error) {\n      result.success = false;\n      result.data = null;\n    }\n  }\n\n  return result;\n\n};\n\n/**\n * Apply any supplied headers to the request object.\n * @param  {object} headers Array of headers to apply to the request object.\n */\nRequest.prototype.applyRequestHeaders = function (headers) {\n\n  var key, i;\n  var keys = Object.keys(headers);\n  var keysLength = keys.length;\n\n  // Loop through and add the keys to the requestHeaders.\n  for (i = 0; i < keysLength; i++) {\n    key = keys[i];\n    this.request.setRequestHeader(key, headers[key]);\n  }\n\n};\n\n/**\n * Handle the completion of the request and fulfill the promise.\n * @param  {String} Response test of the request.\n */\nRequest.prototype.requestComplete = function (response) {\n\n  // Process the result.\n  this.response = this.processResponse(response);\n\n  // Either resolve or reject the promise.\n  this.promise(!this.response.data.error, [this.response]);\n\n};\n\n/**\n * Process the response and parse certain content types.\n * @param  {*}  response  Response data from request.\n * @return {*}            Processed response data.\n */\nRequest.prototype.processResponse = function (response) {\n  var responseType = this.request.getResponseHeader('Content-Type');\n  var result = response;\n\n  // Parse JSON if the result is JSON.\n  if (responseType && responseType.indexOf('application/json') !== -1) {\n    try {\n      result = JSON.parse(response);\n    } catch (error) {\n      result = {\n        error: 'JSON parsing failed. ' + error.stack\n      };\n    }\n  }\n\n  return {\n    data: result,\n    headers: this.request.getResponseHeader.bind(this.request),\n    statusCode: this.request.status\n  };\n\n};\n\n/**\n * Resolve the promise.\n * @param  {String} message   Error message.\n */\nRequest.prototype.requestError = function (message) {\n  // Reject the promise.\n  this.promise(false, [message]);\n};\n\n/**\n * Handle ready state change events.\n */\nRequest.prototype.readyStateChange = function () {\n\n  // Request is complete.\n  if (this.request.readyState === 4) {\n\n    // Check if the final response code is valid.\n    if (this.isValidResponseCode(this.request.status)) {\n      this.requestComplete(this.request.responseText);\n    } else {\n      this.requestError('Invalid response code.');\n    }\n\n  }\n\n};\n\n/**\n * Validate the current response code to see if the request was a success.\n * @param  {String}  responseCode Response Code.\n * @return {Boolean}              Should this be treated as a successful response code.\n */\nRequest.prototype.isValidResponseCode = function (responseCode) {\n\n  var result = false,\n    responseCodeCount = VALID_RESPONSE_CODES.length,\n    i;\n\n  // Check if the supplied code is in our list of valid codes.\n  for (i = 0; i < responseCodeCount; i++) {\n\n    if (responseCode === VALID_RESPONSE_CODES[i]) {\n      result = true;\n      break;\n    }\n\n  }\n\n  return result;\n\n};\n\nmodule.exports = Request;\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./src/Request.js\n ** module id = 2\n ** module chunks = 0\n **/","/*\n * PinkySwear.js 2.2.2 - Minimalistic implementation of the Promises/A+ spec\n * \n * Public Domain. Use, modify and distribute it any way you like. No attribution required.\n *\n * NO WARRANTY EXPRESSED OR IMPLIED. USE AT YOUR OWN RISK.\n *\n * PinkySwear is a very small implementation of the Promises/A+ specification. After compilation with the\n * Google Closure Compiler and gzipping it weighs less than 500 bytes. It is based on the implementation for \n * Minified.js and should be perfect for embedding. \n *\n *\n * PinkySwear has just three functions.\n *\n * To create a new promise in pending state, call pinkySwear():\n *         var promise = pinkySwear();\n *\n * The returned object has a Promises/A+ compatible then() implementation:\n *          promise.then(function(value) { alert(\"Success!\"); }, function(value) { alert(\"Failure!\"); });\n *\n *\n * The promise returned by pinkySwear() is a function. To fulfill the promise, call the function with true as first argument and\n * an optional array of values to pass to the then() handler. By putting more than one value in the array, you can pass more than one\n * value to the then() handlers. Here an example to fulfill a promsise, this time with only one argument: \n *         promise(true, [42]);\n *\n * When the promise has been rejected, call it with false. Again, there may be more than one argument for the then() handler:\n *         promise(true, [6, 6, 6]);\n *         \n * You can obtain the promise's current state by calling the function without arguments. It will be true if fulfilled,\n * false if rejected, and otherwise undefined.\n * \t\t   var state = promise(); \n * \n * https://github.com/timjansen/PinkySwear.js\n */\n(function(target) {\n\tvar undef;\n\n\tfunction isFunction(f) {\n\t\treturn typeof f == 'function';\n\t}\n\tfunction isObject(f) {\n\t\treturn typeof f == 'object';\n\t}\n\tfunction defer(callback) {\n\t\tif (typeof setImmediate != 'undefined')\n\t\t\tsetImmediate(callback);\n\t\telse if (typeof process != 'undefined' && process['nextTick'])\n\t\t\tprocess['nextTick'](callback);\n\t\telse\n\t\t\tsetTimeout(callback, 0);\n\t}\n\n\ttarget[0][target[1]] = function pinkySwear(extend) {\n\t\tvar state;           // undefined/null = pending, true = fulfilled, false = rejected\n\t\tvar values = [];     // an array of values as arguments for the then() handlers\n\t\tvar deferred = [];   // functions to call when set() is invoked\n\n\t\tvar set = function(newState, newValues) {\n\t\t\tif (state == null && newState != null) {\n\t\t\t\tstate = newState;\n\t\t\t\tvalues = newValues;\n\t\t\t\tif (deferred.length)\n\t\t\t\t\tdefer(function() {\n\t\t\t\t\t\tfor (var i = 0; i < deferred.length; i++)\n\t\t\t\t\t\t\tdeferred[i]();\n\t\t\t\t\t});\n\t\t\t}\n\t\t\treturn state;\n\t\t};\n\n\t\tset['then'] = function (onFulfilled, onRejected) {\n\t\t\tvar promise2 = pinkySwear(extend);\n\t\t\tvar callCallbacks = function() {\n\t    \t\ttry {\n\t    \t\t\tvar f = (state ? onFulfilled : onRejected);\n\t    \t\t\tif (isFunction(f)) {\n\t\t   \t\t\t\tfunction resolve(x) {\n\t\t\t\t\t\t    var then, cbCalled = 0;\n\t\t   \t\t\t\t\ttry {\n\t\t\t\t   \t\t\t\tif (x && (isObject(x) || isFunction(x)) && isFunction(then = x['then'])) {\n\t\t\t\t\t\t\t\t\t\tif (x === promise2)\n\t\t\t\t\t\t\t\t\t\t\tthrow new TypeError();\n\t\t\t\t\t\t\t\t\t\tthen['call'](x,\n\t\t\t\t\t\t\t\t\t\t\tfunction() { if (!cbCalled++) resolve.apply(undef,arguments); } ,\n\t\t\t\t\t\t\t\t\t\t\tfunction(value){ if (!cbCalled++) promise2(false,[value]);});\n\t\t\t\t   \t\t\t\t}\n\t\t\t\t   \t\t\t\telse\n\t\t\t\t   \t\t\t\t\tpromise2(true, arguments);\n\t\t   \t\t\t\t\t}\n\t\t   \t\t\t\t\tcatch(e) {\n\t\t   \t\t\t\t\t\tif (!cbCalled++)\n\t\t   \t\t\t\t\t\t\tpromise2(false, [e]);\n\t\t   \t\t\t\t\t}\n\t\t   \t\t\t\t}\n\t\t   \t\t\t\tresolve(f.apply(undef, values || []));\n\t\t   \t\t\t}\n\t\t   \t\t\telse\n\t\t   \t\t\t\tpromise2(state, values);\n\t\t\t\t}\n\t\t\t\tcatch (e) {\n\t\t\t\t\tpromise2(false, [e]);\n\t\t\t\t}\n\t\t\t};\n\t\t\tif (state != null)\n\t\t\t\tdefer(callCallbacks);\n\t\t\telse\n\t\t\t\tdeferred.push(callCallbacks);\n\t\t\treturn promise2;\n\t\t};\n        if(extend){\n            set = extend(set);\n        }\n\t\treturn set;\n\t};\n})(typeof module == 'undefined' ? [window, 'pinkySwear'] : [module, 'exports']);\n\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./~/pinkyswear/pinkyswear.js\n ** module id = 3\n ** module chunks = 0\n **/","module.exports = function(module) {\r\n\tif(!module.webpackPolyfill) {\r\n\t\tmodule.deprecate = function() {};\r\n\t\tmodule.paths = [];\r\n\t\t// module.parent = undefined by default\r\n\t\tmodule.children = [];\r\n\t\tmodule.webpackPolyfill = 1;\r\n\t}\r\n\treturn module;\r\n}\r\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** (webpack)/buildin/module.js\n ** module id = 4\n ** module chunks = 0\n **/","var nextTick = require('process/browser.js').nextTick;\nvar apply = Function.prototype.apply;\nvar slice = Array.prototype.slice;\nvar immediateIds = {};\nvar nextImmediateId = 0;\n\n// DOM APIs, for completeness\n\nexports.setTimeout = function() {\n  return new Timeout(apply.call(setTimeout, window, arguments), clearTimeout);\n};\nexports.setInterval = function() {\n  return new Timeout(apply.call(setInterval, window, arguments), clearInterval);\n};\nexports.clearTimeout =\nexports.clearInterval = function(timeout) { timeout.close(); };\n\nfunction Timeout(id, clearFn) {\n  this._id = id;\n  this._clearFn = clearFn;\n}\nTimeout.prototype.unref = Timeout.prototype.ref = function() {};\nTimeout.prototype.close = function() {\n  this._clearFn.call(window, this._id);\n};\n\n// Does not start the time, just sets up the members needed.\nexports.enroll = function(item, msecs) {\n  clearTimeout(item._idleTimeoutId);\n  item._idleTimeout = msecs;\n};\n\nexports.unenroll = function(item) {\n  clearTimeout(item._idleTimeoutId);\n  item._idleTimeout = -1;\n};\n\nexports._unrefActive = exports.active = function(item) {\n  clearTimeout(item._idleTimeoutId);\n\n  var msecs = item._idleTimeout;\n  if (msecs >= 0) {\n    item._idleTimeoutId = setTimeout(function onTimeout() {\n      if (item._onTimeout)\n        item._onTimeout();\n    }, msecs);\n  }\n};\n\n// That's not how node.js implements it but the exposed api is the same.\nexports.setImmediate = typeof setImmediate === \"function\" ? setImmediate : function(fn) {\n  var id = nextImmediateId++;\n  var args = arguments.length < 2 ? false : slice.call(arguments, 1);\n\n  immediateIds[id] = true;\n\n  nextTick(function onNextTick() {\n    if (immediateIds[id]) {\n      // fn.call() is faster so we optimize for the common use-case\n      // @see http://jsperf.com/call-apply-segu\n      if (args) {\n        fn.apply(null, args);\n      } else {\n        fn.call(null);\n      }\n      // Prevent ids from leaking\n      exports.clearImmediate(id);\n    }\n  });\n\n  return id;\n};\n\nexports.clearImmediate = typeof clearImmediate === \"function\" ? clearImmediate : function(id) {\n  delete immediateIds[id];\n};\n\n\n/*****************\n ** WEBPACK FOOTER\n ** (webpack)/~/node-libs-browser/~/timers-browserify/main.js\n ** module id = 5\n ** module chunks = 0\n **/","// shim for using process in browser\n\nvar process = module.exports = {};\nvar queue = [];\nvar draining = false;\nvar currentQueue;\nvar queueIndex = -1;\n\nfunction cleanUpNextTick() {\n    draining = false;\n    if (currentQueue.length) {\n        queue = currentQueue.concat(queue);\n    } else {\n        queueIndex = -1;\n    }\n    if (queue.length) {\n        drainQueue();\n    }\n}\n\nfunction drainQueue() {\n    if (draining) {\n        return;\n    }\n    var timeout = setTimeout(cleanUpNextTick);\n    draining = true;\n\n    var len = queue.length;\n    while(len) {\n        currentQueue = queue;\n        queue = [];\n        while (++queueIndex < len) {\n            if (currentQueue) {\n                currentQueue[queueIndex].run();\n            }\n        }\n        queueIndex = -1;\n        len = queue.length;\n    }\n    currentQueue = null;\n    draining = false;\n    clearTimeout(timeout);\n}\n\nprocess.nextTick = function (fun) {\n    var args = new Array(arguments.length - 1);\n    if (arguments.length > 1) {\n        for (var i = 1; i < arguments.length; i++) {\n            args[i - 1] = arguments[i];\n        }\n    }\n    queue.push(new Item(fun, args));\n    if (queue.length === 1 && !draining) {\n        setTimeout(drainQueue, 0);\n    }\n};\n\n// v8 likes predictible objects\nfunction Item(fun, array) {\n    this.fun = fun;\n    this.array = array;\n}\nItem.prototype.run = function () {\n    this.fun.apply(null, this.array);\n};\nprocess.title = 'browser';\nprocess.browser = true;\nprocess.env = {};\nprocess.argv = [];\nprocess.version = ''; // empty string to avoid regexp issues\nprocess.versions = {};\n\nfunction noop() {}\n\nprocess.on = noop;\nprocess.addListener = noop;\nprocess.once = noop;\nprocess.off = noop;\nprocess.removeListener = noop;\nprocess.removeAllListeners = noop;\nprocess.emit = noop;\n\nprocess.binding = function (name) {\n    throw new Error('process.binding is not supported');\n};\n\nprocess.cwd = function () { return '/' };\nprocess.chdir = function (dir) {\n    throw new Error('process.chdir is not supported');\n};\nprocess.umask = function() { return 0; };\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** (webpack)/~/node-libs-browser/~/process/browser.js\n ** module id = 6\n ** module chunks = 0\n **/","'use strict';\n\nvar hasOwn = Object.prototype.hasOwnProperty;\nvar toStr = Object.prototype.toString;\n\nvar isArray = function isArray(arr) {\n\tif (typeof Array.isArray === 'function') {\n\t\treturn Array.isArray(arr);\n\t}\n\n\treturn toStr.call(arr) === '[object Array]';\n};\n\nvar isPlainObject = function isPlainObject(obj) {\n\tif (!obj || toStr.call(obj) !== '[object Object]') {\n\t\treturn false;\n\t}\n\n\tvar hasOwnConstructor = hasOwn.call(obj, 'constructor');\n\tvar hasIsPrototypeOf = obj.constructor && obj.constructor.prototype && hasOwn.call(obj.constructor.prototype, 'isPrototypeOf');\n\t// Not own constructor property must be Object\n\tif (obj.constructor && !hasOwnConstructor && !hasIsPrototypeOf) {\n\t\treturn false;\n\t}\n\n\t// Own properties are enumerated firstly, so to speed up,\n\t// if last one is own, then all properties are own.\n\tvar key;\n\tfor (key in obj) {/**/}\n\n\treturn typeof key === 'undefined' || hasOwn.call(obj, key);\n};\n\nmodule.exports = function extend() {\n\tvar options, name, src, copy, copyIsArray, clone,\n\t\ttarget = arguments[0],\n\t\ti = 1,\n\t\tlength = arguments.length,\n\t\tdeep = false;\n\n\t// Handle a deep copy situation\n\tif (typeof target === 'boolean') {\n\t\tdeep = target;\n\t\ttarget = arguments[1] || {};\n\t\t// skip the boolean and the target\n\t\ti = 2;\n\t} else if ((typeof target !== 'object' && typeof target !== 'function') || target == null) {\n\t\ttarget = {};\n\t}\n\n\tfor (; i < length; ++i) {\n\t\toptions = arguments[i];\n\t\t// Only deal with non-null/undefined values\n\t\tif (options != null) {\n\t\t\t// Extend the base object\n\t\t\tfor (name in options) {\n\t\t\t\tsrc = target[name];\n\t\t\t\tcopy = options[name];\n\n\t\t\t\t// Prevent never-ending loop\n\t\t\t\tif (target !== copy) {\n\t\t\t\t\t// Recurse if we're merging plain objects or arrays\n\t\t\t\t\tif (deep && copy && (isPlainObject(copy) || (copyIsArray = isArray(copy)))) {\n\t\t\t\t\t\tif (copyIsArray) {\n\t\t\t\t\t\t\tcopyIsArray = false;\n\t\t\t\t\t\t\tclone = src && isArray(src) ? src : [];\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tclone = src && isPlainObject(src) ? src : {};\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\t// Never move original objects, clone them\n\t\t\t\t\t\ttarget[name] = extend(deep, clone, copy);\n\n\t\t\t\t\t// Don't bring in undefined values\n\t\t\t\t\t} else if (typeof copy !== 'undefined') {\n\t\t\t\t\t\ttarget[name] = copy;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\t// Return the modified object\n\treturn target;\n};\n\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./~/extend/index.js\n ** module id = 7\n ** module chunks = 0\n **/","/**\n * UTILS for dealing with jwt tokens.\n */\n\n/**\n * Parse the payload out of the JWT token.\n * @param  {string} token JWT Token.\n * @return {object}       Parsed payload object.\n */\nvar parseTokenPayload = function (token) {\n  var parts = token.split('.');\n\n  // Return false if the token is invalid.\n  if (parts.length <= 1) {\n    return false;\n  }\n\n  // decode the payload portion.\n  var payload = window.atob(parts[1]);\n\n  // parse it as JSON\n  payload = JSON.parse(payload);\n\n  return payload;\n};\n\n/**\n * Return true if the provided token has expired.\n * @param  {string}  token JWT Token\n * @return {Boolean}       True if expired.\n */\nmodule.exports.isExpired = function (token) {\n  var data, exp, result, now;\n\n  data = parseTokenPayload(token);\n\n  result = true;\n\n  // Return true if the token does not parse properly.\n  if (!data) {\n    return result;\n  }\n\n  exp = data.exp;\n\n  // Get the unix timestamp in seconds.\n  now = new Date();\n  now = now.getTime() / 1000;\n\n  if (!exp) {\n    return result;\n  }\n\n  // If the expiry data is still in the future.\n  if (now < exp) {\n    result = false;\n  }\n\n  return result;\n\n};\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./src/JWTUtils.js\n ** module id = 8\n ** module chunks = 0\n **/","var Promise = require('pinkyswear');\nvar Utils = {};\n/**\n * Replace all tokens within a given template based on the given key/value pair.\n * @param  {string}     template    Template for the url.\n * @param  {object}     hash        Key/Value pair for replacing tokens in the template.\n *\n * @example\n * var tokens = {\n *  keyInTemplate: 'replacedWith'\n * };\n *\n * var template = '<%=keyInTemplate%>';\n *\n * var result = parseTokens(template, tokens);  // 'replacedWith'\n *\n * @return {string}                 Parsed string.\n */\nUtils.parseTokens = function (template, hash) {\n  if (!template) {\n    return null;\n  }\n\n  var keys = Object.keys(hash);\n  var i;\n  var length = keys.length;\n\n  for (i = 0; i < length; i++) {\n    template = template.replace('<%=' + keys[i] + '%>', hash[keys[i]]);\n  }\n\n  return template;\n};\n\n/**\n * Wrapper function to wrap a value in either a reject or resolve.\n * @param  {boolean} state Rejection or Approval.\n * @param  {*}       value Value to pass back to the promise.\n * @return {Promise}       Promise/A+ spec promise.\n */\nUtils.promisify = function (state, value) {\n  var promise = Promise();\n\n  promise(state, [value]);\n\n  return promise;\n};\n\n/**\n * Wrap an array of promises and return when they have all completed.\n * @param   {Array}     promises  An array of promises to manage.\n * @param   {boolean}   paused    A boolean to pause the execution of the promises.\n * @return  {Promise}             A promise that is resolved when all of the promises have fulfilled.\n */\nUtils.series = function (promises, paused) {\n\n  var promisesCount = promises.length;\n  var all = Promise();\n\n  var state = {\n    total: promisesCount,\n    complete: 0,\n    responses: [],\n    promises: promises,\n    paused: true\n  };\n\n  all.pause = Utils._seriesPause.bind(undefined, all, state);\n  all.resume = Utils._seriesResume.bind(undefined, all, state);\n\n  if (!paused) {\n    state.paused = false;\n    Utils._seriesCallPromise(promises[0], state, all);\n  }\n\n  return all;\n\n};\n\n/**\n * Call a promise and pass the complete and error functions.\n * @param  {Promise} promise Promise to execute on.\n * @param  {Object} state   Persistent state of the series of promises.\n */\nUtils._seriesCallPromise = function (promise, state, all) {\n  // call the promise;\n  if (!state.paused) {\n    promise().then(Utils._seriesComplete.bind(undefined, all, state),\n      Utils._seriesError.bind(undefined, all, state));\n  }\n};\n\n/**\n * Manage the progress of the promises.\n * @private\n * @param  {Promise} all      All promise.\n * @param  {Object}  state    State object used to persist the promise count.\n * @param  {Object}  response Response of the promise being fulfilled.\n */\nUtils._seriesComplete = function (all, state, response) {\n\n  // Increment the complete promises.\n  state.complete++;\n  state.responses.push(response);\n\n  if (state.complete >= state.total) {\n    all(true, state.responses);\n  } else {\n    if (!state.paused) {\n      // Execute the next promise.\n      Utils._seriesCallPromise(state.promises[state.complete], state, all);\n    }\n  }\n\n};\n\n/**\n * Immediately reject the promise if there is an error.\n * @param  {Promise} all  All promise.\n * @param  {Object}  state    State object used to persist the promise count.\n * @param  {Object}  response Response of the promise being fulfilled.\n */\nUtils._seriesError = function (all, state, error) {\n  all(false, [error]);\n};\n\n/**\n * Pause the current series of promises.\n * @param  {Promise} all  All promise.\n * @param  {Object}  state    State object used to persist the promise count.\n */\nUtils._seriesPause = function (all, state) {\n  state.paused = true;\n};\n\n/**\n * Resume the current series of promises.\n * @param  {Promise} all  All promise.\n * @param  {Object}  state    State object used to persist the promise count.\n */\nUtils._seriesResume = function (all, state) {\n  state.paused = false;\n\n  if (state.complete !== state.total) {\n    Utils._seriesCallPromise(state.promises[state.complete], state, all);\n  }\n};\n\nmodule.exports = Utils;\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./src/Utils.js\n ** module id = 9\n ** module chunks = 0\n **/","var Request = require('./Request.js');\nvar Promise = require('pinkyswear');\nvar extend = require('extend');\nvar utils = require('./Utils');\n\n/**\n * Resource Object\n * @class\n */\nfunction Resource (options) {\n\n  this.defaults = {\n    host: 'https://api.ingest.io',\n    all: '/<%=resource%>',\n    byId: '/<%=resource%>/<%=id%>',\n    thumbnails: '/<%=resource%>/<%=id%>/thumbnails',\n    trash: '/<%=resource%>?filter=trashed',\n    deleteMethods: {\n      'permanent': '?permanent=1'\n    },\n    search: '/<%=resource%>?search=<%=input%>',\n    tokenSource: null,\n    resource: null\n  };\n\n  this.config = extend(true, {}, this.defaults, options);\n\n  this.cache = this.config.cache;\n\n}\n\n/**\n * Proxy the request to token source to ensure a value is always returned.\n * @private\n * @return {string} Auth token.\n */\nResource.prototype._tokenSource = function () {\n  var result = null;\n\n  if (this.config.tokenSource) {\n    result = this.config.tokenSource.call();\n  }\n\n  return result;\n};\n\n/**\n * Return a list of the requested resource for the current user and network.\n * @param  {object}   headers   Object representing headers to apply to the request.\n * @return {promise}            A promise which resolves when the request is complete.\n */\nResource.prototype.getAll = function (headers) {\n  var url = utils.parseTokens(this.config.host + this.config.all, {\n    resource: this.config.resource\n  });\n\n  return new Request({\n    url: url,\n    token: this._tokenSource(),\n    headers: headers\n  }).then(this._updateCachedResources.bind(this));\n};\n\n/**\n * Return a resource that matches the supplied id.\n * @param  {string}   id    Resource id.\n * @return {promise}        A promise which resolves when the request is complete.\n */\nResource.prototype.getById = function (id) {\n  var url, cachedResult;\n\n  if (typeof id !== 'string') {\n    return utils.promisify(false,\n      'IngestAPI Resource getById requires a valid id passed as a string.');\n  }\n\n  url = utils.parseTokens(this.config.host + this.config.byId, {\n    resource: this.config.resource,\n    id: id\n  });\n\n  if (this.cache && this.cache.enabled) {\n    // retrieve the cached item.\n    cachedResult = this.cache.retrieve(id);\n  }\n\n  // Return a cached result if we've found one.\n  if (cachedResult) {\n    return utils.promisify(true, {\n      data: cachedResult\n    });\n  } else {\n    return new Request({\n      url: url,\n      token: this._tokenSource()\n    });\n  }\n};\n\n/**\n * Return the resources currently in the trash.\n * @param  {object} headers Headers to be passed along with the request for pagination.\n * @return {promise}         A promise which resolves when the request is complete.\n */\nResource.prototype.getTrashed = function (headers) {\n  var url = utils.parseTokens(this.config.host + this.config.trash, {\n    resource: this.config.resource\n  });\n\n  return new Request({\n    url: url,\n    token: this._tokenSource(),\n    headers: headers\n  });\n};\n\n/**\n * Retrieve all thumbnails for a provided resource id.\n * @param {string} id ID of the resource to retrieve thumbnails for.\n * @return {promise}  A promise which resolves when the request is complete.\n */\nResource.prototype.getThumbnails = function (id) {\n  var url;\n\n  if (typeof id !== 'string') {\n    return utils.promisify(false,\n      'IngestAPI Resource getThumbnails requires an id to be passed as a string.');\n  }\n\n  url = utils.parseTokens(this.config.host + this.config.thumbnails, {\n    resource: this.config.resource,\n    id: id\n  });\n\n  return new Request({\n    url: url,\n    token: this._tokenSource()\n  });\n};\n\n/**\n * Add a new resource.\n * @param   {object}  resource  An object representing the resource to add.\n * @return  {promise}           A promise which resolves when the request is complete.\n */\nResource.prototype.add = function (resource) {\n  var url;\n\n  if (typeof resource !== 'object') {\n    return utils.promisify(false,\n      'IngestAPI Resource add requires a resource passed as an object.');\n  }\n\n  url = utils.parseTokens(this.config.host + this.config.all, {\n    resource: this.config.resource\n  });\n\n  return new Request({\n    url: url,\n    token: this._tokenSource(),\n    method: 'POST',\n    data: resource\n  }).then(this._updateCachedResource.bind(this));\n};\n\n/**\n * Update an existing resource with new content.\n * @param  {object|array} resource  An object or an array of objects representing the resource(s) to be updated.\n * @return {promise}                A promise which resolves when the request is complete.\n */\nResource.prototype.update = function (resource) {\n  if (typeof resource !== 'object') {\n    return utils.promisify(false,\n      'IngestAPI Resource update requires a resource to be passed either as an object or an array of objects.'); //eslint-disable-line\n  }\n\n  // If they've passed an array fire the updateArray function.\n  if (Array.isArray(resource)) {\n    return this._updateResourceArray(resource);\n  } else {\n    return this._updateResource(resource);\n  }\n};\n\n/**\n * Update a single resource.\n * @private\n * @param  {object}   resource  An object representing the resource to update.\n * @return {promise}            A promise which resolves when the request is complete.\n */\nResource.prototype._updateResource = function (resource) {\n  var url = utils.parseTokens(this.config.host + this.config.byId, {\n    resource: this.config.resource,\n    id: resource.id\n  });\n\n  return new Request({\n    url: url,\n    token: this._tokenSource(),\n    method: 'PATCH',\n    data: resource\n  }).then(this._updateCachedResource.bind(this));\n};\n\n/**\n * Update an array of resources.\n * @private\n * @param  {array} resources  An array of resource objects to be updated.\n * @return {promise}          A promise which resolves when the request is complete.\n */\nResource.prototype._updateResourceArray = function (resources) {\n  var url = utils.parseTokens(this.config.host + this.config.all, {\n    resource: this.config.resource\n  });\n\n  return new Request({\n    url: url,\n    token: this._tokenSource(),\n    method: 'PATCH',\n    data: resources\n  }).then(this._updateCachedResources.bind(this));\n};\n\n/**\n * Delete an existing resource\n * @param  {object | array} resource The id, or an array of ids for the resource(s) to be deleted.\n * @return {promise}          A promise which resolves when the request is complete.\n */\nResource.prototype.delete = function (resource) {\n  if (typeof resource !== 'string') {\n    // If they've passed an array fire the updateArray function.\n    if (Array.isArray(resource)) {\n      return this._deleteResourceArray(resource);\n    }\n\n    return utils.promisify(false,\n      'IngestAPI Resource delete requires a resource to be passed either as a string or an array of strings.'); //eslint-disable-line\n  }\n\n  return this._deleteResource(resource);\n};\n\n/**\n * Permanently delete an existing resource.\n * @param  {object | array} resource The id, or an array of ids for the resource(s) to be deleted.\n * @return {promise}          A promise which resolves when the request is complete.\n */\nResource.prototype.permanentDelete = function (resource) {\n  if (typeof resource !== 'string') {\n    // If they've passed an array fire the updateArray function.\n    if (Array.isArray(resource)) {\n      return this._deleteResourceArray(resource, true);\n    }\n\n    return utils.promisify(false,\n      'IngestAPI Resource delete requires a resource to be passed either as a string or an array of strings.'); //eslint-disable-line\n  }\n\n  return this._deleteResource(resource, true);\n};\n\n/**\n * Delete a single resource\n * @private\n * @param  {object}   resource  The id of the resource to be deleted.\n * @param {boolean}  permanent  A flag to permanently delete each video.\n * @return {promise}            A promise which resolves when the request is complete.\n */\nResource.prototype._deleteResource = function (resource, permanent) {\n  var url = utils.parseTokens(this.config.host + this.config.byId, {\n    resource: this.config.resource,\n    id: resource\n  });\n\n  if (permanent === true) {\n    url += this.config.deleteMethods.permanent;\n  }\n\n  return new Request({\n    url: url,\n    token: this._tokenSource(),\n    method: 'DELETE',\n  }).then(this._deleteCachedResource.bind(this, resource));\n};\n\n/**\n * Delete an array of resources\n * @private\n * @param  {array}  resources   An array of resource objects to be deleted.\n * @param {boolean}  permanent  A flag to permanently delete each video.\n * @return {promise}            A promise which resolves when the request is complete.\n */\nResource.prototype._deleteResourceArray = function (resources, permanent) {\n  var url = utils.parseTokens(this.config.host + this.config.all, {\n    resource: this.config.resource\n  });\n\n  if (permanent === true) {\n    url += this.config.deleteMethods.permanent;\n  }\n\n  return new Request({\n    url: url,\n    token: this._tokenSource(),\n    method: 'DELETE',\n    data: resources\n  }).then(this._deleteCachedResources.bind(this, resources));\n};\n\n/**\n * Return a subset of items that match the search terms.\n * @param  {string} input    The search terms to match against.\n * @param  {object} headers  The headers to be passed to the request.\n * @return {Promise}          A promise which resolves when the request is complete.\n */\nResource.prototype.search = function (input, headers) {\n  var url;\n\n  if (typeof input !== 'string') {\n    return utils.promisify(false,\n      'IngestAPI Resource search requires search input to be passed as a string.');\n  }\n\n  url = utils.parseTokens(this.config.host + this.config.search, {\n    resource: this.config.resource,\n    input: input\n  });\n\n  return new Request({\n    url: url,\n    token: this._tokenSource(),\n    headers: headers\n  });\n};\n\n/**\n * Get the total count of resources.\n * @return {promise} A promise which resolves when the request is complete.\n */\nResource.prototype.count = function () {\n  var url = utils.parseTokens(this.config.host + this.config.all, {\n    resource: this.config.resource\n  });\n\n  return new Request({\n    url: url,\n    token: this._tokenSource(),\n    method: 'HEAD'\n  }).then(this._handleCountResponse);\n};\n\n/**\n * Get the total count of resources in the trash.\n * @return {promise} A promise which resolves when the request is complete.\n */\nResource.prototype.trashCount = function () {\n  var url = utils.parseTokens(this.config.host + this.config.trash, {\n    resource: this.config.resource\n  });\n\n  return new Request({\n    url: url,\n    token: this._tokenSource(),\n    method: 'HEAD'\n  }).then(this._handleCountResponse);\n};\n\n/**\n * Return the resource count from the response.\n * @private\n * @param  {object} response Request response object.\n * @return {number}          The resource count.\n */\nResource.prototype._handleCountResponse = function (response) {\n  return parseInt(response.headers('Resource-Count'), 10);\n};\n\n/**\n * Update a single cached resource based on the response data.\n * @param  {object}   response   Response object from the getAll request.\n * @return {response}            Response object from the getAll request.\n */\nResource.prototype._updateCachedResource = function (response) {\n  if (this.cache && this.cache.enabled) {\n    this.cache.save(response.data.id, response.data);\n  }\n\n  return response;\n};\n\n/**\n * Store the returned items in cache.\n * @param  {object}   response   Response object from the getAll request.\n * @return {response}            Response object from the getAll request.\n */\nResource.prototype._updateCachedResources = function (response) {\n  var data = response.data;\n  var dataLength = data.length;\n  var i;\n\n  if (this.cache && this.cache.enabled) {\n\n    for (i = 0; i < dataLength; i++) {\n      this.cache.save(data[i].id, data[i]);\n    }\n\n  }\n\n  return response;\n};\n\n/**\n * Delete a single cached resource.\n * @param  {string} id            ID of the resource to remove.\n * @param  {object}   response    Response object from the getAll request.\n * @return {response}             Response object from the getAll request.\n */\nResource.prototype._deleteCachedResource = function (id, response) {\n  if (this.cache && this.cache.enabled) {\n    this.cache.remove(id);\n  }\n\n  return response;\n};\n\n/**\n * Delete an array of cached resources\n * @param  {array}    ids         Array of resource id's to delete from cache.\n * @param  {object}   response    Response object from the getAll request.\n * @return {response}             Response object from the getAll request.\n */\nResource.prototype._deleteCachedResources = function (ids, response) {\n  var dataLength = ids.length;\n  var i;\n\n  if (this.cache && this.cache.enabled) {\n\n    for (i = 0; i < dataLength; i++) {\n      this.cache.remove(ids[i]);\n    }\n\n  }\n\n  return response;\n};\n\nmodule.exports = Resource;\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./src/Resource.js\n ** module id = 10\n ** module chunks = 0\n **/","var Request = require('./Request.js');\nvar Promise = require('pinkyswear');\nvar extend = require('extend');\nvar utils = require('./Utils.js');\nvar JWTUtils = require('./JWTUtils');\n\n// TODO Add better pause support, uploads should be able to pause right after creation.\n\n/**\n * Create a new upload wrapper.  Manages the entire upload of a file.\n * @class\n * @param   {object}  options                   Configuration options to override the defaults.\n * @param   {object}  options.api               A reference to the parent API instance.\n * @param   {object}  options.file              The file to upload.\n * @param   {object}  options.upload            REST endpoint for creating an input.\n * @param   {object}  options.sign              REST endpoint for signing a blob before upload.\n * @param   {object}  options.uploadComplete    REST endpoint to notify the API that the upload is complete.\n * @param   {object}  options.uploadAbort       REST endpoint to abort the upload.\n */\nfunction Upload (options) {\n\n  this.defaults = {\n    api: null,\n    file: null,\n    upload: '/encoding/inputs/<%=id%>/upload<%=method%>',\n    sign: '/encoding/inputs/<%=id%>/upload/sign<%=method%>',\n    uploadComplete: '/encoding/inputs/<%=id%>/upload/complete',\n    uploadAbort: '/encoding/inputs/<%=id%>/upload/abort',\n    uploadMethods: {\n      param: '?type=',\n      singlePart: 'amazon',\n      multiPart: 'amazonMP'\n    }\n  };\n\n  // Create a config object by extending the defaults with the pass options.\n  this.config = extend(true, {}, this.defaults, options);\n\n  this.api = this.config.api;\n  this.file = this.config.file;\n\n  this.chunks = [];\n  this.chunkSize = 0;\n  this.chunkCount = 0;\n  this.chunksComplete = 0;\n  this.uploadedBytes = 0;\n\n  this.aborted = false;\n  this.paused = false;\n\n  this.fileRecord = {\n    filename: this.file.name,\n    type: this.file.type,\n    size: this.file.size,\n    method: this._checkMultipart(this.file)\n  };\n\n};\n\n/**\n * Register a function to execute when a chunk completes uploading.\n * @param  {Function} callback A callback to execute when progress is made.\n */\nUpload.prototype.progress = function (callback) {\n  this.config.progress = callback.bind(this);\n};\n\n/**\n * Create a new input record and upload the files to amazon.\n * @return  {Promise}         A promise which resolves when the new input record is created and uploaded.\n */\nUpload.prototype.save = function () {\n  return this._create(this.fileRecord)\n    .then(this._initialize.bind(this))\n    .then(this._prepareUpload.bind(this));\n};\n\n/**\n * Call the progress callback and pass the current progress percentage.\n * @private\n * @param  {number} message Current progress percentage.\n */\nUpload.prototype._updateProgress = function (percent, chunkSize) {\n\n  if (!this.config.progress) {\n    return;\n  }\n\n  this.config.progress.call(this, percent, chunkSize);\n};\n\n/**\n * Create a new input record.\n * @private\n * @param   {object}  record  A JSON object representing the input record to create.\n * @return  {Promise}         A promise which resolves when the new input record is created.\n */\nUpload.prototype._create = function (record) {\n\n  if (this.aborted) {\n    return utils.promisify(false, 'upload aborted');\n  }\n\n  return this.api.inputs.add([record]).then(this._createSuccess.bind(this));\n};\n\n/**\n * Return the data object from the response.\n * @private\n * @param  {JSON}   response  JSON response containing the new input record id.\n * @return {string}           new input record id.\n */\nUpload.prototype._createSuccess = function (response) {\n\n  this._updateProgress(0);\n  this.fileRecord.id = response.data[0].id;\n\n  return this.fileRecord.id;\n};\n\n/**\n * Initializes an Input for upload\n * @private\n * @return {Promise} A promise which resolves when the request is complete.\n */\nUpload.prototype._initialize = function () {\n\n  var url;\n  var tokens;\n  var signing = '';\n\n  if (this.aborted) {\n    return utils.promisify(false, 'upload aborted');\n  }\n\n  if (!this.fileRecord.method) {\n    signing = this.config.uploadMethods.param + this.config.uploadMethods.singlePart;\n  }\n\n  tokens = {\n    id: this.fileRecord.id,\n    method: signing\n  };\n\n  url = utils.parseTokens(this.api.config.host + this.config.upload, tokens);\n\n  return new Request({\n    url: url,\n    token: this.api.getToken(),\n    method: 'POST',\n    data: this.fileRecord\n  }).then(this._initializeComplete.bind(this));\n\n};\n\n/**\n * Store the information returned from the initialize request.\n * @private\n */\nUpload.prototype._initializeComplete = function (response) {\n  this.fileRecord.key = response.data.key;\n  this.fileRecord.uploadId = response.data.uploadId;\n  this.chunkSize = response.data.pieceSize;\n  this.chunkCount = response.data.pieceCount;\n};\n\n/**\n * Setup the upload depending on its type, single or multi part.\n * @return {Promise} A promise which resolves when all of the pieces have completed uploading.\n */\nUpload.prototype._prepareUpload = function () {\n  if (!this.fileRecord.method) {\n    // Singlepart.\n    return this._uploadFile()\n      .then(this._onCompleteUpload.bind(this));\n  } else {\n    // Multipart.\n    return this._createChunks()\n      .then(this._completeUpload.bind(this));\n  }\n};\n\n/**\n * Break a file into blobs and create a chunk object for each piece.\n * @private\n * @return {Promise} A promise which resolves when all of the pieces have completed uploading.\n */\nUpload.prototype._createChunks = function () {\n  var sliceMethod = this._getSliceMethod(this.file);\n  var i, blob, chunk,\n    chunkPromises = [];\n\n  if (this.aborted) {\n    this.abort();\n    return utils.promisify(false, 'upload aborted');\n  }\n\n  for (i = 0; i < this.chunkCount; i++) {\n\n    blob = this.file[sliceMethod](i * this.chunkSize, (i + 1) * this.chunkSize);\n\n    chunk = {\n      partNumber: i + 1,\n      data: blob\n    };\n\n    this.chunks.push(chunk);\n\n    chunkPromises.push(this._uploadChunk.bind(this, chunk));\n\n  }\n\n  // Store a reference for pausing and resuming.\n  this.currentUpload = utils.series(chunkPromises, this.paused);\n\n  return this.currentUpload;\n};\n\n/**\n * Create a promise chain for each chunk to be uploaded.\n * @private\n * @return {Promise} A promise which resolves when the request is complete.\n */\nUpload.prototype._uploadChunk = function (chunk) {\n  return this._signUpload(chunk)\n    .then(this._sendUpload.bind(this, chunk))\n    .then(this._completeChunk.bind(this, chunk));\n};\n\n/**\n * Create a promise chain for a single part file upload.\n * @param  {file}   file    A file reference to upload.\n * @return {Promise} A promise which resolves when the request is complete.\n */\nUpload.prototype._uploadFile = function () {\n  var chunk = {\n    data: this.file\n  };\n\n  return this._signUpload(chunk)\n    .then(this._sendUpload.bind(this, chunk))\n    .then(this._updateProgress.bind(this, 100));\n};\n\n/**\n * Make a request and sign the chunk to be uploaded.\n * @private\n * @param  {object}   chunk           Information about the chunk to be uploaded.\n * @return {Promise}                  A promise which resolves when the request is complete.\n */\nUpload.prototype._signUpload = function (chunk) {\n  var url;\n  var signing = '';\n  var headers = {};\n\n  // Set the part number for the current chunk.\n  if (chunk.partNumber) {\n    this.fileRecord.partNumber = chunk.partNumber;\n  }\n\n  headers['Content-Type'] = 'multipart/form-data';\n\n  if (!this.fileRecord.method) {\n    signing = this.config.uploadMethods.param + this.config.uploadMethods.singlePart;\n  }\n\n  url = utils.parseTokens(this.api.config.host + this.config.sign, {\n    id: this.fileRecord.id,\n    method: signing\n  });\n\n  return new Request({\n    url: url,\n    token: this.api.getToken(),\n    method: 'POST',\n    headers: headers,\n    data: this.fileRecord\n  });\n};\n\n/**\n * Send the upload to the server.\n * @private\n * @param   {object} upload  An object representing the upload to send to the server.\n * @return  {Promise}       A promise which resolves when the request is complete.\n */\nUpload.prototype._sendUpload = function (upload, response) {\n  var headers = {};\n\n  var formData = new FormData();\n  formData.append('file', upload.data);\n\n  // Set the proper headers to send with the file.\n  headers['Content-Type'] = 'multipart/form-data';\n  headers['Authorization'] = response.data.authHeader;\n  headers['x-amz-date'] = response.data.dateHeader;\n\n  return new Request({\n    url: response.data.url,\n    method: 'PUT',\n    headers: headers,\n    data: formData\n  });\n};\n\n/**\n *  Executed when a chunk is finished uploading.\n *  @private\n */\nUpload.prototype._completeChunk = function (chunk) {\n  var progress;\n\n  this.chunksComplete++;\n  chunk.complete = true;\n\n  this.uploadedBytes += chunk.data.size;\n\n  progress = this.uploadedBytes / this.fileRecord.size;\n  progress = progress * 100;\n  progress = Math.round(progress);\n\n  this._updateProgress(progress, chunk.data.size);\n};\n\n/**\n * Notify the server that the upload is complete.\n *\n * @private\n * @return {Promise} A promise which resolves when the request is complete.\n */\nUpload.prototype._completeUpload = function () {\n  var url;\n  var tokens;\n\n  if (this.aborted) {\n    this.abort();\n    return utils.promisify(false, 'upload aborted');\n  }\n\n  tokens = {\n    id: this.fileRecord.id\n  };\n\n  url = utils.parseTokens(this.api.config.host + this.config.uploadComplete, tokens);\n\n  return new Request({\n    url: url,\n    token: this.api.getToken(),\n    method: 'POST',\n    data: this.fileRecord\n  }).then(this._onCompleteUpload.bind(this));\n};\n\n/**\n * Return the id for the current file record.\n * @private\n * @return {string} ID for the input record that was created.\n */\nUpload.prototype._onCompleteUpload = function () {\n  this.currentUpload = null;\n  return this.fileRecord.id;\n};\n\n/**\n * Completes an input upload\n * @param  {string}  inputId        An id for the input you wish to delete\n * @param  {object}  data           The object containing data for the upload completion.\n * @param  {string}  data.uploadId  The uploadId you wish to complete the upload for\n * @param  {number}  data.key       The key of the upload you wish to complete\n *\n * @return {Promise} A promise which resolves when the request is complete.\n */\nUpload.prototype.abort = function () {\n  var url;\n  var tokens;\n  var signing = '';\n\n  if (this.currentUpload) {\n    this.currentUpload.pause();\n    this.currentUpload = null;\n  }\n\n  if (!this.fileRecord.method) {\n    signing = this.config.uploadMethods.param + this.config.uploadMethods.singlePart;\n  }\n\n  tokens = {\n    id: this.fileRecord.id,\n    method: signing\n  };\n\n  url = utils.parseTokens(this.api.config.host + this.config.uploadAbort, tokens);\n\n  return new Request({\n    url: url,\n    token: this.api.getToken(),\n    method: 'POST',\n    data: this.fileRecord\n  });\n};\n\n/**\n * Pause the current upload.\n */\nUpload.prototype.pause = function () {\n  this.paused = true;\n  if (this.currentUpload) {\n    this.currentUpload.pause();\n  }\n};\n\n/**\n * Resume the current upload.\n */\nUpload.prototype.resume = function () {\n  this.paused = false;\n  if (this.currentUpload) {\n    this.currentUpload.resume();\n  }\n};\n\n/**\n * Check the file size to determine if it should be a multipart upload, returns false for singlepart uploads.\n * @private\n * @param  {file}   file  The file to evaluate.\n * @return {boolean}      True if the file will be uploading using mutlipart upload.\n */\nUpload.prototype._checkMultipart = function (file) {\n  if (!file) {\n    return;\n  }\n\n  return (file.size <= (5 * 1024 * 1024) ? false : true);\n};\n\n/**\n * Function that determines the slice method to be used\n * @private\n * @param {object} file - The file object you wish to determine the slice method for\n * @return {string} sliceMethod - The slice method to use.\n */\nUpload.prototype._getSliceMethod = function (file) {\n  var sliceMethod;\n\n  if ('mozSlice' in file) {\n    sliceMethod = 'mozSlice';\n  } else if ('webkitSlice' in file) {\n    sliceMethod = 'webkitSlice';\n  } else {\n    sliceMethod = 'slice';\n  }\n\n  return sliceMethod;\n};\n\nmodule.exports = Upload;\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./src/Uploader.js\n ** module id = 11\n ** module chunks = 0\n **/","/**\n * A management layer for storing app cache in local storage.\n */\nvar Cache = function (cacheAge) {\n  this.cacheAge = cacheAge;\n  this.enabled = this._checkCacheSupport();\n};\n\n/**\n * Return true if localStorage is supported.\n * @private\n * @return {boolean} True if localStorage is supported.\n */\nCache.prototype._checkCacheSupport = function () {\n\n  var support = 'support';\n\n  try {\n    localStorage.setItem(support, support);\n    localStorage.removeItem(support);\n    return true;\n  } catch (e) {\n    return false;\n  }\n\n};\n\n/**\n * Retrieve the cached result for the provided cacheKey.\n * @param  {string}   cacheKey  Key associated with the cached result.\n * @return {object}             Parse results object.\n */\nCache.prototype.retrieve = function (cacheKey) {\n  var data;\n  var value = null;\n  var expiry;\n\n  try {\n\n    data = localStorage.getItem(cacheKey);\n    data = JSON.parse(data);\n    value = data.value;\n\n    if (data.expiry < Date.now()) {\n      // Cache is expired;\n      localStorage.removeItem(cacheKey);\n      value = null;\n    }\n\n  } catch (error) {\n    // Silent capture so that caching never gets in the way of returning a result.\n    value = null;\n  }\n\n  return value;\n};\n\n/**\n * Remove a result from the cache.\n * @param  {string}   cacheKey  Key associated with the cached result.\n * @return {boolean}            A boolean indicating success of the removal.\n */\nCache.prototype.remove = function (cacheKey) {\n  var result = true;\n\n  try {\n    localStorage.removeItem(cacheKey);\n  } catch (error) {\n    // Silent capture so that caching never gets in the way of returning a result.\n    result = false;\n  }\n\n  return result;\n};\n\n/**\n * Save the new result with its expiry date.\n * @param  {string}   cacheKey Unique cache key for the request.\n * @param  {number}   expiry   Unix timestamp for the expiry.\n * @param  {object}   result   Object to be cached.\n * @return {boolean}            A boolean indicating success of the save.\n */\nCache.prototype.save = function (cacheKey, value) {\n  var result = true;\n  var data = {};\n  var JSONResult;\n\n  try {\n\n    data.expiry = Date.now() + this.cacheAge;\n    data.value = value;\n\n    JSONResult = JSON.stringify(data);\n\n    localStorage.setItem(cacheKey, JSONResult);\n\n  } catch (error) {\n    // Silent capture so that caching never gets in the way of returning a result.\n    result = false;\n  }\n\n  return result;\n};\n\nmodule.exports = Cache;\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./src/Cache.js\n ** module id = 12\n ** module chunks = 0\n **/"],"sourceRoot":""}
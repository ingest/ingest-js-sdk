{"version":3,"sources":["webpack:///webpack/universalModuleDefinition","webpack:///ingest.js","webpack:///webpack/bootstrap 17df153d4a2578748b7e","webpack:///./index.js","webpack:///./src/IngestAPI.js","webpack:///./src/Request.js","webpack:///./~/pinkyswear/pinkyswear.js","webpack:///(webpack)/buildin/module.js","webpack:///(webpack)/~/node-libs-browser/~/timers-browserify/main.js","webpack:///(webpack)/~/node-libs-browser/~/process/browser.js","webpack:///./~/extend/index.js","webpack:///./src/JWTUtils.js"],"names":["root","factory","exports","module","define","amd","this","modules","__webpack_require__","moduleId","installedModules","id","loaded","call","m","c","p","IngestAPI","options","defaults","host","videos","thumbnails","videoById","uploadSign","trash","networks","networksKeys","networksKeysById","uploadMethods","param","singlePart","multiPart","deleteMethods","permanent","search","currentUserInfo","config","extend","token","setToken","request","Request","JWTUtils","Promise","prototype","Error","getToken","getVideos","headers","url","getVideoById","videoId","tokens","parseTokens","promisify","addVideo","videoObject","method","data","updateVideo","video","updateVideos","Array","isArray","_deleteVideos","deleteVideos","permanentlyDeleteVideos","_deleteVideo","deleteVideo","permanentlyDeleteVideo","searchVideos","resource","input","getVideosCount","then","getCountResponse","bind","getTrashedVideos","getTrashedVideosCount","response","parseInt","signUploadBlob","checkObject","validateUploadObject","signing","valid","message","result","key","uploadId","partNumber","hasOwnProperty","template","hash","i","keys","Object","length","replace","state","value","promise","getNetworkSecureKeys","addNetworkSecureKey","title","getNetworkSecureKeyById","updateNetworkSecureKey","deleteNetworkSecureKeyById","getVideoThumbnails","getCurrentUserInfo","VALID_RESPONSE_CODES","async","XMLHttpRequest","setupListeners","makeRequest","requestError","onreadystatechange","readyStateChange","postData","preparePostData","success","open","applyRequestHeaders","isExpired","setRequestHeader","send","JSON","stringify","error","keysLength","requestComplete","processResponse","responseType","getResponseHeader","indexOf","parse","stack","statusCode","status","readyState","isValidResponseCode","responseText","responseCode","responseCodeCount","setImmediate","process","target","isFunction","f","isObject","defer","callback","setTimeout","undef","pinkySwear","values","deferred","set","newState","newValues","onFulfilled","onRejected","promise2","callCallbacks","resolve","x","cbCalled","TypeError","apply","arguments","e","push","webpackPolyfill","deprecate","paths","children","clearImmediate","Timeout","clearFn","_id","_clearFn","nextTick","Function","slice","immediateIds","nextImmediateId","window","clearTimeout","setInterval","clearInterval","timeout","close","unref","ref","enroll","item","msecs","_idleTimeoutId","_idleTimeout","unenroll","_unrefActive","active","_onTimeout","fn","args","cleanUpNextTick","draining","currentQueue","queue","concat","queueIndex","drainQueue","len","run","Item","fun","array","noop","browser","env","argv","version","versions","on","addListener","once","off","removeListener","removeAllListeners","emit","binding","name","cwd","chdir","dir","umask","hasOwn","toStr","toString","arr","isPlainObject","obj","hasOwnConstructor","hasIsPrototypeOf","constructor","src","copy","copyIsArray","clone","deep","parseTokenPayload","parts","split","payload","atob","exp","now","Date","getTime"],"mappings":"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","file":"ingest.js","sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"IngestAPI\"] = factory();\n\telse\n\t\troot[\"IngestAPI\"] = factory();\n})(this, function() {\nreturn \n\n\n/** WEBPACK FOOTER **\n ** webpack/universalModuleDefinition\n **/","(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"IngestAPI\"] = factory();\n\telse\n\t\troot[\"IngestAPI\"] = factory();\n})(this, function() {\nreturn /******/ (function(modules) { // webpackBootstrap\n/******/ \t// The module cache\n/******/ \tvar installedModules = {};\n/******/\n/******/ \t// The require function\n/******/ \tfunction __webpack_require__(moduleId) {\n/******/\n/******/ \t\t// Check if module is in cache\n/******/ \t\tif(installedModules[moduleId])\n/******/ \t\t\treturn installedModules[moduleId].exports;\n/******/\n/******/ \t\t// Create a new module (and put it into the cache)\n/******/ \t\tvar module = installedModules[moduleId] = {\n/******/ \t\t\texports: {},\n/******/ \t\t\tid: moduleId,\n/******/ \t\t\tloaded: false\n/******/ \t\t};\n/******/\n/******/ \t\t// Execute the module function\n/******/ \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n/******/\n/******/ \t\t// Flag the module as loaded\n/******/ \t\tmodule.loaded = true;\n/******/\n/******/ \t\t// Return the exports of the module\n/******/ \t\treturn module.exports;\n/******/ \t}\n/******/\n/******/\n/******/ \t// expose the modules object (__webpack_modules__)\n/******/ \t__webpack_require__.m = modules;\n/******/\n/******/ \t// expose the module cache\n/******/ \t__webpack_require__.c = installedModules;\n/******/\n/******/ \t// __webpack_public_path__\n/******/ \t__webpack_require__.p = \"\";\n/******/\n/******/ \t// Load entry module and return exports\n/******/ \treturn __webpack_require__(0);\n/******/ })\n/************************************************************************/\n/******/ ([\n/* 0 */\n/***/ function(module, exports, __webpack_require__) {\n\n\tmodule.exports = __webpack_require__(1);\n\n\n/***/ },\n/* 1 */\n/***/ function(module, exports, __webpack_require__) {\n\n\tvar Request = __webpack_require__(2);\n\tvar Promise = __webpack_require__(3);\n\tvar extend = __webpack_require__(7);\n\tvar JWTUtils = __webpack_require__(8);\n\t\n\t/**\n\t * IngestAPI Object\n\t * @param {object}  options        Options to override the default.\n\t * @param {string}  options.host   Override the default live host.\n\t * @param {string}  options.token  Auth token to use for requests.\n\t */\n\tfunction IngestAPI (options) {\n\t\n\t  this.defaults = {\n\t    'host': 'https://api.ingest.io',\n\t    'videos': '/videos',\n\t    'thumbnails': '/videos/<%=id%>/thumbnails',\n\t    'videoById': '/videos/<%=id%>',\n\t    'uploadSign': '/videos/<%=id%>/upload/sign<%=method%>',\n\t    'trash': '/videos?filter=trashed',\n\t    'networks': '/networks',\n\t    'networksKeys': '/networks/keys',\n\t    'networksKeysById': '/networks/keys/<%=id%>',\n\t    'uploadMethods': {\n\t      'param': '?type=',\n\t      'singlePart': 'amazon',\n\t      'multiPart': 'amazonMP'\n\t    },\n\t    'deleteMethods': {\n\t      'permanent': '?permanent=1'\n\t    },\n\t    'search': '/<%=resource%>?search=<%=input%>',\n\t    'currentUserInfo': '/users/me'\n\t  };\n\t\n\t  // Create a config object by extending the defaults with the pass options.\n\t  this.config = extend(true, {}, this.defaults, options);\n\t\n\t  if (this.config.token) {\n\t    // Store the token for future use.\n\t    this.setToken(this.config.token);\n\t  }\n\t\n\t  this.request = Request;\n\t  this.JWTUtils = JWTUtils;\n\t\n\t}\n\t\n\t/**\n\t * Set the auth token to use.\n\t * @param   {String}        token Auth token to use.\n\t */\n\tIngestAPI.prototype.setToken = function (token) {\n\t\n\t  // Make sure a valid value is passed.\n\t  if (!token || typeof token !== 'string') {\n\t    throw new Error('IngestAPI requires an authentication token passed as a string.');\n\t  }\n\t\n\t  this.token = token;\n\t\n\t};\n\t\n\t/**\n\t * Return the current auth token.\n\t * @return  {String}        Current auth token.\n\t */\n\tIngestAPI.prototype.getToken = function () {\n\t\n\t  if (!this.token) {\n\t    throw new Error('IngestAPI requires a token to be set.');\n\t  }\n\t\n\t  return this.token;\n\t\n\t};\n\t\n\t/**\n\t * Return a list of videos for the current user and network.\n\t * @param {object} headers Javascript object representing headers to apply to the call.\n\t *\n\t * @return {Promise} A promise which resolves when the request is complete.\n\t */\n\tIngestAPI.prototype.getVideos = function (headers) {\n\t\n\t  return new Request({\n\t    url: this.config.host + this.config.videos,\n\t    token: this.getToken(),\n\t    headers: headers\n\t  });\n\t\n\t};\n\t\n\t/**\n\t * Return a video match the supplied id.\n\t * @param   {String}       videoId ID for the requested video.\n\t *\n\t * @return {Promise} A promise which resolves when the request is complete.\n\t */\n\tIngestAPI.prototype.getVideoById = function (videoId) {\n\t\n\t  var url;\n\t  var tokens;\n\t\n\t  if (!videoId || typeof videoId !== 'string') {\n\t    // Wrap the error in a promise so the user is still catching the errors.\n\t    return this.promisify(false,\n\t      'IngestAPI getVideoById requires a valid videoId as a string.');\n\t  }\n\t\n\t  tokens = {\n\t    id: videoId\n\t  };\n\t\n\t  url = this.parseTokens(this.config.host + this.config.videoById, tokens);\n\t\n\t  return new Request({\n\t    url: url,\n\t    token: this.getToken()\n\t  });\n\t\n\t};\n\t\n\t/**\n\t * Add a new video.\n\t * @param   {object}  videoObject An object representing the video to add.\n\t *\n\t * @return {Promise} A promise which resolves when the request is complete.\n\t */\n\tIngestAPI.prototype.addVideo = function (videoObject) {\n\t\n\t  // Validate the object being passed in.\n\t  if (!videoObject || typeof videoObject !== 'object') {\n\t    // Wrap the error in a promise.\n\t    return this.promisify(false,\n\t      'IngestAPI addVideo requires a video object.');\n\t  }\n\t\n\t  // Return the promise from the request.\n\t  return new Request({\n\t    url: this.config.host + this.config.videos,\n\t    token: this.getToken(),\n\t    method: 'POST',\n\t    data: videoObject\n\t  });\n\t\n\t};\n\t\n\t/**\n\t * Update an existing video with new content.\n\t * @param  {object} video   An object representing the video.\n\t * @return {Promise}        A promise which resolves when the request is complete.\n\t */\n\tIngestAPI.prototype.updateVideo = function (video) {\n\t\n\t  var url;\n\t  var tokens;\n\t\n\t  if (!video || typeof video !== 'object') {\n\t    return this.promisify(false,\n\t      'IngestAPI update requires a video to be passed as an object.');\n\t  }\n\t\n\t  tokens = {\n\t    id: video.id\n\t  };\n\t\n\t  url = this.parseTokens(this.config.host + this.config.videoById, tokens);\n\t\n\t  return new Request({\n\t    url: url,\n\t    token: this.getToken(),\n\t    method: 'PATCH',\n\t    data: video\n\t  });\n\t};\n\t\n\t/**\n\t * Updates a batch of videos in one HTTP request.\n\t * @param {array} videos  An array of video objects.\n\t * @return {Promise}      A promise which resolves when the request is complete.\n\t */\n\tIngestAPI.prototype.updateVideos = function (videos) {\n\t  if (!Array.isArray(videos)) {\n\t    return this.promisify(false,\n\t      'IngestAPI updateVideos requires an array of videos');\n\t  }\n\t\n\t  return new Request({\n\t    url: this.config.host + this.config.videos,\n\t    token: this.getToken(),\n\t    method: 'PATCH',\n\t    data: videos\n\t  });\n\t};\n\t\n\t/**\n\t * Deletes a batch of videos in one HTTP request.\n\t * @private\n\t * @param {array}    videos     An array of video objects.\n\t * @param {boolean}  permanent  A flag to permanently delete each video.\n\t *\n\t * @return {Promise}            A promise which resolves when the request is complete.\n\t */\n\tIngestAPI.prototype._deleteVideos = function (videos, permanent) {\n\t  var url;\n\t\n\t  if (!Array.isArray(videos)) {\n\t    return this.promisify(false,\n\t      'IngestAPI deleteVideos requires an array of videos');\n\t  }\n\t\n\t  url = this.config.host + this.config.videos;\n\t\n\t  if (permanent === true) {\n\t    url += this.config.deleteMethods.permanent;\n\t  }\n\t\n\t  return new Request({\n\t    url: url,\n\t    token: this.getToken(),\n\t    method: 'DELETE',\n\t    data: videos\n\t  });\n\t};\n\t\n\t/**\n\t * Delete a batch of videos.\n\t *\n\t * @param  {array}  videos  An array of video objects.\n\t *\n\t * @return {Promise}        A promise which resolves when the request is complete.\n\t */\n\tIngestAPI.prototype.deleteVideos = function (videos) {\n\t  return this._deleteVideos(videos);\n\t};\n\t\n\t/**\n\t * Permanently delete a batch of videos.\n\t *\n\t * @param  {array}  videos  An array of video objects.\n\t *\n\t * @return {Promise}        A promise which resolves when the request is complete.\n\t */\n\tIngestAPI.prototype.permanentlyDeleteVideos = function (videos) {\n\t  return this._deleteVideos(videos, true);\n\t};\n\t\n\t/**\n\t * Delete a video.\n\t * @private\n\t * @param  {string}   videoId   ID for the video to delete.\n\t * @param  {boolean}  permanent A flag to permanently delete the video.\n\t *\n\t * @return {Promise} A promise which resolves when the request is complete.\n\t */\n\tIngestAPI.prototype._deleteVideo = function (videoId, permanent) {\n\t  var url;\n\t  var tokens;\n\t\n\t  if (!videoId || typeof videoId !== 'string') {\n\t    return this.promisify(false,\n\t      'IngestAPI deleteVideo requires a video ID passed as a string.');\n\t  }\n\t\n\t  tokens = {\n\t    id: videoId\n\t  };\n\t\n\t  url = this.parseTokens(this.config.host + this.config.videoById, tokens);\n\t\n\t  if (permanent === true) {\n\t    url += this.config.deleteMethods.permanent;\n\t  }\n\t\n\t  return new Request({\n\t    url: url,\n\t    token: this.getToken(),\n\t    method: 'DELETE'\n\t  });\n\t};\n\t\n\t/**\n\t * Delete a video.\n\t * @param  {string}   videoId   ID for the video to delete.\n\t *\n\t * @return {Promise} A promise which resolves when the request is complete.\n\t */\n\tIngestAPI.prototype.deleteVideo = function (videoId) {\n\t  return this._deleteVideo(videoId);\n\t};\n\t\n\t/**\n\t * Permanently delete a video.\n\t *\n\t * @param  {string}   videoId   ID for the video to delete.\n\t * @return {Promise}            A promise which resolves when the request is complete.\n\t */\n\tIngestAPI.prototype.permanentlyDeleteVideo = function (videoId) {\n\t  return this._deleteVideo(videoId, true);\n\t};\n\t\n\t/**\n\t * Return a subset of videos that match the search terms.\n\t * @param  {string} resource The type of resources to search for, playlist or videos.\n\t * @param  {string} input    The search terms to match against.\n\t * @param  {object} headers  The headers to be passed to the request.\n\t * @return {Promise}          A promise which resolves when the request is complete.\n\t */\n\tIngestAPI.prototype.searchVideos = function (resource, input, headers) {\n\t\n\t  var url;\n\t\n\t  if (!resource || typeof resource !== 'string') {\n\t    return this.promisify(false,\n\t      'IngestAPI searchVideos requires a resource type to be passed as a string.');\n\t  }\n\t\n\t  if (!input || typeof input !== 'string') {\n\t    return this.promisify(false,\n\t      'IngestAPI searchVideos requires search input to be passed as a string.');\n\t  }\n\t\n\t  url = this.parseTokens(this.config.host + this.config.search, {\n\t    resource: resource,\n\t    input: input\n\t  });\n\t\n\t  return new Request({\n\t    url: url,\n\t    token: this.getToken(),\n\t    headers: headers\n\t  });\n\t\n\t};\n\t\n\t/**\n\t * Get the total count of videos.\n\t * @return {number} The number of videos in the current network.\n\t */\n\tIngestAPI.prototype.getVideosCount = function () {\n\t\n\t  return new Request({\n\t    url: this.config.host + this.config.videos,\n\t    token: this.getToken(),\n\t    method: 'HEAD'\n\t  }).then(this.getCountResponse.bind(this));\n\t\n\t};\n\t\n\t/**\n\t * Return the videos currently in the trash.\n\t * @param {object} Headers to be passed along with the request for pagination.\n\t *\n\t * @return {Promise} Promise/A+ spec which resovles with the trashed videos.\n\t */\n\tIngestAPI.prototype.getTrashedVideos = function (headers) {\n\t\n\t  return new Request({\n\t    url: this.config.host + this.config.trash,\n\t    token: this.getToken(),\n\t    headers: headers\n\t  });\n\t\n\t};\n\t\n\t/**\n\t * Get a count of the current videos in the trash.\n\t * @return {Promise} Promise/A+ spec which resolves with the trashed video count.\n\t */\n\tIngestAPI.prototype.getTrashedVideosCount = function () {\n\t\n\t  return new Request({\n\t    url: this.config.host + this.config.trash,\n\t    token: this.getToken(),\n\t    method: 'HEAD'\n\t  }).then(this.getCountResponse.bind(this));\n\t\n\t};\n\t\n\t/**\n\t * Handle the response from the retrieving video counts.\n\t * @param  {object} response  Request response object.\n\t * @return {number}           The resource count from the response.\n\t */\n\tIngestAPI.prototype.getCountResponse = function (response) {\n\t\n\t  return parseInt(response.headers('Resource-Count'), 10);\n\t\n\t};\n\t\n\t/**\n\t * Make a request and sign the blob to be uploaded.\n\t * @param  {object}   data            File data used to sign the upload.\n\t * @param  {string}   data.id         The uuid in the ingest service that represents a video record,\n\t * @param  {string}   data.key        The key associated with the file on AWS.\n\t * @param  {string}   data.uploadId   An id provided by amazon s3 to track multi-part uploads.\n\t * @param  {string}   data.partNumber The part of the file being signed.\n\t * @param  {boolean}  data.method     Whether or not the file requires singlepart or multipart uploading.\n\t *\n\t * @return {Promise}                  A promise which resolves when the request is complete.\n\t */\n\tIngestAPI.prototype.signUploadBlob = function (data) {\n\t\n\t  var checkObject = this.validateUploadObject(data);\n\t  var url;\n\t  var tokens;\n\t  var signing = '';\n\t\n\t  // Make sure all the proper properties have been passed in.\n\t  if (!checkObject.valid) {\n\t    return this.promisify(false, checkObject.message);\n\t  }\n\t\n\t  if (!data.method) {\n\t    signing = this.config.uploadMethods.param + this.config.uploadMethods.singlePart;\n\t  }\n\t\n\t  // Replacing <%=id%> with data.id\n\t  // Replacing <%=method%> with '?type=amazon' or ''\n\t  tokens = {\n\t    id: data.id,\n\t    method: signing\n\t  };\n\t\n\t  url = this.parseTokens(this.config.host + this.config.uploadSign, tokens);\n\t\n\t  return new Request({\n\t    url: url,\n\t    token: this.getToken(),\n\t    method: 'POST',\n\t    data: data\n\t  });\n\t\n\t};\n\t\n\t/**\n\t * Validate the object supplying the upload data.\n\t * @param  {object}   data            File data used to sign the upload.\n\t * @param  {string}   data.id         The uuid in the ingest service that represents a video record,\n\t * @param  {string}   data.key        The key associated with the file on AWS.\n\t * @param  {string}   data.uploadId   An id provided by amazon s3 to track multi-part uploads.\n\t * @param  {string}   data.partNumber The part of the file being signed.\n\t * @param  {boolean}  data.method     Whether or not the file requires singlepart or multipart uploading.\n\t *\n\t * @return {boolean}  Boolean         Representing weather or not the object is valid.\n\t **/\n\tIngestAPI.prototype.validateUploadObject = function (data) {\n\t\n\t  var result = {\n\t    valid: true,\n\t    message: ''\n\t  };\n\t\n\t  if (!data || typeof data !== 'object') {\n\t    result.valid = false;\n\t    result.message = 'The passed value was not an object.';\n\t  }\n\t\n\t  if (!data.id || typeof data.id !== 'string') {\n\t    result.valid = false;\n\t    result.message = 'Missing or invalid property : id.';\n\t  }\n\t\n\t  if (!data.key || typeof data.key !== 'string') {\n\t    result.valid = false;\n\t    result.message = 'Missing or invalid property : key.';\n\t  }\n\t\n\t  if (!data.uploadId || typeof data.uploadId !== 'string') {\n\t    result.valid = false;\n\t    result.message = 'Missing or invalid property : uploadId';\n\t  }\n\t\n\t  if (!data.partNumber || typeof data.partNumber !== 'number') {\n\t    result.valid = false;\n\t    result.message = 'Missing or invalid property : partNumber';\n\t  }\n\t\n\t  if (!data.hasOwnProperty('method') || typeof data.method !== 'boolean') {\n\t    result.valid = false;\n\t    result.message = 'Missing or invalid property : method';\n\t  }\n\t\n\t  // For the case of single part uploads, the uploadId is not required.\n\t  if (data.hasOwnProperty('method') && !data.method && !data.uploadId) {\n\t    result.valid = true;\n\t    result.message = '';\n\t  }\n\t\n\t  return result;\n\t};\n\t\n\t/**\n\t * Replace all tokens within a given template based on the given key/value pair.\n\t * @param  {string}     template    Template for the url.\n\t * @param  {object}     hash        Key/Value pair for replacing tokens in the template.\n\t *\n\t * @example\n\t * var tokens = {\n\t *  keyInTemplate: 'replacedWith'\n\t * };\n\t *\n\t * var template = '<%=keyInTemplate%>';\n\t *\n\t * var result = parseTokens(template, tokens);  // 'replacedWith'\n\t *\n\t * @return {string}                 Parsed string.\n\t */\n\tIngestAPI.prototype.parseTokens = function (template, hash) {\n\t\n\t  var keys = Object.keys(hash);\n\t  var i;\n\t  var length = keys.length;\n\t\n\t  for (i = 0; i < length; i++) {\n\t    template = template.replace('<%=' + keys[i] + '%>', hash[keys[i]]);\n\t  }\n\t\n\t  return template;\n\t\n\t};\n\t\n\t/**\n\t * Wrapper function to wrap a value in either a reject or resolve.\n\t * @param  {boolean} state Rejection or Approval.\n\t * @param  {*}       value Value to pass back to the promise.\n\t * @return {Promise}       Promise/A+ spec promise.\n\t */\n\tIngestAPI.prototype.promisify = function (state, value) {\n\t\n\t  var promise = Promise();\n\t\n\t  promise(state, [value]);\n\t\n\t  return promise;\n\t\n\t};\n\t\n\t/**\n\t * Get the current network primary key in RSA format.\n\t * @return {Promise} Promise/A+ spec which resolves with the primary network key.\n\t */\n\tIngestAPI.prototype.getNetworkSecureKeys = function () {\n\t\n\t  return new Request({\n\t    url: this.config.host + this.config.networksKeys,\n\t    token: this.getToken()\n\t  });\n\t\n\t};\n\t\n\t/**\n\t * Adds a new secure key to the current network.\n\t * @param {object}  data        The object containing data for the secure key entry.\n\t * @param {string}  data.title  Optional. The title of the secure key. Will default to \"Default Key Title\"\n\t * @param {string}  data.key    The public key in RSA format.\n\t *\n\t * @return {Promise}          A promise which resolves when the request is complete.\n\t */\n\tIngestAPI.prototype.addNetworkSecureKey = function (data) {\n\t  if (typeof data !== 'object') {\n\t    return this.promisify(false,\n\t      'IngestAPI addNetworkSecureKey requires data to be passed as an object.');\n\t  }\n\t\n\t  // The title must be a string.\n\t  if (typeof data.title !== 'string') {\n\t    data.title = '';\n\t  }\n\t\n\t  if (typeof data.key !== 'string') {\n\t    return this.promisify(false,\n\t      'IngestAPI addNetworkSecureKey requires that the key be a string in RSA public key format.');\n\t  }\n\t\n\t  return new Request({\n\t    url: this.config.host + this.config.networksKeys,\n\t    token: this.getToken(),\n\t    method: 'POST',\n\t    data: data\n\t  });\n\t};\n\t\n\t/**\n\t * Retrieves a single network secure key entry based on the UUID given.\n\t * @param {string}  id  The UUID of the secure key entry.\n\t *\n\t * @return {Promise} A promise which resolves when the request is complete.\n\t */\n\tIngestAPI.prototype.getNetworkSecureKeyById = function (id) {\n\t  var tokens, url;\n\t\n\t  if (typeof id !== 'string') {\n\t    return this.promisify(false,\n\t      'IngestAPI getNetworkSecureKeyById requires an id to be passed as a string.');\n\t  }\n\t\n\t  tokens = {\n\t    id: id\n\t  };\n\t\n\t  url = this.parseTokens(this.config.host + this.config.networksKeysById, tokens);\n\t\n\t  return new Request({\n\t    url: url,\n\t    token: this.getToken()\n\t  });\n\t};\n\t\n\t/**\n\t * Updates an individual secure key entry in the current network.\n\t * @param {object}  data        The object containing data for the secure key entry.\n\t * @param {string}  data.title  The title for the current network.\n\t *\n\t * @return {Promise} A promise which resolves when the request is complete.\n\t */\n\tIngestAPI.prototype.updateNetworkSecureKey = function (data) {\n\t  var tokens, url;\n\t\n\t  if (typeof data !== 'object') {\n\t    return this.promisify(false,\n\t      'IngestAPI updateNetworkSecureKeyById requires data to be passed as an object.');\n\t  }\n\t\n\t  if (typeof data.id !== 'string') {\n\t    return this.promisify(false,\n\t      'IngestAPI updateNetworkSecureKeyById requires a param \"id\" to be a string.');\n\t  }\n\t\n\t  if (typeof data.title !== 'string') {\n\t    data.title = '';\n\t  }\n\t\n\t  tokens = {\n\t    id: data.id\n\t  };\n\t\n\t  url = this.parseTokens(this.config.host + this.config.networksKeysById, tokens);\n\t\n\t  return new Request({\n\t    url: url,\n\t    token: this.getToken(),\n\t    method: 'PATCH',\n\t    data: data\n\t  });\n\t};\n\t\n\t/**\n\t * Deletes a single network secure key entry based on the UUID given.\n\t * @param {string}  id  The UUID of the secure key entry.\n\t *\n\t * @return {Promise} A promise which resolves when the request is complete.\n\t */\n\tIngestAPI.prototype.deleteNetworkSecureKeyById = function (id) {\n\t  var tokens, url;\n\t\n\t  if (typeof id !== 'string') {\n\t    return this.promisify(false,\n\t      'IngestAPI deleteNetworkSecureKeyById requires an id to be passed as a string.');\n\t  }\n\t\n\t  tokens = {\n\t    id: id\n\t  };\n\t\n\t  url = this.parseTokens(this.config.host + this.config.networksKeysById, tokens);\n\t\n\t  return new Request({\n\t    url: url,\n\t    token: this.getToken(),\n\t    method: 'DELETE'\n\t  });\n\t};\n\t\n\t/**\n\t * Retrieve all thumbnails for a provided video id.\n\t * @param {string} id of the video to retrieve thumbnails for.\n\t */\n\tIngestAPI.prototype.getVideoThumbnails = function (id) {\n\t  var tokens, url;\n\t\n\t  if (typeof id !== 'string') {\n\t    return this.promisify(false,\n\t      'IngestAPI getVideoThumbnails requires an id to be passed as a string.');\n\t  }\n\t\n\t  tokens = {\n\t    id: id\n\t  };\n\t\n\t  url = this.parseTokens(this.config.host + this.config.thumbnails, tokens);\n\t\n\t  return new Request({\n\t    url: url,\n\t    token: this.getToken()\n\t  });\n\t\n\t};\n\t\n\t/**\n\t * Retrieve information for the current user.\n\t * @return {object} A data object representing the user.\n\t */\n\tIngestAPI.prototype.getCurrentUserInfo = function () {\n\t  return new Request({\n\t    url: this.config.host + this.config.currentUserInfo,\n\t    token: this.getToken()\n\t  });\n\t};\n\t\n\tmodule.exports = IngestAPI;\n\n\n/***/ },\n/* 2 */\n/***/ function(module, exports, __webpack_require__) {\n\n\tvar Promise = __webpack_require__(3);\n\tvar extend = __webpack_require__(7);\n\t\n\tvar JWTUtils = __webpack_require__(8);\n\t\n\tvar VALID_RESPONSE_CODES = [200, 201, 202, 204];\n\t\n\t/**\n\t * A wrapper around the XMLHttpRequest object.\n\t * @param {object}  options         Options for the request.\n\t * @param {boolean} options.async   Whether to perform the request asynchronously\n\t * @param {string}  options.method  REST verb to use for the request.\n\t * @param {string}  options.url     URL for the request.\n\t *\n\t * @return {Promise} A promise which resolves when the request is complete.\n\t */\n\tvar Request = function (options) {\n\t\n\t  this.defaults = {\n\t    async: true,\n\t    method: 'GET'\n\t  };\n\t\n\t  this.promise = Promise();\n\t\n\t  // Create the XHR object for this request.\n\t  this.request = new XMLHttpRequest();\n\t\n\t  // Set up event listeners for this request.\n\t  this.setupListeners();\n\t\n\t  // Todo, merge some defaults with this.\n\t  this.options = extend(true, this.defaults, options);\n\t\n\t  // Make sure a url is passed before attempting to make the request.\n\t  if (!this.options.url) {\n\t    this.requestError('Request Error : a url is required to make the request.');\n\t    return this.promise;\n\t  }\n\t\n\t  // Make the actual request.\n\t  this.makeRequest();\n\t\n\t  // Return the promise.\n\t  return this.promise;\n\t\n\t};\n\t\n\t/**\n\t * Add event listeners to the XMLHttpRequest object.\n\t */\n\tRequest.prototype.setupListeners = function () {\n\t  this.request.onreadystatechange = this.readyStateChange.bind(this);\n\t};\n\t\n\t/**\n\t * Execute the open and send of the XMLHttpRequest\n\t */\n\tRequest.prototype.makeRequest = function () {\n\t\n\t  var postData = this.preparePostData(this.options.data);\n\t\n\t  if (!postData.success) {\n\t    this.requestError('Request Error : error preparing post data.');\n\t    return;\n\t  }\n\t\n\t  this.request.open(this.options.method, this.options.url, this.options.async);\n\t\n\t  if (this.options.headers) {\n\t    this.applyRequestHeaders(this.options.headers);\n\t  }\n\t\n\t  // Make the token optional.\n\t  if (this.options.token) {\n\t\n\t    // If there is a token present ensure that it's still valid.\n\t    if (JWTUtils.isExpired(this.options.token)) {\n\t      this.requestError('Request Error : token is expired.');\n\t      return;\n\t    }\n\t\n\t    this.request.setRequestHeader('Authorization', this.options.token);\n\t  }\n\t\n\t  // If there is data then we need to pass that along with the request.\n\t  if (postData.data) {\n\t    this.request.setRequestHeader('Content-type', 'application/json; charset=utf-8');\n\t    this.request.send(postData.data);\n\t  } else {\n\t    this.request.send();\n\t  }\n\t\n\t};\n\t\n\t/**\n\t * Stringify the post data if it is present.\n\t * @param  {object} data Object to be parsed.\n\t * @return {object}      Result object with the parsed string, and a success boolean flag.\n\t */\n\tRequest.prototype.preparePostData = function (data) {\n\t\n\t  var result = {\n\t    success: true,\n\t    data: data\n\t  };\n\t\n\t  // If the data is populated, and its not already a string parse it.\n\t  if (data) {\n\t\n\t    try {\n\t      result.data = JSON.stringify(data);\n\t    } catch (error) {\n\t      result.success = false;\n\t      result.data = null;\n\t    }\n\t\n\t  }\n\t\n\t  return result;\n\t\n\t};\n\t\n\t/**\n\t * Apply any supplied headers to the request object.\n\t * @param  {object} headers Array of headers to apply to the request object.\n\t */\n\tRequest.prototype.applyRequestHeaders = function (headers) {\n\t\n\t  var key, i;\n\t  var keys = Object.keys(headers);\n\t  var keysLength = keys.length;\n\t\n\t  // Loop through and add the keys to the requestHeaders.\n\t  for (i = 0; i < keysLength; i++) {\n\t    key = keys[i];\n\t    this.request.setRequestHeader(key, headers[key]);\n\t  }\n\t\n\t};\n\t\n\t/**\n\t * Handle the completion of the request and fulfill the promise.\n\t * @param  {String} Response test of the request.\n\t */\n\tRequest.prototype.requestComplete = function (response) {\n\t\n\t  // Process the result.\n\t  this.response = this.processResponse(response);\n\t\n\t  // Either resolve or reject the promise.\n\t  this.promise(!this.response.data.error, [this.response]);\n\t\n\t};\n\t\n\t/**\n\t * Process the response and parse certain content types.\n\t * @param  {*}  response  Response data from request.\n\t * @return {*}            Processed response data.\n\t */\n\tRequest.prototype.processResponse = function (response) {\n\t  var responseType = this.request.getResponseHeader('Content-Type');\n\t  var result = response;\n\t\n\t  // Parse JSON if the result is JSON.\n\t  if (responseType && responseType.indexOf('application/json') !== -1) {\n\t    try {\n\t      result = JSON.parse(response);\n\t    } catch (error) {\n\t      result = {\n\t        error: 'JSON parsing failed. ' + error.stack\n\t      };\n\t    }\n\t  }\n\t\n\t  return {\n\t    data: result,\n\t    headers: this.request.getResponseHeader.bind(this.request),\n\t    statusCode: this.request.status\n\t  };\n\t\n\t};\n\t\n\t/**\n\t * Resolve the promise.\n\t * @param  {String} message   Error message.\n\t */\n\tRequest.prototype.requestError = function (message) {\n\t  // Reject the promise.\n\t  this.promise(false, [message]);\n\t};\n\t\n\t/**\n\t * Handle ready state change events.\n\t */\n\tRequest.prototype.readyStateChange = function () {\n\t\n\t  // Request is complete.\n\t  if (this.request.readyState === 4) {\n\t\n\t    // Check if the final response code is valid.\n\t    if (this.isValidResponseCode(this.request.status)) {\n\t      this.requestComplete(this.request.responseText);\n\t    } else {\n\t      this.requestError('Invalid response code.');\n\t    }\n\t\n\t  }\n\t\n\t};\n\t\n\t/**\n\t * Validate the current response code to see if the request was a success.\n\t * @param  {String}  responseCode Response Code.\n\t * @return {Boolean}              Should this be treated as a successful response code.\n\t */\n\tRequest.prototype.isValidResponseCode = function (responseCode) {\n\t\n\t  var result = false,\n\t    responseCodeCount = VALID_RESPONSE_CODES.length,\n\t    i;\n\t\n\t  // Check if the supplied code is in our list of valid codes.\n\t  for (i = 0; i < responseCodeCount; i++) {\n\t\n\t    if (responseCode === VALID_RESPONSE_CODES[i]) {\n\t      result = true;\n\t      break;\n\t    }\n\t\n\t  }\n\t\n\t  return result;\n\t\n\t};\n\t\n\tmodule.exports = Request;\n\n\n/***/ },\n/* 3 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t/* WEBPACK VAR INJECTION */(function(module, setImmediate, process) {/*\n\t * PinkySwear.js 2.2.2 - Minimalistic implementation of the Promises/A+ spec\n\t * \n\t * Public Domain. Use, modify and distribute it any way you like. No attribution required.\n\t *\n\t * NO WARRANTY EXPRESSED OR IMPLIED. USE AT YOUR OWN RISK.\n\t *\n\t * PinkySwear is a very small implementation of the Promises/A+ specification. After compilation with the\n\t * Google Closure Compiler and gzipping it weighs less than 500 bytes. It is based on the implementation for \n\t * Minified.js and should be perfect for embedding. \n\t *\n\t *\n\t * PinkySwear has just three functions.\n\t *\n\t * To create a new promise in pending state, call pinkySwear():\n\t *         var promise = pinkySwear();\n\t *\n\t * The returned object has a Promises/A+ compatible then() implementation:\n\t *          promise.then(function(value) { alert(\"Success!\"); }, function(value) { alert(\"Failure!\"); });\n\t *\n\t *\n\t * The promise returned by pinkySwear() is a function. To fulfill the promise, call the function with true as first argument and\n\t * an optional array of values to pass to the then() handler. By putting more than one value in the array, you can pass more than one\n\t * value to the then() handlers. Here an example to fulfill a promsise, this time with only one argument: \n\t *         promise(true, [42]);\n\t *\n\t * When the promise has been rejected, call it with false. Again, there may be more than one argument for the then() handler:\n\t *         promise(true, [6, 6, 6]);\n\t *         \n\t * You can obtain the promise's current state by calling the function without arguments. It will be true if fulfilled,\n\t * false if rejected, and otherwise undefined.\n\t * \t\t   var state = promise(); \n\t * \n\t * https://github.com/timjansen/PinkySwear.js\n\t */\n\t(function(target) {\n\t\tvar undef;\n\t\n\t\tfunction isFunction(f) {\n\t\t\treturn typeof f == 'function';\n\t\t}\n\t\tfunction isObject(f) {\n\t\t\treturn typeof f == 'object';\n\t\t}\n\t\tfunction defer(callback) {\n\t\t\tif (typeof setImmediate != 'undefined')\n\t\t\t\tsetImmediate(callback);\n\t\t\telse if (typeof process != 'undefined' && process['nextTick'])\n\t\t\t\tprocess['nextTick'](callback);\n\t\t\telse\n\t\t\t\tsetTimeout(callback, 0);\n\t\t}\n\t\n\t\ttarget[0][target[1]] = function pinkySwear(extend) {\n\t\t\tvar state;           // undefined/null = pending, true = fulfilled, false = rejected\n\t\t\tvar values = [];     // an array of values as arguments for the then() handlers\n\t\t\tvar deferred = [];   // functions to call when set() is invoked\n\t\n\t\t\tvar set = function(newState, newValues) {\n\t\t\t\tif (state == null && newState != null) {\n\t\t\t\t\tstate = newState;\n\t\t\t\t\tvalues = newValues;\n\t\t\t\t\tif (deferred.length)\n\t\t\t\t\t\tdefer(function() {\n\t\t\t\t\t\t\tfor (var i = 0; i < deferred.length; i++)\n\t\t\t\t\t\t\t\tdeferred[i]();\n\t\t\t\t\t\t});\n\t\t\t\t}\n\t\t\t\treturn state;\n\t\t\t};\n\t\n\t\t\tset['then'] = function (onFulfilled, onRejected) {\n\t\t\t\tvar promise2 = pinkySwear(extend);\n\t\t\t\tvar callCallbacks = function() {\n\t\t    \t\ttry {\n\t\t    \t\t\tvar f = (state ? onFulfilled : onRejected);\n\t\t    \t\t\tif (isFunction(f)) {\n\t\t\t   \t\t\t\tfunction resolve(x) {\n\t\t\t\t\t\t\t    var then, cbCalled = 0;\n\t\t\t   \t\t\t\t\ttry {\n\t\t\t\t\t   \t\t\t\tif (x && (isObject(x) || isFunction(x)) && isFunction(then = x['then'])) {\n\t\t\t\t\t\t\t\t\t\t\tif (x === promise2)\n\t\t\t\t\t\t\t\t\t\t\t\tthrow new TypeError();\n\t\t\t\t\t\t\t\t\t\t\tthen['call'](x,\n\t\t\t\t\t\t\t\t\t\t\t\tfunction() { if (!cbCalled++) resolve.apply(undef,arguments); } ,\n\t\t\t\t\t\t\t\t\t\t\t\tfunction(value){ if (!cbCalled++) promise2(false,[value]);});\n\t\t\t\t\t   \t\t\t\t}\n\t\t\t\t\t   \t\t\t\telse\n\t\t\t\t\t   \t\t\t\t\tpromise2(true, arguments);\n\t\t\t   \t\t\t\t\t}\n\t\t\t   \t\t\t\t\tcatch(e) {\n\t\t\t   \t\t\t\t\t\tif (!cbCalled++)\n\t\t\t   \t\t\t\t\t\t\tpromise2(false, [e]);\n\t\t\t   \t\t\t\t\t}\n\t\t\t   \t\t\t\t}\n\t\t\t   \t\t\t\tresolve(f.apply(undef, values || []));\n\t\t\t   \t\t\t}\n\t\t\t   \t\t\telse\n\t\t\t   \t\t\t\tpromise2(state, values);\n\t\t\t\t\t}\n\t\t\t\t\tcatch (e) {\n\t\t\t\t\t\tpromise2(false, [e]);\n\t\t\t\t\t}\n\t\t\t\t};\n\t\t\t\tif (state != null)\n\t\t\t\t\tdefer(callCallbacks);\n\t\t\t\telse\n\t\t\t\t\tdeferred.push(callCallbacks);\n\t\t\t\treturn promise2;\n\t\t\t};\n\t        if(extend){\n\t            set = extend(set);\n\t        }\n\t\t\treturn set;\n\t\t};\n\t})( false ? [window, 'pinkySwear'] : [module, 'exports']);\n\t\n\t\n\t/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(4)(module), __webpack_require__(5).setImmediate, __webpack_require__(6)))\n\n/***/ },\n/* 4 */\n/***/ function(module, exports) {\n\n\tmodule.exports = function(module) {\r\n\t\tif(!module.webpackPolyfill) {\r\n\t\t\tmodule.deprecate = function() {};\r\n\t\t\tmodule.paths = [];\r\n\t\t\t// module.parent = undefined by default\r\n\t\t\tmodule.children = [];\r\n\t\t\tmodule.webpackPolyfill = 1;\r\n\t\t}\r\n\t\treturn module;\r\n\t}\r\n\n\n/***/ },\n/* 5 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t/* WEBPACK VAR INJECTION */(function(setImmediate, clearImmediate) {var nextTick = __webpack_require__(6).nextTick;\n\tvar apply = Function.prototype.apply;\n\tvar slice = Array.prototype.slice;\n\tvar immediateIds = {};\n\tvar nextImmediateId = 0;\n\t\n\t// DOM APIs, for completeness\n\t\n\texports.setTimeout = function() {\n\t  return new Timeout(apply.call(setTimeout, window, arguments), clearTimeout);\n\t};\n\texports.setInterval = function() {\n\t  return new Timeout(apply.call(setInterval, window, arguments), clearInterval);\n\t};\n\texports.clearTimeout =\n\texports.clearInterval = function(timeout) { timeout.close(); };\n\t\n\tfunction Timeout(id, clearFn) {\n\t  this._id = id;\n\t  this._clearFn = clearFn;\n\t}\n\tTimeout.prototype.unref = Timeout.prototype.ref = function() {};\n\tTimeout.prototype.close = function() {\n\t  this._clearFn.call(window, this._id);\n\t};\n\t\n\t// Does not start the time, just sets up the members needed.\n\texports.enroll = function(item, msecs) {\n\t  clearTimeout(item._idleTimeoutId);\n\t  item._idleTimeout = msecs;\n\t};\n\t\n\texports.unenroll = function(item) {\n\t  clearTimeout(item._idleTimeoutId);\n\t  item._idleTimeout = -1;\n\t};\n\t\n\texports._unrefActive = exports.active = function(item) {\n\t  clearTimeout(item._idleTimeoutId);\n\t\n\t  var msecs = item._idleTimeout;\n\t  if (msecs >= 0) {\n\t    item._idleTimeoutId = setTimeout(function onTimeout() {\n\t      if (item._onTimeout)\n\t        item._onTimeout();\n\t    }, msecs);\n\t  }\n\t};\n\t\n\t// That's not how node.js implements it but the exposed api is the same.\n\texports.setImmediate = typeof setImmediate === \"function\" ? setImmediate : function(fn) {\n\t  var id = nextImmediateId++;\n\t  var args = arguments.length < 2 ? false : slice.call(arguments, 1);\n\t\n\t  immediateIds[id] = true;\n\t\n\t  nextTick(function onNextTick() {\n\t    if (immediateIds[id]) {\n\t      // fn.call() is faster so we optimize for the common use-case\n\t      // @see http://jsperf.com/call-apply-segu\n\t      if (args) {\n\t        fn.apply(null, args);\n\t      } else {\n\t        fn.call(null);\n\t      }\n\t      // Prevent ids from leaking\n\t      exports.clearImmediate(id);\n\t    }\n\t  });\n\t\n\t  return id;\n\t};\n\t\n\texports.clearImmediate = typeof clearImmediate === \"function\" ? clearImmediate : function(id) {\n\t  delete immediateIds[id];\n\t};\n\t/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(5).setImmediate, __webpack_require__(5).clearImmediate))\n\n/***/ },\n/* 6 */\n/***/ function(module, exports) {\n\n\t// shim for using process in browser\n\t\n\tvar process = module.exports = {};\n\tvar queue = [];\n\tvar draining = false;\n\tvar currentQueue;\n\tvar queueIndex = -1;\n\t\n\tfunction cleanUpNextTick() {\n\t    draining = false;\n\t    if (currentQueue.length) {\n\t        queue = currentQueue.concat(queue);\n\t    } else {\n\t        queueIndex = -1;\n\t    }\n\t    if (queue.length) {\n\t        drainQueue();\n\t    }\n\t}\n\t\n\tfunction drainQueue() {\n\t    if (draining) {\n\t        return;\n\t    }\n\t    var timeout = setTimeout(cleanUpNextTick);\n\t    draining = true;\n\t\n\t    var len = queue.length;\n\t    while(len) {\n\t        currentQueue = queue;\n\t        queue = [];\n\t        while (++queueIndex < len) {\n\t            if (currentQueue) {\n\t                currentQueue[queueIndex].run();\n\t            }\n\t        }\n\t        queueIndex = -1;\n\t        len = queue.length;\n\t    }\n\t    currentQueue = null;\n\t    draining = false;\n\t    clearTimeout(timeout);\n\t}\n\t\n\tprocess.nextTick = function (fun) {\n\t    var args = new Array(arguments.length - 1);\n\t    if (arguments.length > 1) {\n\t        for (var i = 1; i < arguments.length; i++) {\n\t            args[i - 1] = arguments[i];\n\t        }\n\t    }\n\t    queue.push(new Item(fun, args));\n\t    if (queue.length === 1 && !draining) {\n\t        setTimeout(drainQueue, 0);\n\t    }\n\t};\n\t\n\t// v8 likes predictible objects\n\tfunction Item(fun, array) {\n\t    this.fun = fun;\n\t    this.array = array;\n\t}\n\tItem.prototype.run = function () {\n\t    this.fun.apply(null, this.array);\n\t};\n\tprocess.title = 'browser';\n\tprocess.browser = true;\n\tprocess.env = {};\n\tprocess.argv = [];\n\tprocess.version = ''; // empty string to avoid regexp issues\n\tprocess.versions = {};\n\t\n\tfunction noop() {}\n\t\n\tprocess.on = noop;\n\tprocess.addListener = noop;\n\tprocess.once = noop;\n\tprocess.off = noop;\n\tprocess.removeListener = noop;\n\tprocess.removeAllListeners = noop;\n\tprocess.emit = noop;\n\t\n\tprocess.binding = function (name) {\n\t    throw new Error('process.binding is not supported');\n\t};\n\t\n\tprocess.cwd = function () { return '/' };\n\tprocess.chdir = function (dir) {\n\t    throw new Error('process.chdir is not supported');\n\t};\n\tprocess.umask = function() { return 0; };\n\n\n/***/ },\n/* 7 */\n/***/ function(module, exports) {\n\n\t'use strict';\n\t\n\tvar hasOwn = Object.prototype.hasOwnProperty;\n\tvar toStr = Object.prototype.toString;\n\t\n\tvar isArray = function isArray(arr) {\n\t\tif (typeof Array.isArray === 'function') {\n\t\t\treturn Array.isArray(arr);\n\t\t}\n\t\n\t\treturn toStr.call(arr) === '[object Array]';\n\t};\n\t\n\tvar isPlainObject = function isPlainObject(obj) {\n\t\tif (!obj || toStr.call(obj) !== '[object Object]') {\n\t\t\treturn false;\n\t\t}\n\t\n\t\tvar hasOwnConstructor = hasOwn.call(obj, 'constructor');\n\t\tvar hasIsPrototypeOf = obj.constructor && obj.constructor.prototype && hasOwn.call(obj.constructor.prototype, 'isPrototypeOf');\n\t\t// Not own constructor property must be Object\n\t\tif (obj.constructor && !hasOwnConstructor && !hasIsPrototypeOf) {\n\t\t\treturn false;\n\t\t}\n\t\n\t\t// Own properties are enumerated firstly, so to speed up,\n\t\t// if last one is own, then all properties are own.\n\t\tvar key;\n\t\tfor (key in obj) {/**/}\n\t\n\t\treturn typeof key === 'undefined' || hasOwn.call(obj, key);\n\t};\n\t\n\tmodule.exports = function extend() {\n\t\tvar options, name, src, copy, copyIsArray, clone,\n\t\t\ttarget = arguments[0],\n\t\t\ti = 1,\n\t\t\tlength = arguments.length,\n\t\t\tdeep = false;\n\t\n\t\t// Handle a deep copy situation\n\t\tif (typeof target === 'boolean') {\n\t\t\tdeep = target;\n\t\t\ttarget = arguments[1] || {};\n\t\t\t// skip the boolean and the target\n\t\t\ti = 2;\n\t\t} else if ((typeof target !== 'object' && typeof target !== 'function') || target == null) {\n\t\t\ttarget = {};\n\t\t}\n\t\n\t\tfor (; i < length; ++i) {\n\t\t\toptions = arguments[i];\n\t\t\t// Only deal with non-null/undefined values\n\t\t\tif (options != null) {\n\t\t\t\t// Extend the base object\n\t\t\t\tfor (name in options) {\n\t\t\t\t\tsrc = target[name];\n\t\t\t\t\tcopy = options[name];\n\t\n\t\t\t\t\t// Prevent never-ending loop\n\t\t\t\t\tif (target !== copy) {\n\t\t\t\t\t\t// Recurse if we're merging plain objects or arrays\n\t\t\t\t\t\tif (deep && copy && (isPlainObject(copy) || (copyIsArray = isArray(copy)))) {\n\t\t\t\t\t\t\tif (copyIsArray) {\n\t\t\t\t\t\t\t\tcopyIsArray = false;\n\t\t\t\t\t\t\t\tclone = src && isArray(src) ? src : [];\n\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\tclone = src && isPlainObject(src) ? src : {};\n\t\t\t\t\t\t\t}\n\t\n\t\t\t\t\t\t\t// Never move original objects, clone them\n\t\t\t\t\t\t\ttarget[name] = extend(deep, clone, copy);\n\t\n\t\t\t\t\t\t// Don't bring in undefined values\n\t\t\t\t\t\t} else if (typeof copy !== 'undefined') {\n\t\t\t\t\t\t\ttarget[name] = copy;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\n\t\t// Return the modified object\n\t\treturn target;\n\t};\n\t\n\n\n/***/ },\n/* 8 */\n/***/ function(module, exports) {\n\n\t/**\n\t * UTILS for dealing with jwt tokens.\n\t */\n\t\n\t/**\n\t * Parse the payload out of the JWT token.\n\t * @param  {string} token JWT Token.\n\t * @return {object}       Parsed payload object.\n\t */\n\tvar parseTokenPayload = function (token) {\n\t  var parts = token.split('.');\n\t\n\t  // Return false if the token is invalid.\n\t  if (parts.length <= 1) {\n\t    return false;\n\t  }\n\t\n\t  // decode the payload portion.\n\t  var payload = window.atob(parts[1]);\n\t\n\t  // parse it as JSON\n\t  payload = JSON.parse(payload);\n\t\n\t  return payload;\n\t};\n\t\n\t/**\n\t * Return true if the provided token has expired.\n\t * @param  {string}  token JWT Token\n\t * @return {Boolean}       True if expired.\n\t */\n\tmodule.exports.isExpired = function (token) {\n\t  var data, exp, result, now;\n\t\n\t  data = parseTokenPayload(token);\n\t\n\t  result = true;\n\t\n\t  // Return true if the token does not parse properly.\n\t  if (!data) {\n\t    return result;\n\t  }\n\t\n\t  exp = data.exp;\n\t\n\t  // Get the unix timestamp in seconds.\n\t  now = new Date();\n\t  now = now.getTime() / 1000;\n\t\n\t  if (!exp) {\n\t    return result;\n\t  }\n\t\n\t  // If the expiry data is still in the future.\n\t  if (now < exp) {\n\t    result = false;\n\t  }\n\t\n\t  return result;\n\t\n\t};\n\n\n/***/ }\n/******/ ])\n});\n;\n\n\n/** WEBPACK FOOTER **\n ** ingest.js\n **/"," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId])\n \t\t\treturn installedModules[moduleId].exports;\n\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\texports: {},\n \t\t\tid: moduleId,\n \t\t\tloaded: false\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.loaded = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(0);\n\n\n\n/** WEBPACK FOOTER **\n ** webpack/bootstrap 17df153d4a2578748b7e\n **/","module.exports = require('./src/IngestAPI.js');\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./index.js\n ** module id = 0\n ** module chunks = 0\n **/","var Request = require('./Request.js');\nvar Promise = require('pinkyswear');\nvar extend = require('extend');\nvar JWTUtils = require('./JWTUtils');\n\n/**\n * IngestAPI Object\n * @param {object}  options        Options to override the default.\n * @param {string}  options.host   Override the default live host.\n * @param {string}  options.token  Auth token to use for requests.\n */\nfunction IngestAPI (options) {\n\n  this.defaults = {\n    'host': 'https://api.ingest.io',\n    'videos': '/videos',\n    'thumbnails': '/videos/<%=id%>/thumbnails',\n    'videoById': '/videos/<%=id%>',\n    'uploadSign': '/videos/<%=id%>/upload/sign<%=method%>',\n    'trash': '/videos?filter=trashed',\n    'networks': '/networks',\n    'networksKeys': '/networks/keys',\n    'networksKeysById': '/networks/keys/<%=id%>',\n    'uploadMethods': {\n      'param': '?type=',\n      'singlePart': 'amazon',\n      'multiPart': 'amazonMP'\n    },\n    'deleteMethods': {\n      'permanent': '?permanent=1'\n    },\n    'search': '/<%=resource%>?search=<%=input%>',\n    'currentUserInfo': '/users/me'\n  };\n\n  // Create a config object by extending the defaults with the pass options.\n  this.config = extend(true, {}, this.defaults, options);\n\n  if (this.config.token) {\n    // Store the token for future use.\n    this.setToken(this.config.token);\n  }\n\n  this.request = Request;\n  this.JWTUtils = JWTUtils;\n\n}\n\n/**\n * Set the auth token to use.\n * @param   {String}        token Auth token to use.\n */\nIngestAPI.prototype.setToken = function (token) {\n\n  // Make sure a valid value is passed.\n  if (!token || typeof token !== 'string') {\n    throw new Error('IngestAPI requires an authentication token passed as a string.');\n  }\n\n  this.token = token;\n\n};\n\n/**\n * Return the current auth token.\n * @return  {String}        Current auth token.\n */\nIngestAPI.prototype.getToken = function () {\n\n  if (!this.token) {\n    throw new Error('IngestAPI requires a token to be set.');\n  }\n\n  return this.token;\n\n};\n\n/**\n * Return a list of videos for the current user and network.\n * @param {object} headers Javascript object representing headers to apply to the call.\n *\n * @return {Promise} A promise which resolves when the request is complete.\n */\nIngestAPI.prototype.getVideos = function (headers) {\n\n  return new Request({\n    url: this.config.host + this.config.videos,\n    token: this.getToken(),\n    headers: headers\n  });\n\n};\n\n/**\n * Return a video match the supplied id.\n * @param   {String}       videoId ID for the requested video.\n *\n * @return {Promise} A promise which resolves when the request is complete.\n */\nIngestAPI.prototype.getVideoById = function (videoId) {\n\n  var url;\n  var tokens;\n\n  if (!videoId || typeof videoId !== 'string') {\n    // Wrap the error in a promise so the user is still catching the errors.\n    return this.promisify(false,\n      'IngestAPI getVideoById requires a valid videoId as a string.');\n  }\n\n  tokens = {\n    id: videoId\n  };\n\n  url = this.parseTokens(this.config.host + this.config.videoById, tokens);\n\n  return new Request({\n    url: url,\n    token: this.getToken()\n  });\n\n};\n\n/**\n * Add a new video.\n * @param   {object}  videoObject An object representing the video to add.\n *\n * @return {Promise} A promise which resolves when the request is complete.\n */\nIngestAPI.prototype.addVideo = function (videoObject) {\n\n  // Validate the object being passed in.\n  if (!videoObject || typeof videoObject !== 'object') {\n    // Wrap the error in a promise.\n    return this.promisify(false,\n      'IngestAPI addVideo requires a video object.');\n  }\n\n  // Return the promise from the request.\n  return new Request({\n    url: this.config.host + this.config.videos,\n    token: this.getToken(),\n    method: 'POST',\n    data: videoObject\n  });\n\n};\n\n/**\n * Update an existing video with new content.\n * @param  {object} video   An object representing the video.\n * @return {Promise}        A promise which resolves when the request is complete.\n */\nIngestAPI.prototype.updateVideo = function (video) {\n\n  var url;\n  var tokens;\n\n  if (!video || typeof video !== 'object') {\n    return this.promisify(false,\n      'IngestAPI update requires a video to be passed as an object.');\n  }\n\n  tokens = {\n    id: video.id\n  };\n\n  url = this.parseTokens(this.config.host + this.config.videoById, tokens);\n\n  return new Request({\n    url: url,\n    token: this.getToken(),\n    method: 'PATCH',\n    data: video\n  });\n};\n\n/**\n * Updates a batch of videos in one HTTP request.\n * @param {array} videos  An array of video objects.\n * @return {Promise}      A promise which resolves when the request is complete.\n */\nIngestAPI.prototype.updateVideos = function (videos) {\n  if (!Array.isArray(videos)) {\n    return this.promisify(false,\n      'IngestAPI updateVideos requires an array of videos');\n  }\n\n  return new Request({\n    url: this.config.host + this.config.videos,\n    token: this.getToken(),\n    method: 'PATCH',\n    data: videos\n  });\n};\n\n/**\n * Deletes a batch of videos in one HTTP request.\n * @private\n * @param {array}    videos     An array of video objects.\n * @param {boolean}  permanent  A flag to permanently delete each video.\n *\n * @return {Promise}            A promise which resolves when the request is complete.\n */\nIngestAPI.prototype._deleteVideos = function (videos, permanent) {\n  var url;\n\n  if (!Array.isArray(videos)) {\n    return this.promisify(false,\n      'IngestAPI deleteVideos requires an array of videos');\n  }\n\n  url = this.config.host + this.config.videos;\n\n  if (permanent === true) {\n    url += this.config.deleteMethods.permanent;\n  }\n\n  return new Request({\n    url: url,\n    token: this.getToken(),\n    method: 'DELETE',\n    data: videos\n  });\n};\n\n/**\n * Delete a batch of videos.\n *\n * @param  {array}  videos  An array of video objects.\n *\n * @return {Promise}        A promise which resolves when the request is complete.\n */\nIngestAPI.prototype.deleteVideos = function (videos) {\n  return this._deleteVideos(videos);\n};\n\n/**\n * Permanently delete a batch of videos.\n *\n * @param  {array}  videos  An array of video objects.\n *\n * @return {Promise}        A promise which resolves when the request is complete.\n */\nIngestAPI.prototype.permanentlyDeleteVideos = function (videos) {\n  return this._deleteVideos(videos, true);\n};\n\n/**\n * Delete a video.\n * @private\n * @param  {string}   videoId   ID for the video to delete.\n * @param  {boolean}  permanent A flag to permanently delete the video.\n *\n * @return {Promise} A promise which resolves when the request is complete.\n */\nIngestAPI.prototype._deleteVideo = function (videoId, permanent) {\n  var url;\n  var tokens;\n\n  if (!videoId || typeof videoId !== 'string') {\n    return this.promisify(false,\n      'IngestAPI deleteVideo requires a video ID passed as a string.');\n  }\n\n  tokens = {\n    id: videoId\n  };\n\n  url = this.parseTokens(this.config.host + this.config.videoById, tokens);\n\n  if (permanent === true) {\n    url += this.config.deleteMethods.permanent;\n  }\n\n  return new Request({\n    url: url,\n    token: this.getToken(),\n    method: 'DELETE'\n  });\n};\n\n/**\n * Delete a video.\n * @param  {string}   videoId   ID for the video to delete.\n *\n * @return {Promise} A promise which resolves when the request is complete.\n */\nIngestAPI.prototype.deleteVideo = function (videoId) {\n  return this._deleteVideo(videoId);\n};\n\n/**\n * Permanently delete a video.\n *\n * @param  {string}   videoId   ID for the video to delete.\n * @return {Promise}            A promise which resolves when the request is complete.\n */\nIngestAPI.prototype.permanentlyDeleteVideo = function (videoId) {\n  return this._deleteVideo(videoId, true);\n};\n\n/**\n * Return a subset of videos that match the search terms.\n * @param  {string} resource The type of resources to search for, playlist or videos.\n * @param  {string} input    The search terms to match against.\n * @param  {object} headers  The headers to be passed to the request.\n * @return {Promise}          A promise which resolves when the request is complete.\n */\nIngestAPI.prototype.searchVideos = function (resource, input, headers) {\n\n  var url;\n\n  if (!resource || typeof resource !== 'string') {\n    return this.promisify(false,\n      'IngestAPI searchVideos requires a resource type to be passed as a string.');\n  }\n\n  if (!input || typeof input !== 'string') {\n    return this.promisify(false,\n      'IngestAPI searchVideos requires search input to be passed as a string.');\n  }\n\n  url = this.parseTokens(this.config.host + this.config.search, {\n    resource: resource,\n    input: input\n  });\n\n  return new Request({\n    url: url,\n    token: this.getToken(),\n    headers: headers\n  });\n\n};\n\n/**\n * Get the total count of videos.\n * @return {number} The number of videos in the current network.\n */\nIngestAPI.prototype.getVideosCount = function () {\n\n  return new Request({\n    url: this.config.host + this.config.videos,\n    token: this.getToken(),\n    method: 'HEAD'\n  }).then(this.getCountResponse.bind(this));\n\n};\n\n/**\n * Return the videos currently in the trash.\n * @param {object} Headers to be passed along with the request for pagination.\n *\n * @return {Promise} Promise/A+ spec which resovles with the trashed videos.\n */\nIngestAPI.prototype.getTrashedVideos = function (headers) {\n\n  return new Request({\n    url: this.config.host + this.config.trash,\n    token: this.getToken(),\n    headers: headers\n  });\n\n};\n\n/**\n * Get a count of the current videos in the trash.\n * @return {Promise} Promise/A+ spec which resolves with the trashed video count.\n */\nIngestAPI.prototype.getTrashedVideosCount = function () {\n\n  return new Request({\n    url: this.config.host + this.config.trash,\n    token: this.getToken(),\n    method: 'HEAD'\n  }).then(this.getCountResponse.bind(this));\n\n};\n\n/**\n * Handle the response from the retrieving video counts.\n * @param  {object} response  Request response object.\n * @return {number}           The resource count from the response.\n */\nIngestAPI.prototype.getCountResponse = function (response) {\n\n  return parseInt(response.headers('Resource-Count'), 10);\n\n};\n\n/**\n * Make a request and sign the blob to be uploaded.\n * @param  {object}   data            File data used to sign the upload.\n * @param  {string}   data.id         The uuid in the ingest service that represents a video record,\n * @param  {string}   data.key        The key associated with the file on AWS.\n * @param  {string}   data.uploadId   An id provided by amazon s3 to track multi-part uploads.\n * @param  {string}   data.partNumber The part of the file being signed.\n * @param  {boolean}  data.method     Whether or not the file requires singlepart or multipart uploading.\n *\n * @return {Promise}                  A promise which resolves when the request is complete.\n */\nIngestAPI.prototype.signUploadBlob = function (data) {\n\n  var checkObject = this.validateUploadObject(data);\n  var url;\n  var tokens;\n  var signing = '';\n\n  // Make sure all the proper properties have been passed in.\n  if (!checkObject.valid) {\n    return this.promisify(false, checkObject.message);\n  }\n\n  if (!data.method) {\n    signing = this.config.uploadMethods.param + this.config.uploadMethods.singlePart;\n  }\n\n  // Replacing <%=id%> with data.id\n  // Replacing <%=method%> with '?type=amazon' or ''\n  tokens = {\n    id: data.id,\n    method: signing\n  };\n\n  url = this.parseTokens(this.config.host + this.config.uploadSign, tokens);\n\n  return new Request({\n    url: url,\n    token: this.getToken(),\n    method: 'POST',\n    data: data\n  });\n\n};\n\n/**\n * Validate the object supplying the upload data.\n * @param  {object}   data            File data used to sign the upload.\n * @param  {string}   data.id         The uuid in the ingest service that represents a video record,\n * @param  {string}   data.key        The key associated with the file on AWS.\n * @param  {string}   data.uploadId   An id provided by amazon s3 to track multi-part uploads.\n * @param  {string}   data.partNumber The part of the file being signed.\n * @param  {boolean}  data.method     Whether or not the file requires singlepart or multipart uploading.\n *\n * @return {boolean}  Boolean         Representing weather or not the object is valid.\n **/\nIngestAPI.prototype.validateUploadObject = function (data) {\n\n  var result = {\n    valid: true,\n    message: ''\n  };\n\n  if (!data || typeof data !== 'object') {\n    result.valid = false;\n    result.message = 'The passed value was not an object.';\n  }\n\n  if (!data.id || typeof data.id !== 'string') {\n    result.valid = false;\n    result.message = 'Missing or invalid property : id.';\n  }\n\n  if (!data.key || typeof data.key !== 'string') {\n    result.valid = false;\n    result.message = 'Missing or invalid property : key.';\n  }\n\n  if (!data.uploadId || typeof data.uploadId !== 'string') {\n    result.valid = false;\n    result.message = 'Missing or invalid property : uploadId';\n  }\n\n  if (!data.partNumber || typeof data.partNumber !== 'number') {\n    result.valid = false;\n    result.message = 'Missing or invalid property : partNumber';\n  }\n\n  if (!data.hasOwnProperty('method') || typeof data.method !== 'boolean') {\n    result.valid = false;\n    result.message = 'Missing or invalid property : method';\n  }\n\n  // For the case of single part uploads, the uploadId is not required.\n  if (data.hasOwnProperty('method') && !data.method && !data.uploadId) {\n    result.valid = true;\n    result.message = '';\n  }\n\n  return result;\n};\n\n/**\n * Replace all tokens within a given template based on the given key/value pair.\n * @param  {string}     template    Template for the url.\n * @param  {object}     hash        Key/Value pair for replacing tokens in the template.\n *\n * @example\n * var tokens = {\n *  keyInTemplate: 'replacedWith'\n * };\n *\n * var template = '<%=keyInTemplate%>';\n *\n * var result = parseTokens(template, tokens);  // 'replacedWith'\n *\n * @return {string}                 Parsed string.\n */\nIngestAPI.prototype.parseTokens = function (template, hash) {\n\n  var keys = Object.keys(hash);\n  var i;\n  var length = keys.length;\n\n  for (i = 0; i < length; i++) {\n    template = template.replace('<%=' + keys[i] + '%>', hash[keys[i]]);\n  }\n\n  return template;\n\n};\n\n/**\n * Wrapper function to wrap a value in either a reject or resolve.\n * @param  {boolean} state Rejection or Approval.\n * @param  {*}       value Value to pass back to the promise.\n * @return {Promise}       Promise/A+ spec promise.\n */\nIngestAPI.prototype.promisify = function (state, value) {\n\n  var promise = Promise();\n\n  promise(state, [value]);\n\n  return promise;\n\n};\n\n/**\n * Get the current network primary key in RSA format.\n * @return {Promise} Promise/A+ spec which resolves with the primary network key.\n */\nIngestAPI.prototype.getNetworkSecureKeys = function () {\n\n  return new Request({\n    url: this.config.host + this.config.networksKeys,\n    token: this.getToken()\n  });\n\n};\n\n/**\n * Adds a new secure key to the current network.\n * @param {object}  data        The object containing data for the secure key entry.\n * @param {string}  data.title  Optional. The title of the secure key. Will default to \"Default Key Title\"\n * @param {string}  data.key    The public key in RSA format.\n *\n * @return {Promise}          A promise which resolves when the request is complete.\n */\nIngestAPI.prototype.addNetworkSecureKey = function (data) {\n  if (typeof data !== 'object') {\n    return this.promisify(false,\n      'IngestAPI addNetworkSecureKey requires data to be passed as an object.');\n  }\n\n  // The title must be a string.\n  if (typeof data.title !== 'string') {\n    data.title = '';\n  }\n\n  if (typeof data.key !== 'string') {\n    return this.promisify(false,\n      'IngestAPI addNetworkSecureKey requires that the key be a string in RSA public key format.');\n  }\n\n  return new Request({\n    url: this.config.host + this.config.networksKeys,\n    token: this.getToken(),\n    method: 'POST',\n    data: data\n  });\n};\n\n/**\n * Retrieves a single network secure key entry based on the UUID given.\n * @param {string}  id  The UUID of the secure key entry.\n *\n * @return {Promise} A promise which resolves when the request is complete.\n */\nIngestAPI.prototype.getNetworkSecureKeyById = function (id) {\n  var tokens, url;\n\n  if (typeof id !== 'string') {\n    return this.promisify(false,\n      'IngestAPI getNetworkSecureKeyById requires an id to be passed as a string.');\n  }\n\n  tokens = {\n    id: id\n  };\n\n  url = this.parseTokens(this.config.host + this.config.networksKeysById, tokens);\n\n  return new Request({\n    url: url,\n    token: this.getToken()\n  });\n};\n\n/**\n * Updates an individual secure key entry in the current network.\n * @param {object}  data        The object containing data for the secure key entry.\n * @param {string}  data.title  The title for the current network.\n *\n * @return {Promise} A promise which resolves when the request is complete.\n */\nIngestAPI.prototype.updateNetworkSecureKey = function (data) {\n  var tokens, url;\n\n  if (typeof data !== 'object') {\n    return this.promisify(false,\n      'IngestAPI updateNetworkSecureKeyById requires data to be passed as an object.');\n  }\n\n  if (typeof data.id !== 'string') {\n    return this.promisify(false,\n      'IngestAPI updateNetworkSecureKeyById requires a param \"id\" to be a string.');\n  }\n\n  if (typeof data.title !== 'string') {\n    data.title = '';\n  }\n\n  tokens = {\n    id: data.id\n  };\n\n  url = this.parseTokens(this.config.host + this.config.networksKeysById, tokens);\n\n  return new Request({\n    url: url,\n    token: this.getToken(),\n    method: 'PATCH',\n    data: data\n  });\n};\n\n/**\n * Deletes a single network secure key entry based on the UUID given.\n * @param {string}  id  The UUID of the secure key entry.\n *\n * @return {Promise} A promise which resolves when the request is complete.\n */\nIngestAPI.prototype.deleteNetworkSecureKeyById = function (id) {\n  var tokens, url;\n\n  if (typeof id !== 'string') {\n    return this.promisify(false,\n      'IngestAPI deleteNetworkSecureKeyById requires an id to be passed as a string.');\n  }\n\n  tokens = {\n    id: id\n  };\n\n  url = this.parseTokens(this.config.host + this.config.networksKeysById, tokens);\n\n  return new Request({\n    url: url,\n    token: this.getToken(),\n    method: 'DELETE'\n  });\n};\n\n/**\n * Retrieve all thumbnails for a provided video id.\n * @param {string} id of the video to retrieve thumbnails for.\n */\nIngestAPI.prototype.getVideoThumbnails = function (id) {\n  var tokens, url;\n\n  if (typeof id !== 'string') {\n    return this.promisify(false,\n      'IngestAPI getVideoThumbnails requires an id to be passed as a string.');\n  }\n\n  tokens = {\n    id: id\n  };\n\n  url = this.parseTokens(this.config.host + this.config.thumbnails, tokens);\n\n  return new Request({\n    url: url,\n    token: this.getToken()\n  });\n\n};\n\n/**\n * Retrieve information for the current user.\n * @return {object} A data object representing the user.\n */\nIngestAPI.prototype.getCurrentUserInfo = function () {\n  return new Request({\n    url: this.config.host + this.config.currentUserInfo,\n    token: this.getToken()\n  });\n};\n\nmodule.exports = IngestAPI;\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./src/IngestAPI.js\n ** module id = 1\n ** module chunks = 0\n **/","var Promise = require('pinkyswear');\nvar extend = require('extend');\n\nvar JWTUtils = require('./JWTUtils');\n\nvar VALID_RESPONSE_CODES = [200, 201, 202, 204];\n\n/**\n * A wrapper around the XMLHttpRequest object.\n * @param {object}  options         Options for the request.\n * @param {boolean} options.async   Whether to perform the request asynchronously\n * @param {string}  options.method  REST verb to use for the request.\n * @param {string}  options.url     URL for the request.\n *\n * @return {Promise} A promise which resolves when the request is complete.\n */\nvar Request = function (options) {\n\n  this.defaults = {\n    async: true,\n    method: 'GET'\n  };\n\n  this.promise = Promise();\n\n  // Create the XHR object for this request.\n  this.request = new XMLHttpRequest();\n\n  // Set up event listeners for this request.\n  this.setupListeners();\n\n  // Todo, merge some defaults with this.\n  this.options = extend(true, this.defaults, options);\n\n  // Make sure a url is passed before attempting to make the request.\n  if (!this.options.url) {\n    this.requestError('Request Error : a url is required to make the request.');\n    return this.promise;\n  }\n\n  // Make the actual request.\n  this.makeRequest();\n\n  // Return the promise.\n  return this.promise;\n\n};\n\n/**\n * Add event listeners to the XMLHttpRequest object.\n */\nRequest.prototype.setupListeners = function () {\n  this.request.onreadystatechange = this.readyStateChange.bind(this);\n};\n\n/**\n * Execute the open and send of the XMLHttpRequest\n */\nRequest.prototype.makeRequest = function () {\n\n  var postData = this.preparePostData(this.options.data);\n\n  if (!postData.success) {\n    this.requestError('Request Error : error preparing post data.');\n    return;\n  }\n\n  this.request.open(this.options.method, this.options.url, this.options.async);\n\n  if (this.options.headers) {\n    this.applyRequestHeaders(this.options.headers);\n  }\n\n  // Make the token optional.\n  if (this.options.token) {\n\n    // If there is a token present ensure that it's still valid.\n    if (JWTUtils.isExpired(this.options.token)) {\n      this.requestError('Request Error : token is expired.');\n      return;\n    }\n\n    this.request.setRequestHeader('Authorization', this.options.token);\n  }\n\n  // If there is data then we need to pass that along with the request.\n  if (postData.data) {\n    this.request.setRequestHeader('Content-type', 'application/json; charset=utf-8');\n    this.request.send(postData.data);\n  } else {\n    this.request.send();\n  }\n\n};\n\n/**\n * Stringify the post data if it is present.\n * @param  {object} data Object to be parsed.\n * @return {object}      Result object with the parsed string, and a success boolean flag.\n */\nRequest.prototype.preparePostData = function (data) {\n\n  var result = {\n    success: true,\n    data: data\n  };\n\n  // If the data is populated, and its not already a string parse it.\n  if (data) {\n\n    try {\n      result.data = JSON.stringify(data);\n    } catch (error) {\n      result.success = false;\n      result.data = null;\n    }\n\n  }\n\n  return result;\n\n};\n\n/**\n * Apply any supplied headers to the request object.\n * @param  {object} headers Array of headers to apply to the request object.\n */\nRequest.prototype.applyRequestHeaders = function (headers) {\n\n  var key, i;\n  var keys = Object.keys(headers);\n  var keysLength = keys.length;\n\n  // Loop through and add the keys to the requestHeaders.\n  for (i = 0; i < keysLength; i++) {\n    key = keys[i];\n    this.request.setRequestHeader(key, headers[key]);\n  }\n\n};\n\n/**\n * Handle the completion of the request and fulfill the promise.\n * @param  {String} Response test of the request.\n */\nRequest.prototype.requestComplete = function (response) {\n\n  // Process the result.\n  this.response = this.processResponse(response);\n\n  // Either resolve or reject the promise.\n  this.promise(!this.response.data.error, [this.response]);\n\n};\n\n/**\n * Process the response and parse certain content types.\n * @param  {*}  response  Response data from request.\n * @return {*}            Processed response data.\n */\nRequest.prototype.processResponse = function (response) {\n  var responseType = this.request.getResponseHeader('Content-Type');\n  var result = response;\n\n  // Parse JSON if the result is JSON.\n  if (responseType && responseType.indexOf('application/json') !== -1) {\n    try {\n      result = JSON.parse(response);\n    } catch (error) {\n      result = {\n        error: 'JSON parsing failed. ' + error.stack\n      };\n    }\n  }\n\n  return {\n    data: result,\n    headers: this.request.getResponseHeader.bind(this.request),\n    statusCode: this.request.status\n  };\n\n};\n\n/**\n * Resolve the promise.\n * @param  {String} message   Error message.\n */\nRequest.prototype.requestError = function (message) {\n  // Reject the promise.\n  this.promise(false, [message]);\n};\n\n/**\n * Handle ready state change events.\n */\nRequest.prototype.readyStateChange = function () {\n\n  // Request is complete.\n  if (this.request.readyState === 4) {\n\n    // Check if the final response code is valid.\n    if (this.isValidResponseCode(this.request.status)) {\n      this.requestComplete(this.request.responseText);\n    } else {\n      this.requestError('Invalid response code.');\n    }\n\n  }\n\n};\n\n/**\n * Validate the current response code to see if the request was a success.\n * @param  {String}  responseCode Response Code.\n * @return {Boolean}              Should this be treated as a successful response code.\n */\nRequest.prototype.isValidResponseCode = function (responseCode) {\n\n  var result = false,\n    responseCodeCount = VALID_RESPONSE_CODES.length,\n    i;\n\n  // Check if the supplied code is in our list of valid codes.\n  for (i = 0; i < responseCodeCount; i++) {\n\n    if (responseCode === VALID_RESPONSE_CODES[i]) {\n      result = true;\n      break;\n    }\n\n  }\n\n  return result;\n\n};\n\nmodule.exports = Request;\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./src/Request.js\n ** module id = 2\n ** module chunks = 0\n **/","/*\n * PinkySwear.js 2.2.2 - Minimalistic implementation of the Promises/A+ spec\n * \n * Public Domain. Use, modify and distribute it any way you like. No attribution required.\n *\n * NO WARRANTY EXPRESSED OR IMPLIED. USE AT YOUR OWN RISK.\n *\n * PinkySwear is a very small implementation of the Promises/A+ specification. After compilation with the\n * Google Closure Compiler and gzipping it weighs less than 500 bytes. It is based on the implementation for \n * Minified.js and should be perfect for embedding. \n *\n *\n * PinkySwear has just three functions.\n *\n * To create a new promise in pending state, call pinkySwear():\n *         var promise = pinkySwear();\n *\n * The returned object has a Promises/A+ compatible then() implementation:\n *          promise.then(function(value) { alert(\"Success!\"); }, function(value) { alert(\"Failure!\"); });\n *\n *\n * The promise returned by pinkySwear() is a function. To fulfill the promise, call the function with true as first argument and\n * an optional array of values to pass to the then() handler. By putting more than one value in the array, you can pass more than one\n * value to the then() handlers. Here an example to fulfill a promsise, this time with only one argument: \n *         promise(true, [42]);\n *\n * When the promise has been rejected, call it with false. Again, there may be more than one argument for the then() handler:\n *         promise(true, [6, 6, 6]);\n *         \n * You can obtain the promise's current state by calling the function without arguments. It will be true if fulfilled,\n * false if rejected, and otherwise undefined.\n * \t\t   var state = promise(); \n * \n * https://github.com/timjansen/PinkySwear.js\n */\n(function(target) {\n\tvar undef;\n\n\tfunction isFunction(f) {\n\t\treturn typeof f == 'function';\n\t}\n\tfunction isObject(f) {\n\t\treturn typeof f == 'object';\n\t}\n\tfunction defer(callback) {\n\t\tif (typeof setImmediate != 'undefined')\n\t\t\tsetImmediate(callback);\n\t\telse if (typeof process != 'undefined' && process['nextTick'])\n\t\t\tprocess['nextTick'](callback);\n\t\telse\n\t\t\tsetTimeout(callback, 0);\n\t}\n\n\ttarget[0][target[1]] = function pinkySwear(extend) {\n\t\tvar state;           // undefined/null = pending, true = fulfilled, false = rejected\n\t\tvar values = [];     // an array of values as arguments for the then() handlers\n\t\tvar deferred = [];   // functions to call when set() is invoked\n\n\t\tvar set = function(newState, newValues) {\n\t\t\tif (state == null && newState != null) {\n\t\t\t\tstate = newState;\n\t\t\t\tvalues = newValues;\n\t\t\t\tif (deferred.length)\n\t\t\t\t\tdefer(function() {\n\t\t\t\t\t\tfor (var i = 0; i < deferred.length; i++)\n\t\t\t\t\t\t\tdeferred[i]();\n\t\t\t\t\t});\n\t\t\t}\n\t\t\treturn state;\n\t\t};\n\n\t\tset['then'] = function (onFulfilled, onRejected) {\n\t\t\tvar promise2 = pinkySwear(extend);\n\t\t\tvar callCallbacks = function() {\n\t    \t\ttry {\n\t    \t\t\tvar f = (state ? onFulfilled : onRejected);\n\t    \t\t\tif (isFunction(f)) {\n\t\t   \t\t\t\tfunction resolve(x) {\n\t\t\t\t\t\t    var then, cbCalled = 0;\n\t\t   \t\t\t\t\ttry {\n\t\t\t\t   \t\t\t\tif (x && (isObject(x) || isFunction(x)) && isFunction(then = x['then'])) {\n\t\t\t\t\t\t\t\t\t\tif (x === promise2)\n\t\t\t\t\t\t\t\t\t\t\tthrow new TypeError();\n\t\t\t\t\t\t\t\t\t\tthen['call'](x,\n\t\t\t\t\t\t\t\t\t\t\tfunction() { if (!cbCalled++) resolve.apply(undef,arguments); } ,\n\t\t\t\t\t\t\t\t\t\t\tfunction(value){ if (!cbCalled++) promise2(false,[value]);});\n\t\t\t\t   \t\t\t\t}\n\t\t\t\t   \t\t\t\telse\n\t\t\t\t   \t\t\t\t\tpromise2(true, arguments);\n\t\t   \t\t\t\t\t}\n\t\t   \t\t\t\t\tcatch(e) {\n\t\t   \t\t\t\t\t\tif (!cbCalled++)\n\t\t   \t\t\t\t\t\t\tpromise2(false, [e]);\n\t\t   \t\t\t\t\t}\n\t\t   \t\t\t\t}\n\t\t   \t\t\t\tresolve(f.apply(undef, values || []));\n\t\t   \t\t\t}\n\t\t   \t\t\telse\n\t\t   \t\t\t\tpromise2(state, values);\n\t\t\t\t}\n\t\t\t\tcatch (e) {\n\t\t\t\t\tpromise2(false, [e]);\n\t\t\t\t}\n\t\t\t};\n\t\t\tif (state != null)\n\t\t\t\tdefer(callCallbacks);\n\t\t\telse\n\t\t\t\tdeferred.push(callCallbacks);\n\t\t\treturn promise2;\n\t\t};\n        if(extend){\n            set = extend(set);\n        }\n\t\treturn set;\n\t};\n})(typeof module == 'undefined' ? [window, 'pinkySwear'] : [module, 'exports']);\n\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./~/pinkyswear/pinkyswear.js\n ** module id = 3\n ** module chunks = 0\n **/","module.exports = function(module) {\r\n\tif(!module.webpackPolyfill) {\r\n\t\tmodule.deprecate = function() {};\r\n\t\tmodule.paths = [];\r\n\t\t// module.parent = undefined by default\r\n\t\tmodule.children = [];\r\n\t\tmodule.webpackPolyfill = 1;\r\n\t}\r\n\treturn module;\r\n}\r\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** (webpack)/buildin/module.js\n ** module id = 4\n ** module chunks = 0\n **/","var nextTick = require('process/browser.js').nextTick;\nvar apply = Function.prototype.apply;\nvar slice = Array.prototype.slice;\nvar immediateIds = {};\nvar nextImmediateId = 0;\n\n// DOM APIs, for completeness\n\nexports.setTimeout = function() {\n  return new Timeout(apply.call(setTimeout, window, arguments), clearTimeout);\n};\nexports.setInterval = function() {\n  return new Timeout(apply.call(setInterval, window, arguments), clearInterval);\n};\nexports.clearTimeout =\nexports.clearInterval = function(timeout) { timeout.close(); };\n\nfunction Timeout(id, clearFn) {\n  this._id = id;\n  this._clearFn = clearFn;\n}\nTimeout.prototype.unref = Timeout.prototype.ref = function() {};\nTimeout.prototype.close = function() {\n  this._clearFn.call(window, this._id);\n};\n\n// Does not start the time, just sets up the members needed.\nexports.enroll = function(item, msecs) {\n  clearTimeout(item._idleTimeoutId);\n  item._idleTimeout = msecs;\n};\n\nexports.unenroll = function(item) {\n  clearTimeout(item._idleTimeoutId);\n  item._idleTimeout = -1;\n};\n\nexports._unrefActive = exports.active = function(item) {\n  clearTimeout(item._idleTimeoutId);\n\n  var msecs = item._idleTimeout;\n  if (msecs >= 0) {\n    item._idleTimeoutId = setTimeout(function onTimeout() {\n      if (item._onTimeout)\n        item._onTimeout();\n    }, msecs);\n  }\n};\n\n// That's not how node.js implements it but the exposed api is the same.\nexports.setImmediate = typeof setImmediate === \"function\" ? setImmediate : function(fn) {\n  var id = nextImmediateId++;\n  var args = arguments.length < 2 ? false : slice.call(arguments, 1);\n\n  immediateIds[id] = true;\n\n  nextTick(function onNextTick() {\n    if (immediateIds[id]) {\n      // fn.call() is faster so we optimize for the common use-case\n      // @see http://jsperf.com/call-apply-segu\n      if (args) {\n        fn.apply(null, args);\n      } else {\n        fn.call(null);\n      }\n      // Prevent ids from leaking\n      exports.clearImmediate(id);\n    }\n  });\n\n  return id;\n};\n\nexports.clearImmediate = typeof clearImmediate === \"function\" ? clearImmediate : function(id) {\n  delete immediateIds[id];\n};\n\n\n/*****************\n ** WEBPACK FOOTER\n ** (webpack)/~/node-libs-browser/~/timers-browserify/main.js\n ** module id = 5\n ** module chunks = 0\n **/","// shim for using process in browser\n\nvar process = module.exports = {};\nvar queue = [];\nvar draining = false;\nvar currentQueue;\nvar queueIndex = -1;\n\nfunction cleanUpNextTick() {\n    draining = false;\n    if (currentQueue.length) {\n        queue = currentQueue.concat(queue);\n    } else {\n        queueIndex = -1;\n    }\n    if (queue.length) {\n        drainQueue();\n    }\n}\n\nfunction drainQueue() {\n    if (draining) {\n        return;\n    }\n    var timeout = setTimeout(cleanUpNextTick);\n    draining = true;\n\n    var len = queue.length;\n    while(len) {\n        currentQueue = queue;\n        queue = [];\n        while (++queueIndex < len) {\n            if (currentQueue) {\n                currentQueue[queueIndex].run();\n            }\n        }\n        queueIndex = -1;\n        len = queue.length;\n    }\n    currentQueue = null;\n    draining = false;\n    clearTimeout(timeout);\n}\n\nprocess.nextTick = function (fun) {\n    var args = new Array(arguments.length - 1);\n    if (arguments.length > 1) {\n        for (var i = 1; i < arguments.length; i++) {\n            args[i - 1] = arguments[i];\n        }\n    }\n    queue.push(new Item(fun, args));\n    if (queue.length === 1 && !draining) {\n        setTimeout(drainQueue, 0);\n    }\n};\n\n// v8 likes predictible objects\nfunction Item(fun, array) {\n    this.fun = fun;\n    this.array = array;\n}\nItem.prototype.run = function () {\n    this.fun.apply(null, this.array);\n};\nprocess.title = 'browser';\nprocess.browser = true;\nprocess.env = {};\nprocess.argv = [];\nprocess.version = ''; // empty string to avoid regexp issues\nprocess.versions = {};\n\nfunction noop() {}\n\nprocess.on = noop;\nprocess.addListener = noop;\nprocess.once = noop;\nprocess.off = noop;\nprocess.removeListener = noop;\nprocess.removeAllListeners = noop;\nprocess.emit = noop;\n\nprocess.binding = function (name) {\n    throw new Error('process.binding is not supported');\n};\n\nprocess.cwd = function () { return '/' };\nprocess.chdir = function (dir) {\n    throw new Error('process.chdir is not supported');\n};\nprocess.umask = function() { return 0; };\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** (webpack)/~/node-libs-browser/~/process/browser.js\n ** module id = 6\n ** module chunks = 0\n **/","'use strict';\n\nvar hasOwn = Object.prototype.hasOwnProperty;\nvar toStr = Object.prototype.toString;\n\nvar isArray = function isArray(arr) {\n\tif (typeof Array.isArray === 'function') {\n\t\treturn Array.isArray(arr);\n\t}\n\n\treturn toStr.call(arr) === '[object Array]';\n};\n\nvar isPlainObject = function isPlainObject(obj) {\n\tif (!obj || toStr.call(obj) !== '[object Object]') {\n\t\treturn false;\n\t}\n\n\tvar hasOwnConstructor = hasOwn.call(obj, 'constructor');\n\tvar hasIsPrototypeOf = obj.constructor && obj.constructor.prototype && hasOwn.call(obj.constructor.prototype, 'isPrototypeOf');\n\t// Not own constructor property must be Object\n\tif (obj.constructor && !hasOwnConstructor && !hasIsPrototypeOf) {\n\t\treturn false;\n\t}\n\n\t// Own properties are enumerated firstly, so to speed up,\n\t// if last one is own, then all properties are own.\n\tvar key;\n\tfor (key in obj) {/**/}\n\n\treturn typeof key === 'undefined' || hasOwn.call(obj, key);\n};\n\nmodule.exports = function extend() {\n\tvar options, name, src, copy, copyIsArray, clone,\n\t\ttarget = arguments[0],\n\t\ti = 1,\n\t\tlength = arguments.length,\n\t\tdeep = false;\n\n\t// Handle a deep copy situation\n\tif (typeof target === 'boolean') {\n\t\tdeep = target;\n\t\ttarget = arguments[1] || {};\n\t\t// skip the boolean and the target\n\t\ti = 2;\n\t} else if ((typeof target !== 'object' && typeof target !== 'function') || target == null) {\n\t\ttarget = {};\n\t}\n\n\tfor (; i < length; ++i) {\n\t\toptions = arguments[i];\n\t\t// Only deal with non-null/undefined values\n\t\tif (options != null) {\n\t\t\t// Extend the base object\n\t\t\tfor (name in options) {\n\t\t\t\tsrc = target[name];\n\t\t\t\tcopy = options[name];\n\n\t\t\t\t// Prevent never-ending loop\n\t\t\t\tif (target !== copy) {\n\t\t\t\t\t// Recurse if we're merging plain objects or arrays\n\t\t\t\t\tif (deep && copy && (isPlainObject(copy) || (copyIsArray = isArray(copy)))) {\n\t\t\t\t\t\tif (copyIsArray) {\n\t\t\t\t\t\t\tcopyIsArray = false;\n\t\t\t\t\t\t\tclone = src && isArray(src) ? src : [];\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tclone = src && isPlainObject(src) ? src : {};\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\t// Never move original objects, clone them\n\t\t\t\t\t\ttarget[name] = extend(deep, clone, copy);\n\n\t\t\t\t\t// Don't bring in undefined values\n\t\t\t\t\t} else if (typeof copy !== 'undefined') {\n\t\t\t\t\t\ttarget[name] = copy;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\t// Return the modified object\n\treturn target;\n};\n\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./~/extend/index.js\n ** module id = 7\n ** module chunks = 0\n **/","/**\n * UTILS for dealing with jwt tokens.\n */\n\n/**\n * Parse the payload out of the JWT token.\n * @param  {string} token JWT Token.\n * @return {object}       Parsed payload object.\n */\nvar parseTokenPayload = function (token) {\n  var parts = token.split('.');\n\n  // Return false if the token is invalid.\n  if (parts.length <= 1) {\n    return false;\n  }\n\n  // decode the payload portion.\n  var payload = window.atob(parts[1]);\n\n  // parse it as JSON\n  payload = JSON.parse(payload);\n\n  return payload;\n};\n\n/**\n * Return true if the provided token has expired.\n * @param  {string}  token JWT Token\n * @return {Boolean}       True if expired.\n */\nmodule.exports.isExpired = function (token) {\n  var data, exp, result, now;\n\n  data = parseTokenPayload(token);\n\n  result = true;\n\n  // Return true if the token does not parse properly.\n  if (!data) {\n    return result;\n  }\n\n  exp = data.exp;\n\n  // Get the unix timestamp in seconds.\n  now = new Date();\n  now = now.getTime() / 1000;\n\n  if (!exp) {\n    return result;\n  }\n\n  // If the expiry data is still in the future.\n  if (now < exp) {\n    result = false;\n  }\n\n  return result;\n\n};\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./src/JWTUtils.js\n ** module id = 8\n ** module chunks = 0\n **/"],"sourceRoot":""}
{"version":3,"sources":["webpack:///webpack/universalModuleDefinition","webpack:///ingest.js","webpack:///webpack/bootstrap 7c8f41f83d1f91d63a32","webpack:///./index.js","webpack:///./src/IngestAPI.js","webpack:///./~/extend/index.js","webpack:///./src/Request.js","webpack:///./~/pinkyswear/pinkyswear.js","webpack:///(webpack)/buildin/module.js","webpack:///./~/timers-browserify/main.js","webpack:///./~/process/browser.js","webpack:///./src/JWTUtils.js","webpack:///./src/Utils.js","webpack:///./src/Uploader.js","webpack:///./src/Cache.js","webpack:///./src/resources/Resource.js","webpack:///./src/resources/PlaybackContent.js","webpack:///./src/resources/Users.js","webpack:///./src/resources/Networks.js","webpack:///./src/resources/Videos.js","webpack:///./src/resources/Playlists.js","webpack:///./src/resources/Jobs.js","webpack:///./src/resources/Billing.js"],"names":["root","factory","exports","module","define","amd","this","modules","__webpack_require__","moduleId","installedModules","id","loaded","call","m","c","p","IngestAPI","options","defaults","host","cacheAge","inputs","inputsById","inputsUpload","inputsUploadSign","inputsUploadComplete","inputsUploadAbort","config","extend","token","setToken","request","Request","JWTUtils","utils","resource","Resource","playbackContent","Media","usersResource","Users","networksResource","Networks","videosResource","Videos","playlistsResource","Playlists","jobsResource","Jobs","billingResource","Billing","uploader","Uploader","cache","Cache","_getToken","getToken","bind","videos","tokenSource","playlists","users","networks","profiles","jobs","billing","prototype","Error","upload","file","api","hasOwn","Object","hasOwnProperty","toStr","toString","isArray","arr","Array","isPlainObject","obj","hasOwnConstructor","hasIsPrototypeOf","constructor","key","name","src","copy","copyIsArray","clone","target","arguments","i","length","deep","Promise","VALID_RESPONSE_CODES","async","method","ignoreAcceptHeader","XMLHttpRequest","setupListeners","send","promise","url","makeRequest","requestError","onreadystatechange","readyStateChange","postData","preparePostData","data","headers","hasContentType","success","open","setRequestHeader","applyRequestHeaders","isExpired","type","result","FormData","Blob","JSON","stringify","error","keys","keysLength","requestComplete","response","processResponse","responseType","getResponseHeader","indexOf","parse","stack","statusCode","status","message","getAllResponseHeaders","readyState","isValidResponseCode","responseText","responseCode","responseCodeCount","cancel","abort","setImmediate","process","isFunction","f","isObject","defer","callback","setTimeout","undef","pinkySwear","state","values","deferred","set","newState","newValues","onFulfilled","onRejected","promise2","callCallbacks","resolve","x","then","cbCalled","TypeError","apply","value","e","push","webpackPolyfill","deprecate","paths","children","clearImmediate","Timeout","clearFn","_id","_clearFn","nextTick","Function","slice","immediateIds","nextImmediateId","window","clearTimeout","setInterval","clearInterval","timeout","close","unref","ref","enroll","item","msecs","_idleTimeoutId","_idleTimeout","unenroll","_unrefActive","active","_onTimeout","fn","args","cleanUpNextTick","draining","currentQueue","queue","concat","queueIndex","drainQueue","len","run","Item","fun","array","noop","title","browser","env","argv","version","versions","on","addListener","once","off","removeListener","removeAllListeners","emit","binding","cwd","chdir","dir","umask","parseTokenPayload","parts","split","payload","atob","exp","now","Date","getTime","Utils","parseTokens","template","hash","replace","promisify","series","promises","paused","promisesCount","all","total","complete","responses","pause","_seriesPause","undefined","resume","_seriesResume","_seriesCancel","_seriesCallPromise","_seriesComplete","_seriesError","canceled","isImage","Upload","sign","uploadComplete","uploadAbort","uploadMethods","param","singlePart","multiPart","chunks","chunkSize","chunkCount","chunksComplete","uploadedBytes","aborted","created","initialized","fileRecord","filename","size","_checkMultipart","progress","save","_create","_initialize","_prepareUpload","_updateProgress","percent","record","add","_createSuccess","input","tokens","signing","_initializeComplete","uploadId","pieceSize","pieceCount","_createChunks","_completeUpload","_uploadFile","_onCompleteUpload","blob","chunk","start","end","sliceMethod","_getSliceMethod","chunkPromises","Math","min","partNumber","_uploadChunk","multiPartPromise","_signUpload","_sendUpload","_completeChunk","singlePartPromise","_sendSinglepartComplete","_uploadFileComplete","authorization","authHeader","dateHeader","securityToken","requestPromise","round","singelPartPromise","_abortComplete","enabled","_checkCacheSupport","support","sessionStorage","setItem","removeItem","retrieve","cacheKey","getItem","expiry","remove","JSONResult","diff","forced","property","properties","propertiesLength","forcedLength","n","original","diffArray","items","itemsLength","results","byId","trash","deleteMethods","permanent","search","_tokenSource","getAll","_updateCachedResources","getById","cachedResult","_updateCachedResource","getTrashed","update","_deleteResource","permanentDelete","_deleteCachedResource","encodeURIComponent","searchTrash","count","_handleCountResponse","trashCount","parseInt","dataLength","PlaybackContent","overrides","thumbnail","thumbnails","create","getThumbnails","addExternalThumbnails","images","imagesToAdd","uploadThumbnail","image","formData","File","append","currentUser","transfer","revoke","getCurrentUserInfo","transferUserAuthorship","oldId","newId","revokeCurrentUser","keysById","invite","linkUser","networkId","userId","unlinkUser","inviteUser","email","getSecureKeys","addSecureKey","getSecureKeyById","keyId","updateSecureKey","deleteSecureKey","variants","withVariants","missingVariants","getPlaylists","getVariants","getVideosWithVariants","getVideosMissingVariants","link","playlistId","video","_linkVideos","unlink","videosToLink","customers","createCustomer","stripeToken"],"mappings":"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","file":"ingest.js","sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"IngestAPI\"] = factory();\n\telse\n\t\troot[\"IngestAPI\"] = factory();\n})(this, function() {\nreturn \n\n\n/** WEBPACK FOOTER **\n ** webpack/universalModuleDefinition\n **/","(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"IngestAPI\"] = factory();\n\telse\n\t\troot[\"IngestAPI\"] = factory();\n})(this, function() {\nreturn /******/ (function(modules) { // webpackBootstrap\n/******/ \t// The module cache\n/******/ \tvar installedModules = {};\n/******/\n/******/ \t// The require function\n/******/ \tfunction __webpack_require__(moduleId) {\n/******/\n/******/ \t\t// Check if module is in cache\n/******/ \t\tif(installedModules[moduleId])\n/******/ \t\t\treturn installedModules[moduleId].exports;\n/******/\n/******/ \t\t// Create a new module (and put it into the cache)\n/******/ \t\tvar module = installedModules[moduleId] = {\n/******/ \t\t\texports: {},\n/******/ \t\t\tid: moduleId,\n/******/ \t\t\tloaded: false\n/******/ \t\t};\n/******/\n/******/ \t\t// Execute the module function\n/******/ \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n/******/\n/******/ \t\t// Flag the module as loaded\n/******/ \t\tmodule.loaded = true;\n/******/\n/******/ \t\t// Return the exports of the module\n/******/ \t\treturn module.exports;\n/******/ \t}\n/******/\n/******/\n/******/ \t// expose the modules object (__webpack_modules__)\n/******/ \t__webpack_require__.m = modules;\n/******/\n/******/ \t// expose the module cache\n/******/ \t__webpack_require__.c = installedModules;\n/******/\n/******/ \t// __webpack_public_path__\n/******/ \t__webpack_require__.p = \"\";\n/******/\n/******/ \t// Load entry module and return exports\n/******/ \treturn __webpack_require__(0);\n/******/ })\n/************************************************************************/\n/******/ ([\n/* 0 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\tmodule.exports = __webpack_require__(1);\n\n\n/***/ },\n/* 1 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\t\n\tvar extend = __webpack_require__(2);\n\tvar Request = __webpack_require__(3);\n\tvar JWTUtils = __webpack_require__(8);\n\tvar utils = __webpack_require__(9);\n\tvar Uploader = __webpack_require__(10);\n\tvar Cache = __webpack_require__(11);\n\t\n\tvar Resource = __webpack_require__(12);\n\tvar Media = __webpack_require__(13);\n\tvar Users = __webpack_require__(14);\n\tvar Networks = __webpack_require__(15);\n\tvar Videos = __webpack_require__(16);\n\tvar Playlists = __webpack_require__(17);\n\tvar Jobs = __webpack_require__(18);\n\tvar Billing = __webpack_require__(19);\n\t\n\t/**\n\t * IngestAPI Object\n\t * @class\n\t * @param {object}  options        Options to override the default.\n\t * @param {string}  options.host   Override the default live host.\n\t * @param {string}  options.token  Auth token to use for requests.\n\t */\n\tfunction IngestAPI (options) {\n\t\n\t  this.defaults = {\n\t    'host': 'https://api.ingest.io',\n\t    'cacheAge': 300000, // 5 minutes\n\t    'inputs': '/encoding/inputs',\n\t    'inputsById' : '/encoding/inputs/<%=id%>',\n\t    'inputsUpload': '/encoding/inputs/<%=id%>/upload<%=method%>',\n\t    'inputsUploadSign': '/encoding/inputs/<%=id%>/upload/sign<%=method%>',\n\t    'inputsUploadComplete': '/encoding/inputs/<%=id%>/upload/complete',\n\t    'inputsUploadAbort': '/encoding/inputs/<%=id%>/upload/abort'\n\t  };\n\t\n\t  // Create a config object by extending the defaults with the pass options.\n\t  this.config = extend(true, {}, this.defaults, options);\n\t\n\t  this.token = null;\n\t\n\t  if (this.config.token) {\n\t    // Store the token for future use.\n\t    this.setToken(this.config.token);\n\t  }\n\t\n\t  /* Exposed for testing */\n\t  this.request = Request;\n\t  this.JWTUtils = JWTUtils;\n\t  this.utils = utils;\n\t  this.resource = Resource;\n\t  this.playbackContent = Media;\n\t  this.usersResource = Users;\n\t  this.networksResource = Networks;\n\t  this.videosResource = Videos;\n\t  this.playlistsResource = Playlists;\n\t  this.jobsResource = Jobs;\n\t  this.billingResource = Billing;\n\t  this.uploader = Uploader;\n\t\n\t  this.cache = new Cache(this.config.cacheAge);\n\t\n\t  this._getToken = this.getToken.bind(this);\n\t\n\t  this.videos = new Videos({\n\t    host: this.config.host,\n\t    resource: 'videos',\n\t    tokenSource: this._getToken,\n\t    cache: this.cache\n\t  });\n\t\n\t  this.playlists = new Playlists({\n\t    host: this.config.host,\n\t    resource: 'playlists',\n\t    tokenSource: this._getToken\n\t  });\n\t\n\t  this.inputs = new Resource({\n\t    host: this.config.host,\n\t    resource: 'encoding/inputs',\n\t    tokenSource: this._getToken,\n\t    cache: this.cache\n\t  });\n\t\n\t  this.users = new Users({\n\t    host: this.config.host,\n\t    resource: 'users',\n\t    tokenSource: this._getToken\n\t  });\n\t\n\t  this.networks = new Networks({\n\t    host: this.config.host,\n\t    resource: 'networks',\n\t    tokenSource: this._getToken\n\t  });\n\t\n\t  this.profiles = new Resource({\n\t    host: this.config.host,\n\t    resource: 'encoding/profiles',\n\t    tokenSource: this._getToken\n\t  });\n\t\n\t  this.jobs = new Jobs({\n\t    host: this.config.host,\n\t    resource: 'encoding/jobs',\n\t    tokenSource: this._getToken,\n\t    cache: this.cache\n\t  });\n\t\n\t  this.billing = new Billing({\n\t    host: this.config.host,\n\t    resource: 'billing',\n\t    tokenSource: this._getToken\n\t  });\n\t\n\t}\n\t\n\t/** Token **/\n\t/**\n\t * Set the auth token to use.\n\t * @param   {String}        token Auth token to use.\n\t */\n\tIngestAPI.prototype.setToken = function (token) {\n\t\n\t  // Make sure a valid value is passed.\n\t  if (typeof token !== 'string') {\n\t    throw new Error('IngestAPI requires an authentication token passed as a string.');\n\t  }\n\t\n\t  this.token = token;\n\t};\n\t\n\t/**\n\t * Return the current auth token.\n\t * @return  {String}        Current auth token, or null if a token has not been set.\n\t */\n\tIngestAPI.prototype.getToken = function () {\n\t  return this.token;\n\t};\n\t\n\t/**\n\t * Create a new input and upload a file.\n\t * @param  {File}   file    File to upload.\n\t * @return {Promise} A promise which resolves when the upload is complete.\n\t */\n\tIngestAPI.prototype.upload = function (file) {\n\t  return new Uploader({\n\t    file: file,\n\t    api: this,\n\t    host: this.config.host\n\t  });\n\t};\n\t\n\tmodule.exports = IngestAPI;\n\n\n/***/ },\n/* 2 */\n/***/ function(module, exports) {\n\n\t'use strict';\n\t\n\tvar hasOwn = Object.prototype.hasOwnProperty;\n\tvar toStr = Object.prototype.toString;\n\t\n\tvar isArray = function isArray(arr) {\n\t\tif (typeof Array.isArray === 'function') {\n\t\t\treturn Array.isArray(arr);\n\t\t}\n\t\n\t\treturn toStr.call(arr) === '[object Array]';\n\t};\n\t\n\tvar isPlainObject = function isPlainObject(obj) {\n\t\tif (!obj || toStr.call(obj) !== '[object Object]') {\n\t\t\treturn false;\n\t\t}\n\t\n\t\tvar hasOwnConstructor = hasOwn.call(obj, 'constructor');\n\t\tvar hasIsPrototypeOf = obj.constructor && obj.constructor.prototype && hasOwn.call(obj.constructor.prototype, 'isPrototypeOf');\n\t\t// Not own constructor property must be Object\n\t\tif (obj.constructor && !hasOwnConstructor && !hasIsPrototypeOf) {\n\t\t\treturn false;\n\t\t}\n\t\n\t\t// Own properties are enumerated firstly, so to speed up,\n\t\t// if last one is own, then all properties are own.\n\t\tvar key;\n\t\tfor (key in obj) {/**/}\n\t\n\t\treturn typeof key === 'undefined' || hasOwn.call(obj, key);\n\t};\n\t\n\tmodule.exports = function extend() {\n\t\tvar options, name, src, copy, copyIsArray, clone,\n\t\t\ttarget = arguments[0],\n\t\t\ti = 1,\n\t\t\tlength = arguments.length,\n\t\t\tdeep = false;\n\t\n\t\t// Handle a deep copy situation\n\t\tif (typeof target === 'boolean') {\n\t\t\tdeep = target;\n\t\t\ttarget = arguments[1] || {};\n\t\t\t// skip the boolean and the target\n\t\t\ti = 2;\n\t\t} else if ((typeof target !== 'object' && typeof target !== 'function') || target == null) {\n\t\t\ttarget = {};\n\t\t}\n\t\n\t\tfor (; i < length; ++i) {\n\t\t\toptions = arguments[i];\n\t\t\t// Only deal with non-null/undefined values\n\t\t\tif (options != null) {\n\t\t\t\t// Extend the base object\n\t\t\t\tfor (name in options) {\n\t\t\t\t\tsrc = target[name];\n\t\t\t\t\tcopy = options[name];\n\t\n\t\t\t\t\t// Prevent never-ending loop\n\t\t\t\t\tif (target !== copy) {\n\t\t\t\t\t\t// Recurse if we're merging plain objects or arrays\n\t\t\t\t\t\tif (deep && copy && (isPlainObject(copy) || (copyIsArray = isArray(copy)))) {\n\t\t\t\t\t\t\tif (copyIsArray) {\n\t\t\t\t\t\t\t\tcopyIsArray = false;\n\t\t\t\t\t\t\t\tclone = src && isArray(src) ? src : [];\n\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\tclone = src && isPlainObject(src) ? src : {};\n\t\t\t\t\t\t\t}\n\t\n\t\t\t\t\t\t\t// Never move original objects, clone them\n\t\t\t\t\t\t\ttarget[name] = extend(deep, clone, copy);\n\t\n\t\t\t\t\t\t// Don't bring in undefined values\n\t\t\t\t\t\t} else if (typeof copy !== 'undefined') {\n\t\t\t\t\t\t\ttarget[name] = copy;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\n\t\t// Return the modified object\n\t\treturn target;\n\t};\n\t\n\n\n/***/ },\n/* 3 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\t\n\tvar Promise = __webpack_require__(4);\n\tvar extend = __webpack_require__(2);\n\t\n\tvar JWTUtils = __webpack_require__(8);\n\t\n\tvar VALID_RESPONSE_CODES = [200, 201, 202, 204];\n\t\n\t/**\n\t * A wrapper around the XMLHttpRequest object.\n\t * @param {object}  options         Options for the request.\n\t * @param {boolean} options.async   Whether to perform the request asynchronously\n\t * @param {string}  options.method  REST verb to use for the request.\n\t * @param {string}  options.url     URL for the request.\n\t */\n\tvar Request = function (options) {\n\t\n\t  this.defaults = {\n\t    async: true,\n\t    method: 'GET',\n\t    ignoreAcceptHeader: false\n\t  };\n\t\n\t  // Create the XHR object for this request.\n\t  this.request = new XMLHttpRequest();\n\t\n\t  // Set up event listeners for this request.\n\t  this.setupListeners();\n\t\n\t  // Todo, merge some defaults with this.\n\t  this.options = extend(true, this.defaults, options);\n\t\n\t};\n\t\n\t/**\n\t * Send the request and return a promise to resolve when the request is complete.\n\t * @return {Promise} A promise which resolves when the request is complete.\n\t */\n\tRequest.prototype.send = function () {\n\t\n\t  this.promise = Promise();\n\t\n\t  // Make sure a url is passed before attempting to make the request.\n\t  if (this.options.url) {\n\t    // Make the actual request.\n\t    this.makeRequest();\n\t  } else {\n\t    this.requestError('Request Error : a url is required to make the request.');\n\t  }\n\t\n\t  return this.promise;\n\t\n\t};\n\t\n\t/**\n\t * Add event listeners to the XMLHttpRequest object.\n\t */\n\tRequest.prototype.setupListeners = function () {\n\t  this.request.onreadystatechange = this.readyStateChange.bind(this);\n\t};\n\t\n\t/**\n\t * Execute the open and send of the XMLHttpRequest\n\t */\n\tRequest.prototype.makeRequest = function () {\n\t\n\t  var postData = this.preparePostData(this.options.data);\n\t  var headers = this.options.headers;\n\t  var hasContentType = headers && headers.hasOwnProperty('Content-Type');\n\t\n\t  if (!postData.success) {\n\t    this.requestError('Request Error : error preparing post data.');\n\t    return;\n\t  }\n\t\n\t  this.request.open(this.options.method, this.options.url, this.options.async);\n\t\n\t  // Set before we apply the headers so it can be overridden on a per request basis.\n\t  if (!this.options.ignoreAcceptHeader) {\n\t    this.request.setRequestHeader('Accept', 'application/vnd.ingest.v1+json');\n\t  }\n\t\n\t  if (headers) {\n\t    this.applyRequestHeaders(headers);\n\t  }\n\t\n\t  // Make the token optional.\n\t  if (this.options.token) {\n\t\n\t    // If there is a token present ensure that it's still valid.\n\t    if (JWTUtils.isExpired(this.options.token)) {\n\t      this.requestError('Request Error : token is expired.');\n\t      return;\n\t    }\n\t\n\t    this.request.setRequestHeader('Authorization', this.options.token);\n\t\n\t  }\n\t\n\t  // Set the default content type when posting data.\n\t  if (postData.data && postData.type === 'JSON' && !hasContentType) {\n\t    this.request.setRequestHeader('Content-Type', 'application/vnd.ingest.v1+json');\n\t  }\n\t\n\t  // If there is data then we need to pass that along with the request.\n\t  if (postData.data) {\n\t    this.request.send(postData.data);\n\t  } else {\n\t    this.request.send();\n\t  }\n\t\n\t};\n\t\n\t/**\n\t * Stringify the post data if it is present.\n\t * @param  {object} data Object to be parsed.\n\t * @return {object}      Result object with the parsed string, and a success boolean flag.\n\t */\n\tRequest.prototype.preparePostData = function (data) {\n\t\n\t  var result = {\n\t    success: true,\n\t    data: data,\n\t    type: 'JSON'\n\t  };\n\t\n\t  // In the case of file uploads, all FormData to be passed to the request.\n\t  if (data instanceof FormData) {\n\t    result.type = 'FormData';\n\t    return result;\n\t  }\n\t\n\t  if (data instanceof Blob) {\n\t    result.type = 'File';\n\t    return result;\n\t  }\n\t\n\t  // If the data is populated, and its not already a string parse it.\n\t  if (data) {\n\t    try {\n\t      result.data = JSON.stringify(data);\n\t    } catch (error) {\n\t      result.success = false;\n\t      result.data = null;\n\t    }\n\t  }\n\t\n\t  return result;\n\t\n\t};\n\t\n\t/**\n\t * Apply any supplied headers to the request object.\n\t * @param  {object} headers Array of headers to apply to the request object.\n\t */\n\tRequest.prototype.applyRequestHeaders = function (headers) {\n\t\n\t  var key, i;\n\t  var keys = Object.keys(headers);\n\t  var keysLength = keys.length;\n\t\n\t  // Loop through and add the keys to the requestHeaders.\n\t  for (i = 0; i < keysLength; i++) {\n\t    key = keys[i];\n\t    this.request.setRequestHeader(key, headers[key]);\n\t  }\n\t\n\t};\n\t\n\t/**\n\t * Handle the completion of the request and fulfill the promise.\n\t * @param  {String} Response test of the request.\n\t */\n\tRequest.prototype.requestComplete = function (response) {\n\t\n\t  // Process the result.\n\t  this.response = this.processResponse(response);\n\t\n\t  // Either resolve or reject the promise.\n\t  this.promise(!this.response.data.error, [this.response]);\n\t\n\t};\n\t\n\t/**\n\t * Process the response and parse certain content types.\n\t * @param  {*}  response  Response data from request.\n\t * @return {*}            Processed response data.\n\t */\n\tRequest.prototype.processResponse = function (response) {\n\t  var responseType = this.request.getResponseHeader('Content-Type');\n\t  var result = response;\n\t\n\t  // Parse JSON if the result is JSON.\n\t  if (responseType && responseType.indexOf('json') !== -1) {\n\t    try {\n\t      result = JSON.parse(response);\n\t    } catch (error) {\n\t      result = {\n\t        error: 'JSON parsing failed. ' + error.stack\n\t      };\n\t    }\n\t  }\n\t\n\t  return {\n\t    data: result,\n\t    headers: this.request.getResponseHeader.bind(this.request),\n\t    statusCode: this.request.status\n\t  };\n\t\n\t};\n\t\n\t/**\n\t * Resolve the promise.\n\t * @param  {String} message   Error message.\n\t */\n\tRequest.prototype.requestError = function (message) {\n\t  // Reject the promise.\n\t  this.promise(false, [{\n\t    message: message,\n\t    headers: this.request.getAllResponseHeaders(),\n\t    statusCode: this.request.status\n\t  }]);\n\t};\n\t\n\t/**\n\t * Handle ready state change events.\n\t */\n\tRequest.prototype.readyStateChange = function () {\n\t\n\t  // Request is complete.\n\t  if (this.request.readyState === 4) {\n\t\n\t    // Check if the final response code is valid.\n\t    if (this.isValidResponseCode(this.request.status)) {\n\t      this.requestComplete(this.request.responseText);\n\t    } else {\n\t      this.requestError('Invalid response code.');\n\t    }\n\t\n\t  }\n\t\n\t};\n\t\n\t/**\n\t * Validate the current response code to see if the request was a success.\n\t * @param  {Number}  responseCode Response Code.\n\t * @return {Boolean}              Should this be treated as a successful response code.\n\t */\n\tRequest.prototype.isValidResponseCode = function (responseCode) {\n\t\n\t  var result = false,\n\t    responseCodeCount = VALID_RESPONSE_CODES.length,\n\t    i;\n\t\n\t  // Check if the supplied code is in our list of valid codes.\n\t  for (i = 0; i < responseCodeCount; i++) {\n\t\n\t    if (responseCode === VALID_RESPONSE_CODES[i]) {\n\t      result = true;\n\t      break;\n\t    }\n\t\n\t  }\n\t\n\t  return result;\n\t\n\t};\n\t\n\t/**\n\t * Cancel the current XHR request.\n\t */\n\tRequest.prototype.cancel = function () {\n\t  // Remove the event listener.\n\t  this.request.onreadystatechange = null;\n\t  this.request.abort();\n\t  this.requestError('Request has been canceled.');\n\t};\n\t\n\tmodule.exports = Request;\n\n\n/***/ },\n/* 4 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t/* WEBPACK VAR INJECTION */(function(module, setImmediate, process) {/*\n\t * PinkySwear.js 2.2.2 - Minimalistic implementation of the Promises/A+ spec\n\t * \n\t * Public Domain. Use, modify and distribute it any way you like. No attribution required.\n\t *\n\t * NO WARRANTY EXPRESSED OR IMPLIED. USE AT YOUR OWN RISK.\n\t *\n\t * PinkySwear is a very small implementation of the Promises/A+ specification. After compilation with the\n\t * Google Closure Compiler and gzipping it weighs less than 500 bytes. It is based on the implementation for \n\t * Minified.js and should be perfect for embedding. \n\t *\n\t *\n\t * PinkySwear has just three functions.\n\t *\n\t * To create a new promise in pending state, call pinkySwear():\n\t *         var promise = pinkySwear();\n\t *\n\t * The returned object has a Promises/A+ compatible then() implementation:\n\t *          promise.then(function(value) { alert(\"Success!\"); }, function(value) { alert(\"Failure!\"); });\n\t *\n\t *\n\t * The promise returned by pinkySwear() is a function. To fulfill the promise, call the function with true as first argument and\n\t * an optional array of values to pass to the then() handler. By putting more than one value in the array, you can pass more than one\n\t * value to the then() handlers. Here an example to fulfill a promsise, this time with only one argument: \n\t *         promise(true, [42]);\n\t *\n\t * When the promise has been rejected, call it with false. Again, there may be more than one argument for the then() handler:\n\t *         promise(true, [6, 6, 6]);\n\t *         \n\t * You can obtain the promise's current state by calling the function without arguments. It will be true if fulfilled,\n\t * false if rejected, and otherwise undefined.\n\t * \t\t   var state = promise(); \n\t * \n\t * https://github.com/timjansen/PinkySwear.js\n\t */\n\t(function(target) {\n\t\tvar undef;\n\t\n\t\tfunction isFunction(f) {\n\t\t\treturn typeof f == 'function';\n\t\t}\n\t\tfunction isObject(f) {\n\t\t\treturn typeof f == 'object';\n\t\t}\n\t\tfunction defer(callback) {\n\t\t\tif (typeof setImmediate != 'undefined')\n\t\t\t\tsetImmediate(callback);\n\t\t\telse if (typeof process != 'undefined' && process['nextTick'])\n\t\t\t\tprocess['nextTick'](callback);\n\t\t\telse\n\t\t\t\tsetTimeout(callback, 0);\n\t\t}\n\t\n\t\ttarget[0][target[1]] = function pinkySwear(extend) {\n\t\t\tvar state;           // undefined/null = pending, true = fulfilled, false = rejected\n\t\t\tvar values = [];     // an array of values as arguments for the then() handlers\n\t\t\tvar deferred = [];   // functions to call when set() is invoked\n\t\n\t\t\tvar set = function(newState, newValues) {\n\t\t\t\tif (state == null && newState != null) {\n\t\t\t\t\tstate = newState;\n\t\t\t\t\tvalues = newValues;\n\t\t\t\t\tif (deferred.length)\n\t\t\t\t\t\tdefer(function() {\n\t\t\t\t\t\t\tfor (var i = 0; i < deferred.length; i++)\n\t\t\t\t\t\t\t\tdeferred[i]();\n\t\t\t\t\t\t});\n\t\t\t\t}\n\t\t\t\treturn state;\n\t\t\t};\n\t\n\t\t\tset['then'] = function (onFulfilled, onRejected) {\n\t\t\t\tvar promise2 = pinkySwear(extend);\n\t\t\t\tvar callCallbacks = function() {\n\t\t    \t\ttry {\n\t\t    \t\t\tvar f = (state ? onFulfilled : onRejected);\n\t\t    \t\t\tif (isFunction(f)) {\n\t\t\t   \t\t\t\tfunction resolve(x) {\n\t\t\t\t\t\t\t    var then, cbCalled = 0;\n\t\t\t   \t\t\t\t\ttry {\n\t\t\t\t\t   \t\t\t\tif (x && (isObject(x) || isFunction(x)) && isFunction(then = x['then'])) {\n\t\t\t\t\t\t\t\t\t\t\tif (x === promise2)\n\t\t\t\t\t\t\t\t\t\t\t\tthrow new TypeError();\n\t\t\t\t\t\t\t\t\t\t\tthen['call'](x,\n\t\t\t\t\t\t\t\t\t\t\t\tfunction() { if (!cbCalled++) resolve.apply(undef,arguments); } ,\n\t\t\t\t\t\t\t\t\t\t\t\tfunction(value){ if (!cbCalled++) promise2(false,[value]);});\n\t\t\t\t\t   \t\t\t\t}\n\t\t\t\t\t   \t\t\t\telse\n\t\t\t\t\t   \t\t\t\t\tpromise2(true, arguments);\n\t\t\t   \t\t\t\t\t}\n\t\t\t   \t\t\t\t\tcatch(e) {\n\t\t\t   \t\t\t\t\t\tif (!cbCalled++)\n\t\t\t   \t\t\t\t\t\t\tpromise2(false, [e]);\n\t\t\t   \t\t\t\t\t}\n\t\t\t   \t\t\t\t}\n\t\t\t   \t\t\t\tresolve(f.apply(undef, values || []));\n\t\t\t   \t\t\t}\n\t\t\t   \t\t\telse\n\t\t\t   \t\t\t\tpromise2(state, values);\n\t\t\t\t\t}\n\t\t\t\t\tcatch (e) {\n\t\t\t\t\t\tpromise2(false, [e]);\n\t\t\t\t\t}\n\t\t\t\t};\n\t\t\t\tif (state != null)\n\t\t\t\t\tdefer(callCallbacks);\n\t\t\t\telse\n\t\t\t\t\tdeferred.push(callCallbacks);\n\t\t\t\treturn promise2;\n\t\t\t};\n\t        if(extend){\n\t            set = extend(set);\n\t        }\n\t\t\treturn set;\n\t\t};\n\t})( false ? [window, 'pinkySwear'] : [module, 'exports']);\n\t\n\t\n\t/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(5)(module), __webpack_require__(6).setImmediate, __webpack_require__(7)))\n\n/***/ },\n/* 5 */\n/***/ function(module, exports) {\n\n\tmodule.exports = function(module) {\r\n\t\tif(!module.webpackPolyfill) {\r\n\t\t\tmodule.deprecate = function() {};\r\n\t\t\tmodule.paths = [];\r\n\t\t\t// module.parent = undefined by default\r\n\t\t\tmodule.children = [];\r\n\t\t\tmodule.webpackPolyfill = 1;\r\n\t\t}\r\n\t\treturn module;\r\n\t}\r\n\n\n/***/ },\n/* 6 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t/* WEBPACK VAR INJECTION */(function(setImmediate, clearImmediate) {var nextTick = __webpack_require__(7).nextTick;\n\tvar apply = Function.prototype.apply;\n\tvar slice = Array.prototype.slice;\n\tvar immediateIds = {};\n\tvar nextImmediateId = 0;\n\t\n\t// DOM APIs, for completeness\n\t\n\texports.setTimeout = function() {\n\t  return new Timeout(apply.call(setTimeout, window, arguments), clearTimeout);\n\t};\n\texports.setInterval = function() {\n\t  return new Timeout(apply.call(setInterval, window, arguments), clearInterval);\n\t};\n\texports.clearTimeout =\n\texports.clearInterval = function(timeout) { timeout.close(); };\n\t\n\tfunction Timeout(id, clearFn) {\n\t  this._id = id;\n\t  this._clearFn = clearFn;\n\t}\n\tTimeout.prototype.unref = Timeout.prototype.ref = function() {};\n\tTimeout.prototype.close = function() {\n\t  this._clearFn.call(window, this._id);\n\t};\n\t\n\t// Does not start the time, just sets up the members needed.\n\texports.enroll = function(item, msecs) {\n\t  clearTimeout(item._idleTimeoutId);\n\t  item._idleTimeout = msecs;\n\t};\n\t\n\texports.unenroll = function(item) {\n\t  clearTimeout(item._idleTimeoutId);\n\t  item._idleTimeout = -1;\n\t};\n\t\n\texports._unrefActive = exports.active = function(item) {\n\t  clearTimeout(item._idleTimeoutId);\n\t\n\t  var msecs = item._idleTimeout;\n\t  if (msecs >= 0) {\n\t    item._idleTimeoutId = setTimeout(function onTimeout() {\n\t      if (item._onTimeout)\n\t        item._onTimeout();\n\t    }, msecs);\n\t  }\n\t};\n\t\n\t// That's not how node.js implements it but the exposed api is the same.\n\texports.setImmediate = typeof setImmediate === \"function\" ? setImmediate : function(fn) {\n\t  var id = nextImmediateId++;\n\t  var args = arguments.length < 2 ? false : slice.call(arguments, 1);\n\t\n\t  immediateIds[id] = true;\n\t\n\t  nextTick(function onNextTick() {\n\t    if (immediateIds[id]) {\n\t      // fn.call() is faster so we optimize for the common use-case\n\t      // @see http://jsperf.com/call-apply-segu\n\t      if (args) {\n\t        fn.apply(null, args);\n\t      } else {\n\t        fn.call(null);\n\t      }\n\t      // Prevent ids from leaking\n\t      exports.clearImmediate(id);\n\t    }\n\t  });\n\t\n\t  return id;\n\t};\n\t\n\texports.clearImmediate = typeof clearImmediate === \"function\" ? clearImmediate : function(id) {\n\t  delete immediateIds[id];\n\t};\n\t/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(6).setImmediate, __webpack_require__(6).clearImmediate))\n\n/***/ },\n/* 7 */\n/***/ function(module, exports) {\n\n\t// shim for using process in browser\n\t\n\tvar process = module.exports = {};\n\tvar queue = [];\n\tvar draining = false;\n\tvar currentQueue;\n\tvar queueIndex = -1;\n\t\n\tfunction cleanUpNextTick() {\n\t    draining = false;\n\t    if (currentQueue.length) {\n\t        queue = currentQueue.concat(queue);\n\t    } else {\n\t        queueIndex = -1;\n\t    }\n\t    if (queue.length) {\n\t        drainQueue();\n\t    }\n\t}\n\t\n\tfunction drainQueue() {\n\t    if (draining) {\n\t        return;\n\t    }\n\t    var timeout = setTimeout(cleanUpNextTick);\n\t    draining = true;\n\t\n\t    var len = queue.length;\n\t    while(len) {\n\t        currentQueue = queue;\n\t        queue = [];\n\t        while (++queueIndex < len) {\n\t            if (currentQueue) {\n\t                currentQueue[queueIndex].run();\n\t            }\n\t        }\n\t        queueIndex = -1;\n\t        len = queue.length;\n\t    }\n\t    currentQueue = null;\n\t    draining = false;\n\t    clearTimeout(timeout);\n\t}\n\t\n\tprocess.nextTick = function (fun) {\n\t    var args = new Array(arguments.length - 1);\n\t    if (arguments.length > 1) {\n\t        for (var i = 1; i < arguments.length; i++) {\n\t            args[i - 1] = arguments[i];\n\t        }\n\t    }\n\t    queue.push(new Item(fun, args));\n\t    if (queue.length === 1 && !draining) {\n\t        setTimeout(drainQueue, 0);\n\t    }\n\t};\n\t\n\t// v8 likes predictible objects\n\tfunction Item(fun, array) {\n\t    this.fun = fun;\n\t    this.array = array;\n\t}\n\tItem.prototype.run = function () {\n\t    this.fun.apply(null, this.array);\n\t};\n\tprocess.title = 'browser';\n\tprocess.browser = true;\n\tprocess.env = {};\n\tprocess.argv = [];\n\tprocess.version = ''; // empty string to avoid regexp issues\n\tprocess.versions = {};\n\t\n\tfunction noop() {}\n\t\n\tprocess.on = noop;\n\tprocess.addListener = noop;\n\tprocess.once = noop;\n\tprocess.off = noop;\n\tprocess.removeListener = noop;\n\tprocess.removeAllListeners = noop;\n\tprocess.emit = noop;\n\t\n\tprocess.binding = function (name) {\n\t    throw new Error('process.binding is not supported');\n\t};\n\t\n\tprocess.cwd = function () { return '/' };\n\tprocess.chdir = function (dir) {\n\t    throw new Error('process.chdir is not supported');\n\t};\n\tprocess.umask = function() { return 0; };\n\n\n/***/ },\n/* 8 */\n/***/ function(module, exports) {\n\n\t'use strict';\n\t\n\t/**\n\t * UTILS for dealing with jwt tokens.\n\t */\n\t\n\t/**\n\t * Parse the payload out of the JWT token.\n\t * @param  {string} token JWT Token.\n\t * @return {object}       Parsed payload object.\n\t */\n\tvar parseTokenPayload = function (token) {\n\t  var parts = token.split('.');\n\t\n\t  // Return false if the token is invalid.\n\t  if (parts.length <= 1) {\n\t    return false;\n\t  }\n\t\n\t  // decode the payload portion.\n\t  var payload = window.atob(parts[1]);\n\t\n\t  // parse it as JSON\n\t  payload = JSON.parse(payload);\n\t\n\t  return payload;\n\t};\n\t\n\t/**\n\t * Return true if the provided token has expired.\n\t * @param  {string}  token JWT Token\n\t * @return {Boolean}       True if expired.\n\t */\n\tmodule.exports.isExpired = function (token) {\n\t  var data, exp, result, now;\n\t\n\t  data = parseTokenPayload(token);\n\t\n\t  result = true;\n\t\n\t  // Return true if the token does not parse properly.\n\t  if (!data) {\n\t    return result;\n\t  }\n\t\n\t  exp = data.exp;\n\t\n\t  // Get the unix timestamp in seconds.\n\t  now = new Date();\n\t  now = now.getTime() / 1000;\n\t\n\t  if (!exp) {\n\t    return result;\n\t  }\n\t\n\t  // If the expiry data is still in the future.\n\t  if (now < exp) {\n\t    result = false;\n\t  }\n\t\n\t  return result;\n\t\n\t};\n\n\n/***/ },\n/* 9 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\t\n\tvar Promise = __webpack_require__(4);\n\tvar Utils = {};\n\t/**\n\t * Replace all tokens within a given template based on the given key/value pair.\n\t * @param  {string}     template    Template for the url.\n\t * @param  {object}     hash        Key/Value pair for replacing tokens in the template.\n\t *\n\t * @example\n\t * var tokens = {\n\t *  keyInTemplate: 'replacedWith'\n\t * };\n\t *\n\t * var template = '<%=keyInTemplate%>';\n\t *\n\t * var result = parseTokens(template, tokens);  // 'replacedWith'\n\t *\n\t * @return {string}                 Parsed string.\n\t */\n\tUtils.parseTokens = function (template, hash) {\n\t  if (!template) {\n\t    return null;\n\t  }\n\t\n\t  var keys = Object.keys(hash);\n\t  var i;\n\t  var length = keys.length;\n\t\n\t  for (i = 0; i < length; i++) {\n\t    template = template.replace('<%=' + keys[i] + '%>', hash[keys[i]]);\n\t  }\n\t\n\t  return template;\n\t};\n\t\n\t/**\n\t * Wrapper function to wrap a value in either a reject or resolve.\n\t * @param  {boolean} state Rejection or Approval.\n\t * @param  {*}       value Value to pass back to the promise.\n\t * @return {Promise}       Promise/A+ spec promise.\n\t */\n\tUtils.promisify = function (state, value) {\n\t  var promise = Promise();\n\t\n\t  promise(state, [value]);\n\t\n\t  return promise;\n\t};\n\t\n\t/**\n\t * Wrap an array of promises and return when they have all completed.\n\t * @param   {Array}     promises  An array of promises to manage.\n\t * @param   {boolean}   paused    A boolean to pause the execution of the promises.\n\t * @return  {Promise}             A promise that is resolved when all of the promises have fulfilled.\n\t */\n\tUtils.series = function (promises, paused) {\n\t\n\t  var promisesCount = promises.length;\n\t  var all = Promise();\n\t\n\t  var state = {\n\t    total: promisesCount,\n\t    complete: 0,\n\t    responses: [],\n\t    promises: promises,\n\t    paused: true\n\t  };\n\t\n\t  all.pause = Utils._seriesPause.bind(undefined, all, state);\n\t  all.resume = Utils._seriesResume.bind(undefined, all, state);\n\t  all.cancel = Utils._seriesCancel.bind(undefined, all, state);\n\t\n\t  if (!paused) {\n\t    state.paused = false;\n\t    Utils._seriesCallPromise(promises[0], state, all);\n\t  }\n\t\n\t  return all;\n\t\n\t};\n\t\n\t/**\n\t * Call a promise and pass the complete and error functions.\n\t * @param  {Promise} promise Promise to execute on.\n\t * @param  {Object} state   Persistent state of the series of promises.\n\t */\n\tUtils._seriesCallPromise = function (promise, state, all) {\n\t  // call the promise;\n\t  if (!state.paused) {\n\t    promise().then(Utils._seriesComplete.bind(undefined, all, state),\n\t      Utils._seriesError.bind(undefined, all, state));\n\t  }\n\t};\n\t\n\t/**\n\t * Manage the progress of the promises.\n\t * @private\n\t * @param  {Promise} all      All promise.\n\t * @param  {Object}  state    State object used to persist the promise count.\n\t * @param  {Object}  response Response of the promise being fulfilled.\n\t */\n\tUtils._seriesComplete = function (all, state, response) {\n\t\n\t  // Early return if this has been canceled.\n\t  if (state.canceled) {\n\t    return;\n\t  }\n\t\n\t  // Increment the complete promises.\n\t  state.complete++;\n\t  state.responses.push(response);\n\t\n\t  if (state.complete >= state.total) {\n\t    all(true, state.responses);\n\t  } else {\n\t    if (!state.paused) {\n\t      // Execute the next promise.\n\t      Utils._seriesCallPromise(state.promises[state.complete], state, all);\n\t    }\n\t  }\n\t\n\t};\n\t\n\t/**\n\t * Immediately reject the promise if there is an error.\n\t * @param  {Promise} all  All promise.\n\t * @param  {Object}  state    State object used to persist the promise count.\n\t * @param  {Object}  response Response of the promise being fulfilled.\n\t */\n\tUtils._seriesError = function (all, state, error) {\n\t  all(false, [error]);\n\t};\n\t\n\t/**\n\t * Pause the current series of promises.\n\t * @param  {Promise} all  All promise.\n\t * @param  {Object}  state    State object used to persist the promise count.\n\t */\n\tUtils._seriesPause = function (all, state) {\n\t  state.paused = true;\n\t};\n\t\n\t/**\n\t * Resume the current series of promises.\n\t * @param  {Promise} all  All promise.\n\t * @param  {Object}  state    State object used to persist the promise count.\n\t */\n\tUtils._seriesResume = function (all, state) {\n\t  state.paused = false;\n\t\n\t  if (state.complete !== state.total) {\n\t    Utils._seriesCallPromise(state.promises[state.complete], state, all);\n\t  }\n\t};\n\t\n\t/**\n\t * Resolve the promise but return an empty response.\n\t * @param  {Promise}  all     All promise.\n\t * @param  {Object}   state   State object used to persist the promise count.\n\t */\n\tUtils._seriesCancel = function (all, state) {\n\t  state.canceled = true;\n\t  all(true, []);\n\t};\n\t\n\t/**\n\t * Return true if a file provided matches a support image type.\n\t * @param  {file}     file  A reference to an image file.\n\t * @return {Boolean}        True if the type matches a known image type.\n\t */\n\tUtils.isImage = function (file) {\n\t  return file.type.indexOf('image') !== -1;\n\t};\n\t\n\tmodule.exports = Utils;\n\n\n/***/ },\n/* 10 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\t\n\tvar extend = __webpack_require__(2);\n\tvar Request = __webpack_require__(3);\n\tvar Promise = __webpack_require__(4);\n\tvar utils = __webpack_require__(9);\n\tvar JWTUtils = __webpack_require__(8);\n\t\n\t/**\n\t * Create a new upload wrapper.  Manages the entire upload of a file.\n\t * @class\n\t * @param   {object}  options                   Configuration options to override the defaults.\n\t * @param   {object}  options.api               A reference to the parent API instance.\n\t * @param   {object}  options.file              The file to upload.\n\t * @param   {object}  options.upload            REST endpoint for creating an input.\n\t * @param   {object}  options.sign              REST endpoint for signing a blob before upload.\n\t * @param   {object}  options.uploadComplete    REST endpoint to notify the API that the upload is complete.\n\t * @param   {object}  options.uploadAbort       REST endpoint to abort the upload.\n\t */\n\tfunction Upload (options) {\n\t\n\t  this.defaults = {\n\t    api: null,\n\t    file: null,\n\t    upload: '/encoding/inputs/<%=id%>/upload<%=method%>',\n\t    sign: '/encoding/inputs/<%=id%>/upload/sign<%=method%>',\n\t    uploadComplete: '/encoding/inputs/<%=id%>/upload/complete',\n\t    uploadAbort: '/encoding/inputs/<%=id%>/upload/abort<%=method%>',\n\t    uploadMethods: {\n\t      param: '?type=',\n\t      singlePart: 'amazon',\n\t      multiPart: 'amazonMP'\n\t    }\n\t  };\n\t\n\t  // Create a config object by extending the defaults with the pass options.\n\t  this.config = extend(true, {}, this.defaults, options);\n\t\n\t  this.api = this.config.api;\n\t  this.file = this.config.file;\n\t\n\t  this.chunks = [];\n\t  this.chunkSize = 0;\n\t  this.chunkCount = 0;\n\t  this.chunksComplete = 0;\n\t  this.uploadedBytes = 0;\n\t\n\t  this.aborted = false;\n\t  this.paused = false;\n\t  this.created = false;\n\t  this.initialized = false;\n\t\n\t  // Set to true when all the chunks are uploaded, but before the complete call is made.\n\t  this.uploadComplete = false;\n\t\n\t  this.fileRecord = {\n\t    filename: this.file.name,\n\t    type: this.file.type,\n\t    size: this.file.size,\n\t    method: this._checkMultipart(this.file)\n\t  };\n\t\n\t};\n\t\n\t/**\n\t * Register a function to execute when a chunk completes uploading.\n\t * @param  {Function} callback A callback to execute when progress is made.\n\t */\n\tUpload.prototype.progress = function (callback) {\n\t  this.config.progress = callback.bind(this);\n\t};\n\t\n\t/**\n\t * Create a new input record and upload the files to amazon.\n\t * @return  {Promise}         A promise which resolves when the new input record is created and uploaded.\n\t */\n\tUpload.prototype.save = function () {\n\t  return this._create(this.fileRecord)\n\t    .then(this._initialize.bind(this))\n\t    .then(this._prepareUpload.bind(this));\n\t};\n\t\n\t/**\n\t * Call the progress callback and pass the current progress percentage.\n\t * @private\n\t * @param  {number} message Current progress percentage.\n\t */\n\tUpload.prototype._updateProgress = function (percent, chunkSize) {\n\t\n\t  if (!this.config.progress) {\n\t    return;\n\t  }\n\t\n\t  this.config.progress.call(this, percent, chunkSize);\n\t};\n\t\n\t/**\n\t * Create a new input record.\n\t * @private\n\t * @param   {object}  record  A JSON object representing the input record to create.\n\t * @return  {Promise}         A promise which resolves when the new input record is created.\n\t */\n\tUpload.prototype._create = function (record) {\n\t\n\t  if (this.created) {\n\t    return utils.promisify(true, this.fileRecord.id);\n\t  }\n\t\n\t  if (this.aborted) {\n\t    return utils.promisify(false, 'upload aborted');\n\t  }\n\t\n\t  return this.api.inputs.add(record).then(this._createSuccess.bind(this));\n\t};\n\t\n\t/**\n\t * Return the data object from the response.\n\t * @private\n\t * @param  {JSON}   response  JSON response containing the new input record id.\n\t * @return {string}           new input record id.\n\t */\n\tUpload.prototype._createSuccess = function (response) {\n\t\n\t  this.created = true;\n\t\n\t  this._updateProgress(0, 0);\n\t\n\t  // Store the input record.\n\t  this.input = response.data;\n\t\n\t  this.fileRecord.id = response.data.id;\n\t\n\t  return this.fileRecord.id;\n\t};\n\t\n\t/**\n\t * Initializes an Input for upload\n\t * @private\n\t * @return {Promise} A promise which resolves when the request is complete.\n\t */\n\tUpload.prototype._initialize = function () {\n\t\n\t  var url;\n\t  var tokens;\n\t  var signing = '';\n\t  var request;\n\t\n\t  if (this.aborted) {\n\t    return utils.promisify(false, 'upload aborted');\n\t  }\n\t\n\t  if (!this.fileRecord.method) {\n\t    signing = this.config.uploadMethods.param + this.config.uploadMethods.singlePart;\n\t  }\n\t\n\t  tokens = {\n\t    id: this.fileRecord.id,\n\t    method: signing\n\t  };\n\t\n\t  url = utils.parseTokens(this.api.config.host + this.config.upload, tokens);\n\t\n\t  request = new Request({\n\t    url: url,\n\t    token: this.api.getToken(),\n\t    method: 'POST',\n\t    data: this.fileRecord\n\t  });\n\t\n\t  return request.send()\n\t          .then(this._initializeComplete.bind(this));\n\t\n\t};\n\t\n\t/**\n\t * Store the information returned from the initialize request.\n\t * @private\n\t */\n\tUpload.prototype._initializeComplete = function (response) {\n\t  this.initialized = true;\n\t  this.fileRecord.key = response.data.key;\n\t  this.fileRecord.uploadId = response.data.uploadId;\n\t  this.chunkSize = response.data.pieceSize;\n\t  this.chunkCount = response.data.pieceCount;\n\t};\n\t\n\t/**\n\t * Setup the upload depending on its type, single or multi part.\n\t * @return {Promise} A promise which resolves when all of the pieces have completed uploading.\n\t */\n\tUpload.prototype._prepareUpload = function () {\n\t  if (!this.fileRecord.method) {\n\t    // Singlepart.\n\t    return this._uploadFile()\n\t      .then(this._onCompleteUpload.bind(this));\n\t  } else {\n\t    // Multipart.\n\t    return this._createChunks()\n\t      .then(this._completeUpload.bind(this));\n\t  }\n\t};\n\t\n\t/**\n\t * Break a file into blobs and create a chunk object for each piece.\n\t * @private\n\t * @return {Promise} A promise which resolves when all of the pieces have completed uploading.\n\t */\n\tUpload.prototype._createChunks = function () {\n\t  var sliceMethod = this._getSliceMethod(this.file);\n\t  var i, blob, chunk, start, end,\n\t    chunkPromises = [];\n\t\n\t  if (this.aborted) {\n\t    this.abort();\n\t    return utils.promisify(false, 'upload aborted');\n\t  }\n\t\n\t  for (i = 0; i < this.chunkCount; i++) {\n\t\n\t    start = i * this.chunkSize;\n\t    // Choose the smaller value, so that we don't go over the filesize.\n\t    end = Math.min((i + 1) * this.chunkSize, this.fileRecord.size);\n\t\n\t    blob = this.file[sliceMethod](start, end);\n\t\n\t    chunk = {\n\t      partNumber: i + 1,\n\t      data: blob\n\t    };\n\t\n\t    this.chunks.push(chunk);\n\t\n\t    chunkPromises.push(this._uploadChunk.bind(this, chunk));\n\t\n\t  }\n\t\n\t  // Store a reference for pausing and resuming.\n\t  this.multiPartPromise = utils.series(chunkPromises, this.paused);\n\t\n\t  return this.multiPartPromise;\n\t};\n\t\n\t/**\n\t * Create a promise chain for each chunk to be uploaded.\n\t * @private\n\t * @return {Promise} A promise which resolves when the request is complete.\n\t */\n\tUpload.prototype._uploadChunk = function (chunk) {\n\t  var promise = Promise();\n\t\n\t  // Break the promise chain.\n\t  this._signUpload(chunk)\n\t    .then(this._sendUpload.bind(this, chunk))\n\t    .then(this._completeChunk.bind(this, chunk, promise));\n\t\n\t  return promise;\n\t};\n\t\n\t/**\n\t * Create a promise chain for a single part file upload.\n\t * @param  {file}   file    A file reference to upload.\n\t * @return {Promise} A promise which resolves when the request is complete.\n\t */\n\tUpload.prototype._uploadFile = function () {\n\t  var chunk = {\n\t    data: this.file\n\t  };\n\t\n\t  // Create a new promise if one doesn't exist.\n\t  if (!this.singlePartPromise) {\n\t    this.singlePartPromise = Promise();\n\t  }\n\t\n\t  // Broken off the chain, this will allow us to cancel single part uploads without breaking the\n\t  // initial chain.\n\t  this._signUpload(chunk)\n\t    .then(this._sendUpload.bind(this, chunk))\n\t    .then(this._sendSinglepartComplete.bind(this))\n\t    .then(this._updateProgress.bind(this, 100, this.fileRecord.size))\n\t    .then(this._uploadFileComplete.bind(this));\n\t\n\t  return this.singlePartPromise;\n\t};\n\t\n\t/**\n\t *  Resolve the single part upload promise;\n\t */\n\tUpload.prototype._uploadFileComplete = function () {\n\t  this.singlePartPromise(true, []);\n\t};\n\t\n\t/**\n\t * Make a request and sign the chunk to be uploaded.\n\t * @private\n\t * @param  {object}   chunk           Information about the chunk to be uploaded.\n\t * @return {Promise}                  A promise which resolves when the request is complete.\n\t */\n\tUpload.prototype._signUpload = function (chunk) {\n\t  var url;\n\t  var signing = '';\n\t  var headers = {};\n\t  var request;\n\t\n\t  // Set the part number for the current chunk.\n\t  if (chunk.partNumber) {\n\t    this.fileRecord.partNumber = chunk.partNumber;\n\t  }\n\t\n\t  headers['Content-Type'] = 'multipart/form-data';\n\t\n\t  if (!this.fileRecord.method) {\n\t    signing = this.config.uploadMethods.param + this.config.uploadMethods.singlePart;\n\t  }\n\t\n\t  url = utils.parseTokens(this.api.config.host + this.config.sign, {\n\t    id: this.fileRecord.id,\n\t    method: signing\n\t  });\n\t\n\t  request = new Request({\n\t    url: url,\n\t    token: this.api.getToken(),\n\t    method: 'POST',\n\t    headers: headers,\n\t    data: this.fileRecord\n\t  });\n\t\n\t  return request.send();\n\t};\n\t\n\t/**\n\t * Send the upload to the server.\n\t * @private\n\t * @param   {object} upload  An object representing the upload to send to the server.\n\t * @return  {Promise}       A promise which resolves when the request is complete.\n\t */\n\tUpload.prototype._sendUpload = function (upload, response) {\n\t  var headers = {};\n\t  var request;\n\t\n\t  // Set the proper headers to send with the file.\n\t  headers['Content-Type'] = 'multipart/form-data';\n\t  headers.authorization = response.data.authHeader;\n\t  headers['x-amz-date'] = response.data.dateHeader;\n\t  headers['x-amz-security-token'] = response.data.securityToken;\n\t\n\t  request = new Request({\n\t    url: response.data.url,\n\t    method: 'PUT',\n\t    headers: headers,\n\t    data: upload.data,\n\t    ignoreAcceptHeader: true\n\t  });\n\t\n\t  this.requestPromise = request;\n\t\n\t  return request.send();\n\t};\n\t\n\t/**\n\t * Update the upload bytes value when a single part file is uploaded.\n\t */\n\tUpload.prototype._sendSinglepartComplete = function () {\n\t  this.uploadComplete = true;\n\t  this.uploadedBytes = this.fileRecord.size;\n\t};\n\t\n\t/**\n\t *  Executed when a chunk is finished uploading.\n\t *  @private\n\t *  @param {object}   chunk   The current chunk that was uploaded.\n\t *  @param {Promise}  promise The promise to resolve when the chunk is complete.\n\t */\n\tUpload.prototype._completeChunk = function (chunk, promise) {\n\t  var progress;\n\t\n\t  this.chunksComplete++;\n\t  chunk.complete = true;\n\t\n\t  this.uploadedBytes += chunk.data.size;\n\t\n\t  // Upload is complete.\n\t  if (this.chunksComplete === this.chunkCount) {\n\t    this.uploadComplete = true;\n\t  }\n\t\n\t  progress = this.uploadedBytes / this.fileRecord.size;\n\t  // 0 - 99 for actual upload progress, 1% for the complete call.\n\t  progress = progress * 99;\n\t  progress = Math.round(progress);\n\t\n\t  this._updateProgress(progress, chunk.data.size);\n\t\n\t  // Resolve the promise.\n\t  promise(true, []);\n\t};\n\t\n\t/**\n\t * Notify the server that the upload is complete.\n\t *\n\t * @private\n\t * @return  {Promise} A promise which resolves when the request is complete.\n\t */\n\tUpload.prototype._completeUpload = function () {\n\t  var url;\n\t  var tokens;\n\t  var request;\n\t\n\t  // Early return so we don't process any of the complete information on an aborted upload.\n\t  if (this.aborted) {\n\t    return utils.promisify(false, 'Upload Aborted.');\n\t  }\n\t\n\t  tokens = {\n\t    id: this.fileRecord.id\n\t  };\n\t\n\t  url = utils.parseTokens(this.api.config.host + this.config.uploadComplete, tokens);\n\t\n\t  request = new Request({\n\t    url: url,\n\t    token: this.api.getToken(),\n\t    method: 'POST',\n\t    data: this.fileRecord\n\t  });\n\t\n\t  return request.send()\n\t          .then(this._onCompleteUpload.bind(this));\n\t};\n\t\n\t/**\n\t * Return the id for the current file record.\n\t * @private\n\t * @return {string} ID for the input record that was created.\n\t */\n\tUpload.prototype._onCompleteUpload = function () {\n\t  // Send the final progress update once the upload is actually complete.\n\t  this._updateProgress(100);\n\t\n\t  this.uploadComplete = true;\n\t  this.multiPartPromise = null;\n\t  this.requestPromise = null;\n\t  this.singlePartPromise = null;\n\t  return this.fileRecord.id;\n\t};\n\t\n\t/**\n\t * Aborts an input upload\n\t *\n\t * @param {boolean} async A flag to indicate whether or not the request to delete the input should be async.\n\t *\n\t * @return {Promise} A promise which resolves when the request is complete.\n\t */\n\tUpload.prototype.abort = function (async) {\n\t  var url;\n\t  var tokens;\n\t  var request;\n\t\n\t  if (typeof async === 'undefined') {\n\t    async = true;\n\t  }\n\t\n\t  this.aborted = true;\n\t\n\t  // If initialize hasn't been called yet there is no need to abort the upload as it doesn't\n\t  // exist yet.\n\t  if (!this.initialized) {\n\t\n\t    if (this.created) {\n\t      // If the input has been created simply return early with a\n\t      // promise to delete the created input record.\n\t      return this.api.inputs.delete(this.fileRecord.id, async);\n\t    } else {\n\t      // Resolve as a successful promise. This case would be fulfilled when an upload\n\t      // has been created but save() hasn't yet been called.\n\t      return utils.promisify(true);\n\t    }\n\t\n\t  }\n\t\n\t  // Cancel the current request.\n\t  if (this.requestPromise) {\n\t    this.requestPromise.cancel();\n\t    this.requestPromise = null;\n\t  }\n\t\n\t  if (this.singlePartPromise) {\n\t    this.singelPartPromise = null;\n\t    // return here because there is no need to abort a single part upload.\n\t    return this._abortComplete(async);\n\t  }\n\t\n\t  this.multiPartPromise.cancel();\n\t  this.multiPartPromise = null;\n\t\n\t  tokens = {\n\t    id: this.fileRecord.id,\n\t    method: ''\n\t  };\n\t\n\t  url = utils.parseTokens(this.api.config.host + this.config.uploadAbort, tokens);\n\t\n\t  request = new Request({\n\t    url: url,\n\t    async: async,\n\t    token: this.api.getToken(),\n\t    method: 'POST',\n\t    data: this.fileRecord\n\t  });\n\t\n\t  return request.send()\n\t          .then(this._abortComplete.bind(this, async));\n\t};\n\t\n\t/**\n\t * Delete the input that was created.\n\t * @private\n\t * @return {Promise} A promise which resolves when the request is complete.\n\t */\n\tUpload.prototype._abortComplete = function (async) {\n\t  return this.api.inputs.delete(this.fileRecord.id, async);\n\t};\n\t\n\t/**\n\t * Pause the current upload.\n\t */\n\tUpload.prototype.pause = function () {\n\t  // Return early if the upload portion is complete.\n\t  // The work is done by now so we might as well fire the\n\t  // complete call.\n\t  if (this.uploadComplete) {\n\t    return;\n\t  }\n\t\n\t  this.paused = true;\n\t\n\t  // Is there an upload\n\t  if (this.multiPartPromise) {\n\t\n\t    // Pause the series if its a multipart upload.\n\t    this.multiPartPromise.pause();\n\t\n\t    // Cancel the http request for this chunk.\n\t    this.requestPromise.cancel();\n\t\n\t  } else if (this.requestPromise) {\n\t    // Abort the upload if its a singlepart upload.\n\t    this.requestPromise.cancel();\n\t  }\n\t\n\t};\n\t\n\t/**\n\t * Resume the current upload.\n\t */\n\tUpload.prototype.resume = function () {\n\t  this.paused = false;\n\t\n\t  // resume the series if its multi part.\n\t  if (this.multiPartPromise) {\n\t    // resume the series if its multipart.\n\t    this.multiPartPromise.resume();\n\t  } else if (this.requestPromise) {\n\t    // Restart the file upload.\n\t    this._uploadFile();\n\t  }\n\t\n\t};\n\t\n\t/**\n\t * Check the file size to determine if it should be a multipart upload, returns false for singlepart uploads.\n\t * @private\n\t * @param  {file}   file  The file to evaluate.\n\t * @return {boolean}      True if the file will be uploading using mutlipart upload.\n\t */\n\tUpload.prototype._checkMultipart = function (file) {\n\t  if (!file) {\n\t    return;\n\t  }\n\t\n\t  return (file.size <= (5 * 1024 * 1024) ? false : true);\n\t};\n\t\n\t/**\n\t * Function that determines the slice method to be used\n\t * @private\n\t * @param {object} file - The file object you wish to determine the slice method for\n\t * @return {string} sliceMethod - The slice method to use.\n\t */\n\tUpload.prototype._getSliceMethod = function (file) {\n\t  var sliceMethod;\n\t\n\t  if ('mozSlice' in file) {\n\t    sliceMethod = 'mozSlice';\n\t  } else if ('webkitSlice' in file) {\n\t    sliceMethod = 'webkitSlice';\n\t  } else {\n\t    sliceMethod = 'slice';\n\t  }\n\t\n\t  return sliceMethod;\n\t};\n\t\n\tmodule.exports = Upload;\n\n\n/***/ },\n/* 11 */\n/***/ function(module, exports) {\n\n\t'use strict';\n\t\n\t/**\n\t * A management layer for storing app cache in session storage.\n\t */\n\tvar Cache = function (cacheAge) {\n\t  this.cacheAge = cacheAge;\n\t  this.enabled = this._checkCacheSupport();\n\t};\n\t\n\t/**\n\t * Return true if sessionStorage is supported.\n\t * @private\n\t * @return {boolean} True if sessionStorage is supported.\n\t */\n\tCache.prototype._checkCacheSupport = function () {\n\t\n\t  var support = 'support';\n\t\n\t  try {\n\t    window.sessionStorage.setItem(support, support);\n\t    window.sessionStorage.removeItem(support);\n\t    return true;\n\t  } catch (e) {\n\t    return false;\n\t  }\n\t\n\t};\n\t\n\t/**\n\t * Retrieve the cached result for the provided cacheKey.\n\t * @param  {string}   cacheKey  Key associated with the cached result.\n\t * @return {object}             Parse results object.\n\t */\n\tCache.prototype.retrieve = function (cacheKey) {\n\t  var data;\n\t  var value = null;\n\t  var expiry;\n\t\n\t  try {\n\t\n\t    data = window.sessionStorage.getItem(cacheKey);\n\t    data = JSON.parse(data);\n\t\n\t    if (!data) {\n\t      return value;\n\t    }\n\t\n\t    value = data.value;\n\t\n\t    if (data.expiry < Date.now()) {\n\t      // Cache is expired;\n\t      window.sessionStorage.removeItem(cacheKey);\n\t      value = null;\n\t    }\n\t\n\t  } catch (error) {\n\t    // Silent capture so that caching never gets in the way of returning a result.\n\t    value = null;\n\t  }\n\t\n\t  return value;\n\t};\n\t\n\t/**\n\t * Remove a result from the cache.\n\t * @param  {string}   cacheKey  Key associated with the cached result.\n\t * @return {boolean}            A boolean indicating success of the removal.\n\t */\n\tCache.prototype.remove = function (cacheKey) {\n\t  var result = true;\n\t\n\t  try {\n\t    window.sessionStorage.removeItem(cacheKey);\n\t  } catch (error) {\n\t    // Silent capture so that caching never gets in the way of returning a result.\n\t    result = false;\n\t  }\n\t\n\t  return result;\n\t};\n\t\n\t/**\n\t * Save the new result with its expiry date.\n\t * @param  {string}   cacheKey Unique cache key for the request.\n\t * @param  {number}   expiry   Unix timestamp for the expiry.\n\t * @param  {object}   result   Object to be cached.\n\t * @return {boolean}            A boolean indicating success of the save.\n\t */\n\tCache.prototype.save = function (cacheKey, value) {\n\t  var result = true;\n\t  var data = {};\n\t  var JSONResult;\n\t\n\t  try {\n\t\n\t    data.expiry = Date.now() + this.cacheAge;\n\t    data.value = value;\n\t\n\t    JSONResult = JSON.stringify(data);\n\t\n\t    window.sessionStorage.setItem(cacheKey, JSONResult);\n\t\n\t  } catch (error) {\n\t    // Silent capture so that caching never gets in the way of returning a result.\n\t    result = false;\n\t  }\n\t\n\t  return result;\n\t};\n\t\n\t/**\n\t * Return an object representing the differences between the provided object and the cached object.\n\t * @example\n\t * //'cachedObject' = {id: '12345'};\n\t * cache.diff('cachedObject', {title: 'test'});\n\t * // returns {title: 'test'}\n\t * @example\n\t * //'cachedObject' = {id: '12345', title: 'test'};\n\t * cache.diff('cachedObject', {title: 'test2'});\n\t * // returns {title: 'test2'}\n\t *\n\t * @param  {string} cacheKey  Cachekey of the object to compare against.\n\t * @param  {object} item      Object to compare against the cached object.\n\t * @param  {array}  forced    An array of properties to be returned in the resulting object regardless of difference.\n\t * @return {object}           An object containing the differences.\n\t */\n\tCache.prototype.diff = function (cacheKey, item, forced) {\n\t  var property, properties, propertiesLength, i;\n\t  var force, forcedLength, n;\n\t  var original = this.retrieve(cacheKey);\n\t  var diff = null;\n\t\n\t  if (forced) {\n\t    forcedLength = forced.length;\n\t  }\n\t\n\t  properties = Object.keys(item);\n\t  propertiesLength = properties.length;\n\t\n\t  if (!original) {\n\t    // return the compare object if the original item wasn't found.\n\t    return item;\n\t  }\n\t\n\t  // Walk the object and compare the properties.\n\t  for (i = 0; i < propertiesLength; i++) {\n\t    property = properties[i];\n\t\n\t    // Check the values if both objects have the property.\n\t    if (original.hasOwnProperty(property)) {\n\t      if (item[property] === original[property]) {\n\t        // If the values are the same we don't need to add it to the diff so continue.\n\t        continue;\n\t      }\n\t    }\n\t\n\t    // If the diff item is still null we need to create a new object to store the properties in.\n\t    if (!diff) {\n\t      diff = {};\n\t    }\n\t\n\t    // If we've made it this far the property is either a new one, or the item doesn't match.\n\t    diff[property] = item[property];\n\t\n\t  }\n\t\n\t  // As long as changes were found append the forced properties.\n\t  if (diff) {\n\t    for (n = 0; n < forcedLength; n++) {\n\t      property = forced[n];\n\t      diff[property] = item[property];\n\t    }\n\t  }\n\t\n\t  return diff;\n\t\n\t};\n\t\n\t/**\n\t * Return an object representing the differences between the provided objects and the cached object.\n\t * Similar to diff, but accepts an array of objects.\n\t *\n\t * @param  {string} cacheKey  Property on the provided objects that represents the cache key.\n\t * @param  {object} item      Object to compare against the cached object.\n\t * @param  {array}  forced    An array of properties to be returned in the resulting object regardless of difference.\n\t * @return {object}           An object containing the differences.\n\t */\n\tCache.prototype.diffArray = function (cacheKey, items, forced) {\n\t\n\t  var i;\n\t  var itemsLength = items.length;\n\t  var item;\n\t  var result = null;\n\t  var results = [];\n\t\n\t  for (i = 0; i < itemsLength; i++) {\n\t    item = items[i];\n\t\n\t    result = this.diff(item[cacheKey], item, forced);\n\t\n\t    // Only add it to the result set if changes were found.\n\t    if (result !== null) {\n\t      results.push(result);\n\t    }\n\t\n\t  }\n\t\n\t  return results;\n\t\n\t};\n\t\n\tmodule.exports = Cache;\n\n\n/***/ },\n/* 12 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\t\n\tvar extend = __webpack_require__(2);\n\tvar Request = __webpack_require__(3);\n\tvar utils = __webpack_require__(9);\n\t\n\t/**\n\t * Resource Object\n\t * @class\n\t */\n\tfunction Resource (options) {\n\t\n\t  this.defaults = {\n\t    host: 'https://api.ingest.io',\n\t    all: '/<%=resource%>',\n\t    byId: '/<%=resource%>/<%=id%>',\n\t    trash: '/<%=resource%>?filter=trashed',\n\t    deleteMethods: {\n\t      'permanent': '?permanent=1'\n\t    },\n\t    search: '/<%=resource%>?search=<%=input%>',\n\t    tokenSource: null,\n\t    resource: null\n\t  };\n\t\n\t  this.config = extend(true, {}, this.defaults, options);\n\t\n\t  this.cache = this.config.cache;\n\t\n\t}\n\t\n\t/**\n\t * Proxy the request to token source to ensure a value is always returned.\n\t * @private\n\t * @return {string} Auth token.\n\t */\n\tResource.prototype._tokenSource = function () {\n\t  var result = null;\n\t\n\t  if (this.config.tokenSource) {\n\t    result = this.config.tokenSource.call();\n\t  }\n\t\n\t  return result;\n\t};\n\t\n\t/**\n\t * Return a list of the requested resource for the current user and network.\n\t * @param  {object}   headers   Object representing headers to apply to the request.\n\t * @return {promise}            A promise which resolves when the request is complete.\n\t */\n\tResource.prototype.getAll = function (headers) {\n\t  var request;\n\t  var url = utils.parseTokens(this.config.host + this.config.all, {\n\t    resource: this.config.resource\n\t  });\n\t\n\t  request = new Request({\n\t    url: url,\n\t    token: this._tokenSource(),\n\t    headers: headers\n\t  });\n\t\n\t  return request.send()\n\t          .then(this._updateCachedResources.bind(this));\n\t};\n\t\n\t/**\n\t * Return a resource that matches the supplied id.\n\t * @param  {string}   id    Resource id.\n\t * @return {promise}        A promise which resolves when the request is complete.\n\t */\n\tResource.prototype.getById = function (id) {\n\t  var url, cachedResult, request;\n\t\n\t  if (typeof id !== 'string' || id.length <= 0) {\n\t    return utils.promisify(false,\n\t      'IngestAPI Resource getById requires a valid id passed as a string.');\n\t  }\n\t\n\t  url = utils.parseTokens(this.config.host + this.config.byId, {\n\t    resource: this.config.resource,\n\t    id: id\n\t  });\n\t\n\t  if (this.cache && this.cache.enabled) {\n\t    // retrieve the cached item.\n\t    cachedResult = this.cache.retrieve(id);\n\t  }\n\t\n\t  // Return a cached result if we've found one.\n\t  if (cachedResult) {\n\t    return utils.promisify(true, {\n\t      data: cachedResult\n\t    });\n\t  } else {\n\t\n\t    request = new Request({\n\t      url: url,\n\t      token: this._tokenSource()\n\t    });\n\t\n\t    return request.send()\n\t      .then(this._updateCachedResource.bind(this));\n\t\n\t  }\n\t};\n\t\n\t/**\n\t * Return the resources currently in the trash.\n\t * @param  {object} headers Headers to be passed along with the request for pagination.\n\t * @return {promise}         A promise which resolves when the request is complete.\n\t */\n\tResource.prototype.getTrashed = function (headers) {\n\t  var request;\n\t  var url = utils.parseTokens(this.config.host + this.config.trash, {\n\t    resource: this.config.resource\n\t  });\n\t\n\t  request = new Request({\n\t    url: url,\n\t    token: this._tokenSource(),\n\t    headers: headers\n\t  });\n\t\n\t  return request.send();\n\t};\n\t\n\t/**\n\t * Add a new resource.\n\t * @param   {object}  resource  An object representing the resource to add.\n\t * @return  {promise}           A promise which resolves when the request is complete.\n\t */\n\tResource.prototype.add = function (resource) {\n\t  var url, request;\n\t\n\t  if (typeof resource !== 'object') {\n\t    return utils.promisify(false,\n\t      'IngestAPI Resource add requires a resource passed as an object.');\n\t  }\n\t\n\t  url = utils.parseTokens(this.config.host + this.config.all, {\n\t    resource: this.config.resource\n\t  });\n\t\n\t  request = new Request({\n\t    url: url,\n\t    token: this._tokenSource(),\n\t    method: 'POST',\n\t    data: resource\n\t  });\n\t\n\t  return request.send()\n\t          .then(this._updateCachedResource.bind(this));\n\t};\n\t\n\t/**\n\t * Update an existing resource with new content.\n\t * @param  {object|array} resource  An object or an array of objects representing the resource(s) to be updated.\n\t * @return {promise}                A promise which resolves when the request is complete.\n\t */\n\tResource.prototype.update = function (resource) {\n\t  var request, data, url;\n\t\n\t  if (typeof resource !== 'object') {\n\t    return utils.promisify(false,\n\t      'IngestAPI Resource update requires a resource to be passed as an object.');\n\t  }\n\t\n\t  data = resource;\n\t\n\t  url = utils.parseTokens(this.config.host + this.config.byId, {\n\t    resource: this.config.resource,\n\t    id: resource.id\n\t  });\n\t\n\t  if (this.cache && this.cache.enabled) {\n\t    data = this.cache.diff(resource.id, resource);\n\t  }\n\t\n\t  // Null is returned in the case that the two objects match.\n\t  if (!data) {\n\t    // Return a fulfilled promise with the cached object.\n\t    return utils.promisify(true, {\n\t      data: this.cache.retrieve(resource.id)\n\t    });\n\t  }\n\t\n\t  request = new Request({\n\t    url: url,\n\t    token: this._tokenSource(),\n\t    method: 'PATCH',\n\t    data: data\n\t  });\n\t\n\t  return request.send()\n\t          .then(this._updateCachedResource.bind(this));\n\t};\n\t\n\t/**\n\t * Delete an existing resource\n\t * @param  {string}   resource  The id for the resource to be deleted.\n\t * @param  {boolean}  async     A flag to indicate if this should be an async request to delete.\n\t *\n\t * @return {Promise}            A promise which resolves when the request is complete.\n\t */\n\tResource.prototype.delete = function (resource, async) {\n\t  if (typeof async !== 'boolean') {\n\t    async = true;\n\t  }\n\t\n\t  if (typeof resource !== 'string') {\n\t    return utils.promisify(false,\n\t      'IngestAPI Resource delete requires a resource to be passed as a string.');\n\t  }\n\t\n\t  return this._deleteResource(resource, false, async);\n\t};\n\t\n\t/**\n\t * Permanently delete an existing resource.\n\t * @param  {string}   resource  The id for the resource to be deleted.\n\t * @param  {boolean}  async     A flag to indicate if this should be an async request to delete.\n\t *\n\t * @return {Promise}            A promise which resolves when the request is complete.\n\t */\n\tResource.prototype.permanentDelete = function (resource, async) {\n\t  if (typeof async !== 'boolean') {\n\t    async = true;\n\t  }\n\t\n\t  if (typeof resource !== 'string') {\n\t    return utils.promisify(false,\n\t      'IngestAPI Resource delete requires a resource to be passed as a string.');\n\t  }\n\t\n\t  return this._deleteResource(resource, true, async);\n\t};\n\t\n\t/**\n\t * Delete a single resource\n\t * @private\n\t * @param  {object}   resource  The id of the resource to be deleted.\n\t * @param {boolean}   permanent  A flag to permanently delete each video.\n\t * @param {boolean}   async       A flag to indicate if this should be an async request to delete.\n\t * @return {promise}            A promise which resolves when the request is complete.\n\t */\n\tResource.prototype._deleteResource = function (resource, permanent, async) {\n\t  var request;\n\t  var url = utils.parseTokens(this.config.host + this.config.byId, {\n\t    resource: this.config.resource,\n\t    id: resource\n\t  });\n\t\n\t  if (permanent === true) {\n\t    url += this.config.deleteMethods.permanent;\n\t  }\n\t\n\t  request = new Request({\n\t    url: url,\n\t    async: async,\n\t    token: this._tokenSource(),\n\t    method: 'DELETE',\n\t  });\n\t\n\t  return request.send()\n\t          .then(this._deleteCachedResource.bind(this, resource));\n\t};\n\t\n\t/**\n\t * Return a subset of items that match the search terms.\n\t * @param  {string}   input     The search terms to match against.\n\t * @param  {object}   headers   The headers to be passed to the request.\n\t * @param  {boolean}  trash     Should we be searching the trash.\n\t * @return {Promise}          A promise which resolves when the request is complete.\n\t */\n\tResource.prototype.search = function (input, headers, trash) {\n\t  var url, request;\n\t\n\t  if (typeof input !== 'string') {\n\t    return utils.promisify(false,\n\t      'IngestAPI Resource search requires search input to be passed as a string.');\n\t  }\n\t\n\t  url = utils.parseTokens(this.config.host + this.config.search, {\n\t    resource: this.config.resource,\n\t    input: encodeURIComponent(input)\n\t  });\n\t\n\t  if (trash) {\n\t    url = url + '&filter=trashed';\n\t  }\n\t\n\t  request = new Request({\n\t    url: url,\n\t    token: this._tokenSource(),\n\t    headers: headers\n\t  });\n\t\n\t  return request.send();\n\t};\n\t\n\t/**\n\t * Return a subset of items that match the search terms in the trash.\n\t * @param  {string} input    The search terms to match against.\n\t * @param  {object} headers  The headers to be passed to the request.\n\t * @return {Promise}          A promise which resolves when the request is complete.\n\t */\n\tResource.prototype.searchTrash = function (input, headers) {\n\t  return this.search(input, headers, true);\n\t};\n\t\n\t/**\n\t * Get the total count of resources.\n\t * @return {promise} A promise which resolves when the request is complete.\n\t */\n\tResource.prototype.count = function () {\n\t  var request;\n\t  var url = utils.parseTokens(this.config.host + this.config.all, {\n\t    resource: this.config.resource\n\t  });\n\t\n\t  request = new Request({\n\t    url: url,\n\t    token: this._tokenSource(),\n\t    method: 'HEAD'\n\t  });\n\t\n\t  return request.send()\n\t          .then(this._handleCountResponse);\n\t};\n\t\n\t/**\n\t * Get the total count of resources in the trash.\n\t * @return {promise} A promise which resolves when the request is complete.\n\t */\n\tResource.prototype.trashCount = function () {\n\t  var request;\n\t  var url = utils.parseTokens(this.config.host + this.config.trash, {\n\t    resource: this.config.resource\n\t  });\n\t\n\t  request = new Request({\n\t    url: url,\n\t    token: this._tokenSource(),\n\t    method: 'HEAD'\n\t  });\n\t\n\t  return request.send()\n\t          .then(this._handleCountResponse);\n\t};\n\t\n\t/**\n\t * Return the resource count from the response.\n\t * @private\n\t * @param  {object} response Request response object.\n\t * @return {number}          The resource count.\n\t */\n\tResource.prototype._handleCountResponse = function (response) {\n\t  return parseInt(response.headers('Resource-Count'), 10);\n\t};\n\t\n\t/**\n\t * Update a single cached resource based on the response data.\n\t * @param  {object}   response   Response object from the getAll request.\n\t * @return {response}            Response object from the getAll request.\n\t */\n\tResource.prototype._updateCachedResource = function (response) {\n\t  if (this.cache && this.cache.enabled) {\n\t    this.cache.save(response.data.id, response.data);\n\t  }\n\t\n\t  return response;\n\t};\n\t\n\t/**\n\t * Store the returned items in cache.\n\t * @param  {object}   response   Response object from the getAll request.\n\t * @return {response}            Response object from the getAll request.\n\t */\n\tResource.prototype._updateCachedResources = function (response) {\n\t  var data = response.data;\n\t  var dataLength = data.length;\n\t  var i;\n\t\n\t  if (this.cache && this.cache.enabled) {\n\t    for (i = 0; i < dataLength; i++) {\n\t      this.cache.save(data[i].id, data[i]);\n\t    }\n\t\n\t  }\n\t\n\t  return response;\n\t};\n\t\n\t/**\n\t * Delete a single cached resource.\n\t * @param  {string} id            ID of the resource to remove.\n\t * @param  {object}   response    Response object from the getAll request.\n\t * @return {response}             Response object from the getAll request.\n\t */\n\tResource.prototype._deleteCachedResource = function (id, response) {\n\t  if (this.cache && this.cache.enabled) {\n\t    this.cache.remove(id);\n\t  }\n\t\n\t  return response;\n\t};\n\t\n\tmodule.exports = Resource;\n\n\n/***/ },\n/* 13 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\t\n\tvar Resource = __webpack_require__(12);\n\tvar Request = __webpack_require__(3);\n\tvar utils = __webpack_require__(9);\n\tvar extend = __webpack_require__(2);\n\t\n\tfunction PlaybackContent (options) {\n\t\n\t  var overrides = {\n\t    thumbnail: '/<%=resource%>/<%=id%>/thumbnail',\n\t    thumbnails: '/<%=resource%>/<%=id%>/thumbnails'\n\t  };\n\t\n\t  options = extend(true, {}, overrides, options);\n\t\n\t  Resource.call(this, options);\n\t\n\t};\n\t\n\t// This extends the base class of 'Resource'.\n\tPlaybackContent.prototype = Object.create(Resource.prototype);\n\tPlaybackContent.prototype.constructor = PlaybackContent;\n\t\n\t/**\n\t * Retrieve all thumbnails for a provided resource id.\n\t * @param {string}    id    ID of the resource to retrieve thumbnails for.\n\t * @return {promise}        A promise which resolves when the request is complete.\n\t */\n\tPlaybackContent.prototype.getThumbnails = function (id) {\n\t  var url, request;\n\t\n\t  if (typeof id !== 'string') {\n\t    return utils.promisify(false,\n\t      'IngestAPI PlaybackContent getThumbnails requires an id to be passed as a string.');\n\t  }\n\t\n\t  url = utils.parseTokens(this.config.host + this.config.thumbnails, {\n\t    resource: this.config.resource,\n\t    id: id\n\t  });\n\t\n\t  request = new Request({\n\t    url: url,\n\t    token: this._tokenSource()\n\t  });\n\t\n\t  return request.send();\n\t};\n\t\n\t/**\n\t * Add external images to the resource id.\n\t * @param   {string}          id      ID of the resource to add the external thumbnails to.\n\t * @param   {string|array}    images  A path to the image, or an array of image paths.\n\t * @return  {promise}                 A promise which resolves when the request is complete.\n\t */\n\tPlaybackContent.prototype.addExternalThumbnails = function (id, images) {\n\t\n\t  var url, request;\n\t\n\t  var imagesToAdd = [];\n\t\n\t  if (typeof id !== 'string') {\n\t    return utils.promisify(false,\n\t      'IngestAPI PlaybackContent addExternal requires an id to be passed as a string.');\n\t  }\n\t\n\t  // Early return if the types do not match what we are expecting.\n\t  if (!Array.isArray(images) && typeof images !== 'string') {\n\t    return utils.promisify(false,\n\t      'IngestAPI PlaybackContent addExternal requires images as a string or an array of strings.');\n\t  }\n\t\n\t  // If we already have an array replace the outgoing array, otherwise push the image path to the array.\n\t  // This ensures we are always passing an array.\n\t  if (Array.isArray(images)) {\n\t    imagesToAdd = images;\n\t  } else {\n\t    imagesToAdd.push(images);\n\t  }\n\t\n\t  url = utils.parseTokens(this.config.host + this.config.thumbnails, {\n\t    resource: this.config.resource,\n\t    id: id\n\t  });\n\t\n\t  request = new Request({\n\t    method: 'POST',\n\t    url: url,\n\t    token: this._tokenSource(),\n\t    data: imagesToAdd\n\t  });\n\t\n\t  return request.send();\n\t\n\t};\n\t\n\t/**\n\t * Add external images to the resource id.\n\t * @param   {string}        id        ID of the resource to add the external thumbnails to.\n\t * @param   {file}          image     A JavaScript File interface representing the image to upload.\n\t * @return  {promise}                 A promise which resolves when the request is complete.\n\t */\n\tPlaybackContent.prototype.uploadThumbnail = function (id, image) {\n\t\n\t  var request, url, formData;\n\t\n\t  if (typeof id !== 'string') {\n\t    return utils.promisify(false,\n\t      'IngestAPI PlaybackContent uploadThumbnail requires an id to be passed as a string.');\n\t  }\n\t\n\t  // Early return if the types do not match what we are expecting.\n\t  if (!image || !(image instanceof File) || !utils.isImage(image)) {\n\t    return utils.promisify(false,\n\t      'IngestAPI PlaybackContent uploadThumbnail requires a valid image.');\n\t  }\n\t\n\t  url = utils.parseTokens(this.config.host + this.config.thumbnail, {\n\t    resource: this.config.resource,\n\t    id: id\n\t  });\n\t\n\t  // Create a new FormData object so the request is properly sent as multipart.\n\t  formData = new FormData();\n\t  formData.append('image', image);\n\t\n\t  request = new Request({\n\t    method: 'POST',\n\t    url: url,\n\t    token: this._tokenSource(),\n\t    data: formData\n\t  });\n\t\n\t  return request.send();\n\t\n\t};\n\t\n\tmodule.exports = PlaybackContent;\n\n\n/***/ },\n/* 14 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\t\n\tvar Resource = __webpack_require__(12);\n\tvar Request = __webpack_require__(3);\n\tvar utils = __webpack_require__(9);\n\tvar extend = __webpack_require__(2);\n\t\n\tfunction Users (options) {\n\t\n\t  var overrides = {\n\t    currentUser: '/users/me',\n\t    transfer: '/users/<%=oldId%>/transfer/<%=newId%>',\n\t    revoke: '/revoke'\n\t  };\n\t\n\t  options = extend(true, {}, overrides, options);\n\t\n\t  Resource.call(this, options);\n\t\n\t};\n\t\n\t// This extends the base class of 'Resource'.\n\tUsers.prototype = Object.create(Resource.prototype);\n\tUsers.prototype.constructor = Users;\n\t\n\t/**\n\t * Retrieve information for the current user.\n\t *\n\t * @return {Promise} A promise which resolves when the request is complete.\n\t */\n\tUsers.prototype.getCurrentUserInfo = function () {\n\t  var request = new Request({\n\t    url: this.config.host + this.config.currentUser,\n\t    token: this._tokenSource()\n\t  });\n\t\n\t  return request.send();\n\t};\n\t\n\t/**\n\t * Transfer all authorship currently under the specified user onto another.\n\t * This includes all videos & playlists.\n\t * This task is commonly used in conjunction with permanently deleting a user.\n\t *\n\t * @param {string} oldId - The user who currently has authorship.\n\t * @param {string} newId - The user to transfer authorship to.\n\t *\n\t * @return {Promise} A promise which resolves when the request is complete.\n\t */\n\tUsers.prototype.transferUserAuthorship = function (oldId, newId) {\n\t  var tokens, url, request;\n\t\n\t  if (typeof oldId !== 'string') {\n\t    return utils.promisify(false,\n\t      'IngestAPI transferUserAuthorship requires \"oldId\" to be passed as a string.');\n\t  }\n\t\n\t  if (typeof newId !== 'string') {\n\t    return utils.promisify(false,\n\t      'IngestAPI transferUserAuthorship requires \"newId\" to be passed as a string');\n\t  }\n\t\n\t  tokens = {\n\t    oldId: oldId,\n\t    newId: newId\n\t  };\n\t\n\t  url = utils.parseTokens(this.config.host + this.config.transfer, tokens);\n\t\n\t  request = new Request({\n\t    url: url,\n\t    token: this._tokenSource(),\n\t    method: 'PATCH'\n\t  });\n\t\n\t  return request.send();\n\t};\n\t\n\t/**\n\t * Revokes the authorization token for the current user.\n\t *\n\t * @return {Promise} A promise which resolves when the request is complete.\n\t */\n\tUsers.prototype.revokeCurrentUser = function () {\n\t  var request = new Request({\n\t    url: this.config.host + this.config.currentUser + this.config.revoke,\n\t    token: this._tokenSource(),\n\t    method: 'DELETE'\n\t  });\n\t\n\t  return request.send();\n\t};\n\t\n\tmodule.exports = Users;\n\n\n/***/ },\n/* 15 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\t\n\tvar Resource = __webpack_require__(12);\n\tvar Request = __webpack_require__(3);\n\tvar utils = __webpack_require__(9);\n\tvar extend = __webpack_require__(2);\n\t\n\tfunction Networks (options) {\n\t\n\t  var overrides = {\n\t    keys: '/<%=resource%>/<%=networkId%>/keys',\n\t    keysById: '/<%=resource%>/<%=networkId%>/keys/<%=keyId%>',\n\t    invite: '/<%=resource%>/<%=networkId%>/invite'\n\t  };\n\t\n\t  options = extend(true, {}, overrides, options);\n\t\n\t  Resource.call(this, options);\n\t\n\t};\n\t\n\t// This extends the base class of 'Resource'.\n\tNetworks.prototype = Object.create(Resource.prototype);\n\tNetworks.prototype.constructor = Networks;\n\t\n\t/**\n\t * Link an existing user to the specified network.\n\t *\n\t * @param {string}  networkId  The unique ID of the network.\n\t * @param {string}  userId     The unique ID of the user to link.\n\t *\n\t * @return {Promise}  A promise which resolves when the request is complete.\n\t */\n\tNetworks.prototype.linkUser = function (networkId, userId) {\n\t  var data, request, url;\n\t\n\t  if (typeof networkId !== 'string') {\n\t    return utils.promisify(false,\n\t      'IngestAPI linkUser requires \"networkId\" to be passed as a string.');\n\t  }\n\t\n\t  if (typeof userId !== 'string') {\n\t    return utils.promisify(false,\n\t      'IngestAPI linkUser requires \"userId\" to be passed as a string.');\n\t  }\n\t\n\t  data = {\n\t    id: userId\n\t  };\n\t\n\t  url = utils.parseTokens(this.config.host + this.config.byId, {\n\t    resource: this.config.resource,\n\t    id: networkId\n\t  });\n\t\n\t  request = new Request({\n\t    url: url,\n\t    data: data,\n\t    token: this._tokenSource(),\n\t    method: 'LINK'\n\t  });\n\t\n\t  return request.send();\n\t};\n\t\n\t/**\n\t * Removes the specified user from the specified network.\n\t *\n\t * @param {string}  networkId  The unique ID of the network.\n\t * @param {string}  userId     The unique ID of the user to unlink.\n\t *\n\t * @return {Promise}  A promise which resolves when the request is complete.\n\t */\n\tNetworks.prototype.unlinkUser = function (networkId, userId) {\n\t  var data, request, url;\n\t\n\t  if (typeof networkId !== 'string') {\n\t    return utils.promisify(false,\n\t      'IngestAPI unlinkUser requires \"networkId\" to be passed as a string.');\n\t  }\n\t\n\t  if (typeof userId !== 'string') {\n\t    return utils.promisify(false,\n\t      'IngestAPI unlinkUser requires \"userId\" to be passed as a string.');\n\t  }\n\t\n\t  data = {\n\t    id: userId\n\t  };\n\t\n\t  url = utils.parseTokens(this.config.host + this.config.byId, {\n\t    resource: this.config.resource,\n\t    id: networkId\n\t  });\n\t\n\t  request = new Request({\n\t    url: url,\n\t    data: data,\n\t    token: this._tokenSource(),\n\t    method: 'UNLINK'\n\t  });\n\t\n\t  return request.send();\n\t};\n\t\n\t/**\n\t * Invites a user to the specified network.\n\t *\n\t * @param {string}  networkId  The unique ID of the network.\n\t * @param {string}  email      The email to send the invite to.\n\t * @param {string}  name       The name of the person to invite.\n\t *\n\t * @return {Promise} A promise which resolves when the request is complete.\n\t */\n\tNetworks.prototype.inviteUser = function (networkId, email, name) {\n\t  var data, request, url;\n\t\n\t  if (typeof networkId !== 'string') {\n\t    return utils.promisify(false,\n\t      'IngestAPI inviteUser requires \"networkId\" to be passed as a string.');\n\t  }\n\t\n\t  if (typeof email !== 'string') {\n\t    return utils.promisify(false,\n\t      'IngestAPI inviteUser requires \"email\" to be passed as a string.');\n\t  }\n\t\n\t  if (typeof name !== 'string') {\n\t    return utils.promisify(false,\n\t      'IngestAPI inviteUser requires \"name\" to be passed as a string.');\n\t  }\n\t\n\t  data = {\n\t    email: email,\n\t    name: name\n\t  };\n\t\n\t  url = utils.parseTokens(this.config.host + this.config.invite, {\n\t    resource: this.config.resource,\n\t    networkId: networkId\n\t  });\n\t\n\t  request = new Request({\n\t    url: url,\n\t    data: data,\n\t    token: this._tokenSource(),\n\t    method: 'POST'\n\t  });\n\t\n\t  return request.send();\n\t};\n\t\n\t/**\n\t * Gets a list of all secure keys for the network given.\n\t *\n\t * @param {string}  networkId  The unique ID of the network.\n\t *\n\t * @return {Promise}  A promise which resolves when the request is complete.\n\t */\n\tNetworks.prototype.getSecureKeys = function (networkId) {\n\t  var request, url;\n\t\n\t  if (typeof networkId !== 'string') {\n\t    return utils.promisify(false,\n\t      'IngestAPI getSecureKeys requires \"networkId\" to be passed as a string.');\n\t  }\n\t\n\t  url = utils.parseTokens(this.config.host + this.config.keys, {\n\t    resource: this.config.resource,\n\t    networkId: networkId\n\t  });\n\t\n\t  request = new Request({\n\t    url: url,\n\t    token: this._tokenSource()\n\t  });\n\t\n\t  return request.send();\n\t};\n\t\n\t/**\n\t * Adds a new secure key to the specified network.\n\t *\n\t * @param {string}  networkId   The unique ID of the network.\n\t * @param {object}  data        The object containing data for the secure key entry.\n\t * @param {string}  data.title  Optional. The title of the secure key. Will default to \"Default Key Title\"\n\t * @param {string}  data.key    The public key in RSA format.\n\t *\n\t * @return {Promise}  A promise which resolves when the request is complete.\n\t */\n\tNetworks.prototype.addSecureKey = function (networkId, data) {\n\t  var request, url;\n\t\n\t  if (typeof networkId !== 'string') {\n\t    return utils.promisify(false,\n\t      'IngestAPI addSecureKey requires \"networkId\" to be passed as a string.');\n\t  }\n\t\n\t  if (typeof data !== 'object') {\n\t    return utils.promisify(false,\n\t      'IngestAPI addSecureKey requires \"data\" to be passed as an object.');\n\t  }\n\t\n\t  if (typeof data.key !== 'string') {\n\t    return utils.promisify(false,\n\t      'IngestAPI addSecureKey requires that the key be a string in RSA public key format.');\n\t  }\n\t\n\t  // The title must be a string.\n\t  if (typeof data.title !== 'string') {\n\t    data.title = '';\n\t  }\n\t\n\t  url = utils.parseTokens(this.config.host + this.config.keys, {\n\t    resource: this.config.resource,\n\t    networkId: networkId\n\t  });\n\t\n\t  request = new Request({\n\t    url: url,\n\t    token: this._tokenSource(),\n\t    method: 'POST',\n\t    data: data\n\t  });\n\t\n\t  return request.send();\n\t};\n\t\n\t/**\n\t * Retrieves a single network secure key entry based on the unique ID given.\n\t *\n\t * @param {string}  networkId  The unique ID of the network.\n\t * @param {string}  keyId      The unique ID of the secure key entry.\n\t *\n\t * @return {Promise}  A promise which resolves when the request is complete.\n\t */\n\tNetworks.prototype.getSecureKeyById = function (networkId, keyId) {\n\t  var url, request;\n\t\n\t  if (typeof networkId !== 'string') {\n\t    return utils.promisify(false,\n\t      'IngestAPI getSecureKeyById requires a \"networkId\" to be passed as a string.');\n\t  }\n\t\n\t  if (typeof keyId !== 'string') {\n\t    return utils.promisify(false,\n\t      'IngestAPI getSecureKeyById requires a \"keyId\" to be passed as a string.');\n\t  }\n\t\n\t  url = utils.parseTokens(this.config.host + this.config.keysById, {\n\t    resource: this.config.resource,\n\t    networkId: networkId,\n\t    keyId: keyId\n\t  });\n\t\n\t  request = new Request({\n\t    url: url,\n\t    token: this._tokenSource()\n\t  });\n\t\n\t  return request.send();\n\t};\n\t\n\t/**\n\t * Updates an individual secure key entry in the network specified.\n\t *\n\t * @param {string}  networkId   The unique ID of the network.\n\t * @param {object}  data        The object containing data for the secure key entry.\n\t * @param {string}  data.title  The title for the current network.\n\t *\n\t * @return {Promise} A promise which resolves when the request is complete.\n\t */\n\tNetworks.prototype.updateSecureKey = function (networkId, data) {\n\t  var url, request;\n\t\n\t  if (typeof networkId !== 'string') {\n\t    return utils.promisify(false,\n\t      'IngestAPI updateSecureKeyById requires \"networkId\" to be passed as a string.');\n\t  }\n\t\n\t  if (typeof data !== 'object') {\n\t    return utils.promisify(false,\n\t      'IngestAPI updateSecureKeyById requires \"data\" to be passed as an object.');\n\t  }\n\t\n\t  if (typeof data.id !== 'string') {\n\t    return utils.promisify(false,\n\t      'IngestAPI updateSecureKeyById requires param \"data.id\" to be a string.');\n\t  }\n\t\n\t  if (typeof data.title !== 'string') {\n\t    data.title = '';\n\t  }\n\t\n\t  url = utils.parseTokens(this.config.host + this.config.keysById, {\n\t    resource: this.config.resource,\n\t    networkId: networkId,\n\t    keyId: data.id\n\t  });\n\t\n\t  request = new Request({\n\t    url: url,\n\t    token: this._tokenSource(),\n\t    method: 'PATCH',\n\t    data: data\n\t  });\n\t\n\t  return request.send();\n\t};\n\t\n\t/**\n\t * Deletes a single network secure key entry based on the unique ID given.\n\t *\n\t * @param {string}  networkId  The unique ID of the network.\n\t * @param {string}  keyId      The unique ID of the secure key entry.\n\t *\n\t * @return {Promise}  A promise which resolves when the request is complete.\n\t */\n\tNetworks.prototype.deleteSecureKey = function (networkId, keyId) {\n\t  var url, request;\n\t\n\t  if (typeof networkId !== 'string') {\n\t    return utils.promisify(false,\n\t      'IngestAPI deleteSecureKeyById requires a \"networkId\" to be passed as a string.');\n\t  }\n\t\n\t  if (typeof keyId !== 'string') {\n\t    return utils.promisify(false,\n\t      'IngestAPI deleteSecureKeyById requires a \"keyId\" to be passed as a string.');\n\t  }\n\t\n\t  url = utils.parseTokens(this.config.host + this.config.keysById, {\n\t    resource: this.config.resource,\n\t    networkId: networkId,\n\t    keyId: keyId\n\t  });\n\t\n\t  request = new Request({\n\t    url: url,\n\t    token: this._tokenSource(),\n\t    method: 'DELETE'\n\t  });\n\t\n\t  return request.send();\n\t\n\t};\n\t\n\tmodule.exports = Networks;\n\n\n/***/ },\n/* 16 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\t\n\tvar PlaybackContent = __webpack_require__(13);\n\tvar Request = __webpack_require__(3);\n\tvar utils = __webpack_require__(9);\n\tvar extend = __webpack_require__(2);\n\t\n\tfunction Videos (options) {\n\t\n\t  var overrides = {\n\t    playlists: '/<%=resource%>/<%=id%>/playlists',\n\t    variants: '/<%=resource%>/<%=id%>/variants',\n\t    withVariants: '/<%=resource%>?filter=variants',\n\t    missingVariants: '/<%=resource%>?filter=missing_variants'\n\t  };\n\t\n\t  options = extend(true, {}, overrides, options);\n\t\n\t  PlaybackContent.call(this, options);\n\t\n\t};\n\t\n\t// This extends the base class of 'Resource'.\n\tVideos.prototype = Object.create(PlaybackContent.prototype);\n\tVideos.prototype.constructor = Videos;\n\t\n\t/**\n\t * Return any playlists that contains the provided video.\n\t * @param   {string}   id   Video id.\n\t * @return  {promise}       A promise which resolves when the request is complete.\n\t */\n\tVideos.prototype.getPlaylists = function (id) {\n\t  var url, request;\n\t\n\t  if (typeof id !== 'string') {\n\t    return utils.promisify(false,\n\t      'IngestAPI Resource getPlaylists requires a valid video id passed as a string.');\n\t  }\n\t\n\t  url = utils.parseTokens(this.config.host + this.config.playlists, {\n\t    resource: this.config.resource,\n\t    id: id\n\t  });\n\t\n\t  request = new Request({\n\t    url: url,\n\t    token: this._tokenSource()\n\t  });\n\t\n\t  return request.send();\n\t\n\t};\n\t\n\t/**\n\t * Get all of the variants for the supplied video id.\n\t * @param   {string}    id     Video id.\n\t * @return  {promise}          A promise which resolves when the request is complete.\n\t */\n\tVideos.prototype.getVariants = function (id) {\n\t  var url, request;\n\t\n\t  if (typeof id !== 'string') {\n\t    return utils.promisify(false,\n\t      'IngestAPI Resource getPlaylists requires a valid video id passed as a string.');\n\t  }\n\t\n\t  url = utils.parseTokens(this.config.host + this.config.variants, {\n\t    resource: this.config.resource,\n\t    id: id\n\t  });\n\t\n\t  request = new Request({\n\t    url: url,\n\t    token: this._tokenSource()\n\t  });\n\t\n\t  return request.send();\n\t};\n\t\n\t/**\n\t * Return a list of the videos for the current user and network that contain variants.\n\t * @param  {object}   headers   Object representing headers to apply to the request.\n\t * @return {promise}            A promise which resolves when the request is complete.\n\t */\n\tVideos.prototype.getVideosWithVariants = function (headers) {\n\t  var request;\n\t  var url = utils.parseTokens(this.config.host + this.config.withVariants, {\n\t    resource: this.config.resource\n\t  });\n\t\n\t  request = new Request({\n\t    url: url,\n\t    token: this._tokenSource(),\n\t    headers: headers\n\t  });\n\t\n\t  return request.send()\n\t          .then(this._updateCachedResources.bind(this));\n\t};\n\t\n\t/**\n\t * Return a list of the videos for the current user and network that are missing variants.\n\t * @param  {object}   headers   Object representing headers to apply to the request.\n\t * @return {promise}            A promise which resolves when the request is complete.\n\t */\n\tVideos.prototype.getVideosMissingVariants = function (headers) {\n\t  var request;\n\t  var url = utils.parseTokens(this.config.host + this.config.missingVariants, {\n\t    resource: this.config.resource\n\t  });\n\t\n\t  request = new Request({\n\t    url: url,\n\t    token: this._tokenSource(),\n\t    headers: headers\n\t  });\n\t\n\t  return request.send()\n\t          .then(this._updateCachedResources.bind(this));\n\t};\n\t\n\tmodule.exports = Videos;\n\n\n/***/ },\n/* 17 */\n/***/ function(module, exports, __webpack_require__) {\n\n\tvar Resource = __webpack_require__(12);\n\tvar Request = __webpack_require__(3);\n\tvar utils = __webpack_require__(9);\n\tvar extend = __webpack_require__(2);\n\t\n\tfunction Playlists (options) {\n\t\n\t  var overrides = {};\n\t\n\t  options = extend(true, {}, overrides, options);\n\t\n\t  Resource.call(this, options);\n\t\n\t};\n\t\n\t// This extends the base class of 'Resource'.\n\tPlaylists.prototype = Object.create(Resource.prototype);\n\tPlaylists.prototype.constructor = Playlists;\n\t\n\t/**\n\t * Link the supplied video to the supplied playlist.\n\t * @param   {string}           playlistId       ID of the playlist to link the supplied video to.\n\t * @param   {object|array}     videos           A single video object, or an array of video objects.\n\t * @return  {promise}                           A promise which resolves when the request is complete.\n\t */\n\tPlaylists.prototype.link = function (playlistId, video) {\n\t  return this._linkVideos(true, playlistId, video);\n\t};\n\t\n\t/**\n\t * Unlink the supplied video to the supplied playlist.\n\t * @param   {string}            playlistId      ID of the playlist to unlink the supplied video from.\n\t * @param   {object|array}      videos          A single video object, or an array of video objects.\n\t * @return  {promise}                           A promise which resolves when the request is complete.\n\t */\n\tPlaylists.prototype.unlink = function (playlistId, video) {\n\t  return this._linkVideos(false, playlistId, video);\n\t};\n\t\n\t/**\n\t * Link or Unlink videos to a playlist.\n\t * @private\n\t * @param  {boolean}          link              A boolean indicating wether to link or unlink the item.\n\t * @param  {string}           playlistId        ID of the playlist to act upon.\n\t * @param  {object|array}     video             A single video object, or an array of video objects.\n\t * @return {promise}                            A promise which resolves when the request is complete.\n\t */\n\tPlaylists.prototype._linkVideos = function (link, playlistId, video) {\n\t  var request;\n\t  var videosToLink = [];\n\t\n\t  if (typeof link !== 'boolean') {\n\t    return utils.promisify(false,\n\t      'IngestAPI Playlists link requires a valid link flag passed as a boolean.');\n\t  }\n\t\n\t  if (typeof playlistId !== 'string') {\n\t    return utils.promisify(false,\n\t      'IngestAPI Playlists link requires a valid playlistId passed as a string.');\n\t  }\n\t\n\t  if (!video || (!Array.isArray(video) && typeof video !== 'object')) {\n\t    return utils.promisify(false,\n\t      'IngestAPI Playlists link requires a valid video passed as a valid object or array.');\n\t  }\n\t\n\t  // Check to see if we recieved either an object or an array.\n\t  if (!Array.isArray(video)) {\n\t    videosToLink.push(video);\n\t  } else {\n\t    videosToLink = video;\n\t  }\n\t\n\t  // Ensure that we have an array with a valid video.\n\t  if (videosToLink.length === 0) {\n\t    return utils.promisify(false,\n\t      'IngestAPI Playlists link requires at least one video to link.');\n\t  }\n\t\n\t  var url = utils.parseTokens(this.config.host + this.config.byId, {\n\t    resource: this.config.resource,\n\t    id: playlistId\n\t  });\n\t\n\t  request = new Request({\n\t    method: link ? 'LINK' : 'UNLINK',\n\t    url: url,\n\t    token: this._tokenSource(),\n\t    data: videosToLink\n\t  });\n\t\n\t  return request.send()\n\t          .then(this._updateCachedResources.bind(this));\n\t};\n\t\n\tmodule.exports = Playlists;\n\n\n/***/ },\n/* 18 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\t\n\tvar Resource = __webpack_require__(12);\n\tvar Request = __webpack_require__(3);\n\tvar utils = __webpack_require__(9);\n\tvar extend = __webpack_require__(2);\n\t\n\tfunction Jobs (options) {\n\t\n\t  Resource.call(this, options);\n\t\n\t};\n\t\n\t// This extends the base class of 'Resource'.\n\tJobs.prototype = Object.create(Resource.prototype);\n\tJobs.prototype.constructor = Jobs;\n\t\n\t/**\n\t * Creates a new encoding job.\n\t *\n\t * @return {Promise} A promise which resolves when the request is complete.\n\t */\n\tJobs.prototype.add = function (resource) {\n\t\n\t  var url, request;\n\t\n\t  if (typeof resource !== 'object') {\n\t    return utils.promisify(false,\n\t      'IngestAPI Jobs `add` requires a resource passed as an object.');\n\t  }\n\t\n\t  url = utils.parseTokens(this.config.host + this.config.all, {\n\t    resource: this.config.resource\n\t  });\n\t\n\t  // Deletes the cached version of the associated video.\n\t  if (resource.hasOwnProperty('video') && typeof resource.video === 'string') {\n\t    this._deleteCachedResource(resource.video);\n\t  }\n\t\n\t  request = new Request({\n\t    url: url,\n\t    token: this._tokenSource(),\n\t    method: 'POST',\n\t    data: resource\n\t  });\n\t\n\t  return request.send()\n\t      .then(this._updateCachedResource.bind(this));\n\t\n\t};\n\t\n\tmodule.exports = Jobs;\n\n\n/***/ },\n/* 19 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\t\n\tvar Resource = __webpack_require__(12);\n\tvar Request = __webpack_require__(3);\n\tvar utils = __webpack_require__(9);\n\tvar extend = __webpack_require__(2);\n\t\n\tfunction Billing (options) {\n\t\n\t  var overrides = {\n\t    customers: '/<%=resource%>/customers'\n\t  };\n\t\n\t  options = extend(true, {}, overrides, options);\n\t\n\t  // We only want the config, not the prototype.\n\t  // This is because the billing resource does not share the same pattern as the other resources.\n\t  Resource.call(this, options);\n\t};\n\t\n\t/**\n\t * Creates a Stripe customer for the given network ID.\n\t *\n\t * @param {string} stripeToken - The Stripe token to reference submitted payment details.\n\t * @param {string} networkId   - The network UUID for this Stripe customer.\n\t *\n\t * @return {Promise} A promise which resolves when the request is complete.\n\t */\n\tBilling.prototype.createCustomer = function (stripeToken, networkId) {\n\t  var url, request, data;\n\t\n\t  if (typeof stripeToken !== 'string' || typeof networkId !== 'string') {\n\t    return utils.promisify(false,\n\t      'IngestAPI Billing createCustomer requires stripeToken and networkId to be strings.');\n\t  }\n\t\n\t  url = utils.parseTokens(this.config.host + this.config.customers, {\n\t    resource: this.config.resource\n\t  });\n\t\n\t  data = {\n\t    networkId: networkId,\n\t    stripeToken: stripeToken\n\t  };\n\t\n\t  request = new Request({\n\t    url: url,\n\t    data: data,\n\t    token: this.config.tokenSource(),\n\t    method: 'POST'\n\t  });\n\t\n\t  return request.send();\n\t};\n\t\n\tmodule.exports = Billing;\n\n\n/***/ }\n/******/ ])\n});\n;\n\n\n/** WEBPACK FOOTER **\n ** ingest.js\n **/"," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId])\n \t\t\treturn installedModules[moduleId].exports;\n\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\texports: {},\n \t\t\tid: moduleId,\n \t\t\tloaded: false\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.loaded = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(0);\n\n\n\n/** WEBPACK FOOTER **\n ** webpack/bootstrap 7c8f41f83d1f91d63a32\n **/","'use strict';\nmodule.exports = require('./src/IngestAPI.js');\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./index.js\n ** module id = 0\n ** module chunks = 0\n **/","'use strict';\n\nvar extend = require('extend');\nvar Request = require('./Request');\nvar JWTUtils = require('./JWTUtils');\nvar utils = require('./Utils');\nvar Uploader = require('./Uploader');\nvar Cache = require('./Cache');\n\nvar Resource = require('./resources/Resource');\nvar Media = require('./resources/PlaybackContent');\nvar Users = require('./resources/Users');\nvar Networks = require('./resources/Networks');\nvar Videos = require('./resources/Videos');\nvar Playlists = require('./resources/Playlists');\nvar Jobs = require('./resources/Jobs');\nvar Billing = require('./resources/Billing');\n\n/**\n * IngestAPI Object\n * @class\n * @param {object}  options        Options to override the default.\n * @param {string}  options.host   Override the default live host.\n * @param {string}  options.token  Auth token to use for requests.\n */\nfunction IngestAPI (options) {\n\n  this.defaults = {\n    'host': 'https://api.ingest.io',\n    'cacheAge': 300000, // 5 minutes\n    'inputs': '/encoding/inputs',\n    'inputsById' : '/encoding/inputs/<%=id%>',\n    'inputsUpload': '/encoding/inputs/<%=id%>/upload<%=method%>',\n    'inputsUploadSign': '/encoding/inputs/<%=id%>/upload/sign<%=method%>',\n    'inputsUploadComplete': '/encoding/inputs/<%=id%>/upload/complete',\n    'inputsUploadAbort': '/encoding/inputs/<%=id%>/upload/abort'\n  };\n\n  // Create a config object by extending the defaults with the pass options.\n  this.config = extend(true, {}, this.defaults, options);\n\n  this.token = null;\n\n  if (this.config.token) {\n    // Store the token for future use.\n    this.setToken(this.config.token);\n  }\n\n  /* Exposed for testing */\n  this.request = Request;\n  this.JWTUtils = JWTUtils;\n  this.utils = utils;\n  this.resource = Resource;\n  this.playbackContent = Media;\n  this.usersResource = Users;\n  this.networksResource = Networks;\n  this.videosResource = Videos;\n  this.playlistsResource = Playlists;\n  this.jobsResource = Jobs;\n  this.billingResource = Billing;\n  this.uploader = Uploader;\n\n  this.cache = new Cache(this.config.cacheAge);\n\n  this._getToken = this.getToken.bind(this);\n\n  this.videos = new Videos({\n    host: this.config.host,\n    resource: 'videos',\n    tokenSource: this._getToken,\n    cache: this.cache\n  });\n\n  this.playlists = new Playlists({\n    host: this.config.host,\n    resource: 'playlists',\n    tokenSource: this._getToken\n  });\n\n  this.inputs = new Resource({\n    host: this.config.host,\n    resource: 'encoding/inputs',\n    tokenSource: this._getToken,\n    cache: this.cache\n  });\n\n  this.users = new Users({\n    host: this.config.host,\n    resource: 'users',\n    tokenSource: this._getToken\n  });\n\n  this.networks = new Networks({\n    host: this.config.host,\n    resource: 'networks',\n    tokenSource: this._getToken\n  });\n\n  this.profiles = new Resource({\n    host: this.config.host,\n    resource: 'encoding/profiles',\n    tokenSource: this._getToken\n  });\n\n  this.jobs = new Jobs({\n    host: this.config.host,\n    resource: 'encoding/jobs',\n    tokenSource: this._getToken,\n    cache: this.cache\n  });\n\n  this.billing = new Billing({\n    host: this.config.host,\n    resource: 'billing',\n    tokenSource: this._getToken\n  });\n\n}\n\n/** Token **/\n/**\n * Set the auth token to use.\n * @param   {String}        token Auth token to use.\n */\nIngestAPI.prototype.setToken = function (token) {\n\n  // Make sure a valid value is passed.\n  if (typeof token !== 'string') {\n    throw new Error('IngestAPI requires an authentication token passed as a string.');\n  }\n\n  this.token = token;\n};\n\n/**\n * Return the current auth token.\n * @return  {String}        Current auth token, or null if a token has not been set.\n */\nIngestAPI.prototype.getToken = function () {\n  return this.token;\n};\n\n/**\n * Create a new input and upload a file.\n * @param  {File}   file    File to upload.\n * @return {Promise} A promise which resolves when the upload is complete.\n */\nIngestAPI.prototype.upload = function (file) {\n  return new Uploader({\n    file: file,\n    api: this,\n    host: this.config.host\n  });\n};\n\nmodule.exports = IngestAPI;\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./src/IngestAPI.js\n ** module id = 1\n ** module chunks = 0\n **/","'use strict';\n\nvar hasOwn = Object.prototype.hasOwnProperty;\nvar toStr = Object.prototype.toString;\n\nvar isArray = function isArray(arr) {\n\tif (typeof Array.isArray === 'function') {\n\t\treturn Array.isArray(arr);\n\t}\n\n\treturn toStr.call(arr) === '[object Array]';\n};\n\nvar isPlainObject = function isPlainObject(obj) {\n\tif (!obj || toStr.call(obj) !== '[object Object]') {\n\t\treturn false;\n\t}\n\n\tvar hasOwnConstructor = hasOwn.call(obj, 'constructor');\n\tvar hasIsPrototypeOf = obj.constructor && obj.constructor.prototype && hasOwn.call(obj.constructor.prototype, 'isPrototypeOf');\n\t// Not own constructor property must be Object\n\tif (obj.constructor && !hasOwnConstructor && !hasIsPrototypeOf) {\n\t\treturn false;\n\t}\n\n\t// Own properties are enumerated firstly, so to speed up,\n\t// if last one is own, then all properties are own.\n\tvar key;\n\tfor (key in obj) {/**/}\n\n\treturn typeof key === 'undefined' || hasOwn.call(obj, key);\n};\n\nmodule.exports = function extend() {\n\tvar options, name, src, copy, copyIsArray, clone,\n\t\ttarget = arguments[0],\n\t\ti = 1,\n\t\tlength = arguments.length,\n\t\tdeep = false;\n\n\t// Handle a deep copy situation\n\tif (typeof target === 'boolean') {\n\t\tdeep = target;\n\t\ttarget = arguments[1] || {};\n\t\t// skip the boolean and the target\n\t\ti = 2;\n\t} else if ((typeof target !== 'object' && typeof target !== 'function') || target == null) {\n\t\ttarget = {};\n\t}\n\n\tfor (; i < length; ++i) {\n\t\toptions = arguments[i];\n\t\t// Only deal with non-null/undefined values\n\t\tif (options != null) {\n\t\t\t// Extend the base object\n\t\t\tfor (name in options) {\n\t\t\t\tsrc = target[name];\n\t\t\t\tcopy = options[name];\n\n\t\t\t\t// Prevent never-ending loop\n\t\t\t\tif (target !== copy) {\n\t\t\t\t\t// Recurse if we're merging plain objects or arrays\n\t\t\t\t\tif (deep && copy && (isPlainObject(copy) || (copyIsArray = isArray(copy)))) {\n\t\t\t\t\t\tif (copyIsArray) {\n\t\t\t\t\t\t\tcopyIsArray = false;\n\t\t\t\t\t\t\tclone = src && isArray(src) ? src : [];\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tclone = src && isPlainObject(src) ? src : {};\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\t// Never move original objects, clone them\n\t\t\t\t\t\ttarget[name] = extend(deep, clone, copy);\n\n\t\t\t\t\t// Don't bring in undefined values\n\t\t\t\t\t} else if (typeof copy !== 'undefined') {\n\t\t\t\t\t\ttarget[name] = copy;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\t// Return the modified object\n\treturn target;\n};\n\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./~/extend/index.js\n ** module id = 2\n ** module chunks = 0\n **/","'use strict';\n\nvar Promise = require('pinkyswear');\nvar extend = require('extend');\n\nvar JWTUtils = require('./JWTUtils');\n\nvar VALID_RESPONSE_CODES = [200, 201, 202, 204];\n\n/**\n * A wrapper around the XMLHttpRequest object.\n * @param {object}  options         Options for the request.\n * @param {boolean} options.async   Whether to perform the request asynchronously\n * @param {string}  options.method  REST verb to use for the request.\n * @param {string}  options.url     URL for the request.\n */\nvar Request = function (options) {\n\n  this.defaults = {\n    async: true,\n    method: 'GET',\n    ignoreAcceptHeader: false\n  };\n\n  // Create the XHR object for this request.\n  this.request = new XMLHttpRequest();\n\n  // Set up event listeners for this request.\n  this.setupListeners();\n\n  // Todo, merge some defaults with this.\n  this.options = extend(true, this.defaults, options);\n\n};\n\n/**\n * Send the request and return a promise to resolve when the request is complete.\n * @return {Promise} A promise which resolves when the request is complete.\n */\nRequest.prototype.send = function () {\n\n  this.promise = Promise();\n\n  // Make sure a url is passed before attempting to make the request.\n  if (this.options.url) {\n    // Make the actual request.\n    this.makeRequest();\n  } else {\n    this.requestError('Request Error : a url is required to make the request.');\n  }\n\n  return this.promise;\n\n};\n\n/**\n * Add event listeners to the XMLHttpRequest object.\n */\nRequest.prototype.setupListeners = function () {\n  this.request.onreadystatechange = this.readyStateChange.bind(this);\n};\n\n/**\n * Execute the open and send of the XMLHttpRequest\n */\nRequest.prototype.makeRequest = function () {\n\n  var postData = this.preparePostData(this.options.data);\n  var headers = this.options.headers;\n  var hasContentType = headers && headers.hasOwnProperty('Content-Type');\n\n  if (!postData.success) {\n    this.requestError('Request Error : error preparing post data.');\n    return;\n  }\n\n  this.request.open(this.options.method, this.options.url, this.options.async);\n\n  // Set before we apply the headers so it can be overridden on a per request basis.\n  if (!this.options.ignoreAcceptHeader) {\n    this.request.setRequestHeader('Accept', 'application/vnd.ingest.v1+json');\n  }\n\n  if (headers) {\n    this.applyRequestHeaders(headers);\n  }\n\n  // Make the token optional.\n  if (this.options.token) {\n\n    // If there is a token present ensure that it's still valid.\n    if (JWTUtils.isExpired(this.options.token)) {\n      this.requestError('Request Error : token is expired.');\n      return;\n    }\n\n    this.request.setRequestHeader('Authorization', this.options.token);\n\n  }\n\n  // Set the default content type when posting data.\n  if (postData.data && postData.type === 'JSON' && !hasContentType) {\n    this.request.setRequestHeader('Content-Type', 'application/vnd.ingest.v1+json');\n  }\n\n  // If there is data then we need to pass that along with the request.\n  if (postData.data) {\n    this.request.send(postData.data);\n  } else {\n    this.request.send();\n  }\n\n};\n\n/**\n * Stringify the post data if it is present.\n * @param  {object} data Object to be parsed.\n * @return {object}      Result object with the parsed string, and a success boolean flag.\n */\nRequest.prototype.preparePostData = function (data) {\n\n  var result = {\n    success: true,\n    data: data,\n    type: 'JSON'\n  };\n\n  // In the case of file uploads, all FormData to be passed to the request.\n  if (data instanceof FormData) {\n    result.type = 'FormData';\n    return result;\n  }\n\n  if (data instanceof Blob) {\n    result.type = 'File';\n    return result;\n  }\n\n  // If the data is populated, and its not already a string parse it.\n  if (data) {\n    try {\n      result.data = JSON.stringify(data);\n    } catch (error) {\n      result.success = false;\n      result.data = null;\n    }\n  }\n\n  return result;\n\n};\n\n/**\n * Apply any supplied headers to the request object.\n * @param  {object} headers Array of headers to apply to the request object.\n */\nRequest.prototype.applyRequestHeaders = function (headers) {\n\n  var key, i;\n  var keys = Object.keys(headers);\n  var keysLength = keys.length;\n\n  // Loop through and add the keys to the requestHeaders.\n  for (i = 0; i < keysLength; i++) {\n    key = keys[i];\n    this.request.setRequestHeader(key, headers[key]);\n  }\n\n};\n\n/**\n * Handle the completion of the request and fulfill the promise.\n * @param  {String} Response test of the request.\n */\nRequest.prototype.requestComplete = function (response) {\n\n  // Process the result.\n  this.response = this.processResponse(response);\n\n  // Either resolve or reject the promise.\n  this.promise(!this.response.data.error, [this.response]);\n\n};\n\n/**\n * Process the response and parse certain content types.\n * @param  {*}  response  Response data from request.\n * @return {*}            Processed response data.\n */\nRequest.prototype.processResponse = function (response) {\n  var responseType = this.request.getResponseHeader('Content-Type');\n  var result = response;\n\n  // Parse JSON if the result is JSON.\n  if (responseType && responseType.indexOf('json') !== -1) {\n    try {\n      result = JSON.parse(response);\n    } catch (error) {\n      result = {\n        error: 'JSON parsing failed. ' + error.stack\n      };\n    }\n  }\n\n  return {\n    data: result,\n    headers: this.request.getResponseHeader.bind(this.request),\n    statusCode: this.request.status\n  };\n\n};\n\n/**\n * Resolve the promise.\n * @param  {String} message   Error message.\n */\nRequest.prototype.requestError = function (message) {\n  // Reject the promise.\n  this.promise(false, [{\n    message: message,\n    headers: this.request.getAllResponseHeaders(),\n    statusCode: this.request.status\n  }]);\n};\n\n/**\n * Handle ready state change events.\n */\nRequest.prototype.readyStateChange = function () {\n\n  // Request is complete.\n  if (this.request.readyState === 4) {\n\n    // Check if the final response code is valid.\n    if (this.isValidResponseCode(this.request.status)) {\n      this.requestComplete(this.request.responseText);\n    } else {\n      this.requestError('Invalid response code.');\n    }\n\n  }\n\n};\n\n/**\n * Validate the current response code to see if the request was a success.\n * @param  {Number}  responseCode Response Code.\n * @return {Boolean}              Should this be treated as a successful response code.\n */\nRequest.prototype.isValidResponseCode = function (responseCode) {\n\n  var result = false,\n    responseCodeCount = VALID_RESPONSE_CODES.length,\n    i;\n\n  // Check if the supplied code is in our list of valid codes.\n  for (i = 0; i < responseCodeCount; i++) {\n\n    if (responseCode === VALID_RESPONSE_CODES[i]) {\n      result = true;\n      break;\n    }\n\n  }\n\n  return result;\n\n};\n\n/**\n * Cancel the current XHR request.\n */\nRequest.prototype.cancel = function () {\n  // Remove the event listener.\n  this.request.onreadystatechange = null;\n  this.request.abort();\n  this.requestError('Request has been canceled.');\n};\n\nmodule.exports = Request;\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./src/Request.js\n ** module id = 3\n ** module chunks = 0\n **/","/*\n * PinkySwear.js 2.2.2 - Minimalistic implementation of the Promises/A+ spec\n * \n * Public Domain. Use, modify and distribute it any way you like. No attribution required.\n *\n * NO WARRANTY EXPRESSED OR IMPLIED. USE AT YOUR OWN RISK.\n *\n * PinkySwear is a very small implementation of the Promises/A+ specification. After compilation with the\n * Google Closure Compiler and gzipping it weighs less than 500 bytes. It is based on the implementation for \n * Minified.js and should be perfect for embedding. \n *\n *\n * PinkySwear has just three functions.\n *\n * To create a new promise in pending state, call pinkySwear():\n *         var promise = pinkySwear();\n *\n * The returned object has a Promises/A+ compatible then() implementation:\n *          promise.then(function(value) { alert(\"Success!\"); }, function(value) { alert(\"Failure!\"); });\n *\n *\n * The promise returned by pinkySwear() is a function. To fulfill the promise, call the function with true as first argument and\n * an optional array of values to pass to the then() handler. By putting more than one value in the array, you can pass more than one\n * value to the then() handlers. Here an example to fulfill a promsise, this time with only one argument: \n *         promise(true, [42]);\n *\n * When the promise has been rejected, call it with false. Again, there may be more than one argument for the then() handler:\n *         promise(true, [6, 6, 6]);\n *         \n * You can obtain the promise's current state by calling the function without arguments. It will be true if fulfilled,\n * false if rejected, and otherwise undefined.\n * \t\t   var state = promise(); \n * \n * https://github.com/timjansen/PinkySwear.js\n */\n(function(target) {\n\tvar undef;\n\n\tfunction isFunction(f) {\n\t\treturn typeof f == 'function';\n\t}\n\tfunction isObject(f) {\n\t\treturn typeof f == 'object';\n\t}\n\tfunction defer(callback) {\n\t\tif (typeof setImmediate != 'undefined')\n\t\t\tsetImmediate(callback);\n\t\telse if (typeof process != 'undefined' && process['nextTick'])\n\t\t\tprocess['nextTick'](callback);\n\t\telse\n\t\t\tsetTimeout(callback, 0);\n\t}\n\n\ttarget[0][target[1]] = function pinkySwear(extend) {\n\t\tvar state;           // undefined/null = pending, true = fulfilled, false = rejected\n\t\tvar values = [];     // an array of values as arguments for the then() handlers\n\t\tvar deferred = [];   // functions to call when set() is invoked\n\n\t\tvar set = function(newState, newValues) {\n\t\t\tif (state == null && newState != null) {\n\t\t\t\tstate = newState;\n\t\t\t\tvalues = newValues;\n\t\t\t\tif (deferred.length)\n\t\t\t\t\tdefer(function() {\n\t\t\t\t\t\tfor (var i = 0; i < deferred.length; i++)\n\t\t\t\t\t\t\tdeferred[i]();\n\t\t\t\t\t});\n\t\t\t}\n\t\t\treturn state;\n\t\t};\n\n\t\tset['then'] = function (onFulfilled, onRejected) {\n\t\t\tvar promise2 = pinkySwear(extend);\n\t\t\tvar callCallbacks = function() {\n\t    \t\ttry {\n\t    \t\t\tvar f = (state ? onFulfilled : onRejected);\n\t    \t\t\tif (isFunction(f)) {\n\t\t   \t\t\t\tfunction resolve(x) {\n\t\t\t\t\t\t    var then, cbCalled = 0;\n\t\t   \t\t\t\t\ttry {\n\t\t\t\t   \t\t\t\tif (x && (isObject(x) || isFunction(x)) && isFunction(then = x['then'])) {\n\t\t\t\t\t\t\t\t\t\tif (x === promise2)\n\t\t\t\t\t\t\t\t\t\t\tthrow new TypeError();\n\t\t\t\t\t\t\t\t\t\tthen['call'](x,\n\t\t\t\t\t\t\t\t\t\t\tfunction() { if (!cbCalled++) resolve.apply(undef,arguments); } ,\n\t\t\t\t\t\t\t\t\t\t\tfunction(value){ if (!cbCalled++) promise2(false,[value]);});\n\t\t\t\t   \t\t\t\t}\n\t\t\t\t   \t\t\t\telse\n\t\t\t\t   \t\t\t\t\tpromise2(true, arguments);\n\t\t   \t\t\t\t\t}\n\t\t   \t\t\t\t\tcatch(e) {\n\t\t   \t\t\t\t\t\tif (!cbCalled++)\n\t\t   \t\t\t\t\t\t\tpromise2(false, [e]);\n\t\t   \t\t\t\t\t}\n\t\t   \t\t\t\t}\n\t\t   \t\t\t\tresolve(f.apply(undef, values || []));\n\t\t   \t\t\t}\n\t\t   \t\t\telse\n\t\t   \t\t\t\tpromise2(state, values);\n\t\t\t\t}\n\t\t\t\tcatch (e) {\n\t\t\t\t\tpromise2(false, [e]);\n\t\t\t\t}\n\t\t\t};\n\t\t\tif (state != null)\n\t\t\t\tdefer(callCallbacks);\n\t\t\telse\n\t\t\t\tdeferred.push(callCallbacks);\n\t\t\treturn promise2;\n\t\t};\n        if(extend){\n            set = extend(set);\n        }\n\t\treturn set;\n\t};\n})(typeof module == 'undefined' ? [window, 'pinkySwear'] : [module, 'exports']);\n\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./~/pinkyswear/pinkyswear.js\n ** module id = 4\n ** module chunks = 0\n **/","module.exports = function(module) {\r\n\tif(!module.webpackPolyfill) {\r\n\t\tmodule.deprecate = function() {};\r\n\t\tmodule.paths = [];\r\n\t\t// module.parent = undefined by default\r\n\t\tmodule.children = [];\r\n\t\tmodule.webpackPolyfill = 1;\r\n\t}\r\n\treturn module;\r\n}\r\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** (webpack)/buildin/module.js\n ** module id = 5\n ** module chunks = 0\n **/","var nextTick = require('process/browser.js').nextTick;\nvar apply = Function.prototype.apply;\nvar slice = Array.prototype.slice;\nvar immediateIds = {};\nvar nextImmediateId = 0;\n\n// DOM APIs, for completeness\n\nexports.setTimeout = function() {\n  return new Timeout(apply.call(setTimeout, window, arguments), clearTimeout);\n};\nexports.setInterval = function() {\n  return new Timeout(apply.call(setInterval, window, arguments), clearInterval);\n};\nexports.clearTimeout =\nexports.clearInterval = function(timeout) { timeout.close(); };\n\nfunction Timeout(id, clearFn) {\n  this._id = id;\n  this._clearFn = clearFn;\n}\nTimeout.prototype.unref = Timeout.prototype.ref = function() {};\nTimeout.prototype.close = function() {\n  this._clearFn.call(window, this._id);\n};\n\n// Does not start the time, just sets up the members needed.\nexports.enroll = function(item, msecs) {\n  clearTimeout(item._idleTimeoutId);\n  item._idleTimeout = msecs;\n};\n\nexports.unenroll = function(item) {\n  clearTimeout(item._idleTimeoutId);\n  item._idleTimeout = -1;\n};\n\nexports._unrefActive = exports.active = function(item) {\n  clearTimeout(item._idleTimeoutId);\n\n  var msecs = item._idleTimeout;\n  if (msecs >= 0) {\n    item._idleTimeoutId = setTimeout(function onTimeout() {\n      if (item._onTimeout)\n        item._onTimeout();\n    }, msecs);\n  }\n};\n\n// That's not how node.js implements it but the exposed api is the same.\nexports.setImmediate = typeof setImmediate === \"function\" ? setImmediate : function(fn) {\n  var id = nextImmediateId++;\n  var args = arguments.length < 2 ? false : slice.call(arguments, 1);\n\n  immediateIds[id] = true;\n\n  nextTick(function onNextTick() {\n    if (immediateIds[id]) {\n      // fn.call() is faster so we optimize for the common use-case\n      // @see http://jsperf.com/call-apply-segu\n      if (args) {\n        fn.apply(null, args);\n      } else {\n        fn.call(null);\n      }\n      // Prevent ids from leaking\n      exports.clearImmediate(id);\n    }\n  });\n\n  return id;\n};\n\nexports.clearImmediate = typeof clearImmediate === \"function\" ? clearImmediate : function(id) {\n  delete immediateIds[id];\n};\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./~/timers-browserify/main.js\n ** module id = 6\n ** module chunks = 0\n **/","// shim for using process in browser\n\nvar process = module.exports = {};\nvar queue = [];\nvar draining = false;\nvar currentQueue;\nvar queueIndex = -1;\n\nfunction cleanUpNextTick() {\n    draining = false;\n    if (currentQueue.length) {\n        queue = currentQueue.concat(queue);\n    } else {\n        queueIndex = -1;\n    }\n    if (queue.length) {\n        drainQueue();\n    }\n}\n\nfunction drainQueue() {\n    if (draining) {\n        return;\n    }\n    var timeout = setTimeout(cleanUpNextTick);\n    draining = true;\n\n    var len = queue.length;\n    while(len) {\n        currentQueue = queue;\n        queue = [];\n        while (++queueIndex < len) {\n            if (currentQueue) {\n                currentQueue[queueIndex].run();\n            }\n        }\n        queueIndex = -1;\n        len = queue.length;\n    }\n    currentQueue = null;\n    draining = false;\n    clearTimeout(timeout);\n}\n\nprocess.nextTick = function (fun) {\n    var args = new Array(arguments.length - 1);\n    if (arguments.length > 1) {\n        for (var i = 1; i < arguments.length; i++) {\n            args[i - 1] = arguments[i];\n        }\n    }\n    queue.push(new Item(fun, args));\n    if (queue.length === 1 && !draining) {\n        setTimeout(drainQueue, 0);\n    }\n};\n\n// v8 likes predictible objects\nfunction Item(fun, array) {\n    this.fun = fun;\n    this.array = array;\n}\nItem.prototype.run = function () {\n    this.fun.apply(null, this.array);\n};\nprocess.title = 'browser';\nprocess.browser = true;\nprocess.env = {};\nprocess.argv = [];\nprocess.version = ''; // empty string to avoid regexp issues\nprocess.versions = {};\n\nfunction noop() {}\n\nprocess.on = noop;\nprocess.addListener = noop;\nprocess.once = noop;\nprocess.off = noop;\nprocess.removeListener = noop;\nprocess.removeAllListeners = noop;\nprocess.emit = noop;\n\nprocess.binding = function (name) {\n    throw new Error('process.binding is not supported');\n};\n\nprocess.cwd = function () { return '/' };\nprocess.chdir = function (dir) {\n    throw new Error('process.chdir is not supported');\n};\nprocess.umask = function() { return 0; };\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./~/process/browser.js\n ** module id = 7\n ** module chunks = 0\n **/","'use strict';\n\n/**\n * UTILS for dealing with jwt tokens.\n */\n\n/**\n * Parse the payload out of the JWT token.\n * @param  {string} token JWT Token.\n * @return {object}       Parsed payload object.\n */\nvar parseTokenPayload = function (token) {\n  var parts = token.split('.');\n\n  // Return false if the token is invalid.\n  if (parts.length <= 1) {\n    return false;\n  }\n\n  // decode the payload portion.\n  var payload = window.atob(parts[1]);\n\n  // parse it as JSON\n  payload = JSON.parse(payload);\n\n  return payload;\n};\n\n/**\n * Return true if the provided token has expired.\n * @param  {string}  token JWT Token\n * @return {Boolean}       True if expired.\n */\nmodule.exports.isExpired = function (token) {\n  var data, exp, result, now;\n\n  data = parseTokenPayload(token);\n\n  result = true;\n\n  // Return true if the token does not parse properly.\n  if (!data) {\n    return result;\n  }\n\n  exp = data.exp;\n\n  // Get the unix timestamp in seconds.\n  now = new Date();\n  now = now.getTime() / 1000;\n\n  if (!exp) {\n    return result;\n  }\n\n  // If the expiry data is still in the future.\n  if (now < exp) {\n    result = false;\n  }\n\n  return result;\n\n};\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./src/JWTUtils.js\n ** module id = 8\n ** module chunks = 0\n **/","'use strict';\n\nvar Promise = require('pinkyswear');\nvar Utils = {};\n/**\n * Replace all tokens within a given template based on the given key/value pair.\n * @param  {string}     template    Template for the url.\n * @param  {object}     hash        Key/Value pair for replacing tokens in the template.\n *\n * @example\n * var tokens = {\n *  keyInTemplate: 'replacedWith'\n * };\n *\n * var template = '<%=keyInTemplate%>';\n *\n * var result = parseTokens(template, tokens);  // 'replacedWith'\n *\n * @return {string}                 Parsed string.\n */\nUtils.parseTokens = function (template, hash) {\n  if (!template) {\n    return null;\n  }\n\n  var keys = Object.keys(hash);\n  var i;\n  var length = keys.length;\n\n  for (i = 0; i < length; i++) {\n    template = template.replace('<%=' + keys[i] + '%>', hash[keys[i]]);\n  }\n\n  return template;\n};\n\n/**\n * Wrapper function to wrap a value in either a reject or resolve.\n * @param  {boolean} state Rejection or Approval.\n * @param  {*}       value Value to pass back to the promise.\n * @return {Promise}       Promise/A+ spec promise.\n */\nUtils.promisify = function (state, value) {\n  var promise = Promise();\n\n  promise(state, [value]);\n\n  return promise;\n};\n\n/**\n * Wrap an array of promises and return when they have all completed.\n * @param   {Array}     promises  An array of promises to manage.\n * @param   {boolean}   paused    A boolean to pause the execution of the promises.\n * @return  {Promise}             A promise that is resolved when all of the promises have fulfilled.\n */\nUtils.series = function (promises, paused) {\n\n  var promisesCount = promises.length;\n  var all = Promise();\n\n  var state = {\n    total: promisesCount,\n    complete: 0,\n    responses: [],\n    promises: promises,\n    paused: true\n  };\n\n  all.pause = Utils._seriesPause.bind(undefined, all, state);\n  all.resume = Utils._seriesResume.bind(undefined, all, state);\n  all.cancel = Utils._seriesCancel.bind(undefined, all, state);\n\n  if (!paused) {\n    state.paused = false;\n    Utils._seriesCallPromise(promises[0], state, all);\n  }\n\n  return all;\n\n};\n\n/**\n * Call a promise and pass the complete and error functions.\n * @param  {Promise} promise Promise to execute on.\n * @param  {Object} state   Persistent state of the series of promises.\n */\nUtils._seriesCallPromise = function (promise, state, all) {\n  // call the promise;\n  if (!state.paused) {\n    promise().then(Utils._seriesComplete.bind(undefined, all, state),\n      Utils._seriesError.bind(undefined, all, state));\n  }\n};\n\n/**\n * Manage the progress of the promises.\n * @private\n * @param  {Promise} all      All promise.\n * @param  {Object}  state    State object used to persist the promise count.\n * @param  {Object}  response Response of the promise being fulfilled.\n */\nUtils._seriesComplete = function (all, state, response) {\n\n  // Early return if this has been canceled.\n  if (state.canceled) {\n    return;\n  }\n\n  // Increment the complete promises.\n  state.complete++;\n  state.responses.push(response);\n\n  if (state.complete >= state.total) {\n    all(true, state.responses);\n  } else {\n    if (!state.paused) {\n      // Execute the next promise.\n      Utils._seriesCallPromise(state.promises[state.complete], state, all);\n    }\n  }\n\n};\n\n/**\n * Immediately reject the promise if there is an error.\n * @param  {Promise} all  All promise.\n * @param  {Object}  state    State object used to persist the promise count.\n * @param  {Object}  response Response of the promise being fulfilled.\n */\nUtils._seriesError = function (all, state, error) {\n  all(false, [error]);\n};\n\n/**\n * Pause the current series of promises.\n * @param  {Promise} all  All promise.\n * @param  {Object}  state    State object used to persist the promise count.\n */\nUtils._seriesPause = function (all, state) {\n  state.paused = true;\n};\n\n/**\n * Resume the current series of promises.\n * @param  {Promise} all  All promise.\n * @param  {Object}  state    State object used to persist the promise count.\n */\nUtils._seriesResume = function (all, state) {\n  state.paused = false;\n\n  if (state.complete !== state.total) {\n    Utils._seriesCallPromise(state.promises[state.complete], state, all);\n  }\n};\n\n/**\n * Resolve the promise but return an empty response.\n * @param  {Promise}  all     All promise.\n * @param  {Object}   state   State object used to persist the promise count.\n */\nUtils._seriesCancel = function (all, state) {\n  state.canceled = true;\n  all(true, []);\n};\n\n/**\n * Return true if a file provided matches a support image type.\n * @param  {file}     file  A reference to an image file.\n * @return {Boolean}        True if the type matches a known image type.\n */\nUtils.isImage = function (file) {\n  return file.type.indexOf('image') !== -1;\n};\n\nmodule.exports = Utils;\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./src/Utils.js\n ** module id = 9\n ** module chunks = 0\n **/","'use strict';\n\nvar extend = require('extend');\nvar Request = require('./Request');\nvar Promise = require('pinkyswear');\nvar utils = require('./Utils');\nvar JWTUtils = require('./JWTUtils');\n\n/**\n * Create a new upload wrapper.  Manages the entire upload of a file.\n * @class\n * @param   {object}  options                   Configuration options to override the defaults.\n * @param   {object}  options.api               A reference to the parent API instance.\n * @param   {object}  options.file              The file to upload.\n * @param   {object}  options.upload            REST endpoint for creating an input.\n * @param   {object}  options.sign              REST endpoint for signing a blob before upload.\n * @param   {object}  options.uploadComplete    REST endpoint to notify the API that the upload is complete.\n * @param   {object}  options.uploadAbort       REST endpoint to abort the upload.\n */\nfunction Upload (options) {\n\n  this.defaults = {\n    api: null,\n    file: null,\n    upload: '/encoding/inputs/<%=id%>/upload<%=method%>',\n    sign: '/encoding/inputs/<%=id%>/upload/sign<%=method%>',\n    uploadComplete: '/encoding/inputs/<%=id%>/upload/complete',\n    uploadAbort: '/encoding/inputs/<%=id%>/upload/abort<%=method%>',\n    uploadMethods: {\n      param: '?type=',\n      singlePart: 'amazon',\n      multiPart: 'amazonMP'\n    }\n  };\n\n  // Create a config object by extending the defaults with the pass options.\n  this.config = extend(true, {}, this.defaults, options);\n\n  this.api = this.config.api;\n  this.file = this.config.file;\n\n  this.chunks = [];\n  this.chunkSize = 0;\n  this.chunkCount = 0;\n  this.chunksComplete = 0;\n  this.uploadedBytes = 0;\n\n  this.aborted = false;\n  this.paused = false;\n  this.created = false;\n  this.initialized = false;\n\n  // Set to true when all the chunks are uploaded, but before the complete call is made.\n  this.uploadComplete = false;\n\n  this.fileRecord = {\n    filename: this.file.name,\n    type: this.file.type,\n    size: this.file.size,\n    method: this._checkMultipart(this.file)\n  };\n\n};\n\n/**\n * Register a function to execute when a chunk completes uploading.\n * @param  {Function} callback A callback to execute when progress is made.\n */\nUpload.prototype.progress = function (callback) {\n  this.config.progress = callback.bind(this);\n};\n\n/**\n * Create a new input record and upload the files to amazon.\n * @return  {Promise}         A promise which resolves when the new input record is created and uploaded.\n */\nUpload.prototype.save = function () {\n  return this._create(this.fileRecord)\n    .then(this._initialize.bind(this))\n    .then(this._prepareUpload.bind(this));\n};\n\n/**\n * Call the progress callback and pass the current progress percentage.\n * @private\n * @param  {number} message Current progress percentage.\n */\nUpload.prototype._updateProgress = function (percent, chunkSize) {\n\n  if (!this.config.progress) {\n    return;\n  }\n\n  this.config.progress.call(this, percent, chunkSize);\n};\n\n/**\n * Create a new input record.\n * @private\n * @param   {object}  record  A JSON object representing the input record to create.\n * @return  {Promise}         A promise which resolves when the new input record is created.\n */\nUpload.prototype._create = function (record) {\n\n  if (this.created) {\n    return utils.promisify(true, this.fileRecord.id);\n  }\n\n  if (this.aborted) {\n    return utils.promisify(false, 'upload aborted');\n  }\n\n  return this.api.inputs.add(record).then(this._createSuccess.bind(this));\n};\n\n/**\n * Return the data object from the response.\n * @private\n * @param  {JSON}   response  JSON response containing the new input record id.\n * @return {string}           new input record id.\n */\nUpload.prototype._createSuccess = function (response) {\n\n  this.created = true;\n\n  this._updateProgress(0, 0);\n\n  // Store the input record.\n  this.input = response.data;\n\n  this.fileRecord.id = response.data.id;\n\n  return this.fileRecord.id;\n};\n\n/**\n * Initializes an Input for upload\n * @private\n * @return {Promise} A promise which resolves when the request is complete.\n */\nUpload.prototype._initialize = function () {\n\n  var url;\n  var tokens;\n  var signing = '';\n  var request;\n\n  if (this.aborted) {\n    return utils.promisify(false, 'upload aborted');\n  }\n\n  if (!this.fileRecord.method) {\n    signing = this.config.uploadMethods.param + this.config.uploadMethods.singlePart;\n  }\n\n  tokens = {\n    id: this.fileRecord.id,\n    method: signing\n  };\n\n  url = utils.parseTokens(this.api.config.host + this.config.upload, tokens);\n\n  request = new Request({\n    url: url,\n    token: this.api.getToken(),\n    method: 'POST',\n    data: this.fileRecord\n  });\n\n  return request.send()\n          .then(this._initializeComplete.bind(this));\n\n};\n\n/**\n * Store the information returned from the initialize request.\n * @private\n */\nUpload.prototype._initializeComplete = function (response) {\n  this.initialized = true;\n  this.fileRecord.key = response.data.key;\n  this.fileRecord.uploadId = response.data.uploadId;\n  this.chunkSize = response.data.pieceSize;\n  this.chunkCount = response.data.pieceCount;\n};\n\n/**\n * Setup the upload depending on its type, single or multi part.\n * @return {Promise} A promise which resolves when all of the pieces have completed uploading.\n */\nUpload.prototype._prepareUpload = function () {\n  if (!this.fileRecord.method) {\n    // Singlepart.\n    return this._uploadFile()\n      .then(this._onCompleteUpload.bind(this));\n  } else {\n    // Multipart.\n    return this._createChunks()\n      .then(this._completeUpload.bind(this));\n  }\n};\n\n/**\n * Break a file into blobs and create a chunk object for each piece.\n * @private\n * @return {Promise} A promise which resolves when all of the pieces have completed uploading.\n */\nUpload.prototype._createChunks = function () {\n  var sliceMethod = this._getSliceMethod(this.file);\n  var i, blob, chunk, start, end,\n    chunkPromises = [];\n\n  if (this.aborted) {\n    this.abort();\n    return utils.promisify(false, 'upload aborted');\n  }\n\n  for (i = 0; i < this.chunkCount; i++) {\n\n    start = i * this.chunkSize;\n    // Choose the smaller value, so that we don't go over the filesize.\n    end = Math.min((i + 1) * this.chunkSize, this.fileRecord.size);\n\n    blob = this.file[sliceMethod](start, end);\n\n    chunk = {\n      partNumber: i + 1,\n      data: blob\n    };\n\n    this.chunks.push(chunk);\n\n    chunkPromises.push(this._uploadChunk.bind(this, chunk));\n\n  }\n\n  // Store a reference for pausing and resuming.\n  this.multiPartPromise = utils.series(chunkPromises, this.paused);\n\n  return this.multiPartPromise;\n};\n\n/**\n * Create a promise chain for each chunk to be uploaded.\n * @private\n * @return {Promise} A promise which resolves when the request is complete.\n */\nUpload.prototype._uploadChunk = function (chunk) {\n  var promise = Promise();\n\n  // Break the promise chain.\n  this._signUpload(chunk)\n    .then(this._sendUpload.bind(this, chunk))\n    .then(this._completeChunk.bind(this, chunk, promise));\n\n  return promise;\n};\n\n/**\n * Create a promise chain for a single part file upload.\n * @param  {file}   file    A file reference to upload.\n * @return {Promise} A promise which resolves when the request is complete.\n */\nUpload.prototype._uploadFile = function () {\n  var chunk = {\n    data: this.file\n  };\n\n  // Create a new promise if one doesn't exist.\n  if (!this.singlePartPromise) {\n    this.singlePartPromise = Promise();\n  }\n\n  // Broken off the chain, this will allow us to cancel single part uploads without breaking the\n  // initial chain.\n  this._signUpload(chunk)\n    .then(this._sendUpload.bind(this, chunk))\n    .then(this._sendSinglepartComplete.bind(this))\n    .then(this._updateProgress.bind(this, 100, this.fileRecord.size))\n    .then(this._uploadFileComplete.bind(this));\n\n  return this.singlePartPromise;\n};\n\n/**\n *  Resolve the single part upload promise;\n */\nUpload.prototype._uploadFileComplete = function () {\n  this.singlePartPromise(true, []);\n};\n\n/**\n * Make a request and sign the chunk to be uploaded.\n * @private\n * @param  {object}   chunk           Information about the chunk to be uploaded.\n * @return {Promise}                  A promise which resolves when the request is complete.\n */\nUpload.prototype._signUpload = function (chunk) {\n  var url;\n  var signing = '';\n  var headers = {};\n  var request;\n\n  // Set the part number for the current chunk.\n  if (chunk.partNumber) {\n    this.fileRecord.partNumber = chunk.partNumber;\n  }\n\n  headers['Content-Type'] = 'multipart/form-data';\n\n  if (!this.fileRecord.method) {\n    signing = this.config.uploadMethods.param + this.config.uploadMethods.singlePart;\n  }\n\n  url = utils.parseTokens(this.api.config.host + this.config.sign, {\n    id: this.fileRecord.id,\n    method: signing\n  });\n\n  request = new Request({\n    url: url,\n    token: this.api.getToken(),\n    method: 'POST',\n    headers: headers,\n    data: this.fileRecord\n  });\n\n  return request.send();\n};\n\n/**\n * Send the upload to the server.\n * @private\n * @param   {object} upload  An object representing the upload to send to the server.\n * @return  {Promise}       A promise which resolves when the request is complete.\n */\nUpload.prototype._sendUpload = function (upload, response) {\n  var headers = {};\n  var request;\n\n  // Set the proper headers to send with the file.\n  headers['Content-Type'] = 'multipart/form-data';\n  headers.authorization = response.data.authHeader;\n  headers['x-amz-date'] = response.data.dateHeader;\n  headers['x-amz-security-token'] = response.data.securityToken;\n\n  request = new Request({\n    url: response.data.url,\n    method: 'PUT',\n    headers: headers,\n    data: upload.data,\n    ignoreAcceptHeader: true\n  });\n\n  this.requestPromise = request;\n\n  return request.send();\n};\n\n/**\n * Update the upload bytes value when a single part file is uploaded.\n */\nUpload.prototype._sendSinglepartComplete = function () {\n  this.uploadComplete = true;\n  this.uploadedBytes = this.fileRecord.size;\n};\n\n/**\n *  Executed when a chunk is finished uploading.\n *  @private\n *  @param {object}   chunk   The current chunk that was uploaded.\n *  @param {Promise}  promise The promise to resolve when the chunk is complete.\n */\nUpload.prototype._completeChunk = function (chunk, promise) {\n  var progress;\n\n  this.chunksComplete++;\n  chunk.complete = true;\n\n  this.uploadedBytes += chunk.data.size;\n\n  // Upload is complete.\n  if (this.chunksComplete === this.chunkCount) {\n    this.uploadComplete = true;\n  }\n\n  progress = this.uploadedBytes / this.fileRecord.size;\n  // 0 - 99 for actual upload progress, 1% for the complete call.\n  progress = progress * 99;\n  progress = Math.round(progress);\n\n  this._updateProgress(progress, chunk.data.size);\n\n  // Resolve the promise.\n  promise(true, []);\n};\n\n/**\n * Notify the server that the upload is complete.\n *\n * @private\n * @return  {Promise} A promise which resolves when the request is complete.\n */\nUpload.prototype._completeUpload = function () {\n  var url;\n  var tokens;\n  var request;\n\n  // Early return so we don't process any of the complete information on an aborted upload.\n  if (this.aborted) {\n    return utils.promisify(false, 'Upload Aborted.');\n  }\n\n  tokens = {\n    id: this.fileRecord.id\n  };\n\n  url = utils.parseTokens(this.api.config.host + this.config.uploadComplete, tokens);\n\n  request = new Request({\n    url: url,\n    token: this.api.getToken(),\n    method: 'POST',\n    data: this.fileRecord\n  });\n\n  return request.send()\n          .then(this._onCompleteUpload.bind(this));\n};\n\n/**\n * Return the id for the current file record.\n * @private\n * @return {string} ID for the input record that was created.\n */\nUpload.prototype._onCompleteUpload = function () {\n  // Send the final progress update once the upload is actually complete.\n  this._updateProgress(100);\n\n  this.uploadComplete = true;\n  this.multiPartPromise = null;\n  this.requestPromise = null;\n  this.singlePartPromise = null;\n  return this.fileRecord.id;\n};\n\n/**\n * Aborts an input upload\n *\n * @param {boolean} async A flag to indicate whether or not the request to delete the input should be async.\n *\n * @return {Promise} A promise which resolves when the request is complete.\n */\nUpload.prototype.abort = function (async) {\n  var url;\n  var tokens;\n  var request;\n\n  if (typeof async === 'undefined') {\n    async = true;\n  }\n\n  this.aborted = true;\n\n  // If initialize hasn't been called yet there is no need to abort the upload as it doesn't\n  // exist yet.\n  if (!this.initialized) {\n\n    if (this.created) {\n      // If the input has been created simply return early with a\n      // promise to delete the created input record.\n      return this.api.inputs.delete(this.fileRecord.id, async);\n    } else {\n      // Resolve as a successful promise. This case would be fulfilled when an upload\n      // has been created but save() hasn't yet been called.\n      return utils.promisify(true);\n    }\n\n  }\n\n  // Cancel the current request.\n  if (this.requestPromise) {\n    this.requestPromise.cancel();\n    this.requestPromise = null;\n  }\n\n  if (this.singlePartPromise) {\n    this.singelPartPromise = null;\n    // return here because there is no need to abort a single part upload.\n    return this._abortComplete(async);\n  }\n\n  this.multiPartPromise.cancel();\n  this.multiPartPromise = null;\n\n  tokens = {\n    id: this.fileRecord.id,\n    method: ''\n  };\n\n  url = utils.parseTokens(this.api.config.host + this.config.uploadAbort, tokens);\n\n  request = new Request({\n    url: url,\n    async: async,\n    token: this.api.getToken(),\n    method: 'POST',\n    data: this.fileRecord\n  });\n\n  return request.send()\n          .then(this._abortComplete.bind(this, async));\n};\n\n/**\n * Delete the input that was created.\n * @private\n * @return {Promise} A promise which resolves when the request is complete.\n */\nUpload.prototype._abortComplete = function (async) {\n  return this.api.inputs.delete(this.fileRecord.id, async);\n};\n\n/**\n * Pause the current upload.\n */\nUpload.prototype.pause = function () {\n  // Return early if the upload portion is complete.\n  // The work is done by now so we might as well fire the\n  // complete call.\n  if (this.uploadComplete) {\n    return;\n  }\n\n  this.paused = true;\n\n  // Is there an upload\n  if (this.multiPartPromise) {\n\n    // Pause the series if its a multipart upload.\n    this.multiPartPromise.pause();\n\n    // Cancel the http request for this chunk.\n    this.requestPromise.cancel();\n\n  } else if (this.requestPromise) {\n    // Abort the upload if its a singlepart upload.\n    this.requestPromise.cancel();\n  }\n\n};\n\n/**\n * Resume the current upload.\n */\nUpload.prototype.resume = function () {\n  this.paused = false;\n\n  // resume the series if its multi part.\n  if (this.multiPartPromise) {\n    // resume the series if its multipart.\n    this.multiPartPromise.resume();\n  } else if (this.requestPromise) {\n    // Restart the file upload.\n    this._uploadFile();\n  }\n\n};\n\n/**\n * Check the file size to determine if it should be a multipart upload, returns false for singlepart uploads.\n * @private\n * @param  {file}   file  The file to evaluate.\n * @return {boolean}      True if the file will be uploading using mutlipart upload.\n */\nUpload.prototype._checkMultipart = function (file) {\n  if (!file) {\n    return;\n  }\n\n  return (file.size <= (5 * 1024 * 1024) ? false : true);\n};\n\n/**\n * Function that determines the slice method to be used\n * @private\n * @param {object} file - The file object you wish to determine the slice method for\n * @return {string} sliceMethod - The slice method to use.\n */\nUpload.prototype._getSliceMethod = function (file) {\n  var sliceMethod;\n\n  if ('mozSlice' in file) {\n    sliceMethod = 'mozSlice';\n  } else if ('webkitSlice' in file) {\n    sliceMethod = 'webkitSlice';\n  } else {\n    sliceMethod = 'slice';\n  }\n\n  return sliceMethod;\n};\n\nmodule.exports = Upload;\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./src/Uploader.js\n ** module id = 10\n ** module chunks = 0\n **/","'use strict';\n\n/**\n * A management layer for storing app cache in session storage.\n */\nvar Cache = function (cacheAge) {\n  this.cacheAge = cacheAge;\n  this.enabled = this._checkCacheSupport();\n};\n\n/**\n * Return true if sessionStorage is supported.\n * @private\n * @return {boolean} True if sessionStorage is supported.\n */\nCache.prototype._checkCacheSupport = function () {\n\n  var support = 'support';\n\n  try {\n    window.sessionStorage.setItem(support, support);\n    window.sessionStorage.removeItem(support);\n    return true;\n  } catch (e) {\n    return false;\n  }\n\n};\n\n/**\n * Retrieve the cached result for the provided cacheKey.\n * @param  {string}   cacheKey  Key associated with the cached result.\n * @return {object}             Parse results object.\n */\nCache.prototype.retrieve = function (cacheKey) {\n  var data;\n  var value = null;\n  var expiry;\n\n  try {\n\n    data = window.sessionStorage.getItem(cacheKey);\n    data = JSON.parse(data);\n\n    if (!data) {\n      return value;\n    }\n\n    value = data.value;\n\n    if (data.expiry < Date.now()) {\n      // Cache is expired;\n      window.sessionStorage.removeItem(cacheKey);\n      value = null;\n    }\n\n  } catch (error) {\n    // Silent capture so that caching never gets in the way of returning a result.\n    value = null;\n  }\n\n  return value;\n};\n\n/**\n * Remove a result from the cache.\n * @param  {string}   cacheKey  Key associated with the cached result.\n * @return {boolean}            A boolean indicating success of the removal.\n */\nCache.prototype.remove = function (cacheKey) {\n  var result = true;\n\n  try {\n    window.sessionStorage.removeItem(cacheKey);\n  } catch (error) {\n    // Silent capture so that caching never gets in the way of returning a result.\n    result = false;\n  }\n\n  return result;\n};\n\n/**\n * Save the new result with its expiry date.\n * @param  {string}   cacheKey Unique cache key for the request.\n * @param  {number}   expiry   Unix timestamp for the expiry.\n * @param  {object}   result   Object to be cached.\n * @return {boolean}            A boolean indicating success of the save.\n */\nCache.prototype.save = function (cacheKey, value) {\n  var result = true;\n  var data = {};\n  var JSONResult;\n\n  try {\n\n    data.expiry = Date.now() + this.cacheAge;\n    data.value = value;\n\n    JSONResult = JSON.stringify(data);\n\n    window.sessionStorage.setItem(cacheKey, JSONResult);\n\n  } catch (error) {\n    // Silent capture so that caching never gets in the way of returning a result.\n    result = false;\n  }\n\n  return result;\n};\n\n/**\n * Return an object representing the differences between the provided object and the cached object.\n * @example\n * //'cachedObject' = {id: '12345'};\n * cache.diff('cachedObject', {title: 'test'});\n * // returns {title: 'test'}\n * @example\n * //'cachedObject' = {id: '12345', title: 'test'};\n * cache.diff('cachedObject', {title: 'test2'});\n * // returns {title: 'test2'}\n *\n * @param  {string} cacheKey  Cachekey of the object to compare against.\n * @param  {object} item      Object to compare against the cached object.\n * @param  {array}  forced    An array of properties to be returned in the resulting object regardless of difference.\n * @return {object}           An object containing the differences.\n */\nCache.prototype.diff = function (cacheKey, item, forced) {\n  var property, properties, propertiesLength, i;\n  var force, forcedLength, n;\n  var original = this.retrieve(cacheKey);\n  var diff = null;\n\n  if (forced) {\n    forcedLength = forced.length;\n  }\n\n  properties = Object.keys(item);\n  propertiesLength = properties.length;\n\n  if (!original) {\n    // return the compare object if the original item wasn't found.\n    return item;\n  }\n\n  // Walk the object and compare the properties.\n  for (i = 0; i < propertiesLength; i++) {\n    property = properties[i];\n\n    // Check the values if both objects have the property.\n    if (original.hasOwnProperty(property)) {\n      if (item[property] === original[property]) {\n        // If the values are the same we don't need to add it to the diff so continue.\n        continue;\n      }\n    }\n\n    // If the diff item is still null we need to create a new object to store the properties in.\n    if (!diff) {\n      diff = {};\n    }\n\n    // If we've made it this far the property is either a new one, or the item doesn't match.\n    diff[property] = item[property];\n\n  }\n\n  // As long as changes were found append the forced properties.\n  if (diff) {\n    for (n = 0; n < forcedLength; n++) {\n      property = forced[n];\n      diff[property] = item[property];\n    }\n  }\n\n  return diff;\n\n};\n\n/**\n * Return an object representing the differences between the provided objects and the cached object.\n * Similar to diff, but accepts an array of objects.\n *\n * @param  {string} cacheKey  Property on the provided objects that represents the cache key.\n * @param  {object} item      Object to compare against the cached object.\n * @param  {array}  forced    An array of properties to be returned in the resulting object regardless of difference.\n * @return {object}           An object containing the differences.\n */\nCache.prototype.diffArray = function (cacheKey, items, forced) {\n\n  var i;\n  var itemsLength = items.length;\n  var item;\n  var result = null;\n  var results = [];\n\n  for (i = 0; i < itemsLength; i++) {\n    item = items[i];\n\n    result = this.diff(item[cacheKey], item, forced);\n\n    // Only add it to the result set if changes were found.\n    if (result !== null) {\n      results.push(result);\n    }\n\n  }\n\n  return results;\n\n};\n\nmodule.exports = Cache;\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./src/Cache.js\n ** module id = 11\n ** module chunks = 0\n **/","'use strict';\n\nvar extend = require('extend');\nvar Request = require('../Request');\nvar utils = require('../Utils');\n\n/**\n * Resource Object\n * @class\n */\nfunction Resource (options) {\n\n  this.defaults = {\n    host: 'https://api.ingest.io',\n    all: '/<%=resource%>',\n    byId: '/<%=resource%>/<%=id%>',\n    trash: '/<%=resource%>?filter=trashed',\n    deleteMethods: {\n      'permanent': '?permanent=1'\n    },\n    search: '/<%=resource%>?search=<%=input%>',\n    tokenSource: null,\n    resource: null\n  };\n\n  this.config = extend(true, {}, this.defaults, options);\n\n  this.cache = this.config.cache;\n\n}\n\n/**\n * Proxy the request to token source to ensure a value is always returned.\n * @private\n * @return {string} Auth token.\n */\nResource.prototype._tokenSource = function () {\n  var result = null;\n\n  if (this.config.tokenSource) {\n    result = this.config.tokenSource.call();\n  }\n\n  return result;\n};\n\n/**\n * Return a list of the requested resource for the current user and network.\n * @param  {object}   headers   Object representing headers to apply to the request.\n * @return {promise}            A promise which resolves when the request is complete.\n */\nResource.prototype.getAll = function (headers) {\n  var request;\n  var url = utils.parseTokens(this.config.host + this.config.all, {\n    resource: this.config.resource\n  });\n\n  request = new Request({\n    url: url,\n    token: this._tokenSource(),\n    headers: headers\n  });\n\n  return request.send()\n          .then(this._updateCachedResources.bind(this));\n};\n\n/**\n * Return a resource that matches the supplied id.\n * @param  {string}   id    Resource id.\n * @return {promise}        A promise which resolves when the request is complete.\n */\nResource.prototype.getById = function (id) {\n  var url, cachedResult, request;\n\n  if (typeof id !== 'string' || id.length <= 0) {\n    return utils.promisify(false,\n      'IngestAPI Resource getById requires a valid id passed as a string.');\n  }\n\n  url = utils.parseTokens(this.config.host + this.config.byId, {\n    resource: this.config.resource,\n    id: id\n  });\n\n  if (this.cache && this.cache.enabled) {\n    // retrieve the cached item.\n    cachedResult = this.cache.retrieve(id);\n  }\n\n  // Return a cached result if we've found one.\n  if (cachedResult) {\n    return utils.promisify(true, {\n      data: cachedResult\n    });\n  } else {\n\n    request = new Request({\n      url: url,\n      token: this._tokenSource()\n    });\n\n    return request.send()\n      .then(this._updateCachedResource.bind(this));\n\n  }\n};\n\n/**\n * Return the resources currently in the trash.\n * @param  {object} headers Headers to be passed along with the request for pagination.\n * @return {promise}         A promise which resolves when the request is complete.\n */\nResource.prototype.getTrashed = function (headers) {\n  var request;\n  var url = utils.parseTokens(this.config.host + this.config.trash, {\n    resource: this.config.resource\n  });\n\n  request = new Request({\n    url: url,\n    token: this._tokenSource(),\n    headers: headers\n  });\n\n  return request.send();\n};\n\n/**\n * Add a new resource.\n * @param   {object}  resource  An object representing the resource to add.\n * @return  {promise}           A promise which resolves when the request is complete.\n */\nResource.prototype.add = function (resource) {\n  var url, request;\n\n  if (typeof resource !== 'object') {\n    return utils.promisify(false,\n      'IngestAPI Resource add requires a resource passed as an object.');\n  }\n\n  url = utils.parseTokens(this.config.host + this.config.all, {\n    resource: this.config.resource\n  });\n\n  request = new Request({\n    url: url,\n    token: this._tokenSource(),\n    method: 'POST',\n    data: resource\n  });\n\n  return request.send()\n          .then(this._updateCachedResource.bind(this));\n};\n\n/**\n * Update an existing resource with new content.\n * @param  {object|array} resource  An object or an array of objects representing the resource(s) to be updated.\n * @return {promise}                A promise which resolves when the request is complete.\n */\nResource.prototype.update = function (resource) {\n  var request, data, url;\n\n  if (typeof resource !== 'object') {\n    return utils.promisify(false,\n      'IngestAPI Resource update requires a resource to be passed as an object.');\n  }\n\n  data = resource;\n\n  url = utils.parseTokens(this.config.host + this.config.byId, {\n    resource: this.config.resource,\n    id: resource.id\n  });\n\n  if (this.cache && this.cache.enabled) {\n    data = this.cache.diff(resource.id, resource);\n  }\n\n  // Null is returned in the case that the two objects match.\n  if (!data) {\n    // Return a fulfilled promise with the cached object.\n    return utils.promisify(true, {\n      data: this.cache.retrieve(resource.id)\n    });\n  }\n\n  request = new Request({\n    url: url,\n    token: this._tokenSource(),\n    method: 'PATCH',\n    data: data\n  });\n\n  return request.send()\n          .then(this._updateCachedResource.bind(this));\n};\n\n/**\n * Delete an existing resource\n * @param  {string}   resource  The id for the resource to be deleted.\n * @param  {boolean}  async     A flag to indicate if this should be an async request to delete.\n *\n * @return {Promise}            A promise which resolves when the request is complete.\n */\nResource.prototype.delete = function (resource, async) {\n  if (typeof async !== 'boolean') {\n    async = true;\n  }\n\n  if (typeof resource !== 'string') {\n    return utils.promisify(false,\n      'IngestAPI Resource delete requires a resource to be passed as a string.');\n  }\n\n  return this._deleteResource(resource, false, async);\n};\n\n/**\n * Permanently delete an existing resource.\n * @param  {string}   resource  The id for the resource to be deleted.\n * @param  {boolean}  async     A flag to indicate if this should be an async request to delete.\n *\n * @return {Promise}            A promise which resolves when the request is complete.\n */\nResource.prototype.permanentDelete = function (resource, async) {\n  if (typeof async !== 'boolean') {\n    async = true;\n  }\n\n  if (typeof resource !== 'string') {\n    return utils.promisify(false,\n      'IngestAPI Resource delete requires a resource to be passed as a string.');\n  }\n\n  return this._deleteResource(resource, true, async);\n};\n\n/**\n * Delete a single resource\n * @private\n * @param  {object}   resource  The id of the resource to be deleted.\n * @param {boolean}   permanent  A flag to permanently delete each video.\n * @param {boolean}   async       A flag to indicate if this should be an async request to delete.\n * @return {promise}            A promise which resolves when the request is complete.\n */\nResource.prototype._deleteResource = function (resource, permanent, async) {\n  var request;\n  var url = utils.parseTokens(this.config.host + this.config.byId, {\n    resource: this.config.resource,\n    id: resource\n  });\n\n  if (permanent === true) {\n    url += this.config.deleteMethods.permanent;\n  }\n\n  request = new Request({\n    url: url,\n    async: async,\n    token: this._tokenSource(),\n    method: 'DELETE',\n  });\n\n  return request.send()\n          .then(this._deleteCachedResource.bind(this, resource));\n};\n\n/**\n * Return a subset of items that match the search terms.\n * @param  {string}   input     The search terms to match against.\n * @param  {object}   headers   The headers to be passed to the request.\n * @param  {boolean}  trash     Should we be searching the trash.\n * @return {Promise}          A promise which resolves when the request is complete.\n */\nResource.prototype.search = function (input, headers, trash) {\n  var url, request;\n\n  if (typeof input !== 'string') {\n    return utils.promisify(false,\n      'IngestAPI Resource search requires search input to be passed as a string.');\n  }\n\n  url = utils.parseTokens(this.config.host + this.config.search, {\n    resource: this.config.resource,\n    input: encodeURIComponent(input)\n  });\n\n  if (trash) {\n    url = url + '&filter=trashed';\n  }\n\n  request = new Request({\n    url: url,\n    token: this._tokenSource(),\n    headers: headers\n  });\n\n  return request.send();\n};\n\n/**\n * Return a subset of items that match the search terms in the trash.\n * @param  {string} input    The search terms to match against.\n * @param  {object} headers  The headers to be passed to the request.\n * @return {Promise}          A promise which resolves when the request is complete.\n */\nResource.prototype.searchTrash = function (input, headers) {\n  return this.search(input, headers, true);\n};\n\n/**\n * Get the total count of resources.\n * @return {promise} A promise which resolves when the request is complete.\n */\nResource.prototype.count = function () {\n  var request;\n  var url = utils.parseTokens(this.config.host + this.config.all, {\n    resource: this.config.resource\n  });\n\n  request = new Request({\n    url: url,\n    token: this._tokenSource(),\n    method: 'HEAD'\n  });\n\n  return request.send()\n          .then(this._handleCountResponse);\n};\n\n/**\n * Get the total count of resources in the trash.\n * @return {promise} A promise which resolves when the request is complete.\n */\nResource.prototype.trashCount = function () {\n  var request;\n  var url = utils.parseTokens(this.config.host + this.config.trash, {\n    resource: this.config.resource\n  });\n\n  request = new Request({\n    url: url,\n    token: this._tokenSource(),\n    method: 'HEAD'\n  });\n\n  return request.send()\n          .then(this._handleCountResponse);\n};\n\n/**\n * Return the resource count from the response.\n * @private\n * @param  {object} response Request response object.\n * @return {number}          The resource count.\n */\nResource.prototype._handleCountResponse = function (response) {\n  return parseInt(response.headers('Resource-Count'), 10);\n};\n\n/**\n * Update a single cached resource based on the response data.\n * @param  {object}   response   Response object from the getAll request.\n * @return {response}            Response object from the getAll request.\n */\nResource.prototype._updateCachedResource = function (response) {\n  if (this.cache && this.cache.enabled) {\n    this.cache.save(response.data.id, response.data);\n  }\n\n  return response;\n};\n\n/**\n * Store the returned items in cache.\n * @param  {object}   response   Response object from the getAll request.\n * @return {response}            Response object from the getAll request.\n */\nResource.prototype._updateCachedResources = function (response) {\n  var data = response.data;\n  var dataLength = data.length;\n  var i;\n\n  if (this.cache && this.cache.enabled) {\n    for (i = 0; i < dataLength; i++) {\n      this.cache.save(data[i].id, data[i]);\n    }\n\n  }\n\n  return response;\n};\n\n/**\n * Delete a single cached resource.\n * @param  {string} id            ID of the resource to remove.\n * @param  {object}   response    Response object from the getAll request.\n * @return {response}             Response object from the getAll request.\n */\nResource.prototype._deleteCachedResource = function (id, response) {\n  if (this.cache && this.cache.enabled) {\n    this.cache.remove(id);\n  }\n\n  return response;\n};\n\nmodule.exports = Resource;\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./src/resources/Resource.js\n ** module id = 12\n ** module chunks = 0\n **/","'use strict';\n\nvar Resource = require('./Resource');\nvar Request = require('../Request');\nvar utils = require('../Utils');\nvar extend = require('extend');\n\nfunction PlaybackContent (options) {\n\n  var overrides = {\n    thumbnail: '/<%=resource%>/<%=id%>/thumbnail',\n    thumbnails: '/<%=resource%>/<%=id%>/thumbnails'\n  };\n\n  options = extend(true, {}, overrides, options);\n\n  Resource.call(this, options);\n\n};\n\n// This extends the base class of 'Resource'.\nPlaybackContent.prototype = Object.create(Resource.prototype);\nPlaybackContent.prototype.constructor = PlaybackContent;\n\n/**\n * Retrieve all thumbnails for a provided resource id.\n * @param {string}    id    ID of the resource to retrieve thumbnails for.\n * @return {promise}        A promise which resolves when the request is complete.\n */\nPlaybackContent.prototype.getThumbnails = function (id) {\n  var url, request;\n\n  if (typeof id !== 'string') {\n    return utils.promisify(false,\n      'IngestAPI PlaybackContent getThumbnails requires an id to be passed as a string.');\n  }\n\n  url = utils.parseTokens(this.config.host + this.config.thumbnails, {\n    resource: this.config.resource,\n    id: id\n  });\n\n  request = new Request({\n    url: url,\n    token: this._tokenSource()\n  });\n\n  return request.send();\n};\n\n/**\n * Add external images to the resource id.\n * @param   {string}          id      ID of the resource to add the external thumbnails to.\n * @param   {string|array}    images  A path to the image, or an array of image paths.\n * @return  {promise}                 A promise which resolves when the request is complete.\n */\nPlaybackContent.prototype.addExternalThumbnails = function (id, images) {\n\n  var url, request;\n\n  var imagesToAdd = [];\n\n  if (typeof id !== 'string') {\n    return utils.promisify(false,\n      'IngestAPI PlaybackContent addExternal requires an id to be passed as a string.');\n  }\n\n  // Early return if the types do not match what we are expecting.\n  if (!Array.isArray(images) && typeof images !== 'string') {\n    return utils.promisify(false,\n      'IngestAPI PlaybackContent addExternal requires images as a string or an array of strings.');\n  }\n\n  // If we already have an array replace the outgoing array, otherwise push the image path to the array.\n  // This ensures we are always passing an array.\n  if (Array.isArray(images)) {\n    imagesToAdd = images;\n  } else {\n    imagesToAdd.push(images);\n  }\n\n  url = utils.parseTokens(this.config.host + this.config.thumbnails, {\n    resource: this.config.resource,\n    id: id\n  });\n\n  request = new Request({\n    method: 'POST',\n    url: url,\n    token: this._tokenSource(),\n    data: imagesToAdd\n  });\n\n  return request.send();\n\n};\n\n/**\n * Add external images to the resource id.\n * @param   {string}        id        ID of the resource to add the external thumbnails to.\n * @param   {file}          image     A JavaScript File interface representing the image to upload.\n * @return  {promise}                 A promise which resolves when the request is complete.\n */\nPlaybackContent.prototype.uploadThumbnail = function (id, image) {\n\n  var request, url, formData;\n\n  if (typeof id !== 'string') {\n    return utils.promisify(false,\n      'IngestAPI PlaybackContent uploadThumbnail requires an id to be passed as a string.');\n  }\n\n  // Early return if the types do not match what we are expecting.\n  if (!image || !(image instanceof File) || !utils.isImage(image)) {\n    return utils.promisify(false,\n      'IngestAPI PlaybackContent uploadThumbnail requires a valid image.');\n  }\n\n  url = utils.parseTokens(this.config.host + this.config.thumbnail, {\n    resource: this.config.resource,\n    id: id\n  });\n\n  // Create a new FormData object so the request is properly sent as multipart.\n  formData = new FormData();\n  formData.append('image', image);\n\n  request = new Request({\n    method: 'POST',\n    url: url,\n    token: this._tokenSource(),\n    data: formData\n  });\n\n  return request.send();\n\n};\n\nmodule.exports = PlaybackContent;\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./src/resources/PlaybackContent.js\n ** module id = 13\n ** module chunks = 0\n **/","'use strict';\n\nvar Resource = require('./Resource');\nvar Request = require('../Request');\nvar utils = require('../Utils');\nvar extend = require('extend');\n\nfunction Users (options) {\n\n  var overrides = {\n    currentUser: '/users/me',\n    transfer: '/users/<%=oldId%>/transfer/<%=newId%>',\n    revoke: '/revoke'\n  };\n\n  options = extend(true, {}, overrides, options);\n\n  Resource.call(this, options);\n\n};\n\n// This extends the base class of 'Resource'.\nUsers.prototype = Object.create(Resource.prototype);\nUsers.prototype.constructor = Users;\n\n/**\n * Retrieve information for the current user.\n *\n * @return {Promise} A promise which resolves when the request is complete.\n */\nUsers.prototype.getCurrentUserInfo = function () {\n  var request = new Request({\n    url: this.config.host + this.config.currentUser,\n    token: this._tokenSource()\n  });\n\n  return request.send();\n};\n\n/**\n * Transfer all authorship currently under the specified user onto another.\n * This includes all videos & playlists.\n * This task is commonly used in conjunction with permanently deleting a user.\n *\n * @param {string} oldId - The user who currently has authorship.\n * @param {string} newId - The user to transfer authorship to.\n *\n * @return {Promise} A promise which resolves when the request is complete.\n */\nUsers.prototype.transferUserAuthorship = function (oldId, newId) {\n  var tokens, url, request;\n\n  if (typeof oldId !== 'string') {\n    return utils.promisify(false,\n      'IngestAPI transferUserAuthorship requires \"oldId\" to be passed as a string.');\n  }\n\n  if (typeof newId !== 'string') {\n    return utils.promisify(false,\n      'IngestAPI transferUserAuthorship requires \"newId\" to be passed as a string');\n  }\n\n  tokens = {\n    oldId: oldId,\n    newId: newId\n  };\n\n  url = utils.parseTokens(this.config.host + this.config.transfer, tokens);\n\n  request = new Request({\n    url: url,\n    token: this._tokenSource(),\n    method: 'PATCH'\n  });\n\n  return request.send();\n};\n\n/**\n * Revokes the authorization token for the current user.\n *\n * @return {Promise} A promise which resolves when the request is complete.\n */\nUsers.prototype.revokeCurrentUser = function () {\n  var request = new Request({\n    url: this.config.host + this.config.currentUser + this.config.revoke,\n    token: this._tokenSource(),\n    method: 'DELETE'\n  });\n\n  return request.send();\n};\n\nmodule.exports = Users;\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./src/resources/Users.js\n ** module id = 14\n ** module chunks = 0\n **/","'use strict';\n\nvar Resource = require('./Resource');\nvar Request = require('../Request');\nvar utils = require('../Utils');\nvar extend = require('extend');\n\nfunction Networks (options) {\n\n  var overrides = {\n    keys: '/<%=resource%>/<%=networkId%>/keys',\n    keysById: '/<%=resource%>/<%=networkId%>/keys/<%=keyId%>',\n    invite: '/<%=resource%>/<%=networkId%>/invite'\n  };\n\n  options = extend(true, {}, overrides, options);\n\n  Resource.call(this, options);\n\n};\n\n// This extends the base class of 'Resource'.\nNetworks.prototype = Object.create(Resource.prototype);\nNetworks.prototype.constructor = Networks;\n\n/**\n * Link an existing user to the specified network.\n *\n * @param {string}  networkId  The unique ID of the network.\n * @param {string}  userId     The unique ID of the user to link.\n *\n * @return {Promise}  A promise which resolves when the request is complete.\n */\nNetworks.prototype.linkUser = function (networkId, userId) {\n  var data, request, url;\n\n  if (typeof networkId !== 'string') {\n    return utils.promisify(false,\n      'IngestAPI linkUser requires \"networkId\" to be passed as a string.');\n  }\n\n  if (typeof userId !== 'string') {\n    return utils.promisify(false,\n      'IngestAPI linkUser requires \"userId\" to be passed as a string.');\n  }\n\n  data = {\n    id: userId\n  };\n\n  url = utils.parseTokens(this.config.host + this.config.byId, {\n    resource: this.config.resource,\n    id: networkId\n  });\n\n  request = new Request({\n    url: url,\n    data: data,\n    token: this._tokenSource(),\n    method: 'LINK'\n  });\n\n  return request.send();\n};\n\n/**\n * Removes the specified user from the specified network.\n *\n * @param {string}  networkId  The unique ID of the network.\n * @param {string}  userId     The unique ID of the user to unlink.\n *\n * @return {Promise}  A promise which resolves when the request is complete.\n */\nNetworks.prototype.unlinkUser = function (networkId, userId) {\n  var data, request, url;\n\n  if (typeof networkId !== 'string') {\n    return utils.promisify(false,\n      'IngestAPI unlinkUser requires \"networkId\" to be passed as a string.');\n  }\n\n  if (typeof userId !== 'string') {\n    return utils.promisify(false,\n      'IngestAPI unlinkUser requires \"userId\" to be passed as a string.');\n  }\n\n  data = {\n    id: userId\n  };\n\n  url = utils.parseTokens(this.config.host + this.config.byId, {\n    resource: this.config.resource,\n    id: networkId\n  });\n\n  request = new Request({\n    url: url,\n    data: data,\n    token: this._tokenSource(),\n    method: 'UNLINK'\n  });\n\n  return request.send();\n};\n\n/**\n * Invites a user to the specified network.\n *\n * @param {string}  networkId  The unique ID of the network.\n * @param {string}  email      The email to send the invite to.\n * @param {string}  name       The name of the person to invite.\n *\n * @return {Promise} A promise which resolves when the request is complete.\n */\nNetworks.prototype.inviteUser = function (networkId, email, name) {\n  var data, request, url;\n\n  if (typeof networkId !== 'string') {\n    return utils.promisify(false,\n      'IngestAPI inviteUser requires \"networkId\" to be passed as a string.');\n  }\n\n  if (typeof email !== 'string') {\n    return utils.promisify(false,\n      'IngestAPI inviteUser requires \"email\" to be passed as a string.');\n  }\n\n  if (typeof name !== 'string') {\n    return utils.promisify(false,\n      'IngestAPI inviteUser requires \"name\" to be passed as a string.');\n  }\n\n  data = {\n    email: email,\n    name: name\n  };\n\n  url = utils.parseTokens(this.config.host + this.config.invite, {\n    resource: this.config.resource,\n    networkId: networkId\n  });\n\n  request = new Request({\n    url: url,\n    data: data,\n    token: this._tokenSource(),\n    method: 'POST'\n  });\n\n  return request.send();\n};\n\n/**\n * Gets a list of all secure keys for the network given.\n *\n * @param {string}  networkId  The unique ID of the network.\n *\n * @return {Promise}  A promise which resolves when the request is complete.\n */\nNetworks.prototype.getSecureKeys = function (networkId) {\n  var request, url;\n\n  if (typeof networkId !== 'string') {\n    return utils.promisify(false,\n      'IngestAPI getSecureKeys requires \"networkId\" to be passed as a string.');\n  }\n\n  url = utils.parseTokens(this.config.host + this.config.keys, {\n    resource: this.config.resource,\n    networkId: networkId\n  });\n\n  request = new Request({\n    url: url,\n    token: this._tokenSource()\n  });\n\n  return request.send();\n};\n\n/**\n * Adds a new secure key to the specified network.\n *\n * @param {string}  networkId   The unique ID of the network.\n * @param {object}  data        The object containing data for the secure key entry.\n * @param {string}  data.title  Optional. The title of the secure key. Will default to \"Default Key Title\"\n * @param {string}  data.key    The public key in RSA format.\n *\n * @return {Promise}  A promise which resolves when the request is complete.\n */\nNetworks.prototype.addSecureKey = function (networkId, data) {\n  var request, url;\n\n  if (typeof networkId !== 'string') {\n    return utils.promisify(false,\n      'IngestAPI addSecureKey requires \"networkId\" to be passed as a string.');\n  }\n\n  if (typeof data !== 'object') {\n    return utils.promisify(false,\n      'IngestAPI addSecureKey requires \"data\" to be passed as an object.');\n  }\n\n  if (typeof data.key !== 'string') {\n    return utils.promisify(false,\n      'IngestAPI addSecureKey requires that the key be a string in RSA public key format.');\n  }\n\n  // The title must be a string.\n  if (typeof data.title !== 'string') {\n    data.title = '';\n  }\n\n  url = utils.parseTokens(this.config.host + this.config.keys, {\n    resource: this.config.resource,\n    networkId: networkId\n  });\n\n  request = new Request({\n    url: url,\n    token: this._tokenSource(),\n    method: 'POST',\n    data: data\n  });\n\n  return request.send();\n};\n\n/**\n * Retrieves a single network secure key entry based on the unique ID given.\n *\n * @param {string}  networkId  The unique ID of the network.\n * @param {string}  keyId      The unique ID of the secure key entry.\n *\n * @return {Promise}  A promise which resolves when the request is complete.\n */\nNetworks.prototype.getSecureKeyById = function (networkId, keyId) {\n  var url, request;\n\n  if (typeof networkId !== 'string') {\n    return utils.promisify(false,\n      'IngestAPI getSecureKeyById requires a \"networkId\" to be passed as a string.');\n  }\n\n  if (typeof keyId !== 'string') {\n    return utils.promisify(false,\n      'IngestAPI getSecureKeyById requires a \"keyId\" to be passed as a string.');\n  }\n\n  url = utils.parseTokens(this.config.host + this.config.keysById, {\n    resource: this.config.resource,\n    networkId: networkId,\n    keyId: keyId\n  });\n\n  request = new Request({\n    url: url,\n    token: this._tokenSource()\n  });\n\n  return request.send();\n};\n\n/**\n * Updates an individual secure key entry in the network specified.\n *\n * @param {string}  networkId   The unique ID of the network.\n * @param {object}  data        The object containing data for the secure key entry.\n * @param {string}  data.title  The title for the current network.\n *\n * @return {Promise} A promise which resolves when the request is complete.\n */\nNetworks.prototype.updateSecureKey = function (networkId, data) {\n  var url, request;\n\n  if (typeof networkId !== 'string') {\n    return utils.promisify(false,\n      'IngestAPI updateSecureKeyById requires \"networkId\" to be passed as a string.');\n  }\n\n  if (typeof data !== 'object') {\n    return utils.promisify(false,\n      'IngestAPI updateSecureKeyById requires \"data\" to be passed as an object.');\n  }\n\n  if (typeof data.id !== 'string') {\n    return utils.promisify(false,\n      'IngestAPI updateSecureKeyById requires param \"data.id\" to be a string.');\n  }\n\n  if (typeof data.title !== 'string') {\n    data.title = '';\n  }\n\n  url = utils.parseTokens(this.config.host + this.config.keysById, {\n    resource: this.config.resource,\n    networkId: networkId,\n    keyId: data.id\n  });\n\n  request = new Request({\n    url: url,\n    token: this._tokenSource(),\n    method: 'PATCH',\n    data: data\n  });\n\n  return request.send();\n};\n\n/**\n * Deletes a single network secure key entry based on the unique ID given.\n *\n * @param {string}  networkId  The unique ID of the network.\n * @param {string}  keyId      The unique ID of the secure key entry.\n *\n * @return {Promise}  A promise which resolves when the request is complete.\n */\nNetworks.prototype.deleteSecureKey = function (networkId, keyId) {\n  var url, request;\n\n  if (typeof networkId !== 'string') {\n    return utils.promisify(false,\n      'IngestAPI deleteSecureKeyById requires a \"networkId\" to be passed as a string.');\n  }\n\n  if (typeof keyId !== 'string') {\n    return utils.promisify(false,\n      'IngestAPI deleteSecureKeyById requires a \"keyId\" to be passed as a string.');\n  }\n\n  url = utils.parseTokens(this.config.host + this.config.keysById, {\n    resource: this.config.resource,\n    networkId: networkId,\n    keyId: keyId\n  });\n\n  request = new Request({\n    url: url,\n    token: this._tokenSource(),\n    method: 'DELETE'\n  });\n\n  return request.send();\n\n};\n\nmodule.exports = Networks;\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./src/resources/Networks.js\n ** module id = 15\n ** module chunks = 0\n **/","'use strict';\n\nvar PlaybackContent = require('./PlaybackContent');\nvar Request = require('../Request');\nvar utils = require('../Utils');\nvar extend = require('extend');\n\nfunction Videos (options) {\n\n  var overrides = {\n    playlists: '/<%=resource%>/<%=id%>/playlists',\n    variants: '/<%=resource%>/<%=id%>/variants',\n    withVariants: '/<%=resource%>?filter=variants',\n    missingVariants: '/<%=resource%>?filter=missing_variants'\n  };\n\n  options = extend(true, {}, overrides, options);\n\n  PlaybackContent.call(this, options);\n\n};\n\n// This extends the base class of 'Resource'.\nVideos.prototype = Object.create(PlaybackContent.prototype);\nVideos.prototype.constructor = Videos;\n\n/**\n * Return any playlists that contains the provided video.\n * @param   {string}   id   Video id.\n * @return  {promise}       A promise which resolves when the request is complete.\n */\nVideos.prototype.getPlaylists = function (id) {\n  var url, request;\n\n  if (typeof id !== 'string') {\n    return utils.promisify(false,\n      'IngestAPI Resource getPlaylists requires a valid video id passed as a string.');\n  }\n\n  url = utils.parseTokens(this.config.host + this.config.playlists, {\n    resource: this.config.resource,\n    id: id\n  });\n\n  request = new Request({\n    url: url,\n    token: this._tokenSource()\n  });\n\n  return request.send();\n\n};\n\n/**\n * Get all of the variants for the supplied video id.\n * @param   {string}    id     Video id.\n * @return  {promise}          A promise which resolves when the request is complete.\n */\nVideos.prototype.getVariants = function (id) {\n  var url, request;\n\n  if (typeof id !== 'string') {\n    return utils.promisify(false,\n      'IngestAPI Resource getPlaylists requires a valid video id passed as a string.');\n  }\n\n  url = utils.parseTokens(this.config.host + this.config.variants, {\n    resource: this.config.resource,\n    id: id\n  });\n\n  request = new Request({\n    url: url,\n    token: this._tokenSource()\n  });\n\n  return request.send();\n};\n\n/**\n * Return a list of the videos for the current user and network that contain variants.\n * @param  {object}   headers   Object representing headers to apply to the request.\n * @return {promise}            A promise which resolves when the request is complete.\n */\nVideos.prototype.getVideosWithVariants = function (headers) {\n  var request;\n  var url = utils.parseTokens(this.config.host + this.config.withVariants, {\n    resource: this.config.resource\n  });\n\n  request = new Request({\n    url: url,\n    token: this._tokenSource(),\n    headers: headers\n  });\n\n  return request.send()\n          .then(this._updateCachedResources.bind(this));\n};\n\n/**\n * Return a list of the videos for the current user and network that are missing variants.\n * @param  {object}   headers   Object representing headers to apply to the request.\n * @return {promise}            A promise which resolves when the request is complete.\n */\nVideos.prototype.getVideosMissingVariants = function (headers) {\n  var request;\n  var url = utils.parseTokens(this.config.host + this.config.missingVariants, {\n    resource: this.config.resource\n  });\n\n  request = new Request({\n    url: url,\n    token: this._tokenSource(),\n    headers: headers\n  });\n\n  return request.send()\n          .then(this._updateCachedResources.bind(this));\n};\n\nmodule.exports = Videos;\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./src/resources/Videos.js\n ** module id = 16\n ** module chunks = 0\n **/","var Resource = require('./Resource');\nvar Request = require('../Request');\nvar utils = require('../Utils');\nvar extend = require('extend');\n\nfunction Playlists (options) {\n\n  var overrides = {};\n\n  options = extend(true, {}, overrides, options);\n\n  Resource.call(this, options);\n\n};\n\n// This extends the base class of 'Resource'.\nPlaylists.prototype = Object.create(Resource.prototype);\nPlaylists.prototype.constructor = Playlists;\n\n/**\n * Link the supplied video to the supplied playlist.\n * @param   {string}           playlistId       ID of the playlist to link the supplied video to.\n * @param   {object|array}     videos           A single video object, or an array of video objects.\n * @return  {promise}                           A promise which resolves when the request is complete.\n */\nPlaylists.prototype.link = function (playlistId, video) {\n  return this._linkVideos(true, playlistId, video);\n};\n\n/**\n * Unlink the supplied video to the supplied playlist.\n * @param   {string}            playlistId      ID of the playlist to unlink the supplied video from.\n * @param   {object|array}      videos          A single video object, or an array of video objects.\n * @return  {promise}                           A promise which resolves when the request is complete.\n */\nPlaylists.prototype.unlink = function (playlistId, video) {\n  return this._linkVideos(false, playlistId, video);\n};\n\n/**\n * Link or Unlink videos to a playlist.\n * @private\n * @param  {boolean}          link              A boolean indicating wether to link or unlink the item.\n * @param  {string}           playlistId        ID of the playlist to act upon.\n * @param  {object|array}     video             A single video object, or an array of video objects.\n * @return {promise}                            A promise which resolves when the request is complete.\n */\nPlaylists.prototype._linkVideos = function (link, playlistId, video) {\n  var request;\n  var videosToLink = [];\n\n  if (typeof link !== 'boolean') {\n    return utils.promisify(false,\n      'IngestAPI Playlists link requires a valid link flag passed as a boolean.');\n  }\n\n  if (typeof playlistId !== 'string') {\n    return utils.promisify(false,\n      'IngestAPI Playlists link requires a valid playlistId passed as a string.');\n  }\n\n  if (!video || (!Array.isArray(video) && typeof video !== 'object')) {\n    return utils.promisify(false,\n      'IngestAPI Playlists link requires a valid video passed as a valid object or array.');\n  }\n\n  // Check to see if we recieved either an object or an array.\n  if (!Array.isArray(video)) {\n    videosToLink.push(video);\n  } else {\n    videosToLink = video;\n  }\n\n  // Ensure that we have an array with a valid video.\n  if (videosToLink.length === 0) {\n    return utils.promisify(false,\n      'IngestAPI Playlists link requires at least one video to link.');\n  }\n\n  var url = utils.parseTokens(this.config.host + this.config.byId, {\n    resource: this.config.resource,\n    id: playlistId\n  });\n\n  request = new Request({\n    method: link ? 'LINK' : 'UNLINK',\n    url: url,\n    token: this._tokenSource(),\n    data: videosToLink\n  });\n\n  return request.send()\n          .then(this._updateCachedResources.bind(this));\n};\n\nmodule.exports = Playlists;\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./src/resources/Playlists.js\n ** module id = 17\n ** module chunks = 0\n **/","'use strict';\n\nvar Resource = require('./Resource');\nvar Request = require('../Request');\nvar utils = require('../Utils');\nvar extend = require('extend');\n\nfunction Jobs (options) {\n\n  Resource.call(this, options);\n\n};\n\n// This extends the base class of 'Resource'.\nJobs.prototype = Object.create(Resource.prototype);\nJobs.prototype.constructor = Jobs;\n\n/**\n * Creates a new encoding job.\n *\n * @return {Promise} A promise which resolves when the request is complete.\n */\nJobs.prototype.add = function (resource) {\n\n  var url, request;\n\n  if (typeof resource !== 'object') {\n    return utils.promisify(false,\n      'IngestAPI Jobs `add` requires a resource passed as an object.');\n  }\n\n  url = utils.parseTokens(this.config.host + this.config.all, {\n    resource: this.config.resource\n  });\n\n  // Deletes the cached version of the associated video.\n  if (resource.hasOwnProperty('video') && typeof resource.video === 'string') {\n    this._deleteCachedResource(resource.video);\n  }\n\n  request = new Request({\n    url: url,\n    token: this._tokenSource(),\n    method: 'POST',\n    data: resource\n  });\n\n  return request.send()\n      .then(this._updateCachedResource.bind(this));\n\n};\n\nmodule.exports = Jobs;\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./src/resources/Jobs.js\n ** module id = 18\n ** module chunks = 0\n **/","'use strict';\n\nvar Resource = require('./Resource');\nvar Request = require('../Request');\nvar utils = require('../Utils');\nvar extend = require('extend');\n\nfunction Billing (options) {\n\n  var overrides = {\n    customers: '/<%=resource%>/customers'\n  };\n\n  options = extend(true, {}, overrides, options);\n\n  // We only want the config, not the prototype.\n  // This is because the billing resource does not share the same pattern as the other resources.\n  Resource.call(this, options);\n};\n\n/**\n * Creates a Stripe customer for the given network ID.\n *\n * @param {string} stripeToken - The Stripe token to reference submitted payment details.\n * @param {string} networkId   - The network UUID for this Stripe customer.\n *\n * @return {Promise} A promise which resolves when the request is complete.\n */\nBilling.prototype.createCustomer = function (stripeToken, networkId) {\n  var url, request, data;\n\n  if (typeof stripeToken !== 'string' || typeof networkId !== 'string') {\n    return utils.promisify(false,\n      'IngestAPI Billing createCustomer requires stripeToken and networkId to be strings.');\n  }\n\n  url = utils.parseTokens(this.config.host + this.config.customers, {\n    resource: this.config.resource\n  });\n\n  data = {\n    networkId: networkId,\n    stripeToken: stripeToken\n  };\n\n  request = new Request({\n    url: url,\n    data: data,\n    token: this.config.tokenSource(),\n    method: 'POST'\n  });\n\n  return request.send();\n};\n\nmodule.exports = Billing;\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./src/resources/Billing.js\n ** module id = 19\n ** module chunks = 0\n **/"],"sourceRoot":""}
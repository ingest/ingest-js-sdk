{"version":3,"sources":["webpack:///webpack/universalModuleDefinition","webpack:///ingest.js","webpack:///webpack/bootstrap 5be39122c79fa5b7c352","webpack:///./index.js","webpack:///./src/IngestAPI.js","webpack:///./src/Request.js","webpack:///./~/pinkyswear/pinkyswear.js","webpack:///(webpack)/buildin/module.js","webpack:///(webpack)/~/node-libs-browser/~/timers-browserify/main.js","webpack:///(webpack)/~/node-libs-browser/~/process/browser.js","webpack:///./~/extend/index.js","webpack:///./src/JWTUtils.js","webpack:///./src/Utils.js","webpack:///./src/Resource.js"],"names":["root","factory","exports","module","define","amd","this","modules","__webpack_require__","moduleId","installedModules","id","loaded","call","m","c","p","IngestAPI","options","defaults","host","videos","videoById","thumbnails","trash","networks","networksKeys","networksKeysById","inputs","inputsById","inputsUpload","inputsUploadSign","inputsUploadComplete","inputsUploadAbort","uploadMethods","param","singlePart","multiPart","deleteMethods","permanent","search","currentUserInfo","config","extend","token","setToken","request","Request","JWTUtils","utils","Resource","resource","tokenSource","getToken","bind","playlists","prototype","Error","signUploadBlob","data","url","tokens","checkObject","validateUploadObject","signing","valid","method","parseTokens","promisify","message","_validateUploadIds","result","key","uploadId","validIds","partNumber","hasOwnProperty","getInputs","headers","getInputsById","inputId","addInputs","Array","isArray","deleteInput","deleteInputs","initializeInputUpload","type","size","completeInputUpload","abortInputUpload","getNetworkSecureKeys","addNetworkSecureKey","title","getNetworkSecureKeyById","updateNetworkSecureKey","deleteNetworkSecureKeyById","getCurrentUserInfo","Promise","VALID_RESPONSE_CODES","async","promise","XMLHttpRequest","setupListeners","makeRequest","requestError","onreadystatechange","readyStateChange","postData","preparePostData","success","open","applyRequestHeaders","isExpired","setRequestHeader","send","JSON","stringify","error","i","keys","Object","keysLength","length","requestComplete","response","processResponse","responseType","getResponseHeader","indexOf","parse","stack","statusCode","status","readyState","isValidResponseCode","responseText","responseCode","responseCodeCount","setImmediate","process","target","isFunction","f","isObject","defer","callback","setTimeout","undef","pinkySwear","state","values","deferred","set","newState","newValues","onFulfilled","onRejected","promise2","callCallbacks","resolve","x","then","cbCalled","TypeError","apply","arguments","value","e","push","webpackPolyfill","deprecate","paths","children","clearImmediate","Timeout","clearFn","_id","_clearFn","nextTick","Function","slice","immediateIds","nextImmediateId","window","clearTimeout","setInterval","clearInterval","timeout","close","unref","ref","enroll","item","msecs","_idleTimeoutId","_idleTimeout","unenroll","_unrefActive","active","_onTimeout","fn","args","cleanUpNextTick","draining","currentQueue","queue","concat","queueIndex","drainQueue","len","run","Item","fun","array","noop","browser","env","argv","version","versions","on","addListener","once","off","removeListener","removeAllListeners","emit","binding","name","cwd","chdir","dir","umask","hasOwn","toStr","toString","arr","isPlainObject","obj","hasOwnConstructor","hasIsPrototypeOf","constructor","src","copy","copyIsArray","clone","deep","parseTokenPayload","parts","split","payload","atob","exp","now","Date","getTime","Utils","template","hash","replace","all","byId","_tokenSource","getAll","getById","getTrashed","getThumbnails","add","update","_updateResourceArray","_updateResource","resources","_deleteResourceArray","_deleteResource","permanentDelete","input","count","_handleCountResponse","trashCount","parseInt"],"mappings":"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","file":"ingest.js","sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"IngestAPI\"] = factory();\n\telse\n\t\troot[\"IngestAPI\"] = factory();\n})(this, function() {\nreturn \n\n\n/** WEBPACK FOOTER **\n ** webpack/universalModuleDefinition\n **/","(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"IngestAPI\"] = factory();\n\telse\n\t\troot[\"IngestAPI\"] = factory();\n})(this, function() {\nreturn /******/ (function(modules) { // webpackBootstrap\n/******/ \t// The module cache\n/******/ \tvar installedModules = {};\n/******/\n/******/ \t// The require function\n/******/ \tfunction __webpack_require__(moduleId) {\n/******/\n/******/ \t\t// Check if module is in cache\n/******/ \t\tif(installedModules[moduleId])\n/******/ \t\t\treturn installedModules[moduleId].exports;\n/******/\n/******/ \t\t// Create a new module (and put it into the cache)\n/******/ \t\tvar module = installedModules[moduleId] = {\n/******/ \t\t\texports: {},\n/******/ \t\t\tid: moduleId,\n/******/ \t\t\tloaded: false\n/******/ \t\t};\n/******/\n/******/ \t\t// Execute the module function\n/******/ \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n/******/\n/******/ \t\t// Flag the module as loaded\n/******/ \t\tmodule.loaded = true;\n/******/\n/******/ \t\t// Return the exports of the module\n/******/ \t\treturn module.exports;\n/******/ \t}\n/******/\n/******/\n/******/ \t// expose the modules object (__webpack_modules__)\n/******/ \t__webpack_require__.m = modules;\n/******/\n/******/ \t// expose the module cache\n/******/ \t__webpack_require__.c = installedModules;\n/******/\n/******/ \t// __webpack_public_path__\n/******/ \t__webpack_require__.p = \"\";\n/******/\n/******/ \t// Load entry module and return exports\n/******/ \treturn __webpack_require__(0);\n/******/ })\n/************************************************************************/\n/******/ ([\n/* 0 */\n/***/ function(module, exports, __webpack_require__) {\n\n\tmodule.exports = __webpack_require__(1);\n\n\n/***/ },\n/* 1 */\n/***/ function(module, exports, __webpack_require__) {\n\n\tvar Request = __webpack_require__(2);\n\tvar Promise = __webpack_require__(3);\n\tvar extend = __webpack_require__(7);\n\tvar JWTUtils = __webpack_require__(8);\n\tvar utils = __webpack_require__(9);\n\tvar Resource = __webpack_require__(10);\n\t\n\t/**\n\t * IngestAPI Object\n\t * @class\n\t * @param {object}  options        Options to override the default.\n\t * @param {string}  options.host   Override the default live host.\n\t * @param {string}  options.token  Auth token to use for requests.\n\t */\n\tfunction IngestAPI (options) {\n\t\n\t  this.defaults = {\n\t    'host': 'https://api.ingest.io',\n\t    'videos': '/videos',\n\t    'videoById': '/videos/<%=id%>',\n\t    'thumbnails': '/videos/<%=id%>/thumbnails',\n\t    'trash': '/videos?filter=trashed',\n\t    'networks': '/networks',\n\t    'networksKeys': '/networks/keys',\n\t    'networksKeysById': '/networks/keys/<%=id%>',\n\t    'inputs': '/encoding/inputs',\n\t    'inputsById' : '/encoding/inputs/<%=id%>',\n\t    'inputsUpload': '/encoding/inputs/<%=id%>/upload<%=method%>',\n\t    'inputsUploadSign': '/encoding/inputs/<%=id%>/upload/sign<%=method%>',\n\t    'inputsUploadComplete': '/encoding/inputs/<%=id%>/upload/complete',\n\t    'inputsUploadAbort': '/encoding/inputs/<%=id%>/upload/abort',\n\t    'uploadMethods': {\n\t      'param': '?type=',\n\t      'singlePart': 'amazon',\n\t      'multiPart': 'amazonMP'\n\t    },\n\t    'deleteMethods': {\n\t      'permanent': '?permanent=1'\n\t    },\n\t    'search': '/<%=resource%>?search=<%=input%>',\n\t    'currentUserInfo': '/users/me'\n\t  };\n\t\n\t  // Create a config object by extending the defaults with the pass options.\n\t  this.config = extend(true, {}, this.defaults, options);\n\t\n\t  this.token = null;\n\t\n\t  if (this.config.token) {\n\t    // Store the token for future use.\n\t    this.setToken(this.config.token);\n\t  }\n\t\n\t  this.request = Request;\n\t  this.JWTUtils = JWTUtils;\n\t  this.utils = utils;\n\t\n\t  this.videos = new Resource({\n\t    host: this.config.host,\n\t    resource: 'videos',\n\t    tokenSource: this.getToken.bind(this)\n\t  });\n\t\n\t  this.playlists = new Resource({\n\t    host: this.config.host,\n\t    resource: 'playlists',\n\t    tokenSource: this.getToken.bind(this)\n\t  });\n\t\n\t}\n\t/** Token **/\n\t/**\n\t * Set the auth token to use.\n\t * @param   {String}        token Auth token to use.\n\t */\n\tIngestAPI.prototype.setToken = function (token) {\n\t\n\t  // Make sure a valid value is passed.\n\t  if (typeof token !== 'string') {\n\t    throw new Error('IngestAPI requires an authentication token passed as a string.');\n\t  }\n\t\n\t  this.token = token;\n\t};\n\t\n\t/**\n\t * Return the current auth token.\n\t * @return  {String}        Current auth token, or null if a token has not been set.\n\t */\n\tIngestAPI.prototype.getToken = function () {\n\t  return this.token;\n\t};\n\t\n\t/** Uploads **/\n\t\n\t/**\n\t * Make a request and sign the blob to be uploaded.\n\t * @param  {object}   data            File data used to sign the upload.\n\t * @param  {string}   data.id         The uuid in the ingest service that represents a video record,\n\t * @param  {string}   data.key        The key associated with the file on AWS.\n\t * @param  {string}   data.uploadId   An id provided by amazon s3 to track multi-part uploads.\n\t * @param  {string}   data.partNumber The part of the file being signed.\n\t * @param  {boolean}  data.method     Whether or not the file requires singlepart or multipart uploading.\n\t *\n\t * @return {Promise}                  A promise which resolves when the request is complete.\n\t */\n\tIngestAPI.prototype.signUploadBlob = function (data) {\n\t\n\t  var checkObject = this.validateUploadObject(data);\n\t  var url;\n\t  var tokens;\n\t  var signing = '';\n\t\n\t  // Make sure all the proper properties have been passed in.\n\t  if (!checkObject.valid) {\n\t    return utils.promisify(false, checkObject.message);\n\t  }\n\t\n\t  if (!data.method) {\n\t    signing = this.config.uploadMethods.param + this.config.uploadMethods.singlePart;\n\t  }\n\t\n\t  // Replacing <%=id%> with data.id\n\t  // Replacing <%=method%> with '?type=amazon' or ''\n\t  tokens = {\n\t    id: data.id,\n\t    method: signing\n\t  };\n\t\n\t  url = utils.parseTokens(this.config.host + this.config.inputsUploadSign, tokens);\n\t\n\t  return new Request({\n\t    url: url,\n\t    token: this.getToken(),\n\t    method: 'POST',\n\t    data: data\n\t  });\n\t};\n\t\n\t/**\n\t * Validate the object supplying the upload key and uploadId.\n\t * @private\n\t *\n\t * @param  {object}   data            File data used to sign the upload.\n\t * @param  {string}   data.key        The key associated with the file on AWS.\n\t * @param  {string}   data.uploadId   An id provided by amazon s3 to track multi-part uploads.\n\t *\n\t * @return {boolean}  Boolean         Representing weather or not the object is valid.\n\t **/\n\tIngestAPI.prototype._validateUploadIds = function (data) {\n\t\n\t  var result = {\n\t    valid: true,\n\t    message: ''\n\t  };\n\t\n\t  if (typeof data !== 'object') {\n\t    result.valid = false;\n\t    result.message = 'The passed value was not an object.';\n\t  }\n\t\n\t  if (typeof data.key !== 'string') {\n\t    result.valid = false;\n\t    result.message = 'Missing or invalid property : key.';\n\t  }\n\t\n\t  if (typeof data.uploadId !== 'string') {\n\t    result.valid = false;\n\t    result.message = 'Missing or invalid property : uploadId';\n\t  }\n\t\n\t  return result;\n\t};\n\t\n\t/**\n\t * Validate the object supplying the upload data.\n\t * @param  {object}   data            File data used to sign the upload.\n\t * @param  {string}   data.id         The uuid in the ingest service that represents a video record,\n\t * @param  {string}   data.key        The key associated with the file on AWS.\n\t * @param  {string}   data.uploadId   An id provided by amazon s3 to track multi-part uploads.\n\t * @param  {string}   data.partNumber The part of the file being signed.\n\t * @param  {boolean}  data.method     Whether or not the file requires singlepart or multipart uploading.\n\t *\n\t * @return {boolean}  Boolean         Representing weather or not the object is valid.\n\t **/\n\tIngestAPI.prototype.validateUploadObject = function (data) {\n\t\n\t  var validIds = this._validateUploadIds(data);\n\t  var result = {\n\t    valid: true,\n\t    message: ''\n\t  };\n\t\n\t  if (typeof data !== 'object') {\n\t    result.valid = false;\n\t    result.message = 'The passed value was not an object.';\n\t  }\n\t\n\t  // Make sure all the proper properties have been passed in.\n\t  if (!validIds.valid) {\n\t    result = validIds;\n\t  }\n\t\n\t  if (typeof data.id !== 'string') {\n\t    result.valid = false;\n\t    result.message = 'Missing or invalid property : id.';\n\t  }\n\t\n\t  if (typeof data.partNumber !== 'number') {\n\t    result.valid = false;\n\t    result.message = 'Missing or invalid property : partNumber';\n\t  }\n\t\n\t  if (!data.hasOwnProperty('method') || typeof data.method !== 'boolean') {\n\t    result.valid = false;\n\t    result.message = 'Missing or invalid property : method';\n\t  }\n\t\n\t  // For the case of single part uploads, the uploadId is not required.\n\t  if (data.hasOwnProperty('method') && !data.method && !data.uploadId) {\n\t    result.valid = true;\n\t    result.message = '';\n\t  }\n\t\n\t  return result;\n\t};\n\t\n\t/**\n\t * Return a list of inputs for the current user and network.\n\t * @param  {object}  headers Javascript object representing headers to apply to the call.\n\t *\n\t * @return {Promise} A promise which resolves when the request is complete.\n\t */\n\tIngestAPI.prototype.getInputs = function (headers) {\n\t\n\t  return new Request({\n\t    url: this.config.host + this.config.inputs,\n\t    token: this.getToken(),\n\t    headers: headers\n\t  });\n\t};\n\t\n\t/**\n\t * Return an input that matches the supplied id.\n\t * @param  {string}  inputId ID for the requested video.\n\t *\n\t * @return {Promise} A promise which resolves when the request is complete.\n\t */\n\tIngestAPI.prototype.getInputsById = function (inputId) {\n\t\n\t  var url;\n\t  var tokens;\n\t\n\t  if (typeof inputId !== 'string') {\n\t    // Wrap the error in a promise so the user is still catching the errors.\n\t    return utils.promisify(false,\n\t      'IngestAPI getInputsById requires a valid inputId as a string.');\n\t  }\n\t\n\t  tokens = {\n\t    id: inputId\n\t  };\n\t\n\t  url = utils.parseTokens(this.config.host + this.config.inputsById, tokens);\n\t\n\t  return new Request({\n\t    url: url,\n\t    token: this.getToken()\n\t  });\n\t};\n\t\n\t/**\n\t * Add a new input.\n\t * @param  {array}  inputObject An object representing the input to add.\n\t *\n\t * @return {Promise} A promise which resolves when the request is complete.\n\t */\n\tIngestAPI.prototype.addInputs = function (inputs) {\n\t\n\t  // Validate the object being passed in.\n\t  if (!Array.isArray(inputs)) {\n\t    // Wrap the error in a promise.\n\t    return utils.promisify(false,\n\t      'IngestAPI addInput requires an array of input objects.');\n\t  }\n\t\n\t  // Return the promise from the request.\n\t  return new Request({\n\t    url: this.config.host + this.config.inputs,\n\t    token: this.getToken(),\n\t    method: 'POST',\n\t    data: inputs\n\t  });\n\t};\n\t\n\t/**\n\t * Delete a single input\n\t * @param  {string}  inputId An id for the input you wish to delete\n\t *\n\t * @return {Promise} A promise which resolves when the request is complete.\n\t */\n\tIngestAPI.prototype.deleteInput = function (inputId) {\n\t\n\t  var url;\n\t  var tokens;\n\t\n\t  if (typeof inputId !== 'string') {\n\t    return utils.promisify(false,\n\t      'IngestAPI deleteInput requires a video ID passed as a string.');\n\t  }\n\t\n\t  tokens = {\n\t    id: inputId\n\t  };\n\t\n\t  url = utils.parseTokens(this.config.host + this.config.inputsById, tokens);\n\t\n\t  return new Request({\n\t    url: url,\n\t    token: this.getToken(),\n\t    method: 'DELETE'\n\t  });\n\t};\n\t\n\t/**\n\t * Delete many inputs\n\t * @param  {array}   inputs An array of inputs to be deleted\n\t *\n\t * @return {Promise} A promise which resolves when the request is complete.\n\t */\n\tIngestAPI.prototype.deleteInputs = function (inputs) {\n\t\n\t  var url;\n\t\n\t  if (!Array.isArray(inputs)) {\n\t    return utils.promisify(false,\n\t      'IngestAPI deleteInputs requires an array of input Ids');\n\t  }\n\t\n\t  url = this.config.host + this.config.inputs;\n\t\n\t  return new Request({\n\t    url: url,\n\t    token: this.getToken(),\n\t    method: 'DELETE',\n\t    data: inputs\n\t  });\n\t};\n\t\n\t/**\n\t * Initializes an Input for upload\n\t * @param  {string}  inputId     An id for the input you wish to delete\n\t * @param  {object}  data        The object containing data for the upload initialization.\n\t * @param  {string}  data.type   The content type of the item you wish to upload\n\t * @param  {number}  data.size   The size of the item you wish to upload\n\t * @param  {boolean} data.method A boolean representing whether or not it is a multipart upload\n\t *\n\t * @return {Promise} A promise which resolves when the request is complete.\n\t */\n\tIngestAPI.prototype.initializeInputUpload = function (inputId, data) {\n\t\n\t  var url;\n\t  var tokens;\n\t  var signing = '';\n\t\n\t  if (typeof inputId !== 'string') {\n\t    return utils.promisify(false,\n\t      'IngestAPI initializeUploadInput requires a valid input ID passed as a string.');\n\t  }\n\t\n\t  if (typeof data.type !== 'string') {\n\t    return utils.promisify(false,\n\t      'Missing or invalid property : type.');\n\t  }\n\t\n\t  if (typeof data.size !== 'number') {\n\t    return utils.promisify(false,\n\t      'Missing or invalid property : size');\n\t  }\n\t\n\t  if (!data.method) {\n\t    signing = this.config.uploadMethods.param + this.config.uploadMethods.singlePart;\n\t  }\n\t\n\t  tokens = {\n\t    id: inputId,\n\t    method: signing\n\t  };\n\t\n\t  url = utils.parseTokens(this.config.host + this.config.inputsUpload, tokens);\n\t\n\t  return new Request({\n\t    url: url,\n\t    token: this.getToken(),\n\t    method: 'POST',\n\t    data: data\n\t  });\n\t};\n\t\n\t/**\n\t * Completes an input upload\n\t * @param  {string}  inputId        An id for the input you wish to delete\n\t * @param  {object}  data           The object containing data for the upload completion.\n\t * @param  {string}  data.uploadId  The uploadId you wish to complete the upload for\n\t * @param  {number}  data.key       The key of the upload you wish to complete\n\t *\n\t * @return {Promise} A promise which resolves when the request is complete.\n\t */\n\tIngestAPI.prototype.completeInputUpload = function (inputId, data) {\n\t\n\t  var url;\n\t  var tokens;\n\t  var checkObject = this._validateUploadIds(data);\n\t\n\t  if (typeof inputId !== 'string') {\n\t    return utils.promisify(false,\n\t      'IngestAPI initializeUploadInput requires a valid input ID passed as a string.');\n\t  }\n\t\n\t  // Make sure all the proper properties have been passed in.\n\t  if (!checkObject.valid) {\n\t    return utils.promisify(false, checkObject.message);\n\t  }\n\t\n\t  tokens = {\n\t    id: inputId\n\t  };\n\t\n\t  url = utils.parseTokens(this.config.host + this.config.inputsUploadComplete, tokens);\n\t\n\t  return new Request({\n\t    url: url,\n\t    token: this.getToken(),\n\t    method: 'POST',\n\t    data: data\n\t  });\n\t};\n\t\n\t/**\n\t * Completes an input upload\n\t * @param  {string}  inputId        An id for the input you wish to delete\n\t * @param  {object}  data           The object containing data for the upload completion.\n\t * @param  {string}  data.uploadId  The uploadId you wish to complete the upload for\n\t * @param  {number}  data.key       The key of the upload you wish to complete\n\t *\n\t * @return {Promise} A promise which resolves when the request is complete.\n\t */\n\tIngestAPI.prototype.abortInputUpload = function (inputId, data) {\n\t\n\t  var url;\n\t  var tokens;\n\t  var checkObject = this._validateUploadIds(data);\n\t\n\t  if (typeof inputId !== 'string') {\n\t    return utils.promisify(false,\n\t      'IngestAPI initializeUploadInput requires a valid input ID passed as a string.');\n\t  }\n\t\n\t  // Make sure all the proper properties have been passed in.\n\t  if (!checkObject.valid) {\n\t    return utils.promisify(false, checkObject.message);\n\t  }\n\t\n\t  tokens = {\n\t    id: inputId\n\t  };\n\t\n\t  url = utils.parseTokens(this.config.host + this.config.inputsUploadAbort, tokens);\n\t\n\t  return new Request({\n\t    url: url,\n\t    token: this.getToken(),\n\t    method: 'POST',\n\t    data: data\n\t  });\n\t};\n\t\n\t/** Network Information **/\n\t\n\t/**\n\t * Get the current network primary key in RSA format.\n\t * @return {Promise} Promise/A+ spec which resolves with the primary network key.\n\t */\n\tIngestAPI.prototype.getNetworkSecureKeys = function () {\n\t  return new Request({\n\t    url: this.config.host + this.config.networksKeys,\n\t    token: this.getToken()\n\t  });\n\t};\n\t\n\t/**\n\t * Adds a new secure key to the current network.\n\t * @param {object}  data        The object containing data for the secure key entry.\n\t * @param {string}  data.title  Optional. The title of the secure key. Will default to \"Default Key Title\"\n\t * @param {string}  data.key    The public key in RSA format.\n\t *\n\t * @return {Promise}          A promise which resolves when the request is complete.\n\t */\n\tIngestAPI.prototype.addNetworkSecureKey = function (data) {\n\t  if (typeof data !== 'object') {\n\t    return utils.promisify(false,\n\t      'IngestAPI addNetworkSecureKey requires data to be passed as an object.');\n\t  }\n\t\n\t  // The title must be a string.\n\t  if (typeof data.title !== 'string') {\n\t    data.title = '';\n\t  }\n\t\n\t  if (typeof data.key !== 'string') {\n\t    return utils.promisify(false,\n\t      'IngestAPI addNetworkSecureKey requires that the key be a string in RSA public key format.');\n\t  }\n\t\n\t  return new Request({\n\t    url: this.config.host + this.config.networksKeys,\n\t    token: this.getToken(),\n\t    method: 'POST',\n\t    data: data\n\t  });\n\t};\n\t\n\t/**\n\t * Retrieves a single network secure key entry based on the UUID given.\n\t * @param {string}  id  The UUID of the secure key entry.\n\t *\n\t * @return {Promise} A promise which resolves when the request is complete.\n\t */\n\tIngestAPI.prototype.getNetworkSecureKeyById = function (id) {\n\t  var tokens, url;\n\t\n\t  if (typeof id !== 'string') {\n\t    return utils.promisify(false,\n\t      'IngestAPI getNetworkSecureKeyById requires an id to be passed as a string.');\n\t  }\n\t\n\t  tokens = {\n\t    id: id\n\t  };\n\t\n\t  url = utils.parseTokens(this.config.host + this.config.networksKeysById, tokens);\n\t\n\t  return new Request({\n\t    url: url,\n\t    token: this.getToken()\n\t  });\n\t};\n\t\n\t/**\n\t * Updates an individual secure key entry in the current network.\n\t * @param {object}  data        The object containing data for the secure key entry.\n\t * @param {string}  data.title  The title for the current network.\n\t *\n\t * @return {Promise} A promise which resolves when the request is complete.\n\t */\n\tIngestAPI.prototype.updateNetworkSecureKey = function (data) {\n\t  var tokens, url;\n\t\n\t  if (typeof data !== 'object') {\n\t    return utils.promisify(false,\n\t      'IngestAPI updateNetworkSecureKeyById requires data to be passed as an object.');\n\t  }\n\t\n\t  if (typeof data.id !== 'string') {\n\t    return utils.promisify(false,\n\t      'IngestAPI updateNetworkSecureKeyById requires a param \"id\" to be a string.');\n\t  }\n\t\n\t  if (typeof data.title !== 'string') {\n\t    data.title = '';\n\t  }\n\t\n\t  tokens = {\n\t    id: data.id\n\t  };\n\t\n\t  url = utils.parseTokens(this.config.host + this.config.networksKeysById, tokens);\n\t\n\t  return new Request({\n\t    url: url,\n\t    token: this.getToken(),\n\t    method: 'PATCH',\n\t    data: data\n\t  });\n\t};\n\t\n\t/**\n\t * Deletes a single network secure key entry based on the UUID given.\n\t * @param {string}  id  The UUID of the secure key entry.\n\t *\n\t * @return {Promise} A promise which resolves when the request is complete.\n\t */\n\tIngestAPI.prototype.deleteNetworkSecureKeyById = function (id) {\n\t  var tokens, url;\n\t\n\t  if (typeof id !== 'string') {\n\t    return utils.promisify(false,\n\t      'IngestAPI deleteNetworkSecureKeyById requires an id to be passed as a string.');\n\t  }\n\t\n\t  tokens = {\n\t    id: id\n\t  };\n\t\n\t  url = utils.parseTokens(this.config.host + this.config.networksKeysById, tokens);\n\t\n\t  return new Request({\n\t    url: url,\n\t    token: this.getToken(),\n\t    method: 'DELETE'\n\t  });\n\t};\n\t\n\t/** User Information **/\n\t\n\t/*\n\t * Retrieve information for the current user.\n\t * @return {object} A data object representing the user.\n\t */\n\tIngestAPI.prototype.getCurrentUserInfo = function () {\n\t  return new Request({\n\t    url: this.config.host + this.config.currentUserInfo,\n\t    token: this.getToken()\n\t  });\n\t};\n\t\n\tmodule.exports = IngestAPI;\n\n\n/***/ },\n/* 2 */\n/***/ function(module, exports, __webpack_require__) {\n\n\tvar Promise = __webpack_require__(3);\n\tvar extend = __webpack_require__(7);\n\t\n\tvar JWTUtils = __webpack_require__(8);\n\t\n\tvar VALID_RESPONSE_CODES = [200, 201, 202, 204];\n\t\n\t/**\n\t * A wrapper around the XMLHttpRequest object.\n\t * @param {object}  options         Options for the request.\n\t * @param {boolean} options.async   Whether to perform the request asynchronously\n\t * @param {string}  options.method  REST verb to use for the request.\n\t * @param {string}  options.url     URL for the request.\n\t *\n\t * @return {Promise} A promise which resolves when the request is complete.\n\t */\n\tvar Request = function (options) {\n\t\n\t  this.defaults = {\n\t    async: true,\n\t    method: 'GET'\n\t  };\n\t\n\t  this.promise = Promise();\n\t\n\t  // Create the XHR object for this request.\n\t  this.request = new XMLHttpRequest();\n\t\n\t  // Set up event listeners for this request.\n\t  this.setupListeners();\n\t\n\t  // Todo, merge some defaults with this.\n\t  this.options = extend(true, this.defaults, options);\n\t\n\t  // Make sure a url is passed before attempting to make the request.\n\t  if (!this.options.url) {\n\t    this.requestError('Request Error : a url is required to make the request.');\n\t    return this.promise;\n\t  }\n\t\n\t  // Make the actual request.\n\t  this.makeRequest();\n\t\n\t  // Return the promise.\n\t  return this.promise;\n\t\n\t};\n\t\n\t/**\n\t * Add event listeners to the XMLHttpRequest object.\n\t */\n\tRequest.prototype.setupListeners = function () {\n\t  this.request.onreadystatechange = this.readyStateChange.bind(this);\n\t};\n\t\n\t/**\n\t * Execute the open and send of the XMLHttpRequest\n\t */\n\tRequest.prototype.makeRequest = function () {\n\t\n\t  var postData = this.preparePostData(this.options.data);\n\t\n\t  if (!postData.success) {\n\t    this.requestError('Request Error : error preparing post data.');\n\t    return;\n\t  }\n\t\n\t  this.request.open(this.options.method, this.options.url, this.options.async);\n\t\n\t  if (this.options.headers) {\n\t    this.applyRequestHeaders(this.options.headers);\n\t  }\n\t\n\t  // Make the token optional.\n\t  if (this.options.token) {\n\t\n\t    // If there is a token present ensure that it's still valid.\n\t    if (JWTUtils.isExpired(this.options.token)) {\n\t      this.requestError('Request Error : token is expired.');\n\t      return;\n\t    }\n\t\n\t    this.request.setRequestHeader('Authorization', this.options.token);\n\t  }\n\t\n\t  // If there is data then we need to pass that along with the request.\n\t  if (postData.data) {\n\t    this.request.setRequestHeader('Content-type', 'application/json; charset=utf-8');\n\t    this.request.send(postData.data);\n\t  } else {\n\t    this.request.send();\n\t  }\n\t\n\t};\n\t\n\t/**\n\t * Stringify the post data if it is present.\n\t * @param  {object} data Object to be parsed.\n\t * @return {object}      Result object with the parsed string, and a success boolean flag.\n\t */\n\tRequest.prototype.preparePostData = function (data) {\n\t\n\t  var result = {\n\t    success: true,\n\t    data: data\n\t  };\n\t\n\t  // If the data is populated, and its not already a string parse it.\n\t  if (data) {\n\t\n\t    try {\n\t      result.data = JSON.stringify(data);\n\t    } catch (error) {\n\t      result.success = false;\n\t      result.data = null;\n\t    }\n\t\n\t  }\n\t\n\t  return result;\n\t\n\t};\n\t\n\t/**\n\t * Apply any supplied headers to the request object.\n\t * @param  {object} headers Array of headers to apply to the request object.\n\t */\n\tRequest.prototype.applyRequestHeaders = function (headers) {\n\t\n\t  var key, i;\n\t  var keys = Object.keys(headers);\n\t  var keysLength = keys.length;\n\t\n\t  // Loop through and add the keys to the requestHeaders.\n\t  for (i = 0; i < keysLength; i++) {\n\t    key = keys[i];\n\t    this.request.setRequestHeader(key, headers[key]);\n\t  }\n\t\n\t};\n\t\n\t/**\n\t * Handle the completion of the request and fulfill the promise.\n\t * @param  {String} Response test of the request.\n\t */\n\tRequest.prototype.requestComplete = function (response) {\n\t\n\t  // Process the result.\n\t  this.response = this.processResponse(response);\n\t\n\t  // Either resolve or reject the promise.\n\t  this.promise(!this.response.data.error, [this.response]);\n\t\n\t};\n\t\n\t/**\n\t * Process the response and parse certain content types.\n\t * @param  {*}  response  Response data from request.\n\t * @return {*}            Processed response data.\n\t */\n\tRequest.prototype.processResponse = function (response) {\n\t  var responseType = this.request.getResponseHeader('Content-Type');\n\t  var result = response;\n\t\n\t  // Parse JSON if the result is JSON.\n\t  if (responseType && responseType.indexOf('application/json') !== -1) {\n\t    try {\n\t      result = JSON.parse(response);\n\t    } catch (error) {\n\t      result = {\n\t        error: 'JSON parsing failed. ' + error.stack\n\t      };\n\t    }\n\t  }\n\t\n\t  return {\n\t    data: result,\n\t    headers: this.request.getResponseHeader.bind(this.request),\n\t    statusCode: this.request.status\n\t  };\n\t\n\t};\n\t\n\t/**\n\t * Resolve the promise.\n\t * @param  {String} message   Error message.\n\t */\n\tRequest.prototype.requestError = function (message) {\n\t  // Reject the promise.\n\t  this.promise(false, [message]);\n\t};\n\t\n\t/**\n\t * Handle ready state change events.\n\t */\n\tRequest.prototype.readyStateChange = function () {\n\t\n\t  // Request is complete.\n\t  if (this.request.readyState === 4) {\n\t\n\t    // Check if the final response code is valid.\n\t    if (this.isValidResponseCode(this.request.status)) {\n\t      this.requestComplete(this.request.responseText);\n\t    } else {\n\t      this.requestError('Invalid response code.');\n\t    }\n\t\n\t  }\n\t\n\t};\n\t\n\t/**\n\t * Validate the current response code to see if the request was a success.\n\t * @param  {String}  responseCode Response Code.\n\t * @return {Boolean}              Should this be treated as a successful response code.\n\t */\n\tRequest.prototype.isValidResponseCode = function (responseCode) {\n\t\n\t  var result = false,\n\t    responseCodeCount = VALID_RESPONSE_CODES.length,\n\t    i;\n\t\n\t  // Check if the supplied code is in our list of valid codes.\n\t  for (i = 0; i < responseCodeCount; i++) {\n\t\n\t    if (responseCode === VALID_RESPONSE_CODES[i]) {\n\t      result = true;\n\t      break;\n\t    }\n\t\n\t  }\n\t\n\t  return result;\n\t\n\t};\n\t\n\tmodule.exports = Request;\n\n\n/***/ },\n/* 3 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t/* WEBPACK VAR INJECTION */(function(module, setImmediate, process) {/*\n\t * PinkySwear.js 2.2.2 - Minimalistic implementation of the Promises/A+ spec\n\t * \n\t * Public Domain. Use, modify and distribute it any way you like. No attribution required.\n\t *\n\t * NO WARRANTY EXPRESSED OR IMPLIED. USE AT YOUR OWN RISK.\n\t *\n\t * PinkySwear is a very small implementation of the Promises/A+ specification. After compilation with the\n\t * Google Closure Compiler and gzipping it weighs less than 500 bytes. It is based on the implementation for \n\t * Minified.js and should be perfect for embedding. \n\t *\n\t *\n\t * PinkySwear has just three functions.\n\t *\n\t * To create a new promise in pending state, call pinkySwear():\n\t *         var promise = pinkySwear();\n\t *\n\t * The returned object has a Promises/A+ compatible then() implementation:\n\t *          promise.then(function(value) { alert(\"Success!\"); }, function(value) { alert(\"Failure!\"); });\n\t *\n\t *\n\t * The promise returned by pinkySwear() is a function. To fulfill the promise, call the function with true as first argument and\n\t * an optional array of values to pass to the then() handler. By putting more than one value in the array, you can pass more than one\n\t * value to the then() handlers. Here an example to fulfill a promsise, this time with only one argument: \n\t *         promise(true, [42]);\n\t *\n\t * When the promise has been rejected, call it with false. Again, there may be more than one argument for the then() handler:\n\t *         promise(true, [6, 6, 6]);\n\t *         \n\t * You can obtain the promise's current state by calling the function without arguments. It will be true if fulfilled,\n\t * false if rejected, and otherwise undefined.\n\t * \t\t   var state = promise(); \n\t * \n\t * https://github.com/timjansen/PinkySwear.js\n\t */\n\t(function(target) {\n\t\tvar undef;\n\t\n\t\tfunction isFunction(f) {\n\t\t\treturn typeof f == 'function';\n\t\t}\n\t\tfunction isObject(f) {\n\t\t\treturn typeof f == 'object';\n\t\t}\n\t\tfunction defer(callback) {\n\t\t\tif (typeof setImmediate != 'undefined')\n\t\t\t\tsetImmediate(callback);\n\t\t\telse if (typeof process != 'undefined' && process['nextTick'])\n\t\t\t\tprocess['nextTick'](callback);\n\t\t\telse\n\t\t\t\tsetTimeout(callback, 0);\n\t\t}\n\t\n\t\ttarget[0][target[1]] = function pinkySwear(extend) {\n\t\t\tvar state;           // undefined/null = pending, true = fulfilled, false = rejected\n\t\t\tvar values = [];     // an array of values as arguments for the then() handlers\n\t\t\tvar deferred = [];   // functions to call when set() is invoked\n\t\n\t\t\tvar set = function(newState, newValues) {\n\t\t\t\tif (state == null && newState != null) {\n\t\t\t\t\tstate = newState;\n\t\t\t\t\tvalues = newValues;\n\t\t\t\t\tif (deferred.length)\n\t\t\t\t\t\tdefer(function() {\n\t\t\t\t\t\t\tfor (var i = 0; i < deferred.length; i++)\n\t\t\t\t\t\t\t\tdeferred[i]();\n\t\t\t\t\t\t});\n\t\t\t\t}\n\t\t\t\treturn state;\n\t\t\t};\n\t\n\t\t\tset['then'] = function (onFulfilled, onRejected) {\n\t\t\t\tvar promise2 = pinkySwear(extend);\n\t\t\t\tvar callCallbacks = function() {\n\t\t    \t\ttry {\n\t\t    \t\t\tvar f = (state ? onFulfilled : onRejected);\n\t\t    \t\t\tif (isFunction(f)) {\n\t\t\t   \t\t\t\tfunction resolve(x) {\n\t\t\t\t\t\t\t    var then, cbCalled = 0;\n\t\t\t   \t\t\t\t\ttry {\n\t\t\t\t\t   \t\t\t\tif (x && (isObject(x) || isFunction(x)) && isFunction(then = x['then'])) {\n\t\t\t\t\t\t\t\t\t\t\tif (x === promise2)\n\t\t\t\t\t\t\t\t\t\t\t\tthrow new TypeError();\n\t\t\t\t\t\t\t\t\t\t\tthen['call'](x,\n\t\t\t\t\t\t\t\t\t\t\t\tfunction() { if (!cbCalled++) resolve.apply(undef,arguments); } ,\n\t\t\t\t\t\t\t\t\t\t\t\tfunction(value){ if (!cbCalled++) promise2(false,[value]);});\n\t\t\t\t\t   \t\t\t\t}\n\t\t\t\t\t   \t\t\t\telse\n\t\t\t\t\t   \t\t\t\t\tpromise2(true, arguments);\n\t\t\t   \t\t\t\t\t}\n\t\t\t   \t\t\t\t\tcatch(e) {\n\t\t\t   \t\t\t\t\t\tif (!cbCalled++)\n\t\t\t   \t\t\t\t\t\t\tpromise2(false, [e]);\n\t\t\t   \t\t\t\t\t}\n\t\t\t   \t\t\t\t}\n\t\t\t   \t\t\t\tresolve(f.apply(undef, values || []));\n\t\t\t   \t\t\t}\n\t\t\t   \t\t\telse\n\t\t\t   \t\t\t\tpromise2(state, values);\n\t\t\t\t\t}\n\t\t\t\t\tcatch (e) {\n\t\t\t\t\t\tpromise2(false, [e]);\n\t\t\t\t\t}\n\t\t\t\t};\n\t\t\t\tif (state != null)\n\t\t\t\t\tdefer(callCallbacks);\n\t\t\t\telse\n\t\t\t\t\tdeferred.push(callCallbacks);\n\t\t\t\treturn promise2;\n\t\t\t};\n\t        if(extend){\n\t            set = extend(set);\n\t        }\n\t\t\treturn set;\n\t\t};\n\t})( false ? [window, 'pinkySwear'] : [module, 'exports']);\n\t\n\t\n\t/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(4)(module), __webpack_require__(5).setImmediate, __webpack_require__(6)))\n\n/***/ },\n/* 4 */\n/***/ function(module, exports) {\n\n\tmodule.exports = function(module) {\r\n\t\tif(!module.webpackPolyfill) {\r\n\t\t\tmodule.deprecate = function() {};\r\n\t\t\tmodule.paths = [];\r\n\t\t\t// module.parent = undefined by default\r\n\t\t\tmodule.children = [];\r\n\t\t\tmodule.webpackPolyfill = 1;\r\n\t\t}\r\n\t\treturn module;\r\n\t}\r\n\n\n/***/ },\n/* 5 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t/* WEBPACK VAR INJECTION */(function(setImmediate, clearImmediate) {var nextTick = __webpack_require__(6).nextTick;\n\tvar apply = Function.prototype.apply;\n\tvar slice = Array.prototype.slice;\n\tvar immediateIds = {};\n\tvar nextImmediateId = 0;\n\t\n\t// DOM APIs, for completeness\n\t\n\texports.setTimeout = function() {\n\t  return new Timeout(apply.call(setTimeout, window, arguments), clearTimeout);\n\t};\n\texports.setInterval = function() {\n\t  return new Timeout(apply.call(setInterval, window, arguments), clearInterval);\n\t};\n\texports.clearTimeout =\n\texports.clearInterval = function(timeout) { timeout.close(); };\n\t\n\tfunction Timeout(id, clearFn) {\n\t  this._id = id;\n\t  this._clearFn = clearFn;\n\t}\n\tTimeout.prototype.unref = Timeout.prototype.ref = function() {};\n\tTimeout.prototype.close = function() {\n\t  this._clearFn.call(window, this._id);\n\t};\n\t\n\t// Does not start the time, just sets up the members needed.\n\texports.enroll = function(item, msecs) {\n\t  clearTimeout(item._idleTimeoutId);\n\t  item._idleTimeout = msecs;\n\t};\n\t\n\texports.unenroll = function(item) {\n\t  clearTimeout(item._idleTimeoutId);\n\t  item._idleTimeout = -1;\n\t};\n\t\n\texports._unrefActive = exports.active = function(item) {\n\t  clearTimeout(item._idleTimeoutId);\n\t\n\t  var msecs = item._idleTimeout;\n\t  if (msecs >= 0) {\n\t    item._idleTimeoutId = setTimeout(function onTimeout() {\n\t      if (item._onTimeout)\n\t        item._onTimeout();\n\t    }, msecs);\n\t  }\n\t};\n\t\n\t// That's not how node.js implements it but the exposed api is the same.\n\texports.setImmediate = typeof setImmediate === \"function\" ? setImmediate : function(fn) {\n\t  var id = nextImmediateId++;\n\t  var args = arguments.length < 2 ? false : slice.call(arguments, 1);\n\t\n\t  immediateIds[id] = true;\n\t\n\t  nextTick(function onNextTick() {\n\t    if (immediateIds[id]) {\n\t      // fn.call() is faster so we optimize for the common use-case\n\t      // @see http://jsperf.com/call-apply-segu\n\t      if (args) {\n\t        fn.apply(null, args);\n\t      } else {\n\t        fn.call(null);\n\t      }\n\t      // Prevent ids from leaking\n\t      exports.clearImmediate(id);\n\t    }\n\t  });\n\t\n\t  return id;\n\t};\n\t\n\texports.clearImmediate = typeof clearImmediate === \"function\" ? clearImmediate : function(id) {\n\t  delete immediateIds[id];\n\t};\n\t/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(5).setImmediate, __webpack_require__(5).clearImmediate))\n\n/***/ },\n/* 6 */\n/***/ function(module, exports) {\n\n\t// shim for using process in browser\n\t\n\tvar process = module.exports = {};\n\tvar queue = [];\n\tvar draining = false;\n\tvar currentQueue;\n\tvar queueIndex = -1;\n\t\n\tfunction cleanUpNextTick() {\n\t    draining = false;\n\t    if (currentQueue.length) {\n\t        queue = currentQueue.concat(queue);\n\t    } else {\n\t        queueIndex = -1;\n\t    }\n\t    if (queue.length) {\n\t        drainQueue();\n\t    }\n\t}\n\t\n\tfunction drainQueue() {\n\t    if (draining) {\n\t        return;\n\t    }\n\t    var timeout = setTimeout(cleanUpNextTick);\n\t    draining = true;\n\t\n\t    var len = queue.length;\n\t    while(len) {\n\t        currentQueue = queue;\n\t        queue = [];\n\t        while (++queueIndex < len) {\n\t            if (currentQueue) {\n\t                currentQueue[queueIndex].run();\n\t            }\n\t        }\n\t        queueIndex = -1;\n\t        len = queue.length;\n\t    }\n\t    currentQueue = null;\n\t    draining = false;\n\t    clearTimeout(timeout);\n\t}\n\t\n\tprocess.nextTick = function (fun) {\n\t    var args = new Array(arguments.length - 1);\n\t    if (arguments.length > 1) {\n\t        for (var i = 1; i < arguments.length; i++) {\n\t            args[i - 1] = arguments[i];\n\t        }\n\t    }\n\t    queue.push(new Item(fun, args));\n\t    if (queue.length === 1 && !draining) {\n\t        setTimeout(drainQueue, 0);\n\t    }\n\t};\n\t\n\t// v8 likes predictible objects\n\tfunction Item(fun, array) {\n\t    this.fun = fun;\n\t    this.array = array;\n\t}\n\tItem.prototype.run = function () {\n\t    this.fun.apply(null, this.array);\n\t};\n\tprocess.title = 'browser';\n\tprocess.browser = true;\n\tprocess.env = {};\n\tprocess.argv = [];\n\tprocess.version = ''; // empty string to avoid regexp issues\n\tprocess.versions = {};\n\t\n\tfunction noop() {}\n\t\n\tprocess.on = noop;\n\tprocess.addListener = noop;\n\tprocess.once = noop;\n\tprocess.off = noop;\n\tprocess.removeListener = noop;\n\tprocess.removeAllListeners = noop;\n\tprocess.emit = noop;\n\t\n\tprocess.binding = function (name) {\n\t    throw new Error('process.binding is not supported');\n\t};\n\t\n\tprocess.cwd = function () { return '/' };\n\tprocess.chdir = function (dir) {\n\t    throw new Error('process.chdir is not supported');\n\t};\n\tprocess.umask = function() { return 0; };\n\n\n/***/ },\n/* 7 */\n/***/ function(module, exports) {\n\n\t'use strict';\n\t\n\tvar hasOwn = Object.prototype.hasOwnProperty;\n\tvar toStr = Object.prototype.toString;\n\t\n\tvar isArray = function isArray(arr) {\n\t\tif (typeof Array.isArray === 'function') {\n\t\t\treturn Array.isArray(arr);\n\t\t}\n\t\n\t\treturn toStr.call(arr) === '[object Array]';\n\t};\n\t\n\tvar isPlainObject = function isPlainObject(obj) {\n\t\tif (!obj || toStr.call(obj) !== '[object Object]') {\n\t\t\treturn false;\n\t\t}\n\t\n\t\tvar hasOwnConstructor = hasOwn.call(obj, 'constructor');\n\t\tvar hasIsPrototypeOf = obj.constructor && obj.constructor.prototype && hasOwn.call(obj.constructor.prototype, 'isPrototypeOf');\n\t\t// Not own constructor property must be Object\n\t\tif (obj.constructor && !hasOwnConstructor && !hasIsPrototypeOf) {\n\t\t\treturn false;\n\t\t}\n\t\n\t\t// Own properties are enumerated firstly, so to speed up,\n\t\t// if last one is own, then all properties are own.\n\t\tvar key;\n\t\tfor (key in obj) {/**/}\n\t\n\t\treturn typeof key === 'undefined' || hasOwn.call(obj, key);\n\t};\n\t\n\tmodule.exports = function extend() {\n\t\tvar options, name, src, copy, copyIsArray, clone,\n\t\t\ttarget = arguments[0],\n\t\t\ti = 1,\n\t\t\tlength = arguments.length,\n\t\t\tdeep = false;\n\t\n\t\t// Handle a deep copy situation\n\t\tif (typeof target === 'boolean') {\n\t\t\tdeep = target;\n\t\t\ttarget = arguments[1] || {};\n\t\t\t// skip the boolean and the target\n\t\t\ti = 2;\n\t\t} else if ((typeof target !== 'object' && typeof target !== 'function') || target == null) {\n\t\t\ttarget = {};\n\t\t}\n\t\n\t\tfor (; i < length; ++i) {\n\t\t\toptions = arguments[i];\n\t\t\t// Only deal with non-null/undefined values\n\t\t\tif (options != null) {\n\t\t\t\t// Extend the base object\n\t\t\t\tfor (name in options) {\n\t\t\t\t\tsrc = target[name];\n\t\t\t\t\tcopy = options[name];\n\t\n\t\t\t\t\t// Prevent never-ending loop\n\t\t\t\t\tif (target !== copy) {\n\t\t\t\t\t\t// Recurse if we're merging plain objects or arrays\n\t\t\t\t\t\tif (deep && copy && (isPlainObject(copy) || (copyIsArray = isArray(copy)))) {\n\t\t\t\t\t\t\tif (copyIsArray) {\n\t\t\t\t\t\t\t\tcopyIsArray = false;\n\t\t\t\t\t\t\t\tclone = src && isArray(src) ? src : [];\n\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\tclone = src && isPlainObject(src) ? src : {};\n\t\t\t\t\t\t\t}\n\t\n\t\t\t\t\t\t\t// Never move original objects, clone them\n\t\t\t\t\t\t\ttarget[name] = extend(deep, clone, copy);\n\t\n\t\t\t\t\t\t// Don't bring in undefined values\n\t\t\t\t\t\t} else if (typeof copy !== 'undefined') {\n\t\t\t\t\t\t\ttarget[name] = copy;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\n\t\t// Return the modified object\n\t\treturn target;\n\t};\n\t\n\n\n/***/ },\n/* 8 */\n/***/ function(module, exports) {\n\n\t/**\n\t * UTILS for dealing with jwt tokens.\n\t */\n\t\n\t/**\n\t * Parse the payload out of the JWT token.\n\t * @param  {string} token JWT Token.\n\t * @return {object}       Parsed payload object.\n\t */\n\tvar parseTokenPayload = function (token) {\n\t  var parts = token.split('.');\n\t\n\t  // Return false if the token is invalid.\n\t  if (parts.length <= 1) {\n\t    return false;\n\t  }\n\t\n\t  // decode the payload portion.\n\t  var payload = window.atob(parts[1]);\n\t\n\t  // parse it as JSON\n\t  payload = JSON.parse(payload);\n\t\n\t  return payload;\n\t};\n\t\n\t/**\n\t * Return true if the provided token has expired.\n\t * @param  {string}  token JWT Token\n\t * @return {Boolean}       True if expired.\n\t */\n\tmodule.exports.isExpired = function (token) {\n\t  var data, exp, result, now;\n\t\n\t  data = parseTokenPayload(token);\n\t\n\t  result = true;\n\t\n\t  // Return true if the token does not parse properly.\n\t  if (!data) {\n\t    return result;\n\t  }\n\t\n\t  exp = data.exp;\n\t\n\t  // Get the unix timestamp in seconds.\n\t  now = new Date();\n\t  now = now.getTime() / 1000;\n\t\n\t  if (!exp) {\n\t    return result;\n\t  }\n\t\n\t  // If the expiry data is still in the future.\n\t  if (now < exp) {\n\t    result = false;\n\t  }\n\t\n\t  return result;\n\t\n\t};\n\n\n/***/ },\n/* 9 */\n/***/ function(module, exports, __webpack_require__) {\n\n\tvar Promise = __webpack_require__(3);\n\tvar Utils = {};\n\t/**\n\t * Replace all tokens within a given template based on the given key/value pair.\n\t * @param  {string}     template    Template for the url.\n\t * @param  {object}     hash        Key/Value pair for replacing tokens in the template.\n\t *\n\t * @example\n\t * var tokens = {\n\t *  keyInTemplate: 'replacedWith'\n\t * };\n\t *\n\t * var template = '<%=keyInTemplate%>';\n\t *\n\t * var result = parseTokens(template, tokens);  // 'replacedWith'\n\t *\n\t * @return {string}                 Parsed string.\n\t */\n\tUtils.parseTokens = function (template, hash) {\n\t  if (!template) {\n\t    return null;\n\t  }\n\t\n\t  var keys = Object.keys(hash);\n\t  var i;\n\t  var length = keys.length;\n\t\n\t  for (i = 0; i < length; i++) {\n\t    template = template.replace('<%=' + keys[i] + '%>', hash[keys[i]]);\n\t  }\n\t\n\t  return template;\n\t};\n\t\n\t/**\n\t * Wrapper function to wrap a value in either a reject or resolve.\n\t * @param  {boolean} state Rejection or Approval.\n\t * @param  {*}       value Value to pass back to the promise.\n\t * @return {Promise}       Promise/A+ spec promise.\n\t */\n\tUtils.promisify = function (state, value) {\n\t  var promise = Promise();\n\t\n\t  promise(state, [value]);\n\t\n\t  return promise;\n\t};\n\t\n\tmodule.exports = Utils;\n\n\n/***/ },\n/* 10 */\n/***/ function(module, exports, __webpack_require__) {\n\n\tvar Request = __webpack_require__(2);\n\tvar Promise = __webpack_require__(3);\n\tvar extend = __webpack_require__(7);\n\tvar utils = __webpack_require__(9);\n\t\n\t/**\n\t * Resource Object\n\t * @class\n\t */\n\tfunction Resource (options) {\n\t\n\t  this.defaults = {\n\t    host: 'https://api.ingest.io',\n\t    all: '/<%=resource%>',\n\t    byId: '/<%=resource%>/<%=id%>',\n\t    thumbnails: '/<%=resource%>/<%=id%>/thumbnails',\n\t    trash: '/<%=resource%>?filter=trashed',\n\t    deleteMethods: {\n\t      'permanent': '?permanent=1'\n\t    },\n\t    search: '/<%=resource%>?search=<%=input%>',\n\t    tokenSource: null,\n\t    resource: null\n\t  };\n\t\n\t  this.config = extend(true, {}, this.defaults, options);\n\t\n\t}\n\t\n\t/**\n\t * Proxy the request to token source to ensure a value is always returned.\n\t * @private\n\t * @return {string} Auth token.\n\t */\n\tResource.prototype._tokenSource = function () {\n\t  var result = null;\n\t\n\t  if (this.config.tokenSource) {\n\t    result = this.config.tokenSource.call();\n\t  }\n\t\n\t  return result;\n\t};\n\t\n\t/**\n\t * Return a list of the requested resource for the current user and network.\n\t * @param  {object}   headers   Object representing headers to apply to the request.\n\t * @return {promise}            A promise which resolves when the request is complete.\n\t */\n\tResource.prototype.getAll = function (headers) {\n\t  var url = utils.parseTokens(this.config.host + this.config.all, {\n\t    resource: this.config.resource\n\t  });\n\t\n\t  return new Request({\n\t    url: url,\n\t    token: this._tokenSource(),\n\t    headers: headers\n\t  });\n\t};\n\t\n\t/**\n\t * Return a resource that matches the supplied id.\n\t * @param  {string}   id    Resource id.\n\t * @return {promise}        A promise which resolves when the request is complete.\n\t */\n\tResource.prototype.getById = function (id) {\n\t  var url;\n\t\n\t  if (typeof id !== 'string') {\n\t    return utils.promisify(false,\n\t      'IngestAPI Resource getById requires a valid id passed as a string.');\n\t  }\n\t\n\t  url = utils.parseTokens(this.config.host + this.config.byId, {\n\t    resource: this.config.resource,\n\t    id: id\n\t  });\n\t\n\t  return new Request({\n\t    url: url,\n\t    token: this._tokenSource()\n\t  });\n\t};\n\t\n\t/**\n\t * Return the resources currently in the trash.\n\t * @param  {object} headers Headers to be passed along with the request for pagination.\n\t * @return {promise}         A promise which resolves when the request is complete.\n\t */\n\tResource.prototype.getTrashed = function (headers) {\n\t  var url = utils.parseTokens(this.config.host + this.config.trash, {\n\t    resource: this.config.resource\n\t  });\n\t\n\t  return new Request({\n\t    url: url,\n\t    token: this._tokenSource(),\n\t    headers: headers\n\t  });\n\t};\n\t\n\t/**\n\t * Retrieve all thumbnails for a provided resource id.\n\t * @param {string} id ID of the resource to retrieve thumbnails for.\n\t * @return {promise}  A promise which resolves when the request is complete.\n\t */\n\tResource.prototype.getThumbnails = function (id) {\n\t  var url;\n\t\n\t  if (typeof id !== 'string') {\n\t    return utils.promisify(false,\n\t      'IngestAPI Resource getThumbnails requires an id to be passed as a string.');\n\t  }\n\t\n\t  url = utils.parseTokens(this.config.host + this.config.thumbnails, {\n\t    resource: this.config.resource,\n\t    id: id\n\t  });\n\t\n\t  return new Request({\n\t    url: url,\n\t    token: this._tokenSource()\n\t  });\n\t};\n\t\n\t/**\n\t * Add a new resource.\n\t * @param   {object}  resource  An object representing the resource to add.\n\t * @return  {promise}           A promise which resolves when the request is complete.\n\t */\n\tResource.prototype.add = function (resource) {\n\t  var url;\n\t\n\t  if (typeof resource !== 'object') {\n\t    return utils.promisify(false,\n\t      'IngestAPI Resource add requires a resource passed as an object.');\n\t  }\n\t\n\t  url = utils.parseTokens(this.config.host + this.config.all, {\n\t    resource: this.config.resource\n\t  });\n\t\n\t  return new Request({\n\t    url: url,\n\t    token: this._tokenSource(),\n\t    method: 'POST',\n\t    data: resource\n\t  });\n\t};\n\t\n\t/**\n\t * Update an existing resource with new content.\n\t * @param  {object|array} resource  An object or an array of objects representing the resource(s) to be updated.\n\t * @return {promise}                A promise which resolves when the request is complete.\n\t */\n\tResource.prototype.update = function (resource) {\n\t  if (typeof resource !== 'object') {\n\t    return utils.promisify(false,\n\t      'IngestAPI Resource update requires a resource to be passed either as an object or an array of objects.'); //eslint-disable-line\n\t  }\n\t\n\t  // If they've passed an array fire the updateArray function.\n\t  if (Array.isArray(resource)) {\n\t    return this._updateResourceArray(resource);\n\t  } else {\n\t    return this._updateResource(resource);\n\t  }\n\t};\n\t\n\t/**\n\t * Update a single resource.\n\t * @private\n\t * @param  {object}   resource  An object representing the resource to update.\n\t * @return {promise}            A promise which resolves when the request is complete.\n\t */\n\tResource.prototype._updateResource = function (resource) {\n\t  var url = utils.parseTokens(this.config.host + this.config.byId, {\n\t    resource: this.config.resource,\n\t    id: resource.id\n\t  });\n\t\n\t  return new Request({\n\t    url: url,\n\t    token: this._tokenSource(),\n\t    method: 'PATCH',\n\t    data: resource\n\t  });\n\t};\n\t\n\t/**\n\t * Update an array of resources.\n\t * @private\n\t * @param  {array} resources  An array of resource objects to be updated.\n\t * @return {promise}          A promise which resolves when the request is complete.\n\t */\n\tResource.prototype._updateResourceArray = function (resources) {\n\t  var url = utils.parseTokens(this.config.host + this.config.all, {\n\t    resource: this.config.resource\n\t  });\n\t\n\t  return new Request({\n\t    url: url,\n\t    token: this._tokenSource(),\n\t    method: 'PATCH',\n\t    data: resources\n\t  });\n\t};\n\t\n\t/**\n\t * Delete an existing resource\n\t * @param  {object | array} resource The id, or an array of ids for the resource(s) to be deleted.\n\t * @return {promise}          A promise which resolves when the request is complete.\n\t */\n\tResource.prototype.delete = function (resource) {\n\t  if (typeof resource !== 'string') {\n\t    // If they've passed an array fire the updateArray function.\n\t    if (Array.isArray(resource)) {\n\t      return this._deleteResourceArray(resource);\n\t    }\n\t\n\t    return utils.promisify(false,\n\t      'IngestAPI Resource delete requires a resource to be passed either as a string or an array of strings.'); //eslint-disable-line\n\t  }\n\t\n\t  return this._deleteResource(resource);\n\t};\n\t\n\t/**\n\t * Permanently delete an existing resource.\n\t * @param  {object | array} resource The id, or an array of ids for the resource(s) to be deleted.\n\t * @return {promise}          A promise which resolves when the request is complete.\n\t */\n\tResource.prototype.permanentDelete = function (resource) {\n\t  if (typeof resource !== 'string') {\n\t    // If they've passed an array fire the updateArray function.\n\t    if (Array.isArray(resource)) {\n\t      return this._deleteResourceArray(resource, true);\n\t    }\n\t\n\t    return utils.promisify(false,\n\t      'IngestAPI Resource delete requires a resource to be passed either as a string or an array of strings.'); //eslint-disable-line\n\t  }\n\t\n\t  return this._deleteResource(resource, true);\n\t};\n\t\n\t/**\n\t * Delete a single resource\n\t * @private\n\t * @param  {object}   resource  The id of the resource to be deleted.\n\t * @param {boolean}  permanent  A flag to permanently delete each video.\n\t * @return {promise}            A promise which resolves when the request is complete.\n\t */\n\tResource.prototype._deleteResource = function (resource, permanent) {\n\t  var url = utils.parseTokens(this.config.host + this.config.byId, {\n\t    resource: this.config.resource,\n\t    id: resource\n\t  });\n\t\n\t  if (permanent === true) {\n\t    url += this.config.deleteMethods.permanent;\n\t  }\n\t\n\t  return new Request({\n\t    url: url,\n\t    token: this._tokenSource(),\n\t    method: 'DELETE',\n\t  });\n\t};\n\t\n\t/**\n\t * Delete an array of resources\n\t * @private\n\t * @param  {array}  resources   An array of resource objects to be deleted.\n\t * @param {boolean}  permanent  A flag to permanently delete each video.\n\t * @return {promise}            A promise which resolves when the request is complete.\n\t */\n\tResource.prototype._deleteResourceArray = function (resources, permanent) {\n\t  var url = utils.parseTokens(this.config.host + this.config.all, {\n\t    resource: this.config.resource\n\t  });\n\t\n\t  if (permanent === true) {\n\t    url += this.config.deleteMethods.permanent;\n\t  }\n\t\n\t  return new Request({\n\t    url: url,\n\t    token: this._tokenSource(),\n\t    method: 'DELETE',\n\t    data: resources\n\t  });\n\t};\n\t\n\t/**\n\t * Return a subset of items that match the search terms.\n\t * @param  {string} input    The search terms to match against.\n\t * @param  {object} headers  The headers to be passed to the request.\n\t * @return {Promise}          A promise which resolves when the request is complete.\n\t */\n\tResource.prototype.search = function (input, headers) {\n\t  var url;\n\t\n\t  if (typeof input !== 'string') {\n\t    return utils.promisify(false,\n\t      'IngestAPI Resource search requires search input to be passed as a string.');\n\t  }\n\t\n\t  url = utils.parseTokens(this.config.host + this.config.search, {\n\t    resource: this.config.resource,\n\t    input: input\n\t  });\n\t\n\t  return new Request({\n\t    url: url,\n\t    token: this._tokenSource(),\n\t    headers: headers\n\t  });\n\t};\n\t\n\t/**\n\t * Get the total count of resources.\n\t * @return {promise} A promise which resolves when the request is complete.\n\t */\n\tResource.prototype.count = function () {\n\t  var url = utils.parseTokens(this.config.host + this.config.all, {\n\t    resource: this.config.resource\n\t  });\n\t\n\t  return new Request({\n\t    url: url,\n\t    token: this._tokenSource(),\n\t    method: 'HEAD'\n\t  }).then(this._handleCountResponse);\n\t};\n\t\n\t/**\n\t * Get the total count of resources in the trash.\n\t * @return {promise} A promise which resolves when the request is complete.\n\t */\n\tResource.prototype.trashCount = function () {\n\t  var url = utils.parseTokens(this.config.host + this.config.trash, {\n\t    resource: this.config.resource\n\t  });\n\t\n\t  return new Request({\n\t    url: url,\n\t    token: this._tokenSource(),\n\t    method: 'HEAD'\n\t  }).then(this._handleCountResponse);\n\t};\n\t\n\t/**\n\t * Return the resource count from the response.\n\t * @private\n\t * @param  {object} response Request response object.\n\t * @return {number}          The resource count.\n\t */\n\tResource.prototype._handleCountResponse = function (response) {\n\t  return parseInt(response.headers('Resource-Count'), 10);\n\t};\n\t\n\tmodule.exports = Resource;\n\n\n/***/ }\n/******/ ])\n});\n;\n\n\n/** WEBPACK FOOTER **\n ** ingest.js\n **/"," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId])\n \t\t\treturn installedModules[moduleId].exports;\n\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\texports: {},\n \t\t\tid: moduleId,\n \t\t\tloaded: false\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.loaded = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(0);\n\n\n\n/** WEBPACK FOOTER **\n ** webpack/bootstrap 5be39122c79fa5b7c352\n **/","module.exports = require('./src/IngestAPI.js');\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./index.js\n ** module id = 0\n ** module chunks = 0\n **/","var Request = require('./Request.js');\nvar Promise = require('pinkyswear');\nvar extend = require('extend');\nvar JWTUtils = require('./JWTUtils');\nvar utils = require('./Utils');\nvar Resource = require('./Resource');\n\n/**\n * IngestAPI Object\n * @class\n * @param {object}  options        Options to override the default.\n * @param {string}  options.host   Override the default live host.\n * @param {string}  options.token  Auth token to use for requests.\n */\nfunction IngestAPI (options) {\n\n  this.defaults = {\n    'host': 'https://api.ingest.io',\n    'videos': '/videos',\n    'videoById': '/videos/<%=id%>',\n    'thumbnails': '/videos/<%=id%>/thumbnails',\n    'trash': '/videos?filter=trashed',\n    'networks': '/networks',\n    'networksKeys': '/networks/keys',\n    'networksKeysById': '/networks/keys/<%=id%>',\n    'inputs': '/encoding/inputs',\n    'inputsById' : '/encoding/inputs/<%=id%>',\n    'inputsUpload': '/encoding/inputs/<%=id%>/upload<%=method%>',\n    'inputsUploadSign': '/encoding/inputs/<%=id%>/upload/sign<%=method%>',\n    'inputsUploadComplete': '/encoding/inputs/<%=id%>/upload/complete',\n    'inputsUploadAbort': '/encoding/inputs/<%=id%>/upload/abort',\n    'uploadMethods': {\n      'param': '?type=',\n      'singlePart': 'amazon',\n      'multiPart': 'amazonMP'\n    },\n    'deleteMethods': {\n      'permanent': '?permanent=1'\n    },\n    'search': '/<%=resource%>?search=<%=input%>',\n    'currentUserInfo': '/users/me'\n  };\n\n  // Create a config object by extending the defaults with the pass options.\n  this.config = extend(true, {}, this.defaults, options);\n\n  this.token = null;\n\n  if (this.config.token) {\n    // Store the token for future use.\n    this.setToken(this.config.token);\n  }\n\n  this.request = Request;\n  this.JWTUtils = JWTUtils;\n  this.utils = utils;\n\n  this.videos = new Resource({\n    host: this.config.host,\n    resource: 'videos',\n    tokenSource: this.getToken.bind(this)\n  });\n\n  this.playlists = new Resource({\n    host: this.config.host,\n    resource: 'playlists',\n    tokenSource: this.getToken.bind(this)\n  });\n\n}\n/** Token **/\n/**\n * Set the auth token to use.\n * @param   {String}        token Auth token to use.\n */\nIngestAPI.prototype.setToken = function (token) {\n\n  // Make sure a valid value is passed.\n  if (typeof token !== 'string') {\n    throw new Error('IngestAPI requires an authentication token passed as a string.');\n  }\n\n  this.token = token;\n};\n\n/**\n * Return the current auth token.\n * @return  {String}        Current auth token, or null if a token has not been set.\n */\nIngestAPI.prototype.getToken = function () {\n  return this.token;\n};\n\n/** Uploads **/\n\n/**\n * Make a request and sign the blob to be uploaded.\n * @param  {object}   data            File data used to sign the upload.\n * @param  {string}   data.id         The uuid in the ingest service that represents a video record,\n * @param  {string}   data.key        The key associated with the file on AWS.\n * @param  {string}   data.uploadId   An id provided by amazon s3 to track multi-part uploads.\n * @param  {string}   data.partNumber The part of the file being signed.\n * @param  {boolean}  data.method     Whether or not the file requires singlepart or multipart uploading.\n *\n * @return {Promise}                  A promise which resolves when the request is complete.\n */\nIngestAPI.prototype.signUploadBlob = function (data) {\n\n  var checkObject = this.validateUploadObject(data);\n  var url;\n  var tokens;\n  var signing = '';\n\n  // Make sure all the proper properties have been passed in.\n  if (!checkObject.valid) {\n    return utils.promisify(false, checkObject.message);\n  }\n\n  if (!data.method) {\n    signing = this.config.uploadMethods.param + this.config.uploadMethods.singlePart;\n  }\n\n  // Replacing <%=id%> with data.id\n  // Replacing <%=method%> with '?type=amazon' or ''\n  tokens = {\n    id: data.id,\n    method: signing\n  };\n\n  url = utils.parseTokens(this.config.host + this.config.inputsUploadSign, tokens);\n\n  return new Request({\n    url: url,\n    token: this.getToken(),\n    method: 'POST',\n    data: data\n  });\n};\n\n/**\n * Validate the object supplying the upload key and uploadId.\n * @private\n *\n * @param  {object}   data            File data used to sign the upload.\n * @param  {string}   data.key        The key associated with the file on AWS.\n * @param  {string}   data.uploadId   An id provided by amazon s3 to track multi-part uploads.\n *\n * @return {boolean}  Boolean         Representing weather or not the object is valid.\n **/\nIngestAPI.prototype._validateUploadIds = function (data) {\n\n  var result = {\n    valid: true,\n    message: ''\n  };\n\n  if (typeof data !== 'object') {\n    result.valid = false;\n    result.message = 'The passed value was not an object.';\n  }\n\n  if (typeof data.key !== 'string') {\n    result.valid = false;\n    result.message = 'Missing or invalid property : key.';\n  }\n\n  if (typeof data.uploadId !== 'string') {\n    result.valid = false;\n    result.message = 'Missing or invalid property : uploadId';\n  }\n\n  return result;\n};\n\n/**\n * Validate the object supplying the upload data.\n * @param  {object}   data            File data used to sign the upload.\n * @param  {string}   data.id         The uuid in the ingest service that represents a video record,\n * @param  {string}   data.key        The key associated with the file on AWS.\n * @param  {string}   data.uploadId   An id provided by amazon s3 to track multi-part uploads.\n * @param  {string}   data.partNumber The part of the file being signed.\n * @param  {boolean}  data.method     Whether or not the file requires singlepart or multipart uploading.\n *\n * @return {boolean}  Boolean         Representing weather or not the object is valid.\n **/\nIngestAPI.prototype.validateUploadObject = function (data) {\n\n  var validIds = this._validateUploadIds(data);\n  var result = {\n    valid: true,\n    message: ''\n  };\n\n  if (typeof data !== 'object') {\n    result.valid = false;\n    result.message = 'The passed value was not an object.';\n  }\n\n  // Make sure all the proper properties have been passed in.\n  if (!validIds.valid) {\n    result = validIds;\n  }\n\n  if (typeof data.id !== 'string') {\n    result.valid = false;\n    result.message = 'Missing or invalid property : id.';\n  }\n\n  if (typeof data.partNumber !== 'number') {\n    result.valid = false;\n    result.message = 'Missing or invalid property : partNumber';\n  }\n\n  if (!data.hasOwnProperty('method') || typeof data.method !== 'boolean') {\n    result.valid = false;\n    result.message = 'Missing or invalid property : method';\n  }\n\n  // For the case of single part uploads, the uploadId is not required.\n  if (data.hasOwnProperty('method') && !data.method && !data.uploadId) {\n    result.valid = true;\n    result.message = '';\n  }\n\n  return result;\n};\n\n/**\n * Return a list of inputs for the current user and network.\n * @param  {object}  headers Javascript object representing headers to apply to the call.\n *\n * @return {Promise} A promise which resolves when the request is complete.\n */\nIngestAPI.prototype.getInputs = function (headers) {\n\n  return new Request({\n    url: this.config.host + this.config.inputs,\n    token: this.getToken(),\n    headers: headers\n  });\n};\n\n/**\n * Return an input that matches the supplied id.\n * @param  {string}  inputId ID for the requested video.\n *\n * @return {Promise} A promise which resolves when the request is complete.\n */\nIngestAPI.prototype.getInputsById = function (inputId) {\n\n  var url;\n  var tokens;\n\n  if (typeof inputId !== 'string') {\n    // Wrap the error in a promise so the user is still catching the errors.\n    return utils.promisify(false,\n      'IngestAPI getInputsById requires a valid inputId as a string.');\n  }\n\n  tokens = {\n    id: inputId\n  };\n\n  url = utils.parseTokens(this.config.host + this.config.inputsById, tokens);\n\n  return new Request({\n    url: url,\n    token: this.getToken()\n  });\n};\n\n/**\n * Add a new input.\n * @param  {array}  inputObject An object representing the input to add.\n *\n * @return {Promise} A promise which resolves when the request is complete.\n */\nIngestAPI.prototype.addInputs = function (inputs) {\n\n  // Validate the object being passed in.\n  if (!Array.isArray(inputs)) {\n    // Wrap the error in a promise.\n    return utils.promisify(false,\n      'IngestAPI addInput requires an array of input objects.');\n  }\n\n  // Return the promise from the request.\n  return new Request({\n    url: this.config.host + this.config.inputs,\n    token: this.getToken(),\n    method: 'POST',\n    data: inputs\n  });\n};\n\n/**\n * Delete a single input\n * @param  {string}  inputId An id for the input you wish to delete\n *\n * @return {Promise} A promise which resolves when the request is complete.\n */\nIngestAPI.prototype.deleteInput = function (inputId) {\n\n  var url;\n  var tokens;\n\n  if (typeof inputId !== 'string') {\n    return utils.promisify(false,\n      'IngestAPI deleteInput requires a video ID passed as a string.');\n  }\n\n  tokens = {\n    id: inputId\n  };\n\n  url = utils.parseTokens(this.config.host + this.config.inputsById, tokens);\n\n  return new Request({\n    url: url,\n    token: this.getToken(),\n    method: 'DELETE'\n  });\n};\n\n/**\n * Delete many inputs\n * @param  {array}   inputs An array of inputs to be deleted\n *\n * @return {Promise} A promise which resolves when the request is complete.\n */\nIngestAPI.prototype.deleteInputs = function (inputs) {\n\n  var url;\n\n  if (!Array.isArray(inputs)) {\n    return utils.promisify(false,\n      'IngestAPI deleteInputs requires an array of input Ids');\n  }\n\n  url = this.config.host + this.config.inputs;\n\n  return new Request({\n    url: url,\n    token: this.getToken(),\n    method: 'DELETE',\n    data: inputs\n  });\n};\n\n/**\n * Initializes an Input for upload\n * @param  {string}  inputId     An id for the input you wish to delete\n * @param  {object}  data        The object containing data for the upload initialization.\n * @param  {string}  data.type   The content type of the item you wish to upload\n * @param  {number}  data.size   The size of the item you wish to upload\n * @param  {boolean} data.method A boolean representing whether or not it is a multipart upload\n *\n * @return {Promise} A promise which resolves when the request is complete.\n */\nIngestAPI.prototype.initializeInputUpload = function (inputId, data) {\n\n  var url;\n  var tokens;\n  var signing = '';\n\n  if (typeof inputId !== 'string') {\n    return utils.promisify(false,\n      'IngestAPI initializeUploadInput requires a valid input ID passed as a string.');\n  }\n\n  if (typeof data.type !== 'string') {\n    return utils.promisify(false,\n      'Missing or invalid property : type.');\n  }\n\n  if (typeof data.size !== 'number') {\n    return utils.promisify(false,\n      'Missing or invalid property : size');\n  }\n\n  if (!data.method) {\n    signing = this.config.uploadMethods.param + this.config.uploadMethods.singlePart;\n  }\n\n  tokens = {\n    id: inputId,\n    method: signing\n  };\n\n  url = utils.parseTokens(this.config.host + this.config.inputsUpload, tokens);\n\n  return new Request({\n    url: url,\n    token: this.getToken(),\n    method: 'POST',\n    data: data\n  });\n};\n\n/**\n * Completes an input upload\n * @param  {string}  inputId        An id for the input you wish to delete\n * @param  {object}  data           The object containing data for the upload completion.\n * @param  {string}  data.uploadId  The uploadId you wish to complete the upload for\n * @param  {number}  data.key       The key of the upload you wish to complete\n *\n * @return {Promise} A promise which resolves when the request is complete.\n */\nIngestAPI.prototype.completeInputUpload = function (inputId, data) {\n\n  var url;\n  var tokens;\n  var checkObject = this._validateUploadIds(data);\n\n  if (typeof inputId !== 'string') {\n    return utils.promisify(false,\n      'IngestAPI initializeUploadInput requires a valid input ID passed as a string.');\n  }\n\n  // Make sure all the proper properties have been passed in.\n  if (!checkObject.valid) {\n    return utils.promisify(false, checkObject.message);\n  }\n\n  tokens = {\n    id: inputId\n  };\n\n  url = utils.parseTokens(this.config.host + this.config.inputsUploadComplete, tokens);\n\n  return new Request({\n    url: url,\n    token: this.getToken(),\n    method: 'POST',\n    data: data\n  });\n};\n\n/**\n * Completes an input upload\n * @param  {string}  inputId        An id for the input you wish to delete\n * @param  {object}  data           The object containing data for the upload completion.\n * @param  {string}  data.uploadId  The uploadId you wish to complete the upload for\n * @param  {number}  data.key       The key of the upload you wish to complete\n *\n * @return {Promise} A promise which resolves when the request is complete.\n */\nIngestAPI.prototype.abortInputUpload = function (inputId, data) {\n\n  var url;\n  var tokens;\n  var checkObject = this._validateUploadIds(data);\n\n  if (typeof inputId !== 'string') {\n    return utils.promisify(false,\n      'IngestAPI initializeUploadInput requires a valid input ID passed as a string.');\n  }\n\n  // Make sure all the proper properties have been passed in.\n  if (!checkObject.valid) {\n    return utils.promisify(false, checkObject.message);\n  }\n\n  tokens = {\n    id: inputId\n  };\n\n  url = utils.parseTokens(this.config.host + this.config.inputsUploadAbort, tokens);\n\n  return new Request({\n    url: url,\n    token: this.getToken(),\n    method: 'POST',\n    data: data\n  });\n};\n\n/** Network Information **/\n\n/**\n * Get the current network primary key in RSA format.\n * @return {Promise} Promise/A+ spec which resolves with the primary network key.\n */\nIngestAPI.prototype.getNetworkSecureKeys = function () {\n  return new Request({\n    url: this.config.host + this.config.networksKeys,\n    token: this.getToken()\n  });\n};\n\n/**\n * Adds a new secure key to the current network.\n * @param {object}  data        The object containing data for the secure key entry.\n * @param {string}  data.title  Optional. The title of the secure key. Will default to \"Default Key Title\"\n * @param {string}  data.key    The public key in RSA format.\n *\n * @return {Promise}          A promise which resolves when the request is complete.\n */\nIngestAPI.prototype.addNetworkSecureKey = function (data) {\n  if (typeof data !== 'object') {\n    return utils.promisify(false,\n      'IngestAPI addNetworkSecureKey requires data to be passed as an object.');\n  }\n\n  // The title must be a string.\n  if (typeof data.title !== 'string') {\n    data.title = '';\n  }\n\n  if (typeof data.key !== 'string') {\n    return utils.promisify(false,\n      'IngestAPI addNetworkSecureKey requires that the key be a string in RSA public key format.');\n  }\n\n  return new Request({\n    url: this.config.host + this.config.networksKeys,\n    token: this.getToken(),\n    method: 'POST',\n    data: data\n  });\n};\n\n/**\n * Retrieves a single network secure key entry based on the UUID given.\n * @param {string}  id  The UUID of the secure key entry.\n *\n * @return {Promise} A promise which resolves when the request is complete.\n */\nIngestAPI.prototype.getNetworkSecureKeyById = function (id) {\n  var tokens, url;\n\n  if (typeof id !== 'string') {\n    return utils.promisify(false,\n      'IngestAPI getNetworkSecureKeyById requires an id to be passed as a string.');\n  }\n\n  tokens = {\n    id: id\n  };\n\n  url = utils.parseTokens(this.config.host + this.config.networksKeysById, tokens);\n\n  return new Request({\n    url: url,\n    token: this.getToken()\n  });\n};\n\n/**\n * Updates an individual secure key entry in the current network.\n * @param {object}  data        The object containing data for the secure key entry.\n * @param {string}  data.title  The title for the current network.\n *\n * @return {Promise} A promise which resolves when the request is complete.\n */\nIngestAPI.prototype.updateNetworkSecureKey = function (data) {\n  var tokens, url;\n\n  if (typeof data !== 'object') {\n    return utils.promisify(false,\n      'IngestAPI updateNetworkSecureKeyById requires data to be passed as an object.');\n  }\n\n  if (typeof data.id !== 'string') {\n    return utils.promisify(false,\n      'IngestAPI updateNetworkSecureKeyById requires a param \"id\" to be a string.');\n  }\n\n  if (typeof data.title !== 'string') {\n    data.title = '';\n  }\n\n  tokens = {\n    id: data.id\n  };\n\n  url = utils.parseTokens(this.config.host + this.config.networksKeysById, tokens);\n\n  return new Request({\n    url: url,\n    token: this.getToken(),\n    method: 'PATCH',\n    data: data\n  });\n};\n\n/**\n * Deletes a single network secure key entry based on the UUID given.\n * @param {string}  id  The UUID of the secure key entry.\n *\n * @return {Promise} A promise which resolves when the request is complete.\n */\nIngestAPI.prototype.deleteNetworkSecureKeyById = function (id) {\n  var tokens, url;\n\n  if (typeof id !== 'string') {\n    return utils.promisify(false,\n      'IngestAPI deleteNetworkSecureKeyById requires an id to be passed as a string.');\n  }\n\n  tokens = {\n    id: id\n  };\n\n  url = utils.parseTokens(this.config.host + this.config.networksKeysById, tokens);\n\n  return new Request({\n    url: url,\n    token: this.getToken(),\n    method: 'DELETE'\n  });\n};\n\n/** User Information **/\n\n/*\n * Retrieve information for the current user.\n * @return {object} A data object representing the user.\n */\nIngestAPI.prototype.getCurrentUserInfo = function () {\n  return new Request({\n    url: this.config.host + this.config.currentUserInfo,\n    token: this.getToken()\n  });\n};\n\nmodule.exports = IngestAPI;\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./src/IngestAPI.js\n ** module id = 1\n ** module chunks = 0\n **/","var Promise = require('pinkyswear');\nvar extend = require('extend');\n\nvar JWTUtils = require('./JWTUtils');\n\nvar VALID_RESPONSE_CODES = [200, 201, 202, 204];\n\n/**\n * A wrapper around the XMLHttpRequest object.\n * @param {object}  options         Options for the request.\n * @param {boolean} options.async   Whether to perform the request asynchronously\n * @param {string}  options.method  REST verb to use for the request.\n * @param {string}  options.url     URL for the request.\n *\n * @return {Promise} A promise which resolves when the request is complete.\n */\nvar Request = function (options) {\n\n  this.defaults = {\n    async: true,\n    method: 'GET'\n  };\n\n  this.promise = Promise();\n\n  // Create the XHR object for this request.\n  this.request = new XMLHttpRequest();\n\n  // Set up event listeners for this request.\n  this.setupListeners();\n\n  // Todo, merge some defaults with this.\n  this.options = extend(true, this.defaults, options);\n\n  // Make sure a url is passed before attempting to make the request.\n  if (!this.options.url) {\n    this.requestError('Request Error : a url is required to make the request.');\n    return this.promise;\n  }\n\n  // Make the actual request.\n  this.makeRequest();\n\n  // Return the promise.\n  return this.promise;\n\n};\n\n/**\n * Add event listeners to the XMLHttpRequest object.\n */\nRequest.prototype.setupListeners = function () {\n  this.request.onreadystatechange = this.readyStateChange.bind(this);\n};\n\n/**\n * Execute the open and send of the XMLHttpRequest\n */\nRequest.prototype.makeRequest = function () {\n\n  var postData = this.preparePostData(this.options.data);\n\n  if (!postData.success) {\n    this.requestError('Request Error : error preparing post data.');\n    return;\n  }\n\n  this.request.open(this.options.method, this.options.url, this.options.async);\n\n  if (this.options.headers) {\n    this.applyRequestHeaders(this.options.headers);\n  }\n\n  // Make the token optional.\n  if (this.options.token) {\n\n    // If there is a token present ensure that it's still valid.\n    if (JWTUtils.isExpired(this.options.token)) {\n      this.requestError('Request Error : token is expired.');\n      return;\n    }\n\n    this.request.setRequestHeader('Authorization', this.options.token);\n  }\n\n  // If there is data then we need to pass that along with the request.\n  if (postData.data) {\n    this.request.setRequestHeader('Content-type', 'application/json; charset=utf-8');\n    this.request.send(postData.data);\n  } else {\n    this.request.send();\n  }\n\n};\n\n/**\n * Stringify the post data if it is present.\n * @param  {object} data Object to be parsed.\n * @return {object}      Result object with the parsed string, and a success boolean flag.\n */\nRequest.prototype.preparePostData = function (data) {\n\n  var result = {\n    success: true,\n    data: data\n  };\n\n  // If the data is populated, and its not already a string parse it.\n  if (data) {\n\n    try {\n      result.data = JSON.stringify(data);\n    } catch (error) {\n      result.success = false;\n      result.data = null;\n    }\n\n  }\n\n  return result;\n\n};\n\n/**\n * Apply any supplied headers to the request object.\n * @param  {object} headers Array of headers to apply to the request object.\n */\nRequest.prototype.applyRequestHeaders = function (headers) {\n\n  var key, i;\n  var keys = Object.keys(headers);\n  var keysLength = keys.length;\n\n  // Loop through and add the keys to the requestHeaders.\n  for (i = 0; i < keysLength; i++) {\n    key = keys[i];\n    this.request.setRequestHeader(key, headers[key]);\n  }\n\n};\n\n/**\n * Handle the completion of the request and fulfill the promise.\n * @param  {String} Response test of the request.\n */\nRequest.prototype.requestComplete = function (response) {\n\n  // Process the result.\n  this.response = this.processResponse(response);\n\n  // Either resolve or reject the promise.\n  this.promise(!this.response.data.error, [this.response]);\n\n};\n\n/**\n * Process the response and parse certain content types.\n * @param  {*}  response  Response data from request.\n * @return {*}            Processed response data.\n */\nRequest.prototype.processResponse = function (response) {\n  var responseType = this.request.getResponseHeader('Content-Type');\n  var result = response;\n\n  // Parse JSON if the result is JSON.\n  if (responseType && responseType.indexOf('application/json') !== -1) {\n    try {\n      result = JSON.parse(response);\n    } catch (error) {\n      result = {\n        error: 'JSON parsing failed. ' + error.stack\n      };\n    }\n  }\n\n  return {\n    data: result,\n    headers: this.request.getResponseHeader.bind(this.request),\n    statusCode: this.request.status\n  };\n\n};\n\n/**\n * Resolve the promise.\n * @param  {String} message   Error message.\n */\nRequest.prototype.requestError = function (message) {\n  // Reject the promise.\n  this.promise(false, [message]);\n};\n\n/**\n * Handle ready state change events.\n */\nRequest.prototype.readyStateChange = function () {\n\n  // Request is complete.\n  if (this.request.readyState === 4) {\n\n    // Check if the final response code is valid.\n    if (this.isValidResponseCode(this.request.status)) {\n      this.requestComplete(this.request.responseText);\n    } else {\n      this.requestError('Invalid response code.');\n    }\n\n  }\n\n};\n\n/**\n * Validate the current response code to see if the request was a success.\n * @param  {String}  responseCode Response Code.\n * @return {Boolean}              Should this be treated as a successful response code.\n */\nRequest.prototype.isValidResponseCode = function (responseCode) {\n\n  var result = false,\n    responseCodeCount = VALID_RESPONSE_CODES.length,\n    i;\n\n  // Check if the supplied code is in our list of valid codes.\n  for (i = 0; i < responseCodeCount; i++) {\n\n    if (responseCode === VALID_RESPONSE_CODES[i]) {\n      result = true;\n      break;\n    }\n\n  }\n\n  return result;\n\n};\n\nmodule.exports = Request;\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./src/Request.js\n ** module id = 2\n ** module chunks = 0\n **/","/*\n * PinkySwear.js 2.2.2 - Minimalistic implementation of the Promises/A+ spec\n * \n * Public Domain. Use, modify and distribute it any way you like. No attribution required.\n *\n * NO WARRANTY EXPRESSED OR IMPLIED. USE AT YOUR OWN RISK.\n *\n * PinkySwear is a very small implementation of the Promises/A+ specification. After compilation with the\n * Google Closure Compiler and gzipping it weighs less than 500 bytes. It is based on the implementation for \n * Minified.js and should be perfect for embedding. \n *\n *\n * PinkySwear has just three functions.\n *\n * To create a new promise in pending state, call pinkySwear():\n *         var promise = pinkySwear();\n *\n * The returned object has a Promises/A+ compatible then() implementation:\n *          promise.then(function(value) { alert(\"Success!\"); }, function(value) { alert(\"Failure!\"); });\n *\n *\n * The promise returned by pinkySwear() is a function. To fulfill the promise, call the function with true as first argument and\n * an optional array of values to pass to the then() handler. By putting more than one value in the array, you can pass more than one\n * value to the then() handlers. Here an example to fulfill a promsise, this time with only one argument: \n *         promise(true, [42]);\n *\n * When the promise has been rejected, call it with false. Again, there may be more than one argument for the then() handler:\n *         promise(true, [6, 6, 6]);\n *         \n * You can obtain the promise's current state by calling the function without arguments. It will be true if fulfilled,\n * false if rejected, and otherwise undefined.\n * \t\t   var state = promise(); \n * \n * https://github.com/timjansen/PinkySwear.js\n */\n(function(target) {\n\tvar undef;\n\n\tfunction isFunction(f) {\n\t\treturn typeof f == 'function';\n\t}\n\tfunction isObject(f) {\n\t\treturn typeof f == 'object';\n\t}\n\tfunction defer(callback) {\n\t\tif (typeof setImmediate != 'undefined')\n\t\t\tsetImmediate(callback);\n\t\telse if (typeof process != 'undefined' && process['nextTick'])\n\t\t\tprocess['nextTick'](callback);\n\t\telse\n\t\t\tsetTimeout(callback, 0);\n\t}\n\n\ttarget[0][target[1]] = function pinkySwear(extend) {\n\t\tvar state;           // undefined/null = pending, true = fulfilled, false = rejected\n\t\tvar values = [];     // an array of values as arguments for the then() handlers\n\t\tvar deferred = [];   // functions to call when set() is invoked\n\n\t\tvar set = function(newState, newValues) {\n\t\t\tif (state == null && newState != null) {\n\t\t\t\tstate = newState;\n\t\t\t\tvalues = newValues;\n\t\t\t\tif (deferred.length)\n\t\t\t\t\tdefer(function() {\n\t\t\t\t\t\tfor (var i = 0; i < deferred.length; i++)\n\t\t\t\t\t\t\tdeferred[i]();\n\t\t\t\t\t});\n\t\t\t}\n\t\t\treturn state;\n\t\t};\n\n\t\tset['then'] = function (onFulfilled, onRejected) {\n\t\t\tvar promise2 = pinkySwear(extend);\n\t\t\tvar callCallbacks = function() {\n\t    \t\ttry {\n\t    \t\t\tvar f = (state ? onFulfilled : onRejected);\n\t    \t\t\tif (isFunction(f)) {\n\t\t   \t\t\t\tfunction resolve(x) {\n\t\t\t\t\t\t    var then, cbCalled = 0;\n\t\t   \t\t\t\t\ttry {\n\t\t\t\t   \t\t\t\tif (x && (isObject(x) || isFunction(x)) && isFunction(then = x['then'])) {\n\t\t\t\t\t\t\t\t\t\tif (x === promise2)\n\t\t\t\t\t\t\t\t\t\t\tthrow new TypeError();\n\t\t\t\t\t\t\t\t\t\tthen['call'](x,\n\t\t\t\t\t\t\t\t\t\t\tfunction() { if (!cbCalled++) resolve.apply(undef,arguments); } ,\n\t\t\t\t\t\t\t\t\t\t\tfunction(value){ if (!cbCalled++) promise2(false,[value]);});\n\t\t\t\t   \t\t\t\t}\n\t\t\t\t   \t\t\t\telse\n\t\t\t\t   \t\t\t\t\tpromise2(true, arguments);\n\t\t   \t\t\t\t\t}\n\t\t   \t\t\t\t\tcatch(e) {\n\t\t   \t\t\t\t\t\tif (!cbCalled++)\n\t\t   \t\t\t\t\t\t\tpromise2(false, [e]);\n\t\t   \t\t\t\t\t}\n\t\t   \t\t\t\t}\n\t\t   \t\t\t\tresolve(f.apply(undef, values || []));\n\t\t   \t\t\t}\n\t\t   \t\t\telse\n\t\t   \t\t\t\tpromise2(state, values);\n\t\t\t\t}\n\t\t\t\tcatch (e) {\n\t\t\t\t\tpromise2(false, [e]);\n\t\t\t\t}\n\t\t\t};\n\t\t\tif (state != null)\n\t\t\t\tdefer(callCallbacks);\n\t\t\telse\n\t\t\t\tdeferred.push(callCallbacks);\n\t\t\treturn promise2;\n\t\t};\n        if(extend){\n            set = extend(set);\n        }\n\t\treturn set;\n\t};\n})(typeof module == 'undefined' ? [window, 'pinkySwear'] : [module, 'exports']);\n\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./~/pinkyswear/pinkyswear.js\n ** module id = 3\n ** module chunks = 0\n **/","module.exports = function(module) {\r\n\tif(!module.webpackPolyfill) {\r\n\t\tmodule.deprecate = function() {};\r\n\t\tmodule.paths = [];\r\n\t\t// module.parent = undefined by default\r\n\t\tmodule.children = [];\r\n\t\tmodule.webpackPolyfill = 1;\r\n\t}\r\n\treturn module;\r\n}\r\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** (webpack)/buildin/module.js\n ** module id = 4\n ** module chunks = 0\n **/","var nextTick = require('process/browser.js').nextTick;\nvar apply = Function.prototype.apply;\nvar slice = Array.prototype.slice;\nvar immediateIds = {};\nvar nextImmediateId = 0;\n\n// DOM APIs, for completeness\n\nexports.setTimeout = function() {\n  return new Timeout(apply.call(setTimeout, window, arguments), clearTimeout);\n};\nexports.setInterval = function() {\n  return new Timeout(apply.call(setInterval, window, arguments), clearInterval);\n};\nexports.clearTimeout =\nexports.clearInterval = function(timeout) { timeout.close(); };\n\nfunction Timeout(id, clearFn) {\n  this._id = id;\n  this._clearFn = clearFn;\n}\nTimeout.prototype.unref = Timeout.prototype.ref = function() {};\nTimeout.prototype.close = function() {\n  this._clearFn.call(window, this._id);\n};\n\n// Does not start the time, just sets up the members needed.\nexports.enroll = function(item, msecs) {\n  clearTimeout(item._idleTimeoutId);\n  item._idleTimeout = msecs;\n};\n\nexports.unenroll = function(item) {\n  clearTimeout(item._idleTimeoutId);\n  item._idleTimeout = -1;\n};\n\nexports._unrefActive = exports.active = function(item) {\n  clearTimeout(item._idleTimeoutId);\n\n  var msecs = item._idleTimeout;\n  if (msecs >= 0) {\n    item._idleTimeoutId = setTimeout(function onTimeout() {\n      if (item._onTimeout)\n        item._onTimeout();\n    }, msecs);\n  }\n};\n\n// That's not how node.js implements it but the exposed api is the same.\nexports.setImmediate = typeof setImmediate === \"function\" ? setImmediate : function(fn) {\n  var id = nextImmediateId++;\n  var args = arguments.length < 2 ? false : slice.call(arguments, 1);\n\n  immediateIds[id] = true;\n\n  nextTick(function onNextTick() {\n    if (immediateIds[id]) {\n      // fn.call() is faster so we optimize for the common use-case\n      // @see http://jsperf.com/call-apply-segu\n      if (args) {\n        fn.apply(null, args);\n      } else {\n        fn.call(null);\n      }\n      // Prevent ids from leaking\n      exports.clearImmediate(id);\n    }\n  });\n\n  return id;\n};\n\nexports.clearImmediate = typeof clearImmediate === \"function\" ? clearImmediate : function(id) {\n  delete immediateIds[id];\n};\n\n\n/*****************\n ** WEBPACK FOOTER\n ** (webpack)/~/node-libs-browser/~/timers-browserify/main.js\n ** module id = 5\n ** module chunks = 0\n **/","// shim for using process in browser\n\nvar process = module.exports = {};\nvar queue = [];\nvar draining = false;\nvar currentQueue;\nvar queueIndex = -1;\n\nfunction cleanUpNextTick() {\n    draining = false;\n    if (currentQueue.length) {\n        queue = currentQueue.concat(queue);\n    } else {\n        queueIndex = -1;\n    }\n    if (queue.length) {\n        drainQueue();\n    }\n}\n\nfunction drainQueue() {\n    if (draining) {\n        return;\n    }\n    var timeout = setTimeout(cleanUpNextTick);\n    draining = true;\n\n    var len = queue.length;\n    while(len) {\n        currentQueue = queue;\n        queue = [];\n        while (++queueIndex < len) {\n            if (currentQueue) {\n                currentQueue[queueIndex].run();\n            }\n        }\n        queueIndex = -1;\n        len = queue.length;\n    }\n    currentQueue = null;\n    draining = false;\n    clearTimeout(timeout);\n}\n\nprocess.nextTick = function (fun) {\n    var args = new Array(arguments.length - 1);\n    if (arguments.length > 1) {\n        for (var i = 1; i < arguments.length; i++) {\n            args[i - 1] = arguments[i];\n        }\n    }\n    queue.push(new Item(fun, args));\n    if (queue.length === 1 && !draining) {\n        setTimeout(drainQueue, 0);\n    }\n};\n\n// v8 likes predictible objects\nfunction Item(fun, array) {\n    this.fun = fun;\n    this.array = array;\n}\nItem.prototype.run = function () {\n    this.fun.apply(null, this.array);\n};\nprocess.title = 'browser';\nprocess.browser = true;\nprocess.env = {};\nprocess.argv = [];\nprocess.version = ''; // empty string to avoid regexp issues\nprocess.versions = {};\n\nfunction noop() {}\n\nprocess.on = noop;\nprocess.addListener = noop;\nprocess.once = noop;\nprocess.off = noop;\nprocess.removeListener = noop;\nprocess.removeAllListeners = noop;\nprocess.emit = noop;\n\nprocess.binding = function (name) {\n    throw new Error('process.binding is not supported');\n};\n\nprocess.cwd = function () { return '/' };\nprocess.chdir = function (dir) {\n    throw new Error('process.chdir is not supported');\n};\nprocess.umask = function() { return 0; };\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** (webpack)/~/node-libs-browser/~/process/browser.js\n ** module id = 6\n ** module chunks = 0\n **/","'use strict';\n\nvar hasOwn = Object.prototype.hasOwnProperty;\nvar toStr = Object.prototype.toString;\n\nvar isArray = function isArray(arr) {\n\tif (typeof Array.isArray === 'function') {\n\t\treturn Array.isArray(arr);\n\t}\n\n\treturn toStr.call(arr) === '[object Array]';\n};\n\nvar isPlainObject = function isPlainObject(obj) {\n\tif (!obj || toStr.call(obj) !== '[object Object]') {\n\t\treturn false;\n\t}\n\n\tvar hasOwnConstructor = hasOwn.call(obj, 'constructor');\n\tvar hasIsPrototypeOf = obj.constructor && obj.constructor.prototype && hasOwn.call(obj.constructor.prototype, 'isPrototypeOf');\n\t// Not own constructor property must be Object\n\tif (obj.constructor && !hasOwnConstructor && !hasIsPrototypeOf) {\n\t\treturn false;\n\t}\n\n\t// Own properties are enumerated firstly, so to speed up,\n\t// if last one is own, then all properties are own.\n\tvar key;\n\tfor (key in obj) {/**/}\n\n\treturn typeof key === 'undefined' || hasOwn.call(obj, key);\n};\n\nmodule.exports = function extend() {\n\tvar options, name, src, copy, copyIsArray, clone,\n\t\ttarget = arguments[0],\n\t\ti = 1,\n\t\tlength = arguments.length,\n\t\tdeep = false;\n\n\t// Handle a deep copy situation\n\tif (typeof target === 'boolean') {\n\t\tdeep = target;\n\t\ttarget = arguments[1] || {};\n\t\t// skip the boolean and the target\n\t\ti = 2;\n\t} else if ((typeof target !== 'object' && typeof target !== 'function') || target == null) {\n\t\ttarget = {};\n\t}\n\n\tfor (; i < length; ++i) {\n\t\toptions = arguments[i];\n\t\t// Only deal with non-null/undefined values\n\t\tif (options != null) {\n\t\t\t// Extend the base object\n\t\t\tfor (name in options) {\n\t\t\t\tsrc = target[name];\n\t\t\t\tcopy = options[name];\n\n\t\t\t\t// Prevent never-ending loop\n\t\t\t\tif (target !== copy) {\n\t\t\t\t\t// Recurse if we're merging plain objects or arrays\n\t\t\t\t\tif (deep && copy && (isPlainObject(copy) || (copyIsArray = isArray(copy)))) {\n\t\t\t\t\t\tif (copyIsArray) {\n\t\t\t\t\t\t\tcopyIsArray = false;\n\t\t\t\t\t\t\tclone = src && isArray(src) ? src : [];\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tclone = src && isPlainObject(src) ? src : {};\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\t// Never move original objects, clone them\n\t\t\t\t\t\ttarget[name] = extend(deep, clone, copy);\n\n\t\t\t\t\t// Don't bring in undefined values\n\t\t\t\t\t} else if (typeof copy !== 'undefined') {\n\t\t\t\t\t\ttarget[name] = copy;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\t// Return the modified object\n\treturn target;\n};\n\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./~/extend/index.js\n ** module id = 7\n ** module chunks = 0\n **/","/**\n * UTILS for dealing with jwt tokens.\n */\n\n/**\n * Parse the payload out of the JWT token.\n * @param  {string} token JWT Token.\n * @return {object}       Parsed payload object.\n */\nvar parseTokenPayload = function (token) {\n  var parts = token.split('.');\n\n  // Return false if the token is invalid.\n  if (parts.length <= 1) {\n    return false;\n  }\n\n  // decode the payload portion.\n  var payload = window.atob(parts[1]);\n\n  // parse it as JSON\n  payload = JSON.parse(payload);\n\n  return payload;\n};\n\n/**\n * Return true if the provided token has expired.\n * @param  {string}  token JWT Token\n * @return {Boolean}       True if expired.\n */\nmodule.exports.isExpired = function (token) {\n  var data, exp, result, now;\n\n  data = parseTokenPayload(token);\n\n  result = true;\n\n  // Return true if the token does not parse properly.\n  if (!data) {\n    return result;\n  }\n\n  exp = data.exp;\n\n  // Get the unix timestamp in seconds.\n  now = new Date();\n  now = now.getTime() / 1000;\n\n  if (!exp) {\n    return result;\n  }\n\n  // If the expiry data is still in the future.\n  if (now < exp) {\n    result = false;\n  }\n\n  return result;\n\n};\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./src/JWTUtils.js\n ** module id = 8\n ** module chunks = 0\n **/","var Promise = require('pinkyswear');\nvar Utils = {};\n/**\n * Replace all tokens within a given template based on the given key/value pair.\n * @param  {string}     template    Template for the url.\n * @param  {object}     hash        Key/Value pair for replacing tokens in the template.\n *\n * @example\n * var tokens = {\n *  keyInTemplate: 'replacedWith'\n * };\n *\n * var template = '<%=keyInTemplate%>';\n *\n * var result = parseTokens(template, tokens);  // 'replacedWith'\n *\n * @return {string}                 Parsed string.\n */\nUtils.parseTokens = function (template, hash) {\n  if (!template) {\n    return null;\n  }\n\n  var keys = Object.keys(hash);\n  var i;\n  var length = keys.length;\n\n  for (i = 0; i < length; i++) {\n    template = template.replace('<%=' + keys[i] + '%>', hash[keys[i]]);\n  }\n\n  return template;\n};\n\n/**\n * Wrapper function to wrap a value in either a reject or resolve.\n * @param  {boolean} state Rejection or Approval.\n * @param  {*}       value Value to pass back to the promise.\n * @return {Promise}       Promise/A+ spec promise.\n */\nUtils.promisify = function (state, value) {\n  var promise = Promise();\n\n  promise(state, [value]);\n\n  return promise;\n};\n\nmodule.exports = Utils;\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./src/Utils.js\n ** module id = 9\n ** module chunks = 0\n **/","var Request = require('./Request.js');\nvar Promise = require('pinkyswear');\nvar extend = require('extend');\nvar utils = require('./Utils');\n\n/**\n * Resource Object\n * @class\n */\nfunction Resource (options) {\n\n  this.defaults = {\n    host: 'https://api.ingest.io',\n    all: '/<%=resource%>',\n    byId: '/<%=resource%>/<%=id%>',\n    thumbnails: '/<%=resource%>/<%=id%>/thumbnails',\n    trash: '/<%=resource%>?filter=trashed',\n    deleteMethods: {\n      'permanent': '?permanent=1'\n    },\n    search: '/<%=resource%>?search=<%=input%>',\n    tokenSource: null,\n    resource: null\n  };\n\n  this.config = extend(true, {}, this.defaults, options);\n\n}\n\n/**\n * Proxy the request to token source to ensure a value is always returned.\n * @private\n * @return {string} Auth token.\n */\nResource.prototype._tokenSource = function () {\n  var result = null;\n\n  if (this.config.tokenSource) {\n    result = this.config.tokenSource.call();\n  }\n\n  return result;\n};\n\n/**\n * Return a list of the requested resource for the current user and network.\n * @param  {object}   headers   Object representing headers to apply to the request.\n * @return {promise}            A promise which resolves when the request is complete.\n */\nResource.prototype.getAll = function (headers) {\n  var url = utils.parseTokens(this.config.host + this.config.all, {\n    resource: this.config.resource\n  });\n\n  return new Request({\n    url: url,\n    token: this._tokenSource(),\n    headers: headers\n  });\n};\n\n/**\n * Return a resource that matches the supplied id.\n * @param  {string}   id    Resource id.\n * @return {promise}        A promise which resolves when the request is complete.\n */\nResource.prototype.getById = function (id) {\n  var url;\n\n  if (typeof id !== 'string') {\n    return utils.promisify(false,\n      'IngestAPI Resource getById requires a valid id passed as a string.');\n  }\n\n  url = utils.parseTokens(this.config.host + this.config.byId, {\n    resource: this.config.resource,\n    id: id\n  });\n\n  return new Request({\n    url: url,\n    token: this._tokenSource()\n  });\n};\n\n/**\n * Return the resources currently in the trash.\n * @param  {object} headers Headers to be passed along with the request for pagination.\n * @return {promise}         A promise which resolves when the request is complete.\n */\nResource.prototype.getTrashed = function (headers) {\n  var url = utils.parseTokens(this.config.host + this.config.trash, {\n    resource: this.config.resource\n  });\n\n  return new Request({\n    url: url,\n    token: this._tokenSource(),\n    headers: headers\n  });\n};\n\n/**\n * Retrieve all thumbnails for a provided resource id.\n * @param {string} id ID of the resource to retrieve thumbnails for.\n * @return {promise}  A promise which resolves when the request is complete.\n */\nResource.prototype.getThumbnails = function (id) {\n  var url;\n\n  if (typeof id !== 'string') {\n    return utils.promisify(false,\n      'IngestAPI Resource getThumbnails requires an id to be passed as a string.');\n  }\n\n  url = utils.parseTokens(this.config.host + this.config.thumbnails, {\n    resource: this.config.resource,\n    id: id\n  });\n\n  return new Request({\n    url: url,\n    token: this._tokenSource()\n  });\n};\n\n/**\n * Add a new resource.\n * @param   {object}  resource  An object representing the resource to add.\n * @return  {promise}           A promise which resolves when the request is complete.\n */\nResource.prototype.add = function (resource) {\n  var url;\n\n  if (typeof resource !== 'object') {\n    return utils.promisify(false,\n      'IngestAPI Resource add requires a resource passed as an object.');\n  }\n\n  url = utils.parseTokens(this.config.host + this.config.all, {\n    resource: this.config.resource\n  });\n\n  return new Request({\n    url: url,\n    token: this._tokenSource(),\n    method: 'POST',\n    data: resource\n  });\n};\n\n/**\n * Update an existing resource with new content.\n * @param  {object|array} resource  An object or an array of objects representing the resource(s) to be updated.\n * @return {promise}                A promise which resolves when the request is complete.\n */\nResource.prototype.update = function (resource) {\n  if (typeof resource !== 'object') {\n    return utils.promisify(false,\n      'IngestAPI Resource update requires a resource to be passed either as an object or an array of objects.'); //eslint-disable-line\n  }\n\n  // If they've passed an array fire the updateArray function.\n  if (Array.isArray(resource)) {\n    return this._updateResourceArray(resource);\n  } else {\n    return this._updateResource(resource);\n  }\n};\n\n/**\n * Update a single resource.\n * @private\n * @param  {object}   resource  An object representing the resource to update.\n * @return {promise}            A promise which resolves when the request is complete.\n */\nResource.prototype._updateResource = function (resource) {\n  var url = utils.parseTokens(this.config.host + this.config.byId, {\n    resource: this.config.resource,\n    id: resource.id\n  });\n\n  return new Request({\n    url: url,\n    token: this._tokenSource(),\n    method: 'PATCH',\n    data: resource\n  });\n};\n\n/**\n * Update an array of resources.\n * @private\n * @param  {array} resources  An array of resource objects to be updated.\n * @return {promise}          A promise which resolves when the request is complete.\n */\nResource.prototype._updateResourceArray = function (resources) {\n  var url = utils.parseTokens(this.config.host + this.config.all, {\n    resource: this.config.resource\n  });\n\n  return new Request({\n    url: url,\n    token: this._tokenSource(),\n    method: 'PATCH',\n    data: resources\n  });\n};\n\n/**\n * Delete an existing resource\n * @param  {object | array} resource The id, or an array of ids for the resource(s) to be deleted.\n * @return {promise}          A promise which resolves when the request is complete.\n */\nResource.prototype.delete = function (resource) {\n  if (typeof resource !== 'string') {\n    // If they've passed an array fire the updateArray function.\n    if (Array.isArray(resource)) {\n      return this._deleteResourceArray(resource);\n    }\n\n    return utils.promisify(false,\n      'IngestAPI Resource delete requires a resource to be passed either as a string or an array of strings.'); //eslint-disable-line\n  }\n\n  return this._deleteResource(resource);\n};\n\n/**\n * Permanently delete an existing resource.\n * @param  {object | array} resource The id, or an array of ids for the resource(s) to be deleted.\n * @return {promise}          A promise which resolves when the request is complete.\n */\nResource.prototype.permanentDelete = function (resource) {\n  if (typeof resource !== 'string') {\n    // If they've passed an array fire the updateArray function.\n    if (Array.isArray(resource)) {\n      return this._deleteResourceArray(resource, true);\n    }\n\n    return utils.promisify(false,\n      'IngestAPI Resource delete requires a resource to be passed either as a string or an array of strings.'); //eslint-disable-line\n  }\n\n  return this._deleteResource(resource, true);\n};\n\n/**\n * Delete a single resource\n * @private\n * @param  {object}   resource  The id of the resource to be deleted.\n * @param {boolean}  permanent  A flag to permanently delete each video.\n * @return {promise}            A promise which resolves when the request is complete.\n */\nResource.prototype._deleteResource = function (resource, permanent) {\n  var url = utils.parseTokens(this.config.host + this.config.byId, {\n    resource: this.config.resource,\n    id: resource\n  });\n\n  if (permanent === true) {\n    url += this.config.deleteMethods.permanent;\n  }\n\n  return new Request({\n    url: url,\n    token: this._tokenSource(),\n    method: 'DELETE',\n  });\n};\n\n/**\n * Delete an array of resources\n * @private\n * @param  {array}  resources   An array of resource objects to be deleted.\n * @param {boolean}  permanent  A flag to permanently delete each video.\n * @return {promise}            A promise which resolves when the request is complete.\n */\nResource.prototype._deleteResourceArray = function (resources, permanent) {\n  var url = utils.parseTokens(this.config.host + this.config.all, {\n    resource: this.config.resource\n  });\n\n  if (permanent === true) {\n    url += this.config.deleteMethods.permanent;\n  }\n\n  return new Request({\n    url: url,\n    token: this._tokenSource(),\n    method: 'DELETE',\n    data: resources\n  });\n};\n\n/**\n * Return a subset of items that match the search terms.\n * @param  {string} input    The search terms to match against.\n * @param  {object} headers  The headers to be passed to the request.\n * @return {Promise}          A promise which resolves when the request is complete.\n */\nResource.prototype.search = function (input, headers) {\n  var url;\n\n  if (typeof input !== 'string') {\n    return utils.promisify(false,\n      'IngestAPI Resource search requires search input to be passed as a string.');\n  }\n\n  url = utils.parseTokens(this.config.host + this.config.search, {\n    resource: this.config.resource,\n    input: input\n  });\n\n  return new Request({\n    url: url,\n    token: this._tokenSource(),\n    headers: headers\n  });\n};\n\n/**\n * Get the total count of resources.\n * @return {promise} A promise which resolves when the request is complete.\n */\nResource.prototype.count = function () {\n  var url = utils.parseTokens(this.config.host + this.config.all, {\n    resource: this.config.resource\n  });\n\n  return new Request({\n    url: url,\n    token: this._tokenSource(),\n    method: 'HEAD'\n  }).then(this._handleCountResponse);\n};\n\n/**\n * Get the total count of resources in the trash.\n * @return {promise} A promise which resolves when the request is complete.\n */\nResource.prototype.trashCount = function () {\n  var url = utils.parseTokens(this.config.host + this.config.trash, {\n    resource: this.config.resource\n  });\n\n  return new Request({\n    url: url,\n    token: this._tokenSource(),\n    method: 'HEAD'\n  }).then(this._handleCountResponse);\n};\n\n/**\n * Return the resource count from the response.\n * @private\n * @param  {object} response Request response object.\n * @return {number}          The resource count.\n */\nResource.prototype._handleCountResponse = function (response) {\n  return parseInt(response.headers('Resource-Count'), 10);\n};\n\nmodule.exports = Resource;\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./src/Resource.js\n ** module id = 10\n ** module chunks = 0\n **/"],"sourceRoot":""}
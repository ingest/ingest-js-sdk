{"version":3,"sources":["webpack:///webpack/universalModuleDefinition","webpack:///ingest-sdk.js","webpack:///webpack/bootstrap 17775393cdf572be4053","webpack:///./node_modules/extend/index.js","webpack:///./src/Request.js","webpack:///./src/Utils.js","webpack:///./src/resources/Resource.js","webpack:///./src/constants/resourceTypes.js","webpack:///./node_modules/pinkyswear/pinkyswear.js","webpack:///./node_modules/process/browser.js","webpack:///./src/JWTUtils.js","webpack:///./src/RequestManager.js","webpack:///./src/resources/PlaybackContent.js","webpack:///./src/index.js","webpack:///./node_modules/timers-browserify/main.js","webpack:///./node_modules/setimmediate/setImmediate.js","webpack:///(webpack)/buildin/global.js","webpack:///./src/Uploader.js","webpack:///./src/resources/Users.js","webpack:///./src/resources/Networks.js","webpack:///./src/resources/Videos.js","webpack:///./src/resources/Jobs.js","webpack:///./src/resources/Profiles.js","webpack:///./src/resources/Inputs.js","webpack:///./src/resources/Events.js","webpack:///./src/resources/Roles.js"],"names":["root","factory","exports","module","define","amd","this","modules","__webpack_require__","moduleId","installedModules","i","l","call","m","c","d","name","getter","o","Object","defineProperty","configurable","enumerable","get","n","__esModule","object","property","prototype","hasOwnProperty","p","s","hasOwn","toStr","toString","isArray","arr","Array","isPlainObject","obj","hasOwnConstructor","hasIsPrototypeOf","constructor","key","extend","options","src","copy","copyIsArray","clone","target","arguments","length","deep","Request","defaults","async","method","ignoreAcceptHeader","request","XMLHttpRequest","setupListeners","maxRetrys","retrys","Promise","JWTUtils","RequestManager","VALID_RESPONSE_CODES","send","promise","url","makeRequest","requestError","then","_sendNextRequest","sendSync","callback","onreadystatechange","readyStateChange","bind","postData","preparePostData","data","headers","hasContentType","success","open","setRequestHeader","applyRequestHeaders","token","isExpired","type","addRequest","isValidResponseCode","status","result","FormData","Blob","JSON","stringify","error","keys","keysLength","requestComplete","response","processResponse","errors","responseType","getResponseHeader","indexOf","parse","stack","statusCode","message","Error","getAllResponseHeaders","resp","retryAfterTime","readyState","setTimeout","responseText","responseCode","responseCodeCount","cancel","abort","Utils","parseTokens","template","hash","replace","promisify","state","value","series","promises","paused","promisesCount","all","total","complete","responses","pause","_seriesPause","undefined","resume","_seriesResume","_seriesCancel","_seriesCallPromise","_seriesComplete","_seriesError","canceled","push","isImage","file","Resource","host","byId","trash","deleteMethods","permanent","search","tokenSource","resource","config","utils","_tokenSource","getAll","getById","id","getTrashed","add","update","delete","_deleteResource","permanentDelete","deleteSync","_deleteResourceSync","permanentDeleteSync","input","encodeURIComponent","searchTrash","count","_handleCountResponse","trashCount","parseInt","EVENTS","INPUTS","JOBS","NETWORKS","PROFILES","ROLES","USERS","VIDEOS","setImmediate","process","__WEBPACK_AMD_DEFINE_FACTORY__","__WEBPACK_AMD_DEFINE_ARRAY__","__WEBPACK_AMD_DEFINE_RESULT__","apply","isFunction","f","isObject","defer","undef","pinkySwear","values","deferred","set","newState","newValues","onFulfilled","onRejected","promise2","callCallbacks","resolve","x","cbCalled","TypeError","e","defaultSetTimout","defaultClearTimeout","runTimeout","fun","cachedSetTimeout","runClearTimeout","marker","cachedClearTimeout","clearTimeout","cleanUpNextTick","draining","currentQueue","queue","concat","queueIndex","drainQueue","timeout","len","run","Item","array","noop","nextTick","args","title","browser","env","argv","version","versions","on","addListener","once","off","removeListener","removeAllListeners","emit","prependListener","prependOnceListener","listeners","binding","cwd","chdir","dir","umask","parseTokenPayload","payload","parts","split","window","atob","exp","now","Date","getTime","pending","activeRequests","currentSetRequests","lastRequestSetStart","resetTimer","sendNextRequest","_resetCurrentSet","resetCurrentSet","setMaxRequests","maxRequests","newDate","requestData","sendRequest","XRatelimitRemaining","moreRequests","delay","XRatelimitLimit","XRatelimitReset","shift","PlaybackContent","thumbnail","thumbnails","deleteThumbnail","create","getThumbnails","addExternalThumbnails","images","imagesToAdd","uploadThumbnail","image","formData","File","append","thumbnailId","IngestSDK","resourceConfig","setToken","playbackContent","Media","usersResource","Users","networksResource","Networks","videosResource","Videos","jobsResource","Jobs","profilesResource","Profiles","inputsResource","Inputs","uploader","Uploader","eventsResource","Events","rolesResource","Roles","requestManager","getToken","videos","inputs","users","networks","profiles","jobs","events","roles","max","upload","api","Timeout","clearFn","_id","_clearFn","Function","setInterval","clearInterval","close","unref","ref","enroll","item","msecs","_idleTimeoutId","_idleTimeout","unenroll","_unrefActive","active","_onTimeout","clearImmediate","global","task","tasksByHandle","nextHandle","registerImmediate","handle","runIfPresent","currentlyRunningATask","doc","document","attachTo","getPrototypeOf","postMessage","importScripts","postMessageIsAsynchronous","oldOnMessage","onmessage","messagePrefix","Math","random","onGlobalMessage","event","source","slice","addEventListener","attachEvent","MessageChannel","channel","port1","port2","createElement","html","documentElement","script","removeChild","appendChild","self","g","eval","Upload","sign","uploadComplete","uploadAbort","uploadMethods","param","singlePart","multiPart","chunks","chunkSize","chunkCount","chunksComplete","uploadedBytes","aborted","created","initialized","fileRecord","filename","size","_checkMultipart","contentType","progress","save","_create","_initialize","_prepareUpload","_updateProgress","percent","record","_createSuccess","tokens","signing","_initializeComplete","uploadId","pieceSize","pieceCount","_createChunks","_completeUpload","_uploadFile","_onCompleteUpload","blob","chunk","start","end","sliceMethod","_getSliceMethod","chunkPromises","min","partNumber","_uploadChunk","multiPartPromise","_signUpload","_sendUpload","_completeChunk","singlePartPromise","_sendSinglepartComplete","_uploadFileComplete","authorization","authHeader","dateHeader","securityToken","requestPromise","round","_abortComplete","abortSync","abortSyncComplete","overrides","ResourceTypes","currentUser","transfer","revoke","getCurrentUserInfo","transferUserAuthorship","oldId","newId","revokeCurrentUser","keysById","invite","invoices","invoicesById","currentUsage","customers","customerById","customerCardInformation","getPendingUsers","deletePendingUser","linkUser","networkId","userId","unlinkUser","inviteUser","email","resend","getSecureKeys","addSecureKey","getSecureKeyById","keyId","updateSecureKey","deleteSecureKey","createCustomer","stripeToken","updateCustomer","cusId","networkName","deleteCustomer","getCustomerCardInformation","customerId","deleteCustomerCard","getInvoices","getInvoiceById","invoiceId","getCurrentUsage","pendingUserId","variants","publish","getVariants","ids","_private","isStatusSet","allWithFilters","searchWithFilters","filters","urlTemplate","filterChain","join","types","filterStatus","filterType","filterString","getTypes"],"mappings":"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","file":"ingest-sdk.js","sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine(\"IngestSDK\", [], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"IngestSDK\"] = factory();\n\telse\n\t\troot[\"IngestSDK\"] = factory();\n})(this, function() {\nreturn \n\n\n// WEBPACK FOOTER //\n// webpack/universalModuleDefinition","(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine(\"IngestSDK\", [], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"IngestSDK\"] = factory();\n\telse\n\t\troot[\"IngestSDK\"] = factory();\n})(this, function() {\nreturn /******/ (function(modules) { // webpackBootstrap\n/******/ \t// The module cache\n/******/ \tvar installedModules = {};\n/******/\n/******/ \t// The require function\n/******/ \tfunction __webpack_require__(moduleId) {\n/******/\n/******/ \t\t// Check if module is in cache\n/******/ \t\tif(installedModules[moduleId]) {\n/******/ \t\t\treturn installedModules[moduleId].exports;\n/******/ \t\t}\n/******/ \t\t// Create a new module (and put it into the cache)\n/******/ \t\tvar module = installedModules[moduleId] = {\n/******/ \t\t\ti: moduleId,\n/******/ \t\t\tl: false,\n/******/ \t\t\texports: {}\n/******/ \t\t};\n/******/\n/******/ \t\t// Execute the module function\n/******/ \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n/******/\n/******/ \t\t// Flag the module as loaded\n/******/ \t\tmodule.l = true;\n/******/\n/******/ \t\t// Return the exports of the module\n/******/ \t\treturn module.exports;\n/******/ \t}\n/******/\n/******/\n/******/ \t// expose the modules object (__webpack_modules__)\n/******/ \t__webpack_require__.m = modules;\n/******/\n/******/ \t// expose the module cache\n/******/ \t__webpack_require__.c = installedModules;\n/******/\n/******/ \t// define getter function for harmony exports\n/******/ \t__webpack_require__.d = function(exports, name, getter) {\n/******/ \t\tif(!__webpack_require__.o(exports, name)) {\n/******/ \t\t\tObject.defineProperty(exports, name, {\n/******/ \t\t\t\tconfigurable: false,\n/******/ \t\t\t\tenumerable: true,\n/******/ \t\t\t\tget: getter\n/******/ \t\t\t});\n/******/ \t\t}\n/******/ \t};\n/******/\n/******/ \t// getDefaultExport function for compatibility with non-harmony modules\n/******/ \t__webpack_require__.n = function(module) {\n/******/ \t\tvar getter = module && module.__esModule ?\n/******/ \t\t\tfunction getDefault() { return module['default']; } :\n/******/ \t\t\tfunction getModuleExports() { return module; };\n/******/ \t\t__webpack_require__.d(getter, 'a', getter);\n/******/ \t\treturn getter;\n/******/ \t};\n/******/\n/******/ \t// Object.prototype.hasOwnProperty.call\n/******/ \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n/******/\n/******/ \t// __webpack_public_path__\n/******/ \t__webpack_require__.p = \"\";\n/******/\n/******/ \t// Load entry module and return exports\n/******/ \treturn __webpack_require__(__webpack_require__.s = 10);\n/******/ })\n/************************************************************************/\n/******/ ([\n/* 0 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\n\nvar hasOwn = Object.prototype.hasOwnProperty;\nvar toStr = Object.prototype.toString;\n\nvar isArray = function isArray(arr) {\n\tif (typeof Array.isArray === 'function') {\n\t\treturn Array.isArray(arr);\n\t}\n\n\treturn toStr.call(arr) === '[object Array]';\n};\n\nvar isPlainObject = function isPlainObject(obj) {\n\tif (!obj || toStr.call(obj) !== '[object Object]') {\n\t\treturn false;\n\t}\n\n\tvar hasOwnConstructor = hasOwn.call(obj, 'constructor');\n\tvar hasIsPrototypeOf = obj.constructor && obj.constructor.prototype && hasOwn.call(obj.constructor.prototype, 'isPrototypeOf');\n\t// Not own constructor property must be Object\n\tif (obj.constructor && !hasOwnConstructor && !hasIsPrototypeOf) {\n\t\treturn false;\n\t}\n\n\t// Own properties are enumerated firstly, so to speed up,\n\t// if last one is own, then all properties are own.\n\tvar key;\n\tfor (key in obj) { /**/ }\n\n\treturn typeof key === 'undefined' || hasOwn.call(obj, key);\n};\n\nmodule.exports = function extend() {\n\tvar options, name, src, copy, copyIsArray, clone;\n\tvar target = arguments[0];\n\tvar i = 1;\n\tvar length = arguments.length;\n\tvar deep = false;\n\n\t// Handle a deep copy situation\n\tif (typeof target === 'boolean') {\n\t\tdeep = target;\n\t\ttarget = arguments[1] || {};\n\t\t// skip the boolean and the target\n\t\ti = 2;\n\t}\n\tif (target == null || (typeof target !== 'object' && typeof target !== 'function')) {\n\t\ttarget = {};\n\t}\n\n\tfor (; i < length; ++i) {\n\t\toptions = arguments[i];\n\t\t// Only deal with non-null/undefined values\n\t\tif (options != null) {\n\t\t\t// Extend the base object\n\t\t\tfor (name in options) {\n\t\t\t\tsrc = target[name];\n\t\t\t\tcopy = options[name];\n\n\t\t\t\t// Prevent never-ending loop\n\t\t\t\tif (target !== copy) {\n\t\t\t\t\t// Recurse if we're merging plain objects or arrays\n\t\t\t\t\tif (deep && copy && (isPlainObject(copy) || (copyIsArray = isArray(copy)))) {\n\t\t\t\t\t\tif (copyIsArray) {\n\t\t\t\t\t\t\tcopyIsArray = false;\n\t\t\t\t\t\t\tclone = src && isArray(src) ? src : [];\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tclone = src && isPlainObject(src) ? src : {};\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\t// Never move original objects, clone them\n\t\t\t\t\t\ttarget[name] = extend(deep, clone, copy);\n\n\t\t\t\t\t// Don't bring in undefined values\n\t\t\t\t\t} else if (typeof copy !== 'undefined') {\n\t\t\t\t\t\ttarget[name] = copy;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\t// Return the modified object\n\treturn target;\n};\n\n\n/***/ }),\n/* 1 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\n\nvar Promise = __webpack_require__(5);\nvar extend = __webpack_require__(0);\n\nvar JWTUtils = __webpack_require__(7);\nvar RequestManager = __webpack_require__(8);\n\nvar VALID_RESPONSE_CODES = [200, 201, 202, 204];\n\n/**\n * A wrapper around the XMLHttpRequest object.\n * @param {object}  options         Options for the request.\n * @param {boolean} options.async   Whether to perform the request asynchronously\n * @param {string}  options.method  REST verb to use for the request.\n * @param {string}  options.url     URL for the request.\n */\nfunction Request (options) {\n\n  this.defaults = {\n    async: true,\n    method: 'GET',\n    ignoreAcceptHeader: false\n  };\n\n  // Create the XHR object for this request.\n  this.request = new XMLHttpRequest();\n\n  // Set up event listeners for this request.\n  this.setupListeners();\n\n  // Todo, merge some defaults with this.\n  this.options = extend(true, this.defaults, options);\n  this.maxRetrys = 3;\n  this.retrys = 0;\n};\n\n/**\n * Send the request and return a promise to resolve when the request is complete.\n * @return {Promise} A promise which resolves when the request is complete.\n */\nRequest.prototype.send = function () {\n  this.promise = Promise();\n\n  // Make sure a url is passed before attempting to make the request.\n  if (this.options.url) {\n    // Add the request to the queue and send it\n    this.makeRequest();\n  } else {\n    this.requestError('Request Error : a url is required to make the request.');\n  }\n\n  // Return the promise. Once complete send of the next request if necessary\n  return this.promise\n    .then(RequestManager._sendNextRequest);\n};\n\n/**\n * Send the request synchronously\n * @param {function} callback Function to call when the request is completed.\n * @return {object} The result of the request.\n */\nRequest.prototype.sendSync = function (callback) {\n\n  if (typeof callback === 'function') {\n    this.callback = callback;\n  }\n\n  // Make sure a url is passed before attempting to make the request.\n  if (this.options.url) {\n    // Add the request to the queue and send it\n    return this.makeRequest();\n  }\n\n  this.requestError('Request Error : a url is required to make the request.');\n};\n\n/**\n * Add event listeners to the XMLHttpRequest object.\n */\nRequest.prototype.setupListeners = function () {\n  this.request.onreadystatechange = this.readyStateChange.bind(this);\n};\n\n/**\n * Execute the open and construction of the XMLHttpRequest and its data\n */\nRequest.prototype.makeRequest = function () {\n  var postData = this.preparePostData(this.options.data);\n  var headers = this.options.headers;\n  var hasContentType = headers && headers.hasOwnProperty('Content-Type');\n\n  if (!postData.success) {\n    this.requestError('Request Error : error preparing post data.');\n    return;\n  }\n\n  this.request.open(this.options.method, this.options.url, this.options.async);\n\n  // Set before we apply the headers so it can be overridden on a per request basis.\n  if (!this.options.ignoreAcceptHeader) {\n    this.request.setRequestHeader('Accept', 'application/vnd.ingest.v1+json');\n  }\n\n  if (headers) {\n    this.applyRequestHeaders(headers);\n  }\n\n  // Make the token optional.\n  if (this.options.token) {\n\n    // If there is a token present ensure that it's still valid.\n    if (JWTUtils.isExpired(this.options.token)) {\n      this.requestError('Request Error : token is expired.');\n      return;\n    }\n\n    this.request.setRequestHeader('Authorization', this.options.token);\n\n  }\n\n  // Set the default content type when posting data.\n  if (postData.data && postData.type === 'JSON' && !hasContentType) {\n    this.request.setRequestHeader('Content-Type', 'application/vnd.ingest.v1+json');\n  }\n\n  // If the request should be made synchronously then we don't want to add it to the RequestManager.\n  if (!this.options.async) {\n\n    if (postData.data) {\n      this.request.send(postData.data);\n    } else {\n      this.request.send();\n    }\n\n    if (!this.isValidResponseCode(this.request.status)) {\n      this.requestError('Request Error : invalid response code : ' + this.request.status);\n    }\n\n  } else {\n    // If everything is good lets add it to the queue\n    RequestManager.addRequest([this.request, postData.data]);\n  }\n};\n\n/**\n * Stringify the post data if it is present.\n * @param  {object} data Object to be parsed.\n * @return {object}      Result object with the parsed string, and a success boolean flag.\n */\nRequest.prototype.preparePostData = function (data) {\n\n  var result = {\n    success: true,\n    data: data,\n    type: 'JSON'\n  };\n\n  // In the case of file uploads, all FormData to be passed to the request.\n  if (data instanceof FormData) {\n    result.type = 'FormData';\n    return result;\n  }\n\n  if (data instanceof Blob) {\n    result.type = 'File';\n    return result;\n  }\n\n  // If the data is populated, and its not already a string parse it.\n  if (data) {\n    try {\n      result.data = JSON.stringify(data);\n    } catch (error) {\n      result.success = false;\n      result.data = null;\n    }\n  }\n\n  return result;\n};\n\n/**\n * Apply any supplied headers to the request object.\n * @param  {object} headers Array of headers to apply to the request object.\n */\nRequest.prototype.applyRequestHeaders = function (headers) {\n\n  var key, i;\n  var keys = Object.keys(headers);\n  var keysLength = keys.length;\n\n  // Loop through and add the keys to the requestHeaders.\n  for (i = 0; i < keysLength; i++) {\n    key = keys[i];\n    this.request.setRequestHeader(key, headers[key]);\n  }\n\n};\n\n/**\n * Handle the completion of the request and fulfill the promise.\n * @param  {String} Response test of the request.\n */\nRequest.prototype.requestComplete = function (response) {\n\n  // Process the result.\n  this.response = this.processResponse(response);\n\n  if (!this.promise) {\n\n    if (typeof this.callback === 'function') {\n      this.callback(null, this.response);\n    }\n\n    return;\n  }\n\n  // Either resolve or reject the promise.\n  this.promise(!this.response.data.errors, [this.response]);\n\n};\n\n/**\n * Process the response and parse certain content types.\n * @param  {*}  response  Response data from request.\n * @return {*}            Processed response data.\n */\nRequest.prototype.processResponse = function (response) {\n  var responseType = this.request.getResponseHeader('Content-Type');\n  var result = response;\n  var hasContent = this.request.status !== 202 && this.request.status !== 204;\n\n  // Parse JSON if the result is JSON.\n  if (hasContent && responseType && responseType.indexOf('json') !== -1) {\n    try {\n      result = JSON.parse(response);\n    } catch (error) {\n      result = {\n        errors: 'JSON parsing failed. ' + error.stack\n      };\n    }\n  }\n\n  return {\n    data: result,\n    headers: this.request.getResponseHeader.bind(this.request),\n    statusCode: this.request.status\n  };\n\n};\n\n/**\n * Resolve the promise.\n * @param  {Object | String} message   Error object or error message.\n */\nRequest.prototype.requestError = function (message) {\n  var error;\n\n  // If there isn't a promise, in the case of a synchronous request, handle the error.\n  if (!this.promise) {\n\n    error = new Error(message);\n\n    if (typeof this.callback === 'function') {\n      this.callback(error);\n      return;\n    }\n\n    throw error;\n\n  }\n\n  // Reject the promise.\n  this.promise(false, [{\n    message: message,\n    headers: this.request.getAllResponseHeaders(),\n    statusCode: this.request.status\n  }]);\n};\n\n/**\n * Handle ready state change events.\n */\nRequest.prototype.readyStateChange = function () {\n  var resp, retryAfterTime;\n\n  retryAfterTime = 1000;\n\n  switch (this.request.readyState) {\n  case 4:\n\n    // If we get a rate limit error, lets just retry the request\n    if (this.request.status === 429 && (this.retrys < this.maxRetrys)) {\n      if (this.request.getResponseHeader('Retry-After')) {\n        retryAfterTime = this.request.getResponseHeader('Retry-After') * 1000;\n      }\n\n      this.retrys++;\n      setTimeout(this.makeRequest.bind(this), retryAfterTime);\n      return;\n    }\n\n    // Check if the final response code is valid\n    if (this.isValidResponseCode(this.request.status)) {\n      return this.requestComplete(this.request.responseText);\n    } else if (this.request.getResponseHeader('Content-Length') === '0') {\n      return this.requestError('Request Error: Invalid response code : ' + this.request.status);\n    }\n\n    // Special case error handling with response body\n    resp = this.processResponse(this.request.response);\n    this.requestError(resp.data);\n    break;\n  default:\n    // Silence is golden\n  }\n};\n\n/**\n * Validate the current response code to see if the request was a success.\n * @param  {Number}  responseCode Response Code.\n * @return {Boolean}              Should this be treated as a successful response code.\n */\nRequest.prototype.isValidResponseCode = function (responseCode) {\n\n  var result = false,\n    responseCodeCount = VALID_RESPONSE_CODES.length,\n    i;\n\n  // Check if the supplied code is in our list of valid codes.\n  for (i = 0; i < responseCodeCount; i++) {\n\n    if (responseCode === VALID_RESPONSE_CODES[i]) {\n      result = true;\n      break;\n    }\n\n  }\n\n  return result;\n\n};\n\n/**\n * Cancel the current XHR request.\n */\nRequest.prototype.cancel = function () {\n  // Remove the event listener.\n  this.request.onreadystatechange = null;\n  this.request.abort();\n  this.requestError('Request has been canceled.');\n};\n\nmodule.exports = Request;\n\n\n/***/ }),\n/* 2 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\n\nvar Promise = __webpack_require__(5);\nvar Utils = {};\n\n/**\n * Replace all tokens within a given template based on the given key/value pair.\n * @param  {string}     template    Template for the url.\n * @param  {object}     hash        Key/Value pair for replacing tokens in the template.\n *\n * @example\n * var tokens = {\n *  keyInTemplate: 'replacedWith'\n * };\n *\n * var template = '<%=keyInTemplate%>';\n *\n * var result = parseTokens(template, tokens);  // 'replacedWith'\n *\n * @return {string}                 Parsed string.\n */\nUtils.parseTokens = function (template, hash) {\n  var keys, i, length;\n\n  if (!template) {\n    return null;\n  }\n\n  keys = Object.keys(hash);\n  length = keys.length;\n\n  for (i = 0; i < length; i++) {\n    template = template.replace('<%=' + keys[i] + '%>', hash[keys[i]]);\n  }\n\n  return template;\n};\n\n/**\n * Wrapper function to wrap a value in either a reject or resolve.\n * @param  {boolean} state Rejection or Approval.\n * @param  {*}       value Value to pass back to the promise.\n * @return {Promise}       Promise/A+ spec promise.\n */\nUtils.promisify = function (state, value) {\n  var promise = Promise();\n\n  promise(state, [value]);\n\n  return promise;\n};\n\n/**\n * Wrap an array of promises and return when they have all completed.\n * @param   {Array}     promises  An array of promises to manage.\n * @param   {boolean}   paused    A boolean to pause the execution of the promises.\n * @return  {Promise}             A promise that is resolved when all of the promises have fulfilled.\n */\nUtils.series = function (promises, paused) {\n\n  var promisesCount = promises.length;\n  var all = Promise();\n\n  var state = {\n    total: promisesCount,\n    complete: 0,\n    responses: [],\n    promises: promises,\n    paused: true\n  };\n\n  all.pause = Utils._seriesPause.bind(undefined, all, state);\n  all.resume = Utils._seriesResume.bind(undefined, all, state);\n  all.cancel = Utils._seriesCancel.bind(undefined, all, state);\n\n  if (!paused) {\n    state.paused = false;\n    Utils._seriesCallPromise(promises[0], state, all);\n  }\n\n  return all;\n\n};\n\n/**\n * Call a promise and pass the complete and error functions.\n * @param  {Promise} promise Promise to execute on.\n * @param  {Object} state   Persistent state of the series of promises.\n */\nUtils._seriesCallPromise = function (promise, state, all) {\n  // Call the promise.\n  if (!state.paused) {\n    promise().then(Utils._seriesComplete.bind(undefined, all, state),\n      Utils._seriesError.bind(undefined, all, state));\n  }\n};\n\n/**\n * Manage the progress of the promises.\n * @private\n * @param  {Promise} all      All promise.\n * @param  {Object}  state    State object used to persist the promise count.\n * @param  {Object}  response Response of the promise being fulfilled.\n */\nUtils._seriesComplete = function (all, state, response) {\n\n  // Early return if this has been canceled.\n  if (state.canceled) {\n    return;\n  }\n\n  // Increment the complete promises.\n  state.complete++;\n  state.responses.push(response);\n\n  if (state.complete >= state.total) {\n    all(true, state.responses);\n  } else {\n    if (!state.paused) {\n      // Execute the next promise.\n      Utils._seriesCallPromise(state.promises[state.complete], state, all);\n    }\n  }\n\n};\n\n/**\n * Immediately reject the promise if there is an error.\n * @param  {Promise} all  All promise.\n * @param  {Object}  state    State object used to persist the promise count.\n * @param  {Object}  response Response of the promise being fulfilled.\n */\nUtils._seriesError = function (all, state, error) {\n  all(false, [error]);\n};\n\n/**\n * Pause the current series of promises.\n * @param  {Promise} all  All promise.\n * @param  {Object}  state    State object used to persist the promise count.\n */\nUtils._seriesPause = function (all, state) {\n  state.paused = true;\n};\n\n/**\n * Resume the current series of promises.\n * @param  {Promise} all  All promise.\n * @param  {Object}  state    State object used to persist the promise count.\n */\nUtils._seriesResume = function (all, state) {\n  state.paused = false;\n\n  if (state.complete !== state.total) {\n    Utils._seriesCallPromise(state.promises[state.complete], state, all);\n  }\n};\n\n/**\n * Resolve the promise but return an empty response.\n * @param  {Promise}  all     All promise.\n * @param  {Object}   state   State object used to persist the promise count.\n */\nUtils._seriesCancel = function (all, state) {\n  state.canceled = true;\n  all(true, []);\n};\n\n/**\n * Return true if a file provided matches a support image type.\n * @param  {file}     file  A reference to an image file.\n * @return {Boolean}        True if the type matches a known image type.\n */\nUtils.isImage = function (file) {\n  return file.type.indexOf('image') !== -1;\n};\n\nmodule.exports = Utils;\n\n\n/***/ }),\n/* 3 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\n\nvar extend = __webpack_require__(0);\nvar Request = __webpack_require__(1);\nvar utils = __webpack_require__(2);\n\n/**\n * Abstract Resource Class\n *\n * @param {object} options - SDK Options.\n * @class\n */\nfunction Resource (options) {\n\n  this.defaults = {\n    host: 'https://api.ingest.io',\n    all: '/<%=resource%>',\n    byId: '/<%=resource%>/<%=id%>',\n    trash: '/<%=resource%>?status=trashed',\n    deleteMethods: {\n      'permanent': '?permanent=1'\n    },\n    search: '/<%=resource%>?search=<%=input%>',\n    tokenSource: null,\n    resource: null\n  };\n\n  this.config = extend(true, {}, this.defaults, options);\n}\n\n/**\n * Proxy the request to token source to ensure a value is always returned.\n * @private\n * @return {string} Auth token.\n */\nResource.prototype._tokenSource = function () {\n  var result = null;\n\n  if (this.config.tokenSource) {\n    result = this.config.tokenSource.call();\n  }\n\n  return result;\n};\n\n/**\n * Return a list of the requested resource for the current user and network.\n * @param  {object}   headers   Object representing headers to apply to the request.\n * @return {promise}            A promise which resolves when the request is complete.\n */\nResource.prototype.getAll = function (headers) {\n  var request;\n  var url = utils.parseTokens(this.config.host + this.config.all, {\n    resource: this.config.resource\n  });\n\n  request = new Request({\n    url: url,\n    token: this._tokenSource(),\n    headers: headers\n  });\n\n  return request.send();\n};\n\n/**\n * Return a resource that matches the supplied id.\n * @param  {string}   id    Resource id.\n * @return {promise}        A promise which resolves when the request is complete.\n */\nResource.prototype.getById = function (id) {\n  var url, request;\n\n  if (typeof id !== 'string' || id.length <= 0) {\n    return utils.promisify(false,\n      'IngestSDK Resource getById requires a valid id passed as a string.');\n  }\n\n  url = utils.parseTokens(this.config.host + this.config.byId, {\n    resource: this.config.resource,\n    id: id\n  });\n\n  request = new Request({\n    url: url,\n    token: this._tokenSource()\n  });\n\n  return request.send();\n};\n\n/**\n * Return the resources currently in the trash.\n * @param  {object} headers Headers to be passed along with the request for pagination.\n * @return {promise}         A promise which resolves when the request is complete.\n */\nResource.prototype.getTrashed = function (headers) {\n  var request;\n  var url = utils.parseTokens(this.config.host + this.config.trash, {\n    resource: this.config.resource\n  });\n\n  request = new Request({\n    url: url,\n    token: this._tokenSource(),\n    headers: headers\n  });\n\n  return request.send();\n};\n\n/**\n * Add a new resource.\n * @param   {object}  resource  An object representing the resource to add.\n * @return  {promise}           A promise which resolves when the request is complete.\n */\nResource.prototype.add = function (resource) {\n  var url, request;\n\n  if (typeof resource !== 'object') {\n    return utils.promisify(false,\n      'IngestSDK Resource add requires a resource passed as an object.');\n  }\n\n  url = utils.parseTokens(this.config.host + this.config.all, {\n    resource: this.config.resource\n  });\n\n  request = new Request({\n    url: url,\n    token: this._tokenSource(),\n    method: 'POST',\n    data: resource\n  });\n\n  return request.send();\n};\n\n/**\n * Update an existing resource with new content.\n * @param  {object|array} resource  An object or an array of objects representing the resource(s) to be updated.\n * @return {promise}                A promise which resolves when the request is complete.\n */\nResource.prototype.update = function (resource) {\n  var request, data, url;\n\n  if (typeof resource !== 'object') {\n    return utils.promisify(false,\n      'IngestSDK Resource update requires a resource to be passed as an object.');\n  }\n\n  data = resource;\n\n  url = utils.parseTokens(this.config.host + this.config.byId, {\n    resource: this.config.resource,\n    id: resource.id\n  });\n\n  request = new Request({\n    url: url,\n    token: this._tokenSource(),\n    method: 'PATCH',\n    data: data\n  });\n\n  return request.send();\n};\n\n/**\n * Delete an existing resource\n * @param  {string}   resource  The id for the resource to be deleted.\n * @param  {boolean}  async     A flag to indicate if this should be an async request to delete.\n *\n * @return {Promise}            A promise which resolves when the request is complete.\n */\nResource.prototype.delete = function (resource, async) {\n  if (typeof async !== 'boolean') {\n    async = true;\n  }\n\n  if (typeof resource !== 'string') {\n    return utils.promisify(false,\n      'IngestSDK Resource delete requires a resource to be passed as a string.');\n  }\n\n  return this._deleteResource(resource, false, async);\n};\n\n/**\n * Permanently delete an existing resource.\n * @param  {string}   resource  The id for the resource to be deleted.\n * @param  {boolean}  async     A flag to indicate if this should be an async request to delete.\n *\n * @return {Promise}            A promise which resolves when the request is complete.\n */\nResource.prototype.permanentDelete = function (resource, async) {\n  if (typeof async !== 'boolean') {\n    async = true;\n  }\n\n  if (typeof resource !== 'string') {\n    return utils.promisify(false,\n      'IngestSDK Resource delete requires a resource to be passed as a string.');\n  }\n\n  return this._deleteResource(resource, true, async);\n};\n\n/**\n * Delete a single resource\n * @private\n * @param   {object}    resource    The id of the resource to be deleted.\n * @param   {boolean}   permanent   A flag to permanently delete each video.\n * @return  {promise}               A promise which resolves when the request is complete.\n */\nResource.prototype._deleteResource = function (resource, permanent) {\n  var request;\n\n  var url = utils.parseTokens(this.config.host + this.config.byId, {\n    resource: this.config.resource,\n    id: resource\n  });\n\n  if (permanent === true) {\n    url += this.config.deleteMethods.permanent;\n  }\n\n  request = new Request({\n    url: url,\n    token: this._tokenSource(),\n    method: 'DELETE'\n  });\n\n  return request.send();\n};\n\n/**\n * Delete an existing resource\n * @param  {string}     resource    The id for the resource to be deleted.\n * @param  {function}   callback    A Synchronous callback for handling any errors, or working with the http response.\n */\nResource.prototype.deleteSync = function (resource, callback) {\n\n  if (typeof resource !== 'string') {\n    callback(new Error('IngestSDK Resource delete requires a resource to be passed as a string.'));\n    return;\n  }\n\n  this._deleteResourceSync(resource, false, callback);\n\n};\n\n/**\n * Permanently delete an existing resource.\n * @param   {string}    resource    The id for the resource to be deleted.\n * @param   {function}  callback    A Synchronous callback for handling any errors, or working with the http response.\n */\nResource.prototype.permanentDeleteSync = function (resource, callback) {\n\n  if (typeof resource !== 'string') {\n    callback(new Error('IngestSDK Resource delete requires a resource to be passed as a string.'));\n    return;\n  }\n\n  this._deleteResourceSync(resource, true, callback);\n\n};\n\n/**\n * Delete a single resource synchronously\n * @private\n * @param   {object}    resource    The id of the resource to be deleted.\n * @param   {boolean}   permanent   A flag to permanently delete each video.\n * @param   {function}  callback    A Synchronous callback for handling any errors, or working with the http response.\n */\nResource.prototype._deleteResourceSync = function (resource, permanent, callback) {\n  var request;\n\n  var url = utils.parseTokens(this.config.host + this.config.byId, {\n    resource: this.config.resource,\n    id: resource\n  });\n\n  if (permanent === true) {\n    url += this.config.deleteMethods.permanent;\n  }\n\n  request = new Request({\n    url: url,\n    async: false,\n    token: this._tokenSource(),\n    method: 'DELETE'\n  });\n\n  request.sendSync(callback);\n};\n\n/**\n * Return a subset of items that match the search terms.\n * @param  {string}   input     The search terms to match against.\n * @param  {object}   headers   The headers to be passed to the request.\n * @param  {boolean}  trash     Should we be searching the trash.\n * @return {Promise}          A promise which resolves when the request is complete.\n */\nResource.prototype.search = function (input, headers, status) {\n  var url, request;\n\n  if (typeof input !== 'string') {\n    return utils.promisify(false,\n      'IngestSDK Resource search requires search input to be passed as a string.');\n  }\n\n  url = utils.parseTokens(this.config.host + this.config.search, {\n    resource: this.config.resource,\n    input: encodeURIComponent(input)\n  });\n\n  // If there is a status and it\n  if (status) {\n    if (typeof status !== 'string') {\n      return utils.promisify(false,\n        'IngestSDK Resource search requires a valid status to be passed as a string.');\n    }\n\n    url = url + '&status=' + status;\n  }\n\n  request = new Request({\n    url: url,\n    token: this._tokenSource(),\n    headers: headers\n  });\n\n  return request.send();\n};\n\n/**\n * Return a subset of items that match the search terms in the trash.\n * @param  {string} input    The search terms to match against.\n * @param  {object} headers  The headers to be passed to the request.\n * @return {Promise}          A promise which resolves when the request is complete.\n */\nResource.prototype.searchTrash = function (input, headers) {\n  return this.search(input, headers, 'trashed');\n};\n\n/**\n * Get the total count of resources.\n * @return {promise} A promise which resolves when the request is complete.\n */\nResource.prototype.count = function () {\n  var request;\n  var url = utils.parseTokens(this.config.host + this.config.all, {\n    resource: this.config.resource\n  });\n\n  request = new Request({\n    url: url,\n    token: this._tokenSource(),\n    method: 'HEAD'\n  });\n\n  return request.send()\n    .then(this._handleCountResponse);\n};\n\n/**\n * Get the total count of resources in the trash.\n * @return {promise} A promise which resolves when the request is complete.\n */\nResource.prototype.trashCount = function () {\n  var request;\n  var url = utils.parseTokens(this.config.host + this.config.trash, {\n    resource: this.config.resource\n  });\n\n  request = new Request({\n    url: url,\n    token: this._tokenSource(),\n    method: 'HEAD'\n  });\n\n  return request.send()\n    .then(this._handleCountResponse);\n};\n\n/**\n * Return the resource count from the response.\n * @private\n * @param  {object} response Request response object.\n * @return {number}          The resource count.\n */\nResource.prototype._handleCountResponse = function (response) {\n  return parseInt(response.headers('Resource-Count'), 10);\n};\n\nmodule.exports = Resource;\n\n\n/***/ }),\n/* 4 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\n\n/**\n * Constants for our resource types\n */\nmodule.exports = {\n  'EVENTS': 'events',\n  'INPUTS': 'encoding/inputs',\n  'JOBS': 'encoding/jobs',\n  'NETWORKS': 'networks',\n  'PROFILES': 'encoding/profiles',\n  'ROLES': 'roles',\n  'USERS': 'users',\n  'VIDEOS': 'videos'\n};\n\n\n/***/ }),\n/* 5 */\n/***/ (function(module, exports, __webpack_require__) {\n\n/* WEBPACK VAR INJECTION */(function(setImmediate, process) {var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;/*\n * PinkySwear.js 2.2.2 - Minimalistic implementation of the Promises/A+ spec\n * \n * Public Domain. Use, modify and distribute it any way you like. No attribution required.\n *\n * NO WARRANTY EXPRESSED OR IMPLIED. USE AT YOUR OWN RISK.\n *\n * PinkySwear is a very small implementation of the Promises/A+ specification. After compilation with the\n * Google Closure Compiler and gzipping it weighs less than 500 bytes. It is based on the implementation for \n * Minified.js and should be perfect for embedding. \n *\n *\n * PinkySwear has just three functions.\n *\n * To create a new promise in pending state, call pinkySwear():\n *         var promise = pinkySwear();\n *\n * The returned object has a Promises/A+ compatible then() implementation:\n *          promise.then(function(value) { alert(\"Success!\"); }, function(value) { alert(\"Failure!\"); });\n *\n *\n * The promise returned by pinkySwear() is a function. To fulfill the promise, call the function with true as first argument and\n * an optional array of values to pass to the then() handler. By putting more than one value in the array, you can pass more than one\n * value to the then() handlers. Here an example to fulfill a promsise, this time with only one argument: \n *         promise(true, [42]);\n *\n * When the promise has been rejected, call it with false. Again, there may be more than one argument for the then() handler:\n *         promise(true, [6, 6, 6]);\n *         \n * You can obtain the promise's current state by calling the function without arguments. It will be true if fulfilled,\n * false if rejected, and otherwise undefined.\n * \t\t   var state = promise(); \n * \n * https://github.com/timjansen/PinkySwear.js\n */\n(function (root, factory) {\n\tif (true) {\n\t\t!(__WEBPACK_AMD_DEFINE_ARRAY__ = [], __WEBPACK_AMD_DEFINE_FACTORY__ = (factory),\n\t\t\t\t__WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ?\n\t\t\t\t(__WEBPACK_AMD_DEFINE_FACTORY__.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__)) : __WEBPACK_AMD_DEFINE_FACTORY__),\n\t\t\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n\t} else if (typeof module === 'object' && module.exports) {\n\t\tmodule.exports = factory();\n\t} else {\n\t\troot.pinkySwear = factory();\n\t}\n}(this, function() {\n\tvar undef;\n\n\tfunction isFunction(f) {\n\t\treturn typeof f == 'function';\n\t}\n\tfunction isObject(f) {\n\t\treturn typeof f == 'object';\n\t}\n\tfunction defer(callback) {\n\t\tif (typeof setImmediate != 'undefined')\n\t\t\tsetImmediate(callback);\n\t\telse if (typeof process != 'undefined' && process['nextTick'])\n\t\t\tprocess['nextTick'](callback);\n\t\telse\n\t\t\tsetTimeout(callback, 0);\n\t}\n\n\treturn function pinkySwear(extend) {\n\t\tvar state;           // undefined/null = pending, true = fulfilled, false = rejected\n\t\tvar values = [];     // an array of values as arguments for the then() handlers\n\t\tvar deferred = [];   // functions to call when set() is invoked\n\n\t\tvar set = function(newState, newValues) {\n\t\t\tif (state == null && newState != null) {\n\t\t\t\tstate = newState;\n\t\t\t\tvalues = newValues;\n\t\t\t\tif (deferred.length)\n\t\t\t\t\tdefer(function() {\n\t\t\t\t\t\tfor (var i = 0; i < deferred.length; i++)\n\t\t\t\t\t\t\tdeferred[i]();\n\t\t\t\t\t});\n\t\t\t}\n\t\t\treturn state;\n\t\t};\n\n\t\tset['then'] = function (onFulfilled, onRejected) {\n\t\t\tvar promise2 = pinkySwear(extend);\n\t\t\tvar callCallbacks = function() {\n\t    \t\ttry {\n\t    \t\t\tvar f = (state ? onFulfilled : onRejected);\n\t    \t\t\tif (isFunction(f)) {\n\t\t   \t\t\t\tfunction resolve(x) {\n\t\t\t\t\t\t    var then, cbCalled = 0;\n\t\t   \t\t\t\t\ttry {\n\t\t\t\t   \t\t\t\tif (x && (isObject(x) || isFunction(x)) && isFunction(then = x['then'])) {\n\t\t\t\t\t\t\t\t\t\tif (x === promise2)\n\t\t\t\t\t\t\t\t\t\t\tthrow new TypeError();\n\t\t\t\t\t\t\t\t\t\tthen['call'](x,\n\t\t\t\t\t\t\t\t\t\t\tfunction() { if (!cbCalled++) resolve.apply(undef,arguments); } ,\n\t\t\t\t\t\t\t\t\t\t\tfunction(value){ if (!cbCalled++) promise2(false,[value]);});\n\t\t\t\t   \t\t\t\t}\n\t\t\t\t   \t\t\t\telse\n\t\t\t\t   \t\t\t\t\tpromise2(true, arguments);\n\t\t   \t\t\t\t\t}\n\t\t   \t\t\t\t\tcatch(e) {\n\t\t   \t\t\t\t\t\tif (!cbCalled++)\n\t\t   \t\t\t\t\t\t\tpromise2(false, [e]);\n\t\t   \t\t\t\t\t}\n\t\t   \t\t\t\t}\n\t\t   \t\t\t\tresolve(f.apply(undef, values || []));\n\t\t   \t\t\t}\n\t\t   \t\t\telse\n\t\t   \t\t\t\tpromise2(state, values);\n\t\t\t\t}\n\t\t\t\tcatch (e) {\n\t\t\t\t\tpromise2(false, [e]);\n\t\t\t\t}\n\t\t\t};\n\t\t\tif (state != null)\n\t\t\t\tdefer(callCallbacks);\n\t\t\telse\n\t\t\t\tdeferred.push(callCallbacks);\n\t\t\treturn promise2;\n\t\t};\n        if(extend){\n            set = extend(set);\n        }\n\t\treturn set;\n\t};\n}));\n\n\n/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(11).setImmediate, __webpack_require__(6)))\n\n/***/ }),\n/* 6 */\n/***/ (function(module, exports) {\n\n// shim for using process in browser\nvar process = module.exports = {};\n\n// cached from whatever global is present so that test runners that stub it\n// don't break things.  But we need to wrap it in a try catch in case it is\n// wrapped in strict mode code which doesn't define any globals.  It's inside a\n// function because try/catches deoptimize in certain engines.\n\nvar cachedSetTimeout;\nvar cachedClearTimeout;\n\nfunction defaultSetTimout() {\n    throw new Error('setTimeout has not been defined');\n}\nfunction defaultClearTimeout () {\n    throw new Error('clearTimeout has not been defined');\n}\n(function () {\n    try {\n        if (typeof setTimeout === 'function') {\n            cachedSetTimeout = setTimeout;\n        } else {\n            cachedSetTimeout = defaultSetTimout;\n        }\n    } catch (e) {\n        cachedSetTimeout = defaultSetTimout;\n    }\n    try {\n        if (typeof clearTimeout === 'function') {\n            cachedClearTimeout = clearTimeout;\n        } else {\n            cachedClearTimeout = defaultClearTimeout;\n        }\n    } catch (e) {\n        cachedClearTimeout = defaultClearTimeout;\n    }\n} ())\nfunction runTimeout(fun) {\n    if (cachedSetTimeout === setTimeout) {\n        //normal enviroments in sane situations\n        return setTimeout(fun, 0);\n    }\n    // if setTimeout wasn't available but was latter defined\n    if ((cachedSetTimeout === defaultSetTimout || !cachedSetTimeout) && setTimeout) {\n        cachedSetTimeout = setTimeout;\n        return setTimeout(fun, 0);\n    }\n    try {\n        // when when somebody has screwed with setTimeout but no I.E. maddness\n        return cachedSetTimeout(fun, 0);\n    } catch(e){\n        try {\n            // When we are in I.E. but the script has been evaled so I.E. doesn't trust the global object when called normally\n            return cachedSetTimeout.call(null, fun, 0);\n        } catch(e){\n            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error\n            return cachedSetTimeout.call(this, fun, 0);\n        }\n    }\n\n\n}\nfunction runClearTimeout(marker) {\n    if (cachedClearTimeout === clearTimeout) {\n        //normal enviroments in sane situations\n        return clearTimeout(marker);\n    }\n    // if clearTimeout wasn't available but was latter defined\n    if ((cachedClearTimeout === defaultClearTimeout || !cachedClearTimeout) && clearTimeout) {\n        cachedClearTimeout = clearTimeout;\n        return clearTimeout(marker);\n    }\n    try {\n        // when when somebody has screwed with setTimeout but no I.E. maddness\n        return cachedClearTimeout(marker);\n    } catch (e){\n        try {\n            // When we are in I.E. but the script has been evaled so I.E. doesn't  trust the global object when called normally\n            return cachedClearTimeout.call(null, marker);\n        } catch (e){\n            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error.\n            // Some versions of I.E. have different rules for clearTimeout vs setTimeout\n            return cachedClearTimeout.call(this, marker);\n        }\n    }\n\n\n\n}\nvar queue = [];\nvar draining = false;\nvar currentQueue;\nvar queueIndex = -1;\n\nfunction cleanUpNextTick() {\n    if (!draining || !currentQueue) {\n        return;\n    }\n    draining = false;\n    if (currentQueue.length) {\n        queue = currentQueue.concat(queue);\n    } else {\n        queueIndex = -1;\n    }\n    if (queue.length) {\n        drainQueue();\n    }\n}\n\nfunction drainQueue() {\n    if (draining) {\n        return;\n    }\n    var timeout = runTimeout(cleanUpNextTick);\n    draining = true;\n\n    var len = queue.length;\n    while(len) {\n        currentQueue = queue;\n        queue = [];\n        while (++queueIndex < len) {\n            if (currentQueue) {\n                currentQueue[queueIndex].run();\n            }\n        }\n        queueIndex = -1;\n        len = queue.length;\n    }\n    currentQueue = null;\n    draining = false;\n    runClearTimeout(timeout);\n}\n\nprocess.nextTick = function (fun) {\n    var args = new Array(arguments.length - 1);\n    if (arguments.length > 1) {\n        for (var i = 1; i < arguments.length; i++) {\n            args[i - 1] = arguments[i];\n        }\n    }\n    queue.push(new Item(fun, args));\n    if (queue.length === 1 && !draining) {\n        runTimeout(drainQueue);\n    }\n};\n\n// v8 likes predictible objects\nfunction Item(fun, array) {\n    this.fun = fun;\n    this.array = array;\n}\nItem.prototype.run = function () {\n    this.fun.apply(null, this.array);\n};\nprocess.title = 'browser';\nprocess.browser = true;\nprocess.env = {};\nprocess.argv = [];\nprocess.version = ''; // empty string to avoid regexp issues\nprocess.versions = {};\n\nfunction noop() {}\n\nprocess.on = noop;\nprocess.addListener = noop;\nprocess.once = noop;\nprocess.off = noop;\nprocess.removeListener = noop;\nprocess.removeAllListeners = noop;\nprocess.emit = noop;\nprocess.prependListener = noop;\nprocess.prependOnceListener = noop;\n\nprocess.listeners = function (name) { return [] }\n\nprocess.binding = function (name) {\n    throw new Error('process.binding is not supported');\n};\n\nprocess.cwd = function () { return '/' };\nprocess.chdir = function (dir) {\n    throw new Error('process.chdir is not supported');\n};\nprocess.umask = function() { return 0; };\n\n\n/***/ }),\n/* 7 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\n\n/**\n * UTILS for dealing with jwt tokens.\n */\n\n/**\n * Parse the payload out of the JWT token.\n * @param  {string} token JWT Token.\n * @return {object}       Parsed payload object.\n */\nfunction parseTokenPayload (token) {\n  var payload;\n  var parts = token.split('.');\n\n  // Return false if the token is invalid.\n  if (parts.length <= 1) {\n    return false;\n  }\n\n  // Decode the payload portion.\n  payload = window.atob(parts[1]);\n\n  // Parse it as JSON\n  payload = JSON.parse(payload);\n\n  return payload;\n};\n\n/**\n * Return true if the provided token has expired.\n * @param  {string}  token JWT Token\n * @return {Boolean}       True if expired.\n */\nmodule.exports.isExpired = function (token) {\n  var data, exp, result, now;\n\n  data = parseTokenPayload(token);\n\n  result = true;\n\n  // Return true if the token does not parse properly.\n  if (!data) {\n    return result;\n  }\n\n  exp = data.exp;\n\n  // Get the unix timestamp in seconds.\n  now = new Date();\n  now = now.getTime() / 1000;\n\n  if (!exp) {\n    return result;\n  }\n\n  // If the expiry data is still in the future.\n  if (now < exp) {\n    result = false;\n  }\n\n  return result;\n\n};\n\n\n/***/ }),\n/* 8 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\n\n/**\n * Manages request objects in a queueing system\n */\nfunction RequestManager () {\n  this.pending = [];\n  this.activeRequests = 0;\n  this.currentSetRequests = 0;\n  this.lastRequestSetStart = null;\n  this.resetTimer = null;\n\n  this._sendNextRequest = this.sendNextRequest.bind(this);\n  this._resetCurrentSet = this.resetCurrentSet.bind(this);\n};\n\n/**\n * Sets the max requests for the Request Manager\n *\n * @param {number} maxRequests - The maximum allowed requests at one time\n */\nRequestManager.prototype.setMaxRequests = function (maxRequests) {\n  this.maxRequests = maxRequests;\n};\n\n/**\n * Resets the current set and sets the last request start to the passed in value\n *\n * @param {any} newDate - The new date timestamp or null\n */\nRequestManager.prototype.resetCurrentSet = function (newDate) {\n  this.currentSetRequests = 0;\n  this.lastRequestSetStart = newDate;\n};\n\n/**\n * Sends a request or adds it to the queue if it can't be sent\n *\n * @param {array} requestData - The request object and request data in an array\n *\n * @return\n */\nRequestManager.prototype.addRequest = function (requestData) {\n  // If we have too many out then queue the request\n  if (this.activeRequests >= this.maxRequests) {\n    this.pending.push(requestData);\n    return;\n  }\n\n  // Otherwise send the request\n  this.sendRequest(requestData[0], requestData[1]);\n};\n\n/**\n * Sends the request\n *\n * @param {object} request - The request object\n * @param {object} data    - The request data\n */\nRequestManager.prototype.sendRequest = function (request, data) {\n\n  // If there is a reset timer, we need to clear it so its not run\n  if (this.resetTimer) {\n    clearTimeout(this.resetTimer);\n  }\n\n  // If this request is the start of a set, lets reset the set data\n  if (this.currentSetRequests % this.maxRequests === 0) {\n    this.resetCurrentSet(Date.now());\n  }\n\n  // Increment counters\n  this.activeRequests++;\n  this.currentSetRequests++;\n\n  // Send data\n  if (data) {\n    request.send(data);\n  } else {\n    request.send();\n  }\n};\n\n/**\n * Sends the next available request if applicable\n *\n * @param {object}  response - The http response data\n *\n * @return {object} response - The http response data\n */\nRequestManager.prototype.sendNextRequest = function (response) {\n  var XRatelimitRemaining, moreRequests, requestData, delay;\n\n  // Deincrement counter\n  this.activeRequests--;\n\n  // No more to send, reset data if enough time passes\n  if (this.pending.length === 0) {\n\n    // If i don't have a timer already and have no active requests\n    if (!this.resetTimer && this.activeRequests === 0) {\n      // Set the reset timer so new calls are in sync\n      this.resetTimer = setTimeout(this._resetCurrentSet, this.XRatelimitLimit * 1000);\n    }\n\n    // Return response\n    return response;\n  }\n\n  // Only run the first time to get the limits\n  if (!this.XRatelimitReset) {\n    // Set the reset and the limit\n    this.XRatelimitReset = response.headers('X-Ratelimit-Reset');\n    this.XRatelimitLimit = response.headers('X-Ratelimit-Limit');\n\n    // If the limit returned from the server is less than the set max limit, lets override it\n    if (this.XRatelimitLimit < this.maxRequests) {\n      this.maxRequests = this.XRatelimitLimit;\n    }\n  }\n\n  // Get my next request and requests remaining\n  requestData = this.pending.shift();\n  XRatelimitRemaining = response.headers('X-Ratelimit-Remaining');\n\n  // See if I can send more requests right now\n  moreRequests = (this.activeRequests < this.maxRequests) && (XRatelimitRemaining > 0);\n\n  // If I can send more requests send them\n  if (moreRequests) {\n    this.sendRequest(requestData[0], requestData[1]);\n  } else {\n    // Otherwise lets delay so these get sent in the next tick\n    delay = (Date.now() - this.lastRequestSetStart) < 100 ? 100 : (Date.now() - this.lastRequestSetStart);\n\n    // Delay the call of the next send request\n    setTimeout(this.sendRequest.bind(this, requestData[0], requestData[1]), delay);\n  }\n\n  // Return the response\n  return response;\n};\n\nmodule.exports = new RequestManager();\n\n\n/***/ }),\n/* 9 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\n\nvar Resource = __webpack_require__(3);\nvar Request = __webpack_require__(1);\nvar utils = __webpack_require__(2);\nvar extend = __webpack_require__(0);\n\n/**\n * Abstract PlaybackContent Class\n *\n * @param {object} options - SDK Options.\n * @class\n * @extends Resource\n */\nfunction PlaybackContent (options) {\n\n  var overrides = {\n    thumbnail: '/<%=resource%>/<%=id%>/thumbnail',\n    thumbnails: '/<%=resource%>/<%=id%>/thumbnails',\n    deleteThumbnail: '/<%=resource%>/<%=id%>/thumbnail/<%=thumbnailId%>'\n  };\n\n  options = extend(true, {}, overrides, options);\n\n  Resource.call(this, options);\n\n};\n\n// This extends the base class of 'Resource'.\nPlaybackContent.prototype = Object.create(Resource.prototype);\nPlaybackContent.prototype.constructor = PlaybackContent;\n\n/**\n * Retrieve all thumbnails for a provided resource id.\n * @param {string}    id    ID of the resource to retrieve thumbnails for.\n * @return {promise}        A promise which resolves when the request is complete.\n */\nPlaybackContent.prototype.getThumbnails = function (id) {\n  var url, request;\n\n  if (typeof id !== 'string') {\n    return utils.promisify(false,\n      'IngestSDK PlaybackContent getThumbnails requires an id to be passed as a string.');\n  }\n\n  url = utils.parseTokens(this.config.host + this.config.thumbnails, {\n    resource: this.config.resource,\n    id: id\n  });\n\n  request = new Request({\n    url: url,\n    token: this._tokenSource()\n  });\n\n  return request.send();\n};\n\n/**\n * Add external images to the resource id.\n * @param   {string}          id      ID of the resource to add the external thumbnails to.\n * @param   {string|array}    images  A path to the image, or an array of image paths.\n * @return  {promise}                 A promise which resolves when the request is complete.\n */\nPlaybackContent.prototype.addExternalThumbnails = function (id, images) {\n\n  var url, request;\n\n  var imagesToAdd = [];\n\n  if (typeof id !== 'string') {\n    return utils.promisify(false,\n      'IngestSDK PlaybackContent addExternal requires an id to be passed as a string.');\n  }\n\n  // Early return if the types do not match what we are expecting.\n  if (!Array.isArray(images) && typeof images !== 'string') {\n    return utils.promisify(false,\n      'IngestSDK PlaybackContent addExternal requires images as a string or an array of strings.');\n  }\n\n  // If we already have an array replace the outgoing array, otherwise push the image path to the array.\n  // This ensures we are always passing an array.\n  if (Array.isArray(images)) {\n    imagesToAdd = images;\n  } else {\n    imagesToAdd.push(images);\n  }\n\n  url = utils.parseTokens(this.config.host + this.config.thumbnails, {\n    resource: this.config.resource,\n    id: id\n  });\n\n  request = new Request({\n    method: 'POST',\n    url: url,\n    token: this._tokenSource(),\n    data: imagesToAdd\n  });\n\n  return request.send();\n\n};\n\n/**\n * Add external images to the resource id.\n * @param   {string}        id        ID of the resource to add the external thumbnails to.\n * @param   {file}          image     A JavaScript File interface representing the image to upload.\n * @return  {promise}                 A promise which resolves when the request is complete.\n */\nPlaybackContent.prototype.uploadThumbnail = function (id, image) {\n\n  var request, url, formData;\n\n  if (typeof id !== 'string') {\n    return utils.promisify(false,\n      'IngestSDK PlaybackContent uploadThumbnail requires an id to be passed as a string.');\n  }\n\n  // Early return if the types do not match what we are expecting.\n  if (!image || !(image instanceof File) || !utils.isImage(image)) {\n    return utils.promisify(false,\n      'IngestSDK PlaybackContent uploadThumbnail requires a valid image.');\n  }\n\n  url = utils.parseTokens(this.config.host + this.config.thumbnail, {\n    resource: this.config.resource,\n    id: id\n  });\n\n  // Create a new FormData object so the request is properly sent as multipart.\n  formData = new FormData();\n  formData.append('image', image);\n\n  request = new Request({\n    method: 'POST',\n    url: url,\n    token: this._tokenSource(),\n    data: formData\n  });\n\n  return request.send();\n\n};\n\n/**\n * Remove an external thumbnail image.\n *\n * @param   {string}    id            ID of the resource to remove the thumbnail from.\n * @param   {string}    thumbnailId   ID of the thumbnail to remove from the resource.\n * @return  {promise}                 A promise which resolves when the request is complete.\n */\nPlaybackContent.prototype.deleteThumbnail = function (id, thumbnailId) {\n\n  var request, url;\n\n  if (typeof id !== 'string') {\n    return utils.promisify(false,\n      'IngestSDK PlaybackContent deleteThumbnail requires an id to be passed as a string.');\n  }\n\n  if (typeof thumbnailId !== 'string') {\n    return utils.promisify(false,\n      'IngestSDK PlaybackContent deleteThumbanil requires a thumbnailId to be passed as a string.');\n  }\n\n  url = utils.parseTokens(this.config.host + this.config.deleteThumbnail, {\n    resource: this.config.resource,\n    id: id,\n    thumbnailId: thumbnailId\n  });\n\n  request = new Request({\n    method: 'DELETE',\n    url: url,\n    token: this._tokenSource()\n  });\n\n  return request.send();\n\n};\n\nmodule.exports = PlaybackContent;\n\n\n/***/ }),\n/* 10 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\n\nvar extend = __webpack_require__(0);\nvar Request = __webpack_require__(1);\nvar JWTUtils = __webpack_require__(7);\nvar utils = __webpack_require__(2);\nvar Uploader = __webpack_require__(14);\nvar RequestManager = __webpack_require__(8);\n\nvar Resource = __webpack_require__(3);\nvar Media = __webpack_require__(9);\nvar Users = __webpack_require__(15);\nvar Networks = __webpack_require__(16);\nvar Videos = __webpack_require__(17);\nvar Jobs = __webpack_require__(18);\nvar Profiles = __webpack_require__(19);\nvar Inputs = __webpack_require__(20);\nvar Events = __webpack_require__(21);\nvar Roles = __webpack_require__(22);\n\n/**\n * IngestAPI Object\n * @class\n * @param {object}  options        Options to override the default.\n * @param {string}  options.host   Override the default live host.\n * @param {string}  options.token  Auth token to use for requests.\n */\nfunction IngestSDK (options) {\n  var resourceConfig;\n\n  this.defaults = {\n    'maxRequests': 6, // Active Requests\n    'host': 'https://api.ingest.io'\n  };\n\n  // Create a config object by extending the defaults with the pass options.\n  this.config = extend(true, {}, this.defaults, options);\n\n  this.token = null;\n\n  if (this.config.token) {\n    // Store the token for future use.\n    this.setToken(this.config.token);\n  }\n\n  /* Exposed for testing */\n  this.request = Request;\n  this.JWTUtils = JWTUtils;\n  this.utils = utils;\n  this.resource = Resource;\n  this.playbackContent = Media;\n  this.usersResource = Users;\n  this.networksResource = Networks;\n  this.videosResource = Videos;\n  this.jobsResource = Jobs;\n  this.profilesResource = Profiles;\n  this.inputsResource = Inputs;\n  this.uploader = Uploader;\n  this.eventsResource = Events;\n  this.rolesResource = Roles;\n\n  // Set my max requests\n  this.requestManager = RequestManager;\n  this.setMaxRequests(this.config.maxRequests);\n\n  resourceConfig = {\n    host: this.config.host,\n    tokenSource: this.getToken.bind(this)\n  };\n\n  this.videos = new Videos(resourceConfig);\n  this.inputs = new Inputs(resourceConfig);\n  this.users = new Users(resourceConfig);\n  this.networks = new Networks(resourceConfig);\n  this.profiles = new Profiles(resourceConfig);\n  this.jobs = new Jobs(resourceConfig);\n  this.events = new Events(resourceConfig);\n  this.roles = new Roles(resourceConfig);\n}\n\n/** Token **/\n/**\n * Set the auth token to use.\n * @param   {String}        token Auth token to use.\n */\nIngestSDK.prototype.setToken = function (token) {\n\n  // Make sure a valid value is passed.\n  if (typeof token !== 'string') {\n    throw new Error('IngestSDK requires an authentication token passed as a string.');\n  }\n\n  this.token = token;\n};\n\n/**\n * Sets the maxrequests in the Request Manager\n * @param {number} max - The max amount of requests at once\n */\nIngestSDK.prototype.setMaxRequests = function (max) {\n  // Make sure we have a valid number.\n  if (typeof max !== 'number' || max < 1) {\n    throw new Error('IngestSDK requires a maxRequest count to be passed as a positive number.');\n  }\n\n  RequestManager.setMaxRequests(max);\n};\n\n/**\n * Return the current auth token.\n * @return  {String}        Current auth token, or null if a token has not been set.\n */\nIngestSDK.prototype.getToken = function () {\n  return this.token;\n};\n\n/**\n * Create a new input and upload a file.\n * @param  {File}   file    File to upload.\n * @return {Promise} A promise which resolves when the upload is complete.\n */\nIngestSDK.prototype.upload = function (file) {\n  return new Uploader({\n    file: file,\n    api: this,\n    host: this.config.host\n  });\n};\n\nmodule.exports = IngestSDK;\n\n\n/***/ }),\n/* 11 */\n/***/ (function(module, exports, __webpack_require__) {\n\nvar apply = Function.prototype.apply;\n\n// DOM APIs, for completeness\n\nexports.setTimeout = function() {\n  return new Timeout(apply.call(setTimeout, window, arguments), clearTimeout);\n};\nexports.setInterval = function() {\n  return new Timeout(apply.call(setInterval, window, arguments), clearInterval);\n};\nexports.clearTimeout =\nexports.clearInterval = function(timeout) {\n  if (timeout) {\n    timeout.close();\n  }\n};\n\nfunction Timeout(id, clearFn) {\n  this._id = id;\n  this._clearFn = clearFn;\n}\nTimeout.prototype.unref = Timeout.prototype.ref = function() {};\nTimeout.prototype.close = function() {\n  this._clearFn.call(window, this._id);\n};\n\n// Does not start the time, just sets up the members needed.\nexports.enroll = function(item, msecs) {\n  clearTimeout(item._idleTimeoutId);\n  item._idleTimeout = msecs;\n};\n\nexports.unenroll = function(item) {\n  clearTimeout(item._idleTimeoutId);\n  item._idleTimeout = -1;\n};\n\nexports._unrefActive = exports.active = function(item) {\n  clearTimeout(item._idleTimeoutId);\n\n  var msecs = item._idleTimeout;\n  if (msecs >= 0) {\n    item._idleTimeoutId = setTimeout(function onTimeout() {\n      if (item._onTimeout)\n        item._onTimeout();\n    }, msecs);\n  }\n};\n\n// setimmediate attaches itself to the global object\n__webpack_require__(12);\nexports.setImmediate = setImmediate;\nexports.clearImmediate = clearImmediate;\n\n\n/***/ }),\n/* 12 */\n/***/ (function(module, exports, __webpack_require__) {\n\n/* WEBPACK VAR INJECTION */(function(global, process) {(function (global, undefined) {\n    \"use strict\";\n\n    if (global.setImmediate) {\n        return;\n    }\n\n    var nextHandle = 1; // Spec says greater than zero\n    var tasksByHandle = {};\n    var currentlyRunningATask = false;\n    var doc = global.document;\n    var registerImmediate;\n\n    function setImmediate(callback) {\n      // Callback can either be a function or a string\n      if (typeof callback !== \"function\") {\n        callback = new Function(\"\" + callback);\n      }\n      // Copy function arguments\n      var args = new Array(arguments.length - 1);\n      for (var i = 0; i < args.length; i++) {\n          args[i] = arguments[i + 1];\n      }\n      // Store and register the task\n      var task = { callback: callback, args: args };\n      tasksByHandle[nextHandle] = task;\n      registerImmediate(nextHandle);\n      return nextHandle++;\n    }\n\n    function clearImmediate(handle) {\n        delete tasksByHandle[handle];\n    }\n\n    function run(task) {\n        var callback = task.callback;\n        var args = task.args;\n        switch (args.length) {\n        case 0:\n            callback();\n            break;\n        case 1:\n            callback(args[0]);\n            break;\n        case 2:\n            callback(args[0], args[1]);\n            break;\n        case 3:\n            callback(args[0], args[1], args[2]);\n            break;\n        default:\n            callback.apply(undefined, args);\n            break;\n        }\n    }\n\n    function runIfPresent(handle) {\n        // From the spec: \"Wait until any invocations of this algorithm started before this one have completed.\"\n        // So if we're currently running a task, we'll need to delay this invocation.\n        if (currentlyRunningATask) {\n            // Delay by doing a setTimeout. setImmediate was tried instead, but in Firefox 7 it generated a\n            // \"too much recursion\" error.\n            setTimeout(runIfPresent, 0, handle);\n        } else {\n            var task = tasksByHandle[handle];\n            if (task) {\n                currentlyRunningATask = true;\n                try {\n                    run(task);\n                } finally {\n                    clearImmediate(handle);\n                    currentlyRunningATask = false;\n                }\n            }\n        }\n    }\n\n    function installNextTickImplementation() {\n        registerImmediate = function(handle) {\n            process.nextTick(function () { runIfPresent(handle); });\n        };\n    }\n\n    function canUsePostMessage() {\n        // The test against `importScripts` prevents this implementation from being installed inside a web worker,\n        // where `global.postMessage` means something completely different and can't be used for this purpose.\n        if (global.postMessage && !global.importScripts) {\n            var postMessageIsAsynchronous = true;\n            var oldOnMessage = global.onmessage;\n            global.onmessage = function() {\n                postMessageIsAsynchronous = false;\n            };\n            global.postMessage(\"\", \"*\");\n            global.onmessage = oldOnMessage;\n            return postMessageIsAsynchronous;\n        }\n    }\n\n    function installPostMessageImplementation() {\n        // Installs an event handler on `global` for the `message` event: see\n        // * https://developer.mozilla.org/en/DOM/window.postMessage\n        // * http://www.whatwg.org/specs/web-apps/current-work/multipage/comms.html#crossDocumentMessages\n\n        var messagePrefix = \"setImmediate$\" + Math.random() + \"$\";\n        var onGlobalMessage = function(event) {\n            if (event.source === global &&\n                typeof event.data === \"string\" &&\n                event.data.indexOf(messagePrefix) === 0) {\n                runIfPresent(+event.data.slice(messagePrefix.length));\n            }\n        };\n\n        if (global.addEventListener) {\n            global.addEventListener(\"message\", onGlobalMessage, false);\n        } else {\n            global.attachEvent(\"onmessage\", onGlobalMessage);\n        }\n\n        registerImmediate = function(handle) {\n            global.postMessage(messagePrefix + handle, \"*\");\n        };\n    }\n\n    function installMessageChannelImplementation() {\n        var channel = new MessageChannel();\n        channel.port1.onmessage = function(event) {\n            var handle = event.data;\n            runIfPresent(handle);\n        };\n\n        registerImmediate = function(handle) {\n            channel.port2.postMessage(handle);\n        };\n    }\n\n    function installReadyStateChangeImplementation() {\n        var html = doc.documentElement;\n        registerImmediate = function(handle) {\n            // Create a <script> element; its readystatechange event will be fired asynchronously once it is inserted\n            // into the document. Do so, thus queuing up the task. Remember to clean up once it's been called.\n            var script = doc.createElement(\"script\");\n            script.onreadystatechange = function () {\n                runIfPresent(handle);\n                script.onreadystatechange = null;\n                html.removeChild(script);\n                script = null;\n            };\n            html.appendChild(script);\n        };\n    }\n\n    function installSetTimeoutImplementation() {\n        registerImmediate = function(handle) {\n            setTimeout(runIfPresent, 0, handle);\n        };\n    }\n\n    // If supported, we should attach to the prototype of global, since that is where setTimeout et al. live.\n    var attachTo = Object.getPrototypeOf && Object.getPrototypeOf(global);\n    attachTo = attachTo && attachTo.setTimeout ? attachTo : global;\n\n    // Don't get fooled by e.g. browserify environments.\n    if ({}.toString.call(global.process) === \"[object process]\") {\n        // For Node.js before 0.9\n        installNextTickImplementation();\n\n    } else if (canUsePostMessage()) {\n        // For non-IE10 modern browsers\n        installPostMessageImplementation();\n\n    } else if (global.MessageChannel) {\n        // For web workers, where supported\n        installMessageChannelImplementation();\n\n    } else if (doc && \"onreadystatechange\" in doc.createElement(\"script\")) {\n        // For IE 6–8\n        installReadyStateChangeImplementation();\n\n    } else {\n        // For older browsers\n        installSetTimeoutImplementation();\n    }\n\n    attachTo.setImmediate = setImmediate;\n    attachTo.clearImmediate = clearImmediate;\n}(typeof self === \"undefined\" ? typeof global === \"undefined\" ? this : global : self));\n\n/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(13), __webpack_require__(6)))\n\n/***/ }),\n/* 13 */\n/***/ (function(module, exports) {\n\nvar g;\r\n\r\n// This works in non-strict mode\r\ng = (function() {\r\n\treturn this;\r\n})();\r\n\r\ntry {\r\n\t// This works if eval is allowed (see CSP)\r\n\tg = g || Function(\"return this\")() || (1,eval)(\"this\");\r\n} catch(e) {\r\n\t// This works if the window reference is available\r\n\tif(typeof window === \"object\")\r\n\t\tg = window;\r\n}\r\n\r\n// g can still be undefined, but nothing to do about it...\r\n// We return undefined, instead of nothing here, so it's\r\n// easier to handle this case. if(!global) { ...}\r\n\r\nmodule.exports = g;\r\n\n\n/***/ }),\n/* 14 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\n\nvar extend = __webpack_require__(0);\nvar Request = __webpack_require__(1);\nvar Promise = __webpack_require__(5);\nvar utils = __webpack_require__(2);\n\n/**\n * Create a new upload wrapper.  Manages the entire upload of a file.\n * @class\n * @param   {object}  options                   Configuration options to override the defaults.\n * @param   {object}  options.api               A reference to the parent API instance.\n * @param   {object}  options.file              The file to upload.\n * @param   {object}  options.upload            REST endpoint for creating an input.\n * @param   {object}  options.sign              REST endpoint for signing a blob before upload.\n * @param   {object}  options.uploadComplete    REST endpoint to notify the API that the upload is complete.\n * @param   {object}  options.uploadAbort       REST endpoint to abort the upload.\n */\nfunction Upload (options) {\n\n  this.defaults = {\n    api: null,\n    file: null,\n    upload: '/encoding/inputs/<%=id%>/upload<%=method%>',\n    sign: '/encoding/inputs/<%=id%>/upload/sign<%=method%>',\n    uploadComplete: '/encoding/inputs/<%=id%>/upload/complete',\n    uploadAbort: '/encoding/inputs/<%=id%>/upload/abort<%=method%>',\n    uploadMethods: {\n      param: '?type=',\n      singlePart: 'amazon',\n      multiPart: 'amazonMP'\n    }\n  };\n\n  // Create a config object by extending the defaults with the pass options.\n  this.config = extend(true, {}, this.defaults, options);\n\n  this.api = this.config.api;\n  this.file = this.config.file;\n\n  this.chunks = [];\n  this.chunkSize = 0;\n  this.chunkCount = 0;\n  this.chunksComplete = 0;\n  this.uploadedBytes = 0;\n\n  this.aborted = false;\n  this.paused = false;\n  this.created = false;\n  this.initialized = false;\n\n  // Set to true when all the chunks are uploaded, but before the complete call is made.\n  this.uploadComplete = false;\n\n  this.fileRecord = {\n    filename: this.file.name,\n    type: this.file.type,\n    size: this.file.size,\n    method: this._checkMultipart(this.file),\n    contentType: 'application/octet-stream'\n  };\n\n};\n\n/**\n * Register a function to execute when a chunk completes uploading.\n * @param  {Function} callback A callback to execute when progress is made.\n */\nUpload.prototype.progress = function (callback) {\n  this.config.progress = callback.bind(this);\n};\n\n/**\n * Create a new input record and upload the files to amazon.\n * @return  {Promise}         A promise which resolves when the new input record is created and uploaded.\n */\nUpload.prototype.save = function () {\n  return this._create(this.fileRecord)\n    .then(this._initialize.bind(this))\n    .then(this._prepareUpload.bind(this));\n};\n\n/**\n * Call the progress callback and pass the current progress percentage.\n * @private\n * @param  {number} message Current progress percentage.\n */\nUpload.prototype._updateProgress = function (percent, chunkSize) {\n\n  if (!this.config.progress) {\n    return;\n  }\n\n  this.config.progress.call(this, percent, chunkSize);\n};\n\n/**\n * Create a new input record.\n * @private\n * @param   {object}  record  A JSON object representing the input record to create.\n * @return  {Promise}         A promise which resolves when the new input record is created.\n */\nUpload.prototype._create = function (record) {\n\n  if (this.created) {\n    return utils.promisify(true, this.fileRecord.id);\n  }\n\n  if (this.aborted) {\n    return utils.promisify(false, 'upload aborted');\n  }\n\n  return this.api.inputs.add(record).then(this._createSuccess.bind(this));\n};\n\n/**\n * Return the data object from the response.\n * @private\n * @param  {JSON}   response  JSON response containing the new input record id.\n * @return {string}           new input record id.\n */\nUpload.prototype._createSuccess = function (response) {\n\n  this.created = true;\n\n  this._updateProgress(0, 0);\n\n  // Store the input record.\n  this.input = response.data;\n\n  this.fileRecord.id = response.data.id;\n\n  return this.fileRecord.id;\n};\n\n/**\n * Initializes an Input for upload\n * @private\n * @return {Promise} A promise which resolves when the request is complete.\n */\nUpload.prototype._initialize = function () {\n  var url;\n  var tokens;\n  var signing = '';\n  var request;\n\n  if (this.aborted) {\n    return utils.promisify(false, 'upload aborted');\n  }\n\n  if (!this.fileRecord.method) {\n    signing = this.config.uploadMethods.param + this.config.uploadMethods.singlePart;\n  }\n\n  tokens = {\n    id: this.fileRecord.id,\n    method: signing\n  };\n\n  url = utils.parseTokens(this.api.config.host + this.config.upload, tokens);\n\n  request = new Request({\n    url: url,\n    token: this.api.getToken(),\n    method: 'POST',\n    data: this.fileRecord\n  });\n\n  return request.send()\n          .then(this._initializeComplete.bind(this));\n\n};\n\n/**\n * Store the information returned from the initialize request.\n * @private\n */\nUpload.prototype._initializeComplete = function (response) {\n  this.initialized = true;\n  this.fileRecord.key = response.data.key;\n  this.fileRecord.uploadId = response.data.uploadId;\n  this.chunkSize = response.data.pieceSize;\n  this.chunkCount = response.data.pieceCount;\n};\n\n/**\n * Setup the upload depending on its type, single or multi part.\n * @return {Promise} A promise which resolves when all of the pieces have completed uploading.\n */\nUpload.prototype._prepareUpload = function () {\n  if (!this.fileRecord.method) {\n    // Singlepart.\n    return this._uploadFile()\n      .then(this._onCompleteUpload.bind(this));\n  }\n\n  // Multipart.\n  return this._createChunks()\n    .then(this._completeUpload.bind(this));\n};\n\n/**\n * Break a file into blobs and create a chunk object for each piece.\n * @private\n * @return {Promise} A promise which resolves when all of the pieces have completed uploading.\n */\nUpload.prototype._createChunks = function () {\n  var sliceMethod = this._getSliceMethod(this.file);\n  var i, blob, chunk, start, end,\n    chunkPromises = [];\n\n  if (this.aborted) {\n    this.abort();\n    return utils.promisify(false, 'upload aborted');\n  }\n\n  for (i = 0; i < this.chunkCount; i++) {\n\n    start = i * this.chunkSize;\n    // Choose the smaller value, so that we don't go over the filesize.\n    end = Math.min((i + 1) * this.chunkSize, this.fileRecord.size);\n\n    blob = this.file[sliceMethod](start, end);\n\n    chunk = {\n      partNumber: i + 1,\n      data: blob\n    };\n\n    this.chunks.push(chunk);\n\n    chunkPromises.push(this._uploadChunk.bind(this, chunk));\n\n  }\n\n  // Store a reference for pausing and resuming.\n  this.multiPartPromise = utils.series(chunkPromises, this.paused);\n\n  return this.multiPartPromise;\n};\n\n/**\n * Create a promise chain for each chunk to be uploaded.\n * @private\n * @return {Promise} A promise which resolves when the request is complete.\n */\nUpload.prototype._uploadChunk = function (chunk) {\n  var promise = Promise();\n\n  // Break the promise chain.\n  this._signUpload(chunk)\n    .then(this._sendUpload.bind(this, chunk))\n    .then(this._completeChunk.bind(this, chunk, promise));\n\n  return promise;\n};\n\n/**\n * Create a promise chain for a single part file upload.\n * @param  {file}   file    A file reference to upload.\n * @return {Promise} A promise which resolves when the request is complete.\n */\nUpload.prototype._uploadFile = function () {\n  var chunk = {\n    data: this.file\n  };\n\n  // Create a new promise if one doesn't exist.\n  if (!this.singlePartPromise) {\n    this.singlePartPromise = Promise();\n  }\n\n  // Broken off the chain, this will allow us to cancel single part uploads without breaking the\n  // initial chain.\n  this._signUpload(chunk)\n    .then(this._sendUpload.bind(this, chunk))\n    .then(this._sendSinglepartComplete.bind(this))\n    .then(this._updateProgress.bind(this, 100, this.fileRecord.size))\n    .then(this._uploadFileComplete.bind(this));\n\n  return this.singlePartPromise;\n};\n\n/**\n *  Resolve the single part upload promise;\n */\nUpload.prototype._uploadFileComplete = function () {\n  this.singlePartPromise(true, []);\n};\n\n/**\n * Make a request and sign the chunk to be uploaded.\n * @private\n * @param  {object}   chunk           Information about the chunk to be uploaded.\n * @return {Promise}                  A promise which resolves when the request is complete.\n */\nUpload.prototype._signUpload = function (chunk) {\n  var url;\n  var signing = '';\n  var headers = {};\n  var request;\n\n  // Set the part number for the current chunk.\n  if (chunk.partNumber) {\n    this.fileRecord.partNumber = chunk.partNumber;\n  }\n\n  headers['Content-Type'] = 'multipart/form-data';\n\n  if (!this.fileRecord.method) {\n    signing = this.config.uploadMethods.param + this.config.uploadMethods.singlePart;\n  }\n\n  url = utils.parseTokens(this.api.config.host + this.config.sign, {\n    id: this.fileRecord.id,\n    method: signing\n  });\n\n  request = new Request({\n    url: url,\n    token: this.api.getToken(),\n    method: 'POST',\n    headers: headers,\n    data: this.fileRecord\n  });\n\n  return request.send();\n};\n\n/**\n * Send the upload to the server.\n * @private\n * @param   {object} upload  An object representing the upload to send to the server.\n * @return  {Promise}       A promise which resolves when the request is complete.\n */\nUpload.prototype._sendUpload = function (upload, response) {\n  var headers = {};\n  var request;\n\n  // Set the proper headers to send with the file.\n  headers['Content-Type'] = this.fileRecord.contentType;\n\n  headers.authorization = response.data.authHeader;\n  headers['x-amz-date'] = response.data.dateHeader;\n  headers['x-amz-security-token'] = response.data.securityToken;\n\n  request = new Request({\n    url: response.data.url,\n    method: 'PUT',\n    headers: headers,\n    data: upload.data,\n    ignoreAcceptHeader: true\n  });\n\n  this.requestPromise = request;\n\n  return request.send();\n};\n\n/**\n * Update the upload bytes value when a single part file is uploaded.\n */\nUpload.prototype._sendSinglepartComplete = function () {\n  this.uploadComplete = true;\n  this.uploadedBytes = this.fileRecord.size;\n};\n\n/**\n *  Executed when a chunk is finished uploading.\n *  @private\n *  @param {object}   chunk   The current chunk that was uploaded.\n *  @param {Promise}  promise The promise to resolve when the chunk is complete.\n */\nUpload.prototype._completeChunk = function (chunk, promise) {\n  var progress;\n\n  this.chunksComplete++;\n  chunk.complete = true;\n\n  this.uploadedBytes += chunk.data.size;\n\n  // Upload is complete.\n  if (this.chunksComplete === this.chunkCount) {\n    this.uploadComplete = true;\n  }\n\n  progress = this.uploadedBytes / this.fileRecord.size;\n  // 0 - 99 for actual upload progress, 1% for the complete call.\n  progress *= 99;\n  progress = Math.round(progress);\n\n  this._updateProgress(progress, chunk.data.size);\n\n  // Resolve the promise.\n  promise(true, []);\n};\n\n/**\n * Notify the server that the upload is complete.\n *\n * @private\n * @return  {Promise} A promise which resolves when the request is complete.\n */\nUpload.prototype._completeUpload = function () {\n  var url;\n  var tokens;\n  var request;\n\n  // Early return so we don't process any of the complete information on an aborted upload.\n  if (this.aborted) {\n    return utils.promisify(false, 'Upload Aborted.');\n  }\n\n  tokens = {\n    id: this.fileRecord.id\n  };\n\n  url = utils.parseTokens(this.api.config.host + this.config.uploadComplete, tokens);\n\n  request = new Request({\n    url: url,\n    token: this.api.getToken(),\n    method: 'POST',\n    data: this.fileRecord\n  });\n\n  return request.send()\n          .then(this._onCompleteUpload.bind(this));\n};\n\n/**\n * Return the id for the current file record.\n * @private\n * @return {string} ID for the input record that was created.\n */\nUpload.prototype._onCompleteUpload = function () {\n  // Send the final progress update once the upload is actually complete.\n  this._updateProgress(100);\n\n  this.uploadComplete = true;\n  this.multiPartPromise = null;\n  this.requestPromise = null;\n  this.singlePartPromise = null;\n  return this.fileRecord.id;\n};\n\n/**\n * Aborts an input upload\n *\n * @return {Promise} A promise which resolves when the request is complete.\n */\nUpload.prototype.abort = function () {\n  var url;\n  var tokens;\n  var request;\n\n  this.aborted = true;\n\n  // If initialize hasn't been called yet there is no need to abort the upload as it doesn't\n  // exist yet.\n  if (!this.initialized) {\n\n    if (this.created) {\n      // If the input has been created simply return early with a\n      // promise to delete the created input record.\n      return this.api.inputs.delete(this.fileRecord.id);\n    }\n\n    // Resolve as a successful promise. This case would be fulfilled when an upload\n    // has been created but save() hasn't yet been called.\n    return utils.promisify(true);\n\n  }\n\n  // Cancel the current request.\n  if (this.requestPromise) {\n    this.requestPromise.cancel();\n    this.requestPromise = null;\n  }\n\n  if (this.singlePartPromise) {\n    this.singlePartPromise = null;\n    // Return here because there is no need to abort a single part upload.\n    return this._abortComplete();\n  }\n\n  if (this.multiPartPromise) {\n    this.multiPartPromise.cancel();\n    this.multiPartPromise = null;\n  }\n\n  tokens = {\n    id: this.fileRecord.id,\n    method: ''\n  };\n\n  url = utils.parseTokens(this.api.config.host + this.config.uploadAbort, tokens);\n\n  request = new Request({\n    url: url,\n    token: this.api.getToken(),\n    method: 'POST',\n    data: this.fileRecord\n  });\n\n  return request.send()\n    .then(this._abortComplete.bind(this));\n\n};\n\n/**\n * Aborts an input upload\n * @param {function} callback Callback executed when the request is complete, or an error occurs.\n */\nUpload.prototype.abortSync = function (callback) {\n  var url;\n  var tokens;\n  var request;\n\n  this.aborted = true;\n\n  // If initialize hasn't been called yet there is no need to abort the upload as it doesn't\n  // exist yet.\n  if (!this.initialized) {\n\n    if (this.created) {\n      // If the input has been created simply return early and delete the input.\n      this.api.inputs.deleteSync(this.fileRecord.id, callback);\n      return;\n    }\n\n    // Resolve as a successful promise. This case would be fulfilled when an upload\n    // has been created but save() hasn't yet been called.\n    callback(null);\n    return;\n\n  }\n\n  // Cancel the current request.\n  if (this.requestPromise) {\n    this.requestPromise.cancel();\n    this.requestPromise = null;\n  }\n\n  if (this.singlePartPromise) {\n    this.singlePartPromise = null;\n    // Return here because there is no need to abort a single part upload.\n    this.api.inputs.deleteSync(this.fileRecord.id, callback);\n    return;\n  }\n\n  // If we have a multi part promise we need to cancel it\n  if (this.multiPartPromise) {\n    this.multiPartPromise.cancel();\n    this.multiPartPromise = null;\n  }\n\n  tokens = {\n    id: this.fileRecord.id,\n    method: ''\n  };\n\n  url = utils.parseTokens(this.api.config.host + this.config.uploadAbort, tokens);\n\n  request = new Request({\n    url: url,\n    async: false,\n    token: this.api.getToken(),\n    method: 'POST',\n    data: this.fileRecord\n  });\n\n  request.sendSync(this.abortSyncComplete.bind(this, callback));\n};\n\n/**\n * Delete the input when the abort call completes and then execute the callback.\n *\n * @param {Function} callback - Synchronous callback\n * @param {object}   error    - Error from abort call.\n */\nUpload.prototype.abortSyncComplete = function (callback, error) {\n\n  if (!error) {\n    this.api.inputs.deleteSync(this.fileRecord.id, callback);\n  } else if (typeof callback === 'function') {\n    callback(error);\n  } else {\n    throw error;\n  }\n\n};\n\n/**\n * Delete the input that was created.\n * @private\n * @return {Promise} A promise which resolves when the request is complete.\n */\nUpload.prototype._abortComplete = function () {\n  return this.api.inputs.delete(this.fileRecord.id);\n};\n\n/**\n * Pause the current upload.\n */\nUpload.prototype.pause = function () {\n  // Return early if the upload portion is complete.\n  // The work is done by now so we might as well fire the\n  // complete call.\n  if (this.uploadComplete) {\n    return;\n  }\n\n  this.paused = true;\n\n  // Is there a multipart upload\n  if (this.multiPartPromise) {\n    // Pause the series if its a multipart upload.\n    this.multiPartPromise.pause();\n  }\n\n  // Abort the upload if its a singlepart upload and cancel the request if it is a multipart promise\n  if (this.requestPromise) {\n    this.requestPromise.cancel();\n  }\n};\n\n/**\n * Resume the current upload.\n */\nUpload.prototype.resume = function () {\n  this.paused = false;\n\n  if (this.multiPartPromise) {\n    // Resume the series if it's multipart.\n    this.multiPartPromise.resume();\n  } else if (this.requestPromise) {\n    // Restart the file upload.\n    this._uploadFile();\n  }\n\n};\n\n/**\n * Check the file size to determine if it should be a multipart upload, returns false for singlepart uploads.\n * @private\n *\n * @param {File} file - The file to evaluate.\n *\n * @return {boolean} - True if the file will be uploading using mutlipart upload.\n */\nUpload.prototype._checkMultipart = function (file) {\n  if (!file) {\n    throw new Error('Upload::_checkMultipart - A file object is required.');\n  }\n\n  return file.size > (5 * 1024 * 1024);\n};\n\n/**\n * Function that determines the slice method to be used\n * @private\n * @param {object} file - The file object you wish to determine the slice method for\n * @return {string} sliceMethod - The slice method to use.\n */\nUpload.prototype._getSliceMethod = function (file) {\n  var sliceMethod;\n\n  if ('mozSlice' in file) {\n    sliceMethod = 'mozSlice';\n  } else if ('webkitSlice' in file) {\n    sliceMethod = 'webkitSlice';\n  } else {\n    sliceMethod = 'slice';\n  }\n\n  return sliceMethod;\n};\n\nmodule.exports = Upload;\n\n\n/***/ }),\n/* 15 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\n\nvar Resource = __webpack_require__(3);\nvar Request = __webpack_require__(1);\nvar utils = __webpack_require__(2);\nvar extend = __webpack_require__(0);\nvar ResourceTypes = __webpack_require__(4);\n\n/**\n * Users Resource\n *\n * @param {object} options - SDK Options.\n * @class\n * @extends Resource\n */\nfunction Users (options) {\n\n  var overrides = {\n    resource: ResourceTypes.USERS,\n    currentUser: '/users/me',\n    transfer: '/users/<%=oldId%>/transfer/<%=newId%>',\n    revoke: '/revoke'\n  };\n\n  options = extend(true, {}, overrides, options);\n\n  Resource.call(this, options);\n\n};\n\n// This extends the base class of 'Resource'.\nUsers.prototype = Object.create(Resource.prototype);\nUsers.prototype.constructor = Users;\n\n/**\n * Retrieve information for the current user.\n *\n * @return {Promise} A promise which resolves when the request is complete.\n */\nUsers.prototype.getCurrentUserInfo = function () {\n  var request = new Request({\n    url: this.config.host + this.config.currentUser,\n    token: this._tokenSource()\n  });\n\n  return request.send();\n};\n\n/**\n * Transfer all authorship currently under the specified user onto another.\n * This includes all videos.\n * This task is commonly used in conjunction with permanently deleting a user.\n *\n * @param {string} oldId - The user who currently has authorship.\n * @param {string} newId - The user to transfer authorship to.\n *\n * @return {Promise} A promise which resolves when the request is complete.\n */\nUsers.prototype.transferUserAuthorship = function (oldId, newId) {\n  var tokens, url, request;\n\n  if (typeof oldId !== 'string') {\n    return utils.promisify(false,\n      'IngestSDK transferUserAuthorship requires `oldId` to be passed as a string.');\n  }\n\n  if (typeof newId !== 'string') {\n    return utils.promisify(false,\n      'IngestSDK transferUserAuthorship requires `newId` to be passed as a string');\n  }\n\n  tokens = {\n    oldId: oldId,\n    newId: newId\n  };\n\n  url = utils.parseTokens(this.config.host + this.config.transfer, tokens);\n\n  request = new Request({\n    url: url,\n    token: this._tokenSource(),\n    method: 'PATCH'\n  });\n\n  return request.send();\n};\n\n/**\n * Revokes the authorization token for the current user.\n *\n * @return {Promise} A promise which resolves when the request is complete.\n */\nUsers.prototype.revokeCurrentUser = function () {\n  var request = new Request({\n    url: this.config.host + this.config.currentUser + this.config.revoke,\n    token: this._tokenSource(),\n    method: 'DELETE'\n  });\n\n  return request.send();\n};\n\nmodule.exports = Users;\n\n\n/***/ }),\n/* 16 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\n\nvar Resource = __webpack_require__(3);\nvar Request = __webpack_require__(1);\nvar utils = __webpack_require__(2);\nvar extend = __webpack_require__(0);\nvar ResourceTypes = __webpack_require__(4);\n\n/**\n * Networks Resource\n *\n * @param {object} options - SDK Options.\n * @class\n * @extends Resource\n */\nfunction Networks (options) {\n\n  var overrides = {\n    resource: ResourceTypes.NETWORKS,\n    keys: '/<%=resource%>/<%=networkId%>/keys',\n    keysById: '/<%=resource%>/<%=networkId%>/keys/<%=keyId%>',\n    invite: '/<%=resource%>/<%=networkId%>/invite',\n    invoices: '/<%=resource%>/<%=networkId%>/invoices',\n    invoicesById: '/<%=resource%>/<%=networkId%>/invoices/<%=invoiceId%>',\n    currentUsage: '/<%=resource%>/<%=networkId%>/invoices?currentUsage=true',\n    customers: '/<%=resource%>/<%=networkId%>/customers',\n    customerById: '/<%=resource%>/<%=networkId%>/customers/<%=cusId%>',\n    customerCardInformation: '/<%=resource%>/<%=networkId%>/customers/<%=cusId%>/card',\n    getPendingUsers: '/<%=resource%>/<%=networkId%>?filter=pending',\n    deletePendingUser: '/<%=resource%>/<%=networkId%>/pending-users/<%=pendingUserId%>',\n  };\n\n  options = extend(true, {}, overrides, options);\n\n  Resource.call(this, options);\n\n};\n\n// This extends the base class of 'Resource'.\nNetworks.prototype = Object.create(Resource.prototype);\nNetworks.prototype.constructor = Networks;\n\n/**\n * Link an existing user to the specified network.\n *\n * @param {string}  networkId  The unique ID of the network.\n * @param {string}  userId     The unique ID of the user to link.\n *\n * @return {Promise}  A promise which resolves when the request is complete.\n */\nNetworks.prototype.linkUser = function (networkId, userId) {\n  var data, request, url;\n\n  if (typeof networkId !== 'string') {\n    return utils.promisify(false,\n      'IngestSDK linkUser requires `networkId` to be passed as a string.');\n  }\n\n  if (typeof userId !== 'string') {\n    return utils.promisify(false,\n      'IngestSDK linkUser requires `userId` to be passed as a string.');\n  }\n\n  data = {\n    id: userId\n  };\n\n  url = utils.parseTokens(this.config.host + this.config.byId, {\n    resource: this.config.resource,\n    id: networkId\n  });\n\n  request = new Request({\n    url: url,\n    data: data,\n    token: this._tokenSource(),\n    method: 'LINK'\n  });\n\n  return request.send();\n};\n\n/**\n * Removes the specified user from the specified network.\n *\n * @param {string}  networkId  The unique ID of the network.\n * @param {string}  userId     The unique ID of the user to unlink.\n *\n * @return {Promise}  A promise which resolves when the request is complete.\n */\nNetworks.prototype.unlinkUser = function (networkId, userId) {\n  var data, request, url;\n\n  if (typeof networkId !== 'string') {\n    return utils.promisify(false,\n      'IngestSDK unlinkUser requires `networkId` to be passed as a string.');\n  }\n\n  if (typeof userId !== 'string') {\n    return utils.promisify(false,\n      'IngestSDK unlinkUser requires `userId` to be passed as a string.');\n  }\n\n  data = {\n    id: userId\n  };\n\n  url = utils.parseTokens(this.config.host + this.config.byId, {\n    resource: this.config.resource,\n    id: networkId\n  });\n\n  request = new Request({\n    url: url,\n    data: data,\n    token: this._tokenSource(),\n    method: 'UNLINK'\n  });\n\n  return request.send();\n};\n\n/**\n * Invites a user to the specified network.\n *\n * @param {string}  networkId  The unique ID of the network.\n * @param {string}  email      The email to send the invite to.\n * @param {string}  name       The name of the person to invite.\n * @param {boolean} resend     [Optional] True: Resend an invite. False for first time invite. Default value is false.\n *\n * @return {Promise} A promise which resolves when the request is complete.\n */\nNetworks.prototype.inviteUser = function (networkId, email, name, resend) {\n  var data, request, url;\n\n  if (typeof networkId !== 'string') {\n    return utils.promisify(false,\n      'IngestSDK inviteUser requires `networkId` to be passed as a string.');\n  }\n\n  if (typeof email !== 'string') {\n    return utils.promisify(false,\n      'IngestSDK inviteUser requires `email` to be passed as a string.');\n  }\n\n  if (typeof name !== 'string') {\n    return utils.promisify(false,\n      'IngestSDK inviteUser requires `name` to be passed as a string.');\n  }\n\n  data = {\n    email: email,\n    name: name\n  };\n\n  if (typeof resend === 'boolean') {\n    data.resend = resend;\n  }\n\n  url = utils.parseTokens(this.config.host + this.config.invite, {\n    resource: this.config.resource,\n    networkId: networkId\n  });\n\n  request = new Request({\n    url: url,\n    data: data,\n    token: this._tokenSource(),\n    method: 'POST'\n  });\n\n  return request.send();\n};\n\n/**\n * Gets a list of all secure keys for the network given.\n *\n * @param {string}  networkId  The unique ID of the network.\n *\n * @return {Promise}  A promise which resolves when the request is complete.\n */\nNetworks.prototype.getSecureKeys = function (networkId) {\n  var request, url;\n\n  if (typeof networkId !== 'string') {\n    return utils.promisify(false,\n      'IngestSDK getSecureKeys requires `networkId` to be passed as a string.');\n  }\n\n  url = utils.parseTokens(this.config.host + this.config.keys, {\n    resource: this.config.resource,\n    networkId: networkId\n  });\n\n  request = new Request({\n    url: url,\n    token: this._tokenSource()\n  });\n\n  return request.send();\n};\n\n/**\n * Adds a new secure key to the specified network.\n *\n * @param {string}  networkId   The unique ID of the network.\n * @param {object}  data        The object containing data for the secure key entry.\n * @param {string}  data.title  Optional. The title of the secure key. Will default to \"Default Key Title\"\n * @param {string}  data.key    The public key in RSA format.\n *\n * @return {Promise}  A promise which resolves when the request is complete.\n */\nNetworks.prototype.addSecureKey = function (networkId, data) {\n  var request, url;\n\n  if (typeof networkId !== 'string') {\n    return utils.promisify(false,\n      'IngestSDK addSecureKey requires `networkId` to be passed as a string.');\n  }\n\n  if (typeof data !== 'object') {\n    return utils.promisify(false,\n      'IngestSDK addSecureKey requires `data` to be passed as an object.');\n  }\n\n  if (typeof data.key !== 'string') {\n    return utils.promisify(false,\n      'IngestSDK addSecureKey requires that the key be a string in RSA public key format.');\n  }\n\n  // The title must be a string.\n  if (typeof data.title !== 'string') {\n    data.title = '';\n  }\n\n  url = utils.parseTokens(this.config.host + this.config.keys, {\n    resource: this.config.resource,\n    networkId: networkId\n  });\n\n  request = new Request({\n    url: url,\n    token: this._tokenSource(),\n    method: 'POST',\n    data: data\n  });\n\n  return request.send();\n};\n\n/**\n * Retrieves a single network secure key entry based on the unique ID given.\n *\n * @param {string}  networkId  The unique ID of the network.\n * @param {string}  keyId      The unique ID of the secure key entry.\n *\n * @return {Promise}  A promise which resolves when the request is complete.\n */\nNetworks.prototype.getSecureKeyById = function (networkId, keyId) {\n  var url, request;\n\n  if (typeof networkId !== 'string') {\n    return utils.promisify(false,\n      'IngestSDK getSecureKeyById requires a `networkId` to be passed as a string.');\n  }\n\n  if (typeof keyId !== 'string') {\n    return utils.promisify(false,\n      'IngestSDK getSecureKeyById requires a `keyId` to be passed as a string.');\n  }\n\n  url = utils.parseTokens(this.config.host + this.config.keysById, {\n    resource: this.config.resource,\n    networkId: networkId,\n    keyId: keyId\n  });\n\n  request = new Request({\n    url: url,\n    token: this._tokenSource()\n  });\n\n  return request.send();\n};\n\n/**\n * Updates an individual secure key entry in the network specified.\n *\n * @param {string}  networkId   The unique ID of the network.\n * @param {object}  data        The object containing data for the secure key entry.\n * @param {string}  data.title  The title for the current network.\n *\n * @return {Promise} A promise which resolves when the request is complete.\n */\nNetworks.prototype.updateSecureKey = function (networkId, data) {\n  var url, request;\n\n  if (typeof networkId !== 'string') {\n    return utils.promisify(false,\n      'IngestSDK updateSecureKeyById requires `networkId` to be passed as a string.');\n  }\n\n  if (typeof data !== 'object') {\n    return utils.promisify(false,\n      'IngestSDK updateSecureKeyById requires `data` to be passed as an object.');\n  }\n\n  if (typeof data.id !== 'string') {\n    return utils.promisify(false,\n      'IngestSDK updateSecureKeyById requires param `data.id` to be a string.');\n  }\n\n  if (typeof data.title !== 'string') {\n    data.title = '';\n  }\n\n  url = utils.parseTokens(this.config.host + this.config.keysById, {\n    resource: this.config.resource,\n    networkId: networkId,\n    keyId: data.id\n  });\n\n  request = new Request({\n    url: url,\n    token: this._tokenSource(),\n    method: 'PATCH',\n    data: data\n  });\n\n  return request.send();\n};\n\n/**\n * Deletes a single network secure key entry based on the unique ID given.\n *\n * @param {string}  networkId  The unique ID of the network.\n * @param {string}  keyId      The unique ID of the secure key entry.\n *\n * @return {Promise}  A promise which resolves when the request is complete.\n */\nNetworks.prototype.deleteSecureKey = function (networkId, keyId) {\n  var url, request;\n\n  if (typeof networkId !== 'string') {\n    return utils.promisify(false,\n      'IngestSDK deleteSecureKeyById requires a `networkId` to be passed as a string.');\n  }\n\n  if (typeof keyId !== 'string') {\n    return utils.promisify(false,\n      'IngestSDK deleteSecureKeyById requires a `keyId` to be passed as a string.');\n  }\n\n  url = utils.parseTokens(this.config.host + this.config.keysById, {\n    resource: this.config.resource,\n    networkId: networkId,\n    keyId: keyId\n  });\n\n  request = new Request({\n    url: url,\n    token: this._tokenSource(),\n    method: 'DELETE'\n  });\n\n  return request.send();\n\n};\n\n/**\n * Creates a Stripe customer for the given network ID.\n *\n * @param {string} stripeToken - The Stripe token to reference submitted payment details.\n * @param {string} networkId   - The network UUID for this Stripe customer.\n *\n * @return {Promise} A promise which resolves when the request is complete.\n */\nNetworks.prototype.createCustomer = function (stripeToken, networkId) {\n  var url, request, data;\n\n  if (typeof stripeToken !== 'string' || typeof networkId !== 'string') {\n    return utils.promisify(false,\n      'IngestSDK Networks createCustomer requires stripeToken and networkId to be strings.');\n  }\n\n  url = utils.parseTokens(this.config.host + this.config.customers, {\n    networkId: networkId,\n    resource: this.config.resource\n  });\n\n  data = {\n    stripeToken: stripeToken\n  };\n\n  request = new Request({\n    url: url,\n    data: data,\n    token: this._tokenSource(),\n    method: 'POST'\n  });\n\n  return request.send();\n};\n\n/**\n * Updates an existing Stripe customer for the given network ID.\n *\n * @param {string} networkId   - The networkID that this Stripe customer belongs to.\n * @param {string} cusId       - The Stripe customer ID you wish to update.\n * @param {string} networkName - [Optional] Only provide if you wish to update the network name on the Stripe customer.\n * @param {string} stripeToken - [Optional] Provide only if payment details have been updated.\n *\n * @return {Promise} A promise which resolves when the request is complete.\n *\n */\nNetworks.prototype.updateCustomer = function (networkId, cusId, networkName, stripeToken) {\n  var url, request, data;\n\n  if (typeof networkId !== 'string' || typeof cusId !== 'string') {\n    return utils.promisify(false,\n      'IngestSDK Networks updateCustomer requires `networkId` and `cusID` to be a string.');\n  }\n\n  if (typeof networkName !== 'string' && typeof stripeToken !== 'string') {\n    return utils.promisify(false,\n      'IngestSDK Networks updateCustomer requires either networkName or stripeToken passed as a string.');\n  }\n\n  url = utils.parseTokens(this.config.host + this.config.customerById, {\n    resource: this.config.resource,\n    networkId: networkId,\n    cusId: cusId\n  });\n\n  data = {\n    networkName: networkName,\n    stripeToken: stripeToken\n  };\n\n  request = new Request({\n    url: url,\n    data: data,\n    token: this._tokenSource(),\n    method: 'PATCH'\n  });\n\n  return request.send();\n};\n\n/**\n * Deletes an existing Stripe customer for the given network ID.\n *\n * @param {string} networkId - The network ID that the customer belongs to.\n * @param {string} cusId     - The Stripe customer ID to be deleted.\n *\n * @return {Promise} A promise which resolves when the request is complete.\n *\n */\nNetworks.prototype.deleteCustomer = function (networkId, cusId) {\n\n  var url, request;\n\n  if (typeof networkId !== 'string' || typeof cusId !== 'string') {\n    return utils.promisify(false,\n      'IngestSDK Networks deleteCustomer requires `networkId` and `cusId` to be strings.');\n  }\n\n  url = utils.parseTokens(this.config.host + this.config.customerById, {\n    resource: this.config.resource,\n    networkId: networkId,\n    cusId: cusId\n  });\n\n  request = new Request({\n    url: url,\n    token: this._tokenSource(),\n    method: 'DELETE'\n  });\n\n  return request.send();\n\n};\n\n/**\n * Gets a customers card information on file\n *\n * @param {string} customerId - The customer ID you wish to get the information for.\n * @param {string} networkId  - The network ID the customer belongs to.\n *\n * @return {Promise} A promise which resolves when the request is complete.\n *\n */\nNetworks.prototype.getCustomerCardInformation = function (networkId, customerId) {\n  var url, request;\n\n  if (typeof customerId !== 'string' || typeof networkId !== 'string') {\n    return utils.promisify(false,\n      'IngestSDK Networks getCustomerCardInformation requires networkId and customerId to be strings');\n  }\n\n  url = utils.parseTokens(this.config.host + this.config.customerCardInformation, {\n    resource: this.config.resource,\n    networkId: networkId,\n    cusId: customerId\n  });\n\n  request = new Request({\n    url: url,\n    token: this._tokenSource()\n  });\n\n  return request.send();\n};\n\n/**\n * Remove the credit card currently associated with the proviced customer.\n * @param {string} networkId  - The network ID the customer belongs to.\n * @param {string} networkId  - The customer ID.\n *\n * @return {Promise} A promise which resolves when the request is complete.\n */\nNetworks.prototype.deleteCustomerCard = function (networkId, customerId) {\n  var url, request;\n\n  if (typeof customerId !== 'string' || typeof networkId !== 'string') {\n    return utils.promisify(false,\n      'IngestSDK Networks deleteCustomerCard requires networkId and customerId to be strings');\n  }\n\n  url = utils.parseTokens(this.config.host + this.config.customerCardInformation, {\n    resource: this.config.resource,\n    networkId: networkId,\n    cusId: customerId\n  });\n\n  request = new Request({\n    url: url,\n    token: this._tokenSource(),\n    method: 'DELETE'\n  });\n\n  return request.send();\n};\n\n/**\n * Gets a networks invoices\n *\n * @param {string} networkId  - The network ID that you wish to get the invoices for.\n *\n * @return {Promise} A promise which resolves when the request is complete.\n *\n */\nNetworks.prototype.getInvoices = function (networkId) {\n  var url, request;\n\n  if (typeof networkId !== 'string') {\n    return utils.promisify(false, 'IngestSDK Networks getInvoices requires networkId to be a string');\n  }\n\n  url = utils.parseTokens(this.config.host + this.config.invoices, {\n    resource: this.config.resource,\n    networkId: networkId,\n  });\n\n  request = new Request({\n    url: url,\n    token: this._tokenSource()\n  });\n\n  return request.send();\n};\n\n/**\n * Gets a specific invoice for a network\n *\n * @param {string} networkId  - The network ID the customer belongs to.\n * @param {string} invoiceId  - The invoice ID you wish to get the information for.\n *\n * @return {Promise} A promise which resolves when the request is complete.\n *\n */\nNetworks.prototype.getInvoiceById = function (networkId, invoiceId) {\n  var url, request;\n\n  if (typeof networkId !== 'string') {\n    return utils.promisify(false,\n      'IngestSDK getInvoiceById requires networkId to be passed as a string.');\n  }\n\n  if (typeof invoiceId !== 'string') {\n    return utils.promisify(false,\n      'IngestSDK getInvoiceById requires invoiceId to be passed as a string.');\n  }\n\n  url = utils.parseTokens(this.config.host + this.config.invoicesById, {\n    resource: this.config.resource,\n    networkId: networkId,\n    invoiceId: invoiceId\n  });\n\n  request = new Request({\n    url: url,\n    token: this._tokenSource()\n  });\n\n  return request.send();\n};\n\n/**\n * Gets current usage for a network\n *\n * @param {string} networkId  - The network ID the customer belongs to.\n *\n * @return {Promise} A promise which resolves when the request is complete.\n *\n */\nNetworks.prototype.getCurrentUsage = function (networkId) {\n  var url, request;\n\n  if (typeof networkId !== 'string') {\n    return utils.promisify(false,\n      'IngestSDK getCurrentUsage requires networkId to be passed as a string.');\n  }\n\n  url = utils.parseTokens(this.config.host + this.config.currentUsage, {\n    resource: this.config.resource,\n    networkId: networkId\n  });\n\n  request = new Request({\n    url: url,\n    token: this._tokenSource()\n  });\n\n  return request.send();\n};\n\n/**\n * Gets all pending users for the specified network.\n *\n * @param {string} networkId - The network ID.\n *\n * @return {Promise} - A promise which resolves when the request is complete.\n */\nNetworks.prototype.getPendingUsers = function (networkId) {\n  var url, request;\n\n  if (typeof networkId !== 'string') {\n    return utils.promisify(false,\n      'IngestSDK getPendingUsers requires networkId to be passed as a string.');\n  }\n\n  url = utils.parseTokens(this.config.host + this.config.getPendingUsers, {\n    resource:  this.config.resource,\n    networkId: networkId\n  });\n\n  request = new Request({\n    url: url,\n    token: this._tokenSource()\n  });\n\n  return request.send();\n};\n\n/**\n * Deletes a pending user from the specified network.\n *\n * @param {string} networkId     - The network ID that the pending user belongs to.\n * @param {string} pendingUserId - The pending user to delete from the network.\n *\n * @return {Promise} - A promise which resolves when the request is complete.\n */\nNetworks.prototype.deletePendingUser = function (networkId, pendingUserId) {\n  var url, request;\n\n  if (typeof networkId !== 'string' || typeof pendingUserId !== 'string') {\n    return utils.promisify(false,\n      'IngestSDK deletePendingUser requires networkId and pendingUserId to be passed as strings.');\n  }\n\n  url = utils.parseTokens(this.config.host + this.config.deletePendingUser, {\n    resource: this.config.resource,\n    networkId: networkId,\n    pendingUserId: pendingUserId\n  });\n\n  request = new Request({\n    method: 'DELETE',\n    url: url,\n    token: this._tokenSource()\n  });\n\n  return request.send();\n};\n\nmodule.exports = Networks;\n\n\n/***/ }),\n/* 17 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\n\nvar PlaybackContent = __webpack_require__(9);\nvar Request = __webpack_require__(1);\nvar utils = __webpack_require__(2);\nvar extend = __webpack_require__(0);\nvar ResourceTypes = __webpack_require__(4);\n\n/**\n * Videos Resource\n *\n * @param {object} options - SDK Options.\n * @class\n * @extends PlaybackContent\n */\nfunction Videos (options) {\n  var overrides = {\n    resource: ResourceTypes.VIDEOS,\n    variants: '/<%=resource%>/<%=id%>/variants',\n    publish: '/<%=resource%>/publish'\n  };\n\n  options = extend(true, {}, overrides, options);\n\n  PlaybackContent.call(this, options);\n\n};\n\n// This extends the base class of 'PlaybackContent'.\nVideos.prototype = Object.create(PlaybackContent.prototype);\nVideos.prototype.constructor = Videos;\n\n/**\n * Return a list of the requested videos for the current user and network.\n * @param  {object}   headers   Object representing headers to apply to the request.\n * @return {promise}            A promise which resolves when the request is complete.\n */\nVideos.prototype.getAll = function (headers, status) {\n  var request;\n  var url = utils.parseTokens(this.config.host + this.config.all, {\n    resource: this.config.resource\n  });\n\n  // If there is a status\n  if (status) {\n    if (typeof status !== 'string') {\n      return utils.promisify(false,\n        'IngestSDK Videos.getAll requires a valid status to be passed as a string.');\n    }\n\n    url = url + '?status=' + status;\n  }\n\n  request = new Request({\n    url: url,\n    token: this._tokenSource(),\n    headers: headers\n  });\n\n  return request.send();\n};\n\n/**\n * Get all of the variants for the supplied video id.\n * @param   {string}    id     Video id.\n * @return  {promise}          A promise which resolves when the request is complete.\n */\nVideos.prototype.getVariants = function (id) {\n  var url, request;\n\n  if (typeof id !== 'string') {\n    return utils.promisify(false,\n      'IngestSDK Resource getVariants requires a valid video id passed as a string.');\n  }\n\n  url = utils.parseTokens(this.config.host + this.config.variants, {\n    resource: this.config.resource,\n    id: id\n  });\n\n  request = new Request({\n    url: url,\n    token: this._tokenSource()\n  });\n\n  return request.send();\n};\n\n/**\n * Publishes a video based on the server time\n *\n * @param  {array}   ids   An array of video ids to publish\n * @return {promise}       A promise which resolves when the request is complete\n */\nVideos.prototype.publish = function (ids) {\n  var request, url;\n\n  // Check to make sure the ids are in an array\n  if (!Array.isArray(ids) || ids.length === 0) {\n    return utils.promisify(false,\n      'IngestSDK Videos publish requires an array of ids to be passed in.');\n  }\n\n  url = utils.parseTokens(this.config.host + this.config.publish, {\n    resource: this.config.resource,\n  });\n\n  request = new Request({\n    url: url,\n    token: this._tokenSource(),\n    method: 'POST',\n    data: ids\n  });\n\n  return request.send();\n};\n\n/**\n * Gets the total count of videos.\n *\n * @param {string}  status   - [Optional] A comma seperated string of video statuses to filter by.\n * @param {boolean} _private - [Optional] If true, private videos will be included in the response.\n *\n * @return {promise} A promise which resolves when the request is complete.\n */\nVideos.prototype.count = function (status, _private) {\n  var request, url, isStatusSet;\n\n  isStatusSet = false;\n\n  url = utils.parseTokens(this.config.host + this.config.all, {\n    resource: this.config.resource\n  });\n\n  // If there is a status and it is a string, use it as the status filter.\n  if (status) {\n    if (typeof status !== 'string') {\n      return utils.promisify(false,\n        'IngestSDK Videos count requires a valid status to be passed as a string.');\n    }\n\n    url += '?status=' + status;\n    isStatusSet = true;\n  }\n\n  // If private videos were requested, add the `private` query parameter to the url.\n  if (_private === true) {\n\n    // If a status has been set, then we need to append the next parameter with '&'.\n    if (isStatusSet) {\n      url += '&';\n    } else {\n      url += '?';\n    }\n\n    url += 'private=true';\n  }\n\n  request = new Request({\n    url: url,\n    token: this._tokenSource(),\n    method: 'HEAD'\n  });\n\n  return request.send()\n    .then(this._handleCountResponse);\n};\n\n\nmodule.exports = Videos;\n\n\n/***/ }),\n/* 18 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\n\nvar Resource = __webpack_require__(3);\nvar Request = __webpack_require__(1);\nvar utils = __webpack_require__(2);\nvar extend = __webpack_require__(0);\nvar ResourceTypes = __webpack_require__(4);\n\n/**\n * Jobs Resource\n *\n * @param {object} options - SDK Options.\n * @class\n * @extends Resource\n */\nfunction Jobs (options) {\n\n  var overrides = {\n    resource: ResourceTypes.JOBS,\n    progress: '/<%=resource%>/<%=id%>/progress'\n  };\n\n  options = extend(true, {}, overrides, options);\n\n  Resource.call(this, options);\n\n};\n\n// This extends the base class of 'Resource'.\nJobs.prototype = Object.create(Resource.prototype);\nJobs.prototype.constructor = Jobs;\n\n/**\n * Creates a new encoding job.\n *\n * @return {Promise} A promise which resolves when the request is complete.\n */\nJobs.prototype.add = function (resource) {\n\n  var url, request;\n\n  if (typeof resource !== 'object') {\n    return utils.promisify(false,\n      'IngestSDK Jobs `add` requires a resource passed as an object.');\n  }\n\n  url = utils.parseTokens(this.config.host + this.config.all, {\n    resource: this.config.resource\n  });\n\n  request = new Request({\n    url: url,\n    token: this._tokenSource(),\n    method: 'POST',\n    data: resource\n  });\n\n  return request.send();\n};\n\n/**\n * Gets the progress of a current encoding job\n *\n * @param  {string}  id The id of the job\n * @return {Promise}    A promise which resolves when the request is complete.\n */\nJobs.prototype.progress = function (id) {\n  var url, request;\n\n  if (typeof id !== 'string') {\n    return utils.promisify(false,\n      'IngestSDK Jobs `progress` requires `jobId` to be passed as a string.');\n  }\n\n  url = utils.parseTokens(this.config.host + this.config.progress, {\n    resource: this.config.resource,\n    id: id\n  });\n\n  request = new Request({\n    url: url,\n    token: this._tokenSource(),\n    method: 'GET'\n  });\n\n  return request.send();\n};\n\nmodule.exports = Jobs;\n\n\n/***/ }),\n/* 19 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\n\nvar Resource = __webpack_require__(3);\nvar Request = __webpack_require__(1);\nvar utils = __webpack_require__(2);\nvar extend = __webpack_require__(0);\nvar ResourceTypes = __webpack_require__(4);\n\n/**\n * Profiles Resource\n *\n * @param {object} options - SDK Options.\n * @class\n * @extends Resource\n */\nfunction Profiles (options) {\n  var overrides = {\n    resource: ResourceTypes.PROFILES\n  };\n\n  options = extend(true, {}, overrides, options);\n\n  Resource.call(this, options);\n\n};\n\n// This extends the base class of 'Resource'.\nProfiles.prototype = Object.create(Resource.prototype);\nProfiles.prototype.constructor = Profiles;\n\n/**\n * Update an existing profile with new content.\n * @param  {object|array} resource  An object or an array of objects representing the profile to be updated.\n * @return {promise}                A promise which resolves when the request is complete.\n */\nProfiles.prototype.update = function (resource) {\n  var request, data, url;\n\n  if (typeof resource !== 'object') {\n    return utils.promisify(false,\n      'IngestSDK Profiles update requires a resource to be passed as an object.');\n  }\n\n  data = resource;\n\n  url = utils.parseTokens(this.config.host + this.config.byId, {\n    resource: this.config.resource,\n    id: resource.id\n  });\n\n  request = new Request({\n    url: url,\n    token: this._tokenSource(),\n    method: 'PUT',\n    data: data\n  });\n\n  return request.send();\n};\n\nmodule.exports = Profiles;\n\n\n/***/ }),\n/* 20 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\n\nvar Resource = __webpack_require__(3);\nvar Request = __webpack_require__(1);\nvar utils = __webpack_require__(2);\nvar extend = __webpack_require__(0);\nvar ResourceTypes = __webpack_require__(4);\n\n/**\n * Inputs Resource\n *\n * @param {object} options - SDK Options.\n * @class\n * @extends Resource\n */\nfunction Inputs (options) {\n\n  var overrides = {\n    resource: ResourceTypes.INPUTS,\n    allWithFilters: '/<%=resource%>?filter=<%=filterChain%>',\n    searchWithFilters: '/<%=resource%>?search=<%=input%>&filter=<%=filterChain%>'\n  };\n\n  options = extend(true, {}, overrides, options);\n\n  Resource.call(this, options);\n\n};\n\n// This extends the base class of 'Resource'.\nInputs.prototype = Object.create(Resource.prototype);\nInputs.prototype.constructor = Inputs;\n\n/**\n * Return a list of Inputs for the current user and network.\n *\n * @param  {object} headers - Object representing headers to apply to the request.\n * @param  {Array}  filters - [Optional] A list of filters to send along with the request to return Inputs that match the criteria.\n *\n * @return {Promise} - A promise which resolves when the request is complete.\n */\nInputs.prototype.getAll = function (headers, filters) {\n  var request, url, urlTemplate, tokens;\n\n  tokens = { resource: this.config.resource };\n  urlTemplate = this.config.host + this.config.all;\n\n  // If there are filters, join them as a comma seperated string and update our tokens and url template.\n  if (Array.isArray(filters) && filters.length > 0) {\n    tokens.filterChain = filters.join(',');\n    urlTemplate = this.config.host + this.config.allWithFilters;\n  }\n\n  url = utils.parseTokens(urlTemplate, tokens);\n\n  request = new Request({\n    url: url,\n    token: this._tokenSource(),\n    headers: headers\n  });\n\n  return request.send();\n};\n\n/**\n * Return a subset of Inputs that match the search terms.\n *\n * @param  {string} input   - The search terms to match against.\n * @param  {object} headers - The headers to be passed to the request.\n * @param  {Array}  filters - [Optional] A list of filters to send along with the request to return Inputs that match the criteria.\n *\n * @return {Promise} - A promise which resolves when the request is complete.\n */\nInputs.prototype.search = function (input, headers, filters) {\n  var url, request, urlTemplate, tokens;\n\n  if (typeof input !== 'string') {\n    return utils.promisify(false,\n      'IngestSDK Inputs search requires search input to be passed as a string.');\n  }\n\n  tokens = { resource: this.config.resource, input: encodeURIComponent(input) };\n  urlTemplate = this.config.host + this.config.search;\n\n  // If there are filters, join them as a comma seperated string and update our tokens and url template.\n  if (Array.isArray(filters) && filters.length > 0) {\n    tokens.filterChain = filters.join(',');\n    urlTemplate = this.config.host + this.config.searchWithFilters;\n  }\n\n  url = utils.parseTokens(urlTemplate, tokens);\n\n  request = new Request({\n    url: url,\n    token: this._tokenSource(),\n    headers: headers\n  });\n\n  return request.send();\n};\n\nmodule.exports = Inputs;\n\n\n/***/ }),\n/* 21 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\n\nvar Resource = __webpack_require__(3);\nvar Request = __webpack_require__(1);\nvar utils = __webpack_require__(2);\nvar extend = __webpack_require__(0);\nvar ResourceTypes = __webpack_require__(4);\n\n/**\n * Events Resource\n *\n * @param {object} options - SDK Options.\n * @class\n * @extends Resource\n */\nfunction Events (options) {\n  var overrides = {\n    resource: ResourceTypes.EVENTS,\n    types: '/<%=resource%>/types',\n  };\n\n  options = extend(true, {}, overrides, options);\n\n  Resource.call(this, options);\n};\n\n// This extends the base class of 'Resource'.\nEvents.prototype = Object.create(Resource.prototype);\nEvents.prototype.constructor = Events;\n\n/**\n * Returns a list of the requested events for the current network\n *\n * @param {object} headers      - The headers to apply to the request\n * @param {string} filterStatus - A string of all the statuses to filter by, separated by commas\n * @param {string} filterType   - A string of all the types to filter by, separated by commas\n *\n * @return {Promise}\n */\nEvents.prototype.getAll = function (headers, filterStatus, filterType) {\n  var request, url, filterString;\n\n  filterString = '';\n\n  url = utils.parseTokens(this.config.host + this.config.all, {\n    resource: this.config.resource\n  });\n\n  // If there is a status filter\n  if (filterStatus) {\n    if (typeof filterStatus !== 'string') {\n      return utils.promisify(false,\n        'IngestSDK Events.getAll requires a valid filter status to be passed as a string.');\n    }\n\n    filterString = '?filter=' + filterStatus;\n  }\n\n  if (filterType) {\n    if (typeof filterType !== 'string') {\n      return utils.promisify(false,\n        'IngestSDK Events.getAll requires a valid filter type to be passed as a string.');\n    }\n\n    if (!filterString) {\n      filterString = '?resource=' + filterType;\n    } else {\n      filterString = filterString + '&resource=' + filterType;\n    }\n  }\n\n  url += filterString;\n\n  request = new Request({\n    url: url,\n    token: this._tokenSource(),\n    headers: headers\n  });\n\n  return request.send();\n};\n\n/**\n * Gets a list of all event types\n *\n * @return {Promise}\n */\nEvents.prototype.getTypes = function () {\n  var url, request;\n\n  url = utils.parseTokens(this.config.host + this.config.types, {\n    resource: this.config.resource\n  });\n\n  request = new Request({\n    url: url,\n    token: this._tokenSource(),\n  });\n\n  return request.send();\n};\n\nmodule.exports = Events;\n\n\n/***/ }),\n/* 22 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\n\nvar Resource = __webpack_require__(3);\nvar Request = __webpack_require__(1);\nvar utils = __webpack_require__(2);\nvar extend = __webpack_require__(0);\nvar ResourceTypes = __webpack_require__(4);\n\n/**\n * Roles Resource\n *\n * @param {object} options - SDK Options.\n * @class\n * @extends Resource\n */\nfunction Roles (options) {\n  var overrides = {\n    resource: ResourceTypes.ROLES\n  };\n\n  options = extend(true, {}, overrides, options);\n\n  Resource.call(this, options);\n\n};\n\n// This extends the base class of 'Resource'.\nRoles.prototype = Object.create(Resource.prototype);\nRoles.prototype.constructor = Roles;\n\n/**\n * Update an existing role with new content.\n * @param  {object|array} resource  An object or an array of objects representing the role(s) to be updated.\n * @return {promise}                A promise which resolves when the request is complete.\n */\nRoles.prototype.update = function (resource) {\n  var request, data, url;\n\n  if (typeof resource !== 'object') {\n    return utils.promisify(false,\n      'IngestSDK Roles update requires a role to be passed as an object.');\n  }\n\n  data = resource;\n\n  url = utils.parseTokens(this.config.host + this.config.byId, {\n    resource: this.config.resource,\n    id: resource.id\n  });\n\n  request = new Request({\n    url: url,\n    token: this._tokenSource(),\n    method: 'PUT',\n    data: data\n  });\n\n  return request.send();\n};\n\nmodule.exports = Roles;\n\n\n/***/ })\n/******/ ]);\n});\n\n\n// WEBPACK FOOTER //\n// ingest-sdk.js"," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, {\n \t\t\t\tconfigurable: false,\n \t\t\t\tenumerable: true,\n \t\t\t\tget: getter\n \t\t\t});\n \t\t}\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 10);\n\n\n\n// WEBPACK FOOTER //\n// webpack/bootstrap 17775393cdf572be4053","'use strict';\n\nvar hasOwn = Object.prototype.hasOwnProperty;\nvar toStr = Object.prototype.toString;\n\nvar isArray = function isArray(arr) {\n\tif (typeof Array.isArray === 'function') {\n\t\treturn Array.isArray(arr);\n\t}\n\n\treturn toStr.call(arr) === '[object Array]';\n};\n\nvar isPlainObject = function isPlainObject(obj) {\n\tif (!obj || toStr.call(obj) !== '[object Object]') {\n\t\treturn false;\n\t}\n\n\tvar hasOwnConstructor = hasOwn.call(obj, 'constructor');\n\tvar hasIsPrototypeOf = obj.constructor && obj.constructor.prototype && hasOwn.call(obj.constructor.prototype, 'isPrototypeOf');\n\t// Not own constructor property must be Object\n\tif (obj.constructor && !hasOwnConstructor && !hasIsPrototypeOf) {\n\t\treturn false;\n\t}\n\n\t// Own properties are enumerated firstly, so to speed up,\n\t// if last one is own, then all properties are own.\n\tvar key;\n\tfor (key in obj) { /**/ }\n\n\treturn typeof key === 'undefined' || hasOwn.call(obj, key);\n};\n\nmodule.exports = function extend() {\n\tvar options, name, src, copy, copyIsArray, clone;\n\tvar target = arguments[0];\n\tvar i = 1;\n\tvar length = arguments.length;\n\tvar deep = false;\n\n\t// Handle a deep copy situation\n\tif (typeof target === 'boolean') {\n\t\tdeep = target;\n\t\ttarget = arguments[1] || {};\n\t\t// skip the boolean and the target\n\t\ti = 2;\n\t}\n\tif (target == null || (typeof target !== 'object' && typeof target !== 'function')) {\n\t\ttarget = {};\n\t}\n\n\tfor (; i < length; ++i) {\n\t\toptions = arguments[i];\n\t\t// Only deal with non-null/undefined values\n\t\tif (options != null) {\n\t\t\t// Extend the base object\n\t\t\tfor (name in options) {\n\t\t\t\tsrc = target[name];\n\t\t\t\tcopy = options[name];\n\n\t\t\t\t// Prevent never-ending loop\n\t\t\t\tif (target !== copy) {\n\t\t\t\t\t// Recurse if we're merging plain objects or arrays\n\t\t\t\t\tif (deep && copy && (isPlainObject(copy) || (copyIsArray = isArray(copy)))) {\n\t\t\t\t\t\tif (copyIsArray) {\n\t\t\t\t\t\t\tcopyIsArray = false;\n\t\t\t\t\t\t\tclone = src && isArray(src) ? src : [];\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tclone = src && isPlainObject(src) ? src : {};\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\t// Never move original objects, clone them\n\t\t\t\t\t\ttarget[name] = extend(deep, clone, copy);\n\n\t\t\t\t\t// Don't bring in undefined values\n\t\t\t\t\t} else if (typeof copy !== 'undefined') {\n\t\t\t\t\t\ttarget[name] = copy;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\t// Return the modified object\n\treturn target;\n};\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/extend/index.js\n// module id = 0\n// module chunks = 0","'use strict';\n\nvar Promise = require('pinkyswear');\nvar extend = require('extend');\n\nvar JWTUtils = require('./JWTUtils');\nvar RequestManager = require('./RequestManager');\n\nvar VALID_RESPONSE_CODES = [200, 201, 202, 204];\n\n/**\n * A wrapper around the XMLHttpRequest object.\n * @param {object}  options         Options for the request.\n * @param {boolean} options.async   Whether to perform the request asynchronously\n * @param {string}  options.method  REST verb to use for the request.\n * @param {string}  options.url     URL for the request.\n */\nfunction Request (options) {\n\n  this.defaults = {\n    async: true,\n    method: 'GET',\n    ignoreAcceptHeader: false\n  };\n\n  // Create the XHR object for this request.\n  this.request = new XMLHttpRequest();\n\n  // Set up event listeners for this request.\n  this.setupListeners();\n\n  // Todo, merge some defaults with this.\n  this.options = extend(true, this.defaults, options);\n  this.maxRetrys = 3;\n  this.retrys = 0;\n};\n\n/**\n * Send the request and return a promise to resolve when the request is complete.\n * @return {Promise} A promise which resolves when the request is complete.\n */\nRequest.prototype.send = function () {\n  this.promise = Promise();\n\n  // Make sure a url is passed before attempting to make the request.\n  if (this.options.url) {\n    // Add the request to the queue and send it\n    this.makeRequest();\n  } else {\n    this.requestError('Request Error : a url is required to make the request.');\n  }\n\n  // Return the promise. Once complete send of the next request if necessary\n  return this.promise\n    .then(RequestManager._sendNextRequest);\n};\n\n/**\n * Send the request synchronously\n * @param {function} callback Function to call when the request is completed.\n * @return {object} The result of the request.\n */\nRequest.prototype.sendSync = function (callback) {\n\n  if (typeof callback === 'function') {\n    this.callback = callback;\n  }\n\n  // Make sure a url is passed before attempting to make the request.\n  if (this.options.url) {\n    // Add the request to the queue and send it\n    return this.makeRequest();\n  }\n\n  this.requestError('Request Error : a url is required to make the request.');\n};\n\n/**\n * Add event listeners to the XMLHttpRequest object.\n */\nRequest.prototype.setupListeners = function () {\n  this.request.onreadystatechange = this.readyStateChange.bind(this);\n};\n\n/**\n * Execute the open and construction of the XMLHttpRequest and its data\n */\nRequest.prototype.makeRequest = function () {\n  var postData = this.preparePostData(this.options.data);\n  var headers = this.options.headers;\n  var hasContentType = headers && headers.hasOwnProperty('Content-Type');\n\n  if (!postData.success) {\n    this.requestError('Request Error : error preparing post data.');\n    return;\n  }\n\n  this.request.open(this.options.method, this.options.url, this.options.async);\n\n  // Set before we apply the headers so it can be overridden on a per request basis.\n  if (!this.options.ignoreAcceptHeader) {\n    this.request.setRequestHeader('Accept', 'application/vnd.ingest.v1+json');\n  }\n\n  if (headers) {\n    this.applyRequestHeaders(headers);\n  }\n\n  // Make the token optional.\n  if (this.options.token) {\n\n    // If there is a token present ensure that it's still valid.\n    if (JWTUtils.isExpired(this.options.token)) {\n      this.requestError('Request Error : token is expired.');\n      return;\n    }\n\n    this.request.setRequestHeader('Authorization', this.options.token);\n\n  }\n\n  // Set the default content type when posting data.\n  if (postData.data && postData.type === 'JSON' && !hasContentType) {\n    this.request.setRequestHeader('Content-Type', 'application/vnd.ingest.v1+json');\n  }\n\n  // If the request should be made synchronously then we don't want to add it to the RequestManager.\n  if (!this.options.async) {\n\n    if (postData.data) {\n      this.request.send(postData.data);\n    } else {\n      this.request.send();\n    }\n\n    if (!this.isValidResponseCode(this.request.status)) {\n      this.requestError('Request Error : invalid response code : ' + this.request.status);\n    }\n\n  } else {\n    // If everything is good lets add it to the queue\n    RequestManager.addRequest([this.request, postData.data]);\n  }\n};\n\n/**\n * Stringify the post data if it is present.\n * @param  {object} data Object to be parsed.\n * @return {object}      Result object with the parsed string, and a success boolean flag.\n */\nRequest.prototype.preparePostData = function (data) {\n\n  var result = {\n    success: true,\n    data: data,\n    type: 'JSON'\n  };\n\n  // In the case of file uploads, all FormData to be passed to the request.\n  if (data instanceof FormData) {\n    result.type = 'FormData';\n    return result;\n  }\n\n  if (data instanceof Blob) {\n    result.type = 'File';\n    return result;\n  }\n\n  // If the data is populated, and its not already a string parse it.\n  if (data) {\n    try {\n      result.data = JSON.stringify(data);\n    } catch (error) {\n      result.success = false;\n      result.data = null;\n    }\n  }\n\n  return result;\n};\n\n/**\n * Apply any supplied headers to the request object.\n * @param  {object} headers Array of headers to apply to the request object.\n */\nRequest.prototype.applyRequestHeaders = function (headers) {\n\n  var key, i;\n  var keys = Object.keys(headers);\n  var keysLength = keys.length;\n\n  // Loop through and add the keys to the requestHeaders.\n  for (i = 0; i < keysLength; i++) {\n    key = keys[i];\n    this.request.setRequestHeader(key, headers[key]);\n  }\n\n};\n\n/**\n * Handle the completion of the request and fulfill the promise.\n * @param  {String} Response test of the request.\n */\nRequest.prototype.requestComplete = function (response) {\n\n  // Process the result.\n  this.response = this.processResponse(response);\n\n  if (!this.promise) {\n\n    if (typeof this.callback === 'function') {\n      this.callback(null, this.response);\n    }\n\n    return;\n  }\n\n  // Either resolve or reject the promise.\n  this.promise(!this.response.data.errors, [this.response]);\n\n};\n\n/**\n * Process the response and parse certain content types.\n * @param  {*}  response  Response data from request.\n * @return {*}            Processed response data.\n */\nRequest.prototype.processResponse = function (response) {\n  var responseType = this.request.getResponseHeader('Content-Type');\n  var result = response;\n  var hasContent = this.request.status !== 202 && this.request.status !== 204;\n\n  // Parse JSON if the result is JSON.\n  if (hasContent && responseType && responseType.indexOf('json') !== -1) {\n    try {\n      result = JSON.parse(response);\n    } catch (error) {\n      result = {\n        errors: 'JSON parsing failed. ' + error.stack\n      };\n    }\n  }\n\n  return {\n    data: result,\n    headers: this.request.getResponseHeader.bind(this.request),\n    statusCode: this.request.status\n  };\n\n};\n\n/**\n * Resolve the promise.\n * @param  {Object | String} message   Error object or error message.\n */\nRequest.prototype.requestError = function (message) {\n  var error;\n\n  // If there isn't a promise, in the case of a synchronous request, handle the error.\n  if (!this.promise) {\n\n    error = new Error(message);\n\n    if (typeof this.callback === 'function') {\n      this.callback(error);\n      return;\n    }\n\n    throw error;\n\n  }\n\n  // Reject the promise.\n  this.promise(false, [{\n    message: message,\n    headers: this.request.getAllResponseHeaders(),\n    statusCode: this.request.status\n  }]);\n};\n\n/**\n * Handle ready state change events.\n */\nRequest.prototype.readyStateChange = function () {\n  var resp, retryAfterTime;\n\n  retryAfterTime = 1000;\n\n  switch (this.request.readyState) {\n  case 4:\n\n    // If we get a rate limit error, lets just retry the request\n    if (this.request.status === 429 && (this.retrys < this.maxRetrys)) {\n      if (this.request.getResponseHeader('Retry-After')) {\n        retryAfterTime = this.request.getResponseHeader('Retry-After') * 1000;\n      }\n\n      this.retrys++;\n      setTimeout(this.makeRequest.bind(this), retryAfterTime);\n      return;\n    }\n\n    // Check if the final response code is valid\n    if (this.isValidResponseCode(this.request.status)) {\n      return this.requestComplete(this.request.responseText);\n    } else if (this.request.getResponseHeader('Content-Length') === '0') {\n      return this.requestError('Request Error: Invalid response code : ' + this.request.status);\n    }\n\n    // Special case error handling with response body\n    resp = this.processResponse(this.request.response);\n    this.requestError(resp.data);\n    break;\n  default:\n    // Silence is golden\n  }\n};\n\n/**\n * Validate the current response code to see if the request was a success.\n * @param  {Number}  responseCode Response Code.\n * @return {Boolean}              Should this be treated as a successful response code.\n */\nRequest.prototype.isValidResponseCode = function (responseCode) {\n\n  var result = false,\n    responseCodeCount = VALID_RESPONSE_CODES.length,\n    i;\n\n  // Check if the supplied code is in our list of valid codes.\n  for (i = 0; i < responseCodeCount; i++) {\n\n    if (responseCode === VALID_RESPONSE_CODES[i]) {\n      result = true;\n      break;\n    }\n\n  }\n\n  return result;\n\n};\n\n/**\n * Cancel the current XHR request.\n */\nRequest.prototype.cancel = function () {\n  // Remove the event listener.\n  this.request.onreadystatechange = null;\n  this.request.abort();\n  this.requestError('Request has been canceled.');\n};\n\nmodule.exports = Request;\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/Request.js\n// module id = 1\n// module chunks = 0","'use strict';\n\nvar Promise = require('pinkyswear');\nvar Utils = {};\n\n/**\n * Replace all tokens within a given template based on the given key/value pair.\n * @param  {string}     template    Template for the url.\n * @param  {object}     hash        Key/Value pair for replacing tokens in the template.\n *\n * @example\n * var tokens = {\n *  keyInTemplate: 'replacedWith'\n * };\n *\n * var template = '<%=keyInTemplate%>';\n *\n * var result = parseTokens(template, tokens);  // 'replacedWith'\n *\n * @return {string}                 Parsed string.\n */\nUtils.parseTokens = function (template, hash) {\n  var keys, i, length;\n\n  if (!template) {\n    return null;\n  }\n\n  keys = Object.keys(hash);\n  length = keys.length;\n\n  for (i = 0; i < length; i++) {\n    template = template.replace('<%=' + keys[i] + '%>', hash[keys[i]]);\n  }\n\n  return template;\n};\n\n/**\n * Wrapper function to wrap a value in either a reject or resolve.\n * @param  {boolean} state Rejection or Approval.\n * @param  {*}       value Value to pass back to the promise.\n * @return {Promise}       Promise/A+ spec promise.\n */\nUtils.promisify = function (state, value) {\n  var promise = Promise();\n\n  promise(state, [value]);\n\n  return promise;\n};\n\n/**\n * Wrap an array of promises and return when they have all completed.\n * @param   {Array}     promises  An array of promises to manage.\n * @param   {boolean}   paused    A boolean to pause the execution of the promises.\n * @return  {Promise}             A promise that is resolved when all of the promises have fulfilled.\n */\nUtils.series = function (promises, paused) {\n\n  var promisesCount = promises.length;\n  var all = Promise();\n\n  var state = {\n    total: promisesCount,\n    complete: 0,\n    responses: [],\n    promises: promises,\n    paused: true\n  };\n\n  all.pause = Utils._seriesPause.bind(undefined, all, state);\n  all.resume = Utils._seriesResume.bind(undefined, all, state);\n  all.cancel = Utils._seriesCancel.bind(undefined, all, state);\n\n  if (!paused) {\n    state.paused = false;\n    Utils._seriesCallPromise(promises[0], state, all);\n  }\n\n  return all;\n\n};\n\n/**\n * Call a promise and pass the complete and error functions.\n * @param  {Promise} promise Promise to execute on.\n * @param  {Object} state   Persistent state of the series of promises.\n */\nUtils._seriesCallPromise = function (promise, state, all) {\n  // Call the promise.\n  if (!state.paused) {\n    promise().then(Utils._seriesComplete.bind(undefined, all, state),\n      Utils._seriesError.bind(undefined, all, state));\n  }\n};\n\n/**\n * Manage the progress of the promises.\n * @private\n * @param  {Promise} all      All promise.\n * @param  {Object}  state    State object used to persist the promise count.\n * @param  {Object}  response Response of the promise being fulfilled.\n */\nUtils._seriesComplete = function (all, state, response) {\n\n  // Early return if this has been canceled.\n  if (state.canceled) {\n    return;\n  }\n\n  // Increment the complete promises.\n  state.complete++;\n  state.responses.push(response);\n\n  if (state.complete >= state.total) {\n    all(true, state.responses);\n  } else {\n    if (!state.paused) {\n      // Execute the next promise.\n      Utils._seriesCallPromise(state.promises[state.complete], state, all);\n    }\n  }\n\n};\n\n/**\n * Immediately reject the promise if there is an error.\n * @param  {Promise} all  All promise.\n * @param  {Object}  state    State object used to persist the promise count.\n * @param  {Object}  response Response of the promise being fulfilled.\n */\nUtils._seriesError = function (all, state, error) {\n  all(false, [error]);\n};\n\n/**\n * Pause the current series of promises.\n * @param  {Promise} all  All promise.\n * @param  {Object}  state    State object used to persist the promise count.\n */\nUtils._seriesPause = function (all, state) {\n  state.paused = true;\n};\n\n/**\n * Resume the current series of promises.\n * @param  {Promise} all  All promise.\n * @param  {Object}  state    State object used to persist the promise count.\n */\nUtils._seriesResume = function (all, state) {\n  state.paused = false;\n\n  if (state.complete !== state.total) {\n    Utils._seriesCallPromise(state.promises[state.complete], state, all);\n  }\n};\n\n/**\n * Resolve the promise but return an empty response.\n * @param  {Promise}  all     All promise.\n * @param  {Object}   state   State object used to persist the promise count.\n */\nUtils._seriesCancel = function (all, state) {\n  state.canceled = true;\n  all(true, []);\n};\n\n/**\n * Return true if a file provided matches a support image type.\n * @param  {file}     file  A reference to an image file.\n * @return {Boolean}        True if the type matches a known image type.\n */\nUtils.isImage = function (file) {\n  return file.type.indexOf('image') !== -1;\n};\n\nmodule.exports = Utils;\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/Utils.js\n// module id = 2\n// module chunks = 0","'use strict';\n\nvar extend = require('extend');\nvar Request = require('../Request');\nvar utils = require('../Utils');\n\n/**\n * Abstract Resource Class\n *\n * @param {object} options - SDK Options.\n * @class\n */\nfunction Resource (options) {\n\n  this.defaults = {\n    host: 'https://api.ingest.io',\n    all: '/<%=resource%>',\n    byId: '/<%=resource%>/<%=id%>',\n    trash: '/<%=resource%>?status=trashed',\n    deleteMethods: {\n      'permanent': '?permanent=1'\n    },\n    search: '/<%=resource%>?search=<%=input%>',\n    tokenSource: null,\n    resource: null\n  };\n\n  this.config = extend(true, {}, this.defaults, options);\n}\n\n/**\n * Proxy the request to token source to ensure a value is always returned.\n * @private\n * @return {string} Auth token.\n */\nResource.prototype._tokenSource = function () {\n  var result = null;\n\n  if (this.config.tokenSource) {\n    result = this.config.tokenSource.call();\n  }\n\n  return result;\n};\n\n/**\n * Return a list of the requested resource for the current user and network.\n * @param  {object}   headers   Object representing headers to apply to the request.\n * @return {promise}            A promise which resolves when the request is complete.\n */\nResource.prototype.getAll = function (headers) {\n  var request;\n  var url = utils.parseTokens(this.config.host + this.config.all, {\n    resource: this.config.resource\n  });\n\n  request = new Request({\n    url: url,\n    token: this._tokenSource(),\n    headers: headers\n  });\n\n  return request.send();\n};\n\n/**\n * Return a resource that matches the supplied id.\n * @param  {string}   id    Resource id.\n * @return {promise}        A promise which resolves when the request is complete.\n */\nResource.prototype.getById = function (id) {\n  var url, request;\n\n  if (typeof id !== 'string' || id.length <= 0) {\n    return utils.promisify(false,\n      'IngestSDK Resource getById requires a valid id passed as a string.');\n  }\n\n  url = utils.parseTokens(this.config.host + this.config.byId, {\n    resource: this.config.resource,\n    id: id\n  });\n\n  request = new Request({\n    url: url,\n    token: this._tokenSource()\n  });\n\n  return request.send();\n};\n\n/**\n * Return the resources currently in the trash.\n * @param  {object} headers Headers to be passed along with the request for pagination.\n * @return {promise}         A promise which resolves when the request is complete.\n */\nResource.prototype.getTrashed = function (headers) {\n  var request;\n  var url = utils.parseTokens(this.config.host + this.config.trash, {\n    resource: this.config.resource\n  });\n\n  request = new Request({\n    url: url,\n    token: this._tokenSource(),\n    headers: headers\n  });\n\n  return request.send();\n};\n\n/**\n * Add a new resource.\n * @param   {object}  resource  An object representing the resource to add.\n * @return  {promise}           A promise which resolves when the request is complete.\n */\nResource.prototype.add = function (resource) {\n  var url, request;\n\n  if (typeof resource !== 'object') {\n    return utils.promisify(false,\n      'IngestSDK Resource add requires a resource passed as an object.');\n  }\n\n  url = utils.parseTokens(this.config.host + this.config.all, {\n    resource: this.config.resource\n  });\n\n  request = new Request({\n    url: url,\n    token: this._tokenSource(),\n    method: 'POST',\n    data: resource\n  });\n\n  return request.send();\n};\n\n/**\n * Update an existing resource with new content.\n * @param  {object|array} resource  An object or an array of objects representing the resource(s) to be updated.\n * @return {promise}                A promise which resolves when the request is complete.\n */\nResource.prototype.update = function (resource) {\n  var request, data, url;\n\n  if (typeof resource !== 'object') {\n    return utils.promisify(false,\n      'IngestSDK Resource update requires a resource to be passed as an object.');\n  }\n\n  data = resource;\n\n  url = utils.parseTokens(this.config.host + this.config.byId, {\n    resource: this.config.resource,\n    id: resource.id\n  });\n\n  request = new Request({\n    url: url,\n    token: this._tokenSource(),\n    method: 'PATCH',\n    data: data\n  });\n\n  return request.send();\n};\n\n/**\n * Delete an existing resource\n * @param  {string}   resource  The id for the resource to be deleted.\n * @param  {boolean}  async     A flag to indicate if this should be an async request to delete.\n *\n * @return {Promise}            A promise which resolves when the request is complete.\n */\nResource.prototype.delete = function (resource, async) {\n  if (typeof async !== 'boolean') {\n    async = true;\n  }\n\n  if (typeof resource !== 'string') {\n    return utils.promisify(false,\n      'IngestSDK Resource delete requires a resource to be passed as a string.');\n  }\n\n  return this._deleteResource(resource, false, async);\n};\n\n/**\n * Permanently delete an existing resource.\n * @param  {string}   resource  The id for the resource to be deleted.\n * @param  {boolean}  async     A flag to indicate if this should be an async request to delete.\n *\n * @return {Promise}            A promise which resolves when the request is complete.\n */\nResource.prototype.permanentDelete = function (resource, async) {\n  if (typeof async !== 'boolean') {\n    async = true;\n  }\n\n  if (typeof resource !== 'string') {\n    return utils.promisify(false,\n      'IngestSDK Resource delete requires a resource to be passed as a string.');\n  }\n\n  return this._deleteResource(resource, true, async);\n};\n\n/**\n * Delete a single resource\n * @private\n * @param   {object}    resource    The id of the resource to be deleted.\n * @param   {boolean}   permanent   A flag to permanently delete each video.\n * @return  {promise}               A promise which resolves when the request is complete.\n */\nResource.prototype._deleteResource = function (resource, permanent) {\n  var request;\n\n  var url = utils.parseTokens(this.config.host + this.config.byId, {\n    resource: this.config.resource,\n    id: resource\n  });\n\n  if (permanent === true) {\n    url += this.config.deleteMethods.permanent;\n  }\n\n  request = new Request({\n    url: url,\n    token: this._tokenSource(),\n    method: 'DELETE'\n  });\n\n  return request.send();\n};\n\n/**\n * Delete an existing resource\n * @param  {string}     resource    The id for the resource to be deleted.\n * @param  {function}   callback    A Synchronous callback for handling any errors, or working with the http response.\n */\nResource.prototype.deleteSync = function (resource, callback) {\n\n  if (typeof resource !== 'string') {\n    callback(new Error('IngestSDK Resource delete requires a resource to be passed as a string.'));\n    return;\n  }\n\n  this._deleteResourceSync(resource, false, callback);\n\n};\n\n/**\n * Permanently delete an existing resource.\n * @param   {string}    resource    The id for the resource to be deleted.\n * @param   {function}  callback    A Synchronous callback for handling any errors, or working with the http response.\n */\nResource.prototype.permanentDeleteSync = function (resource, callback) {\n\n  if (typeof resource !== 'string') {\n    callback(new Error('IngestSDK Resource delete requires a resource to be passed as a string.'));\n    return;\n  }\n\n  this._deleteResourceSync(resource, true, callback);\n\n};\n\n/**\n * Delete a single resource synchronously\n * @private\n * @param   {object}    resource    The id of the resource to be deleted.\n * @param   {boolean}   permanent   A flag to permanently delete each video.\n * @param   {function}  callback    A Synchronous callback for handling any errors, or working with the http response.\n */\nResource.prototype._deleteResourceSync = function (resource, permanent, callback) {\n  var request;\n\n  var url = utils.parseTokens(this.config.host + this.config.byId, {\n    resource: this.config.resource,\n    id: resource\n  });\n\n  if (permanent === true) {\n    url += this.config.deleteMethods.permanent;\n  }\n\n  request = new Request({\n    url: url,\n    async: false,\n    token: this._tokenSource(),\n    method: 'DELETE'\n  });\n\n  request.sendSync(callback);\n};\n\n/**\n * Return a subset of items that match the search terms.\n * @param  {string}   input     The search terms to match against.\n * @param  {object}   headers   The headers to be passed to the request.\n * @param  {boolean}  trash     Should we be searching the trash.\n * @return {Promise}          A promise which resolves when the request is complete.\n */\nResource.prototype.search = function (input, headers, status) {\n  var url, request;\n\n  if (typeof input !== 'string') {\n    return utils.promisify(false,\n      'IngestSDK Resource search requires search input to be passed as a string.');\n  }\n\n  url = utils.parseTokens(this.config.host + this.config.search, {\n    resource: this.config.resource,\n    input: encodeURIComponent(input)\n  });\n\n  // If there is a status and it\n  if (status) {\n    if (typeof status !== 'string') {\n      return utils.promisify(false,\n        'IngestSDK Resource search requires a valid status to be passed as a string.');\n    }\n\n    url = url + '&status=' + status;\n  }\n\n  request = new Request({\n    url: url,\n    token: this._tokenSource(),\n    headers: headers\n  });\n\n  return request.send();\n};\n\n/**\n * Return a subset of items that match the search terms in the trash.\n * @param  {string} input    The search terms to match against.\n * @param  {object} headers  The headers to be passed to the request.\n * @return {Promise}          A promise which resolves when the request is complete.\n */\nResource.prototype.searchTrash = function (input, headers) {\n  return this.search(input, headers, 'trashed');\n};\n\n/**\n * Get the total count of resources.\n * @return {promise} A promise which resolves when the request is complete.\n */\nResource.prototype.count = function () {\n  var request;\n  var url = utils.parseTokens(this.config.host + this.config.all, {\n    resource: this.config.resource\n  });\n\n  request = new Request({\n    url: url,\n    token: this._tokenSource(),\n    method: 'HEAD'\n  });\n\n  return request.send()\n    .then(this._handleCountResponse);\n};\n\n/**\n * Get the total count of resources in the trash.\n * @return {promise} A promise which resolves when the request is complete.\n */\nResource.prototype.trashCount = function () {\n  var request;\n  var url = utils.parseTokens(this.config.host + this.config.trash, {\n    resource: this.config.resource\n  });\n\n  request = new Request({\n    url: url,\n    token: this._tokenSource(),\n    method: 'HEAD'\n  });\n\n  return request.send()\n    .then(this._handleCountResponse);\n};\n\n/**\n * Return the resource count from the response.\n * @private\n * @param  {object} response Request response object.\n * @return {number}          The resource count.\n */\nResource.prototype._handleCountResponse = function (response) {\n  return parseInt(response.headers('Resource-Count'), 10);\n};\n\nmodule.exports = Resource;\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/resources/Resource.js\n// module id = 3\n// module chunks = 0","'use strict';\n\n/**\n * Constants for our resource types\n */\nmodule.exports = {\n  'EVENTS': 'events',\n  'INPUTS': 'encoding/inputs',\n  'JOBS': 'encoding/jobs',\n  'NETWORKS': 'networks',\n  'PROFILES': 'encoding/profiles',\n  'ROLES': 'roles',\n  'USERS': 'users',\n  'VIDEOS': 'videos'\n};\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/constants/resourceTypes.js\n// module id = 4\n// module chunks = 0","/*\n * PinkySwear.js 2.2.2 - Minimalistic implementation of the Promises/A+ spec\n * \n * Public Domain. Use, modify and distribute it any way you like. No attribution required.\n *\n * NO WARRANTY EXPRESSED OR IMPLIED. USE AT YOUR OWN RISK.\n *\n * PinkySwear is a very small implementation of the Promises/A+ specification. After compilation with the\n * Google Closure Compiler and gzipping it weighs less than 500 bytes. It is based on the implementation for \n * Minified.js and should be perfect for embedding. \n *\n *\n * PinkySwear has just three functions.\n *\n * To create a new promise in pending state, call pinkySwear():\n *         var promise = pinkySwear();\n *\n * The returned object has a Promises/A+ compatible then() implementation:\n *          promise.then(function(value) { alert(\"Success!\"); }, function(value) { alert(\"Failure!\"); });\n *\n *\n * The promise returned by pinkySwear() is a function. To fulfill the promise, call the function with true as first argument and\n * an optional array of values to pass to the then() handler. By putting more than one value in the array, you can pass more than one\n * value to the then() handlers. Here an example to fulfill a promsise, this time with only one argument: \n *         promise(true, [42]);\n *\n * When the promise has been rejected, call it with false. Again, there may be more than one argument for the then() handler:\n *         promise(true, [6, 6, 6]);\n *         \n * You can obtain the promise's current state by calling the function without arguments. It will be true if fulfilled,\n * false if rejected, and otherwise undefined.\n * \t\t   var state = promise(); \n * \n * https://github.com/timjansen/PinkySwear.js\n */\n(function (root, factory) {\n\tif (typeof define === 'function' && define.amd) {\n\t\tdefine([], factory);\n\t} else if (typeof module === 'object' && module.exports) {\n\t\tmodule.exports = factory();\n\t} else {\n\t\troot.pinkySwear = factory();\n\t}\n}(this, function() {\n\tvar undef;\n\n\tfunction isFunction(f) {\n\t\treturn typeof f == 'function';\n\t}\n\tfunction isObject(f) {\n\t\treturn typeof f == 'object';\n\t}\n\tfunction defer(callback) {\n\t\tif (typeof setImmediate != 'undefined')\n\t\t\tsetImmediate(callback);\n\t\telse if (typeof process != 'undefined' && process['nextTick'])\n\t\t\tprocess['nextTick'](callback);\n\t\telse\n\t\t\tsetTimeout(callback, 0);\n\t}\n\n\treturn function pinkySwear(extend) {\n\t\tvar state;           // undefined/null = pending, true = fulfilled, false = rejected\n\t\tvar values = [];     // an array of values as arguments for the then() handlers\n\t\tvar deferred = [];   // functions to call when set() is invoked\n\n\t\tvar set = function(newState, newValues) {\n\t\t\tif (state == null && newState != null) {\n\t\t\t\tstate = newState;\n\t\t\t\tvalues = newValues;\n\t\t\t\tif (deferred.length)\n\t\t\t\t\tdefer(function() {\n\t\t\t\t\t\tfor (var i = 0; i < deferred.length; i++)\n\t\t\t\t\t\t\tdeferred[i]();\n\t\t\t\t\t});\n\t\t\t}\n\t\t\treturn state;\n\t\t};\n\n\t\tset['then'] = function (onFulfilled, onRejected) {\n\t\t\tvar promise2 = pinkySwear(extend);\n\t\t\tvar callCallbacks = function() {\n\t    \t\ttry {\n\t    \t\t\tvar f = (state ? onFulfilled : onRejected);\n\t    \t\t\tif (isFunction(f)) {\n\t\t   \t\t\t\tfunction resolve(x) {\n\t\t\t\t\t\t    var then, cbCalled = 0;\n\t\t   \t\t\t\t\ttry {\n\t\t\t\t   \t\t\t\tif (x && (isObject(x) || isFunction(x)) && isFunction(then = x['then'])) {\n\t\t\t\t\t\t\t\t\t\tif (x === promise2)\n\t\t\t\t\t\t\t\t\t\t\tthrow new TypeError();\n\t\t\t\t\t\t\t\t\t\tthen['call'](x,\n\t\t\t\t\t\t\t\t\t\t\tfunction() { if (!cbCalled++) resolve.apply(undef,arguments); } ,\n\t\t\t\t\t\t\t\t\t\t\tfunction(value){ if (!cbCalled++) promise2(false,[value]);});\n\t\t\t\t   \t\t\t\t}\n\t\t\t\t   \t\t\t\telse\n\t\t\t\t   \t\t\t\t\tpromise2(true, arguments);\n\t\t   \t\t\t\t\t}\n\t\t   \t\t\t\t\tcatch(e) {\n\t\t   \t\t\t\t\t\tif (!cbCalled++)\n\t\t   \t\t\t\t\t\t\tpromise2(false, [e]);\n\t\t   \t\t\t\t\t}\n\t\t   \t\t\t\t}\n\t\t   \t\t\t\tresolve(f.apply(undef, values || []));\n\t\t   \t\t\t}\n\t\t   \t\t\telse\n\t\t   \t\t\t\tpromise2(state, values);\n\t\t\t\t}\n\t\t\t\tcatch (e) {\n\t\t\t\t\tpromise2(false, [e]);\n\t\t\t\t}\n\t\t\t};\n\t\t\tif (state != null)\n\t\t\t\tdefer(callCallbacks);\n\t\t\telse\n\t\t\t\tdeferred.push(callCallbacks);\n\t\t\treturn promise2;\n\t\t};\n        if(extend){\n            set = extend(set);\n        }\n\t\treturn set;\n\t};\n}));\n\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/pinkyswear/pinkyswear.js\n// module id = 5\n// module chunks = 0","// shim for using process in browser\nvar process = module.exports = {};\n\n// cached from whatever global is present so that test runners that stub it\n// don't break things.  But we need to wrap it in a try catch in case it is\n// wrapped in strict mode code which doesn't define any globals.  It's inside a\n// function because try/catches deoptimize in certain engines.\n\nvar cachedSetTimeout;\nvar cachedClearTimeout;\n\nfunction defaultSetTimout() {\n    throw new Error('setTimeout has not been defined');\n}\nfunction defaultClearTimeout () {\n    throw new Error('clearTimeout has not been defined');\n}\n(function () {\n    try {\n        if (typeof setTimeout === 'function') {\n            cachedSetTimeout = setTimeout;\n        } else {\n            cachedSetTimeout = defaultSetTimout;\n        }\n    } catch (e) {\n        cachedSetTimeout = defaultSetTimout;\n    }\n    try {\n        if (typeof clearTimeout === 'function') {\n            cachedClearTimeout = clearTimeout;\n        } else {\n            cachedClearTimeout = defaultClearTimeout;\n        }\n    } catch (e) {\n        cachedClearTimeout = defaultClearTimeout;\n    }\n} ())\nfunction runTimeout(fun) {\n    if (cachedSetTimeout === setTimeout) {\n        //normal enviroments in sane situations\n        return setTimeout(fun, 0);\n    }\n    // if setTimeout wasn't available but was latter defined\n    if ((cachedSetTimeout === defaultSetTimout || !cachedSetTimeout) && setTimeout) {\n        cachedSetTimeout = setTimeout;\n        return setTimeout(fun, 0);\n    }\n    try {\n        // when when somebody has screwed with setTimeout but no I.E. maddness\n        return cachedSetTimeout(fun, 0);\n    } catch(e){\n        try {\n            // When we are in I.E. but the script has been evaled so I.E. doesn't trust the global object when called normally\n            return cachedSetTimeout.call(null, fun, 0);\n        } catch(e){\n            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error\n            return cachedSetTimeout.call(this, fun, 0);\n        }\n    }\n\n\n}\nfunction runClearTimeout(marker) {\n    if (cachedClearTimeout === clearTimeout) {\n        //normal enviroments in sane situations\n        return clearTimeout(marker);\n    }\n    // if clearTimeout wasn't available but was latter defined\n    if ((cachedClearTimeout === defaultClearTimeout || !cachedClearTimeout) && clearTimeout) {\n        cachedClearTimeout = clearTimeout;\n        return clearTimeout(marker);\n    }\n    try {\n        // when when somebody has screwed with setTimeout but no I.E. maddness\n        return cachedClearTimeout(marker);\n    } catch (e){\n        try {\n            // When we are in I.E. but the script has been evaled so I.E. doesn't  trust the global object when called normally\n            return cachedClearTimeout.call(null, marker);\n        } catch (e){\n            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error.\n            // Some versions of I.E. have different rules for clearTimeout vs setTimeout\n            return cachedClearTimeout.call(this, marker);\n        }\n    }\n\n\n\n}\nvar queue = [];\nvar draining = false;\nvar currentQueue;\nvar queueIndex = -1;\n\nfunction cleanUpNextTick() {\n    if (!draining || !currentQueue) {\n        return;\n    }\n    draining = false;\n    if (currentQueue.length) {\n        queue = currentQueue.concat(queue);\n    } else {\n        queueIndex = -1;\n    }\n    if (queue.length) {\n        drainQueue();\n    }\n}\n\nfunction drainQueue() {\n    if (draining) {\n        return;\n    }\n    var timeout = runTimeout(cleanUpNextTick);\n    draining = true;\n\n    var len = queue.length;\n    while(len) {\n        currentQueue = queue;\n        queue = [];\n        while (++queueIndex < len) {\n            if (currentQueue) {\n                currentQueue[queueIndex].run();\n            }\n        }\n        queueIndex = -1;\n        len = queue.length;\n    }\n    currentQueue = null;\n    draining = false;\n    runClearTimeout(timeout);\n}\n\nprocess.nextTick = function (fun) {\n    var args = new Array(arguments.length - 1);\n    if (arguments.length > 1) {\n        for (var i = 1; i < arguments.length; i++) {\n            args[i - 1] = arguments[i];\n        }\n    }\n    queue.push(new Item(fun, args));\n    if (queue.length === 1 && !draining) {\n        runTimeout(drainQueue);\n    }\n};\n\n// v8 likes predictible objects\nfunction Item(fun, array) {\n    this.fun = fun;\n    this.array = array;\n}\nItem.prototype.run = function () {\n    this.fun.apply(null, this.array);\n};\nprocess.title = 'browser';\nprocess.browser = true;\nprocess.env = {};\nprocess.argv = [];\nprocess.version = ''; // empty string to avoid regexp issues\nprocess.versions = {};\n\nfunction noop() {}\n\nprocess.on = noop;\nprocess.addListener = noop;\nprocess.once = noop;\nprocess.off = noop;\nprocess.removeListener = noop;\nprocess.removeAllListeners = noop;\nprocess.emit = noop;\nprocess.prependListener = noop;\nprocess.prependOnceListener = noop;\n\nprocess.listeners = function (name) { return [] }\n\nprocess.binding = function (name) {\n    throw new Error('process.binding is not supported');\n};\n\nprocess.cwd = function () { return '/' };\nprocess.chdir = function (dir) {\n    throw new Error('process.chdir is not supported');\n};\nprocess.umask = function() { return 0; };\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/process/browser.js\n// module id = 6\n// module chunks = 0","'use strict';\n\n/**\n * UTILS for dealing with jwt tokens.\n */\n\n/**\n * Parse the payload out of the JWT token.\n * @param  {string} token JWT Token.\n * @return {object}       Parsed payload object.\n */\nfunction parseTokenPayload (token) {\n  var payload;\n  var parts = token.split('.');\n\n  // Return false if the token is invalid.\n  if (parts.length <= 1) {\n    return false;\n  }\n\n  // Decode the payload portion.\n  payload = window.atob(parts[1]);\n\n  // Parse it as JSON\n  payload = JSON.parse(payload);\n\n  return payload;\n};\n\n/**\n * Return true if the provided token has expired.\n * @param  {string}  token JWT Token\n * @return {Boolean}       True if expired.\n */\nmodule.exports.isExpired = function (token) {\n  var data, exp, result, now;\n\n  data = parseTokenPayload(token);\n\n  result = true;\n\n  // Return true if the token does not parse properly.\n  if (!data) {\n    return result;\n  }\n\n  exp = data.exp;\n\n  // Get the unix timestamp in seconds.\n  now = new Date();\n  now = now.getTime() / 1000;\n\n  if (!exp) {\n    return result;\n  }\n\n  // If the expiry data is still in the future.\n  if (now < exp) {\n    result = false;\n  }\n\n  return result;\n\n};\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/JWTUtils.js\n// module id = 7\n// module chunks = 0","'use strict';\n\n/**\n * Manages request objects in a queueing system\n */\nfunction RequestManager () {\n  this.pending = [];\n  this.activeRequests = 0;\n  this.currentSetRequests = 0;\n  this.lastRequestSetStart = null;\n  this.resetTimer = null;\n\n  this._sendNextRequest = this.sendNextRequest.bind(this);\n  this._resetCurrentSet = this.resetCurrentSet.bind(this);\n};\n\n/**\n * Sets the max requests for the Request Manager\n *\n * @param {number} maxRequests - The maximum allowed requests at one time\n */\nRequestManager.prototype.setMaxRequests = function (maxRequests) {\n  this.maxRequests = maxRequests;\n};\n\n/**\n * Resets the current set and sets the last request start to the passed in value\n *\n * @param {any} newDate - The new date timestamp or null\n */\nRequestManager.prototype.resetCurrentSet = function (newDate) {\n  this.currentSetRequests = 0;\n  this.lastRequestSetStart = newDate;\n};\n\n/**\n * Sends a request or adds it to the queue if it can't be sent\n *\n * @param {array} requestData - The request object and request data in an array\n *\n * @return\n */\nRequestManager.prototype.addRequest = function (requestData) {\n  // If we have too many out then queue the request\n  if (this.activeRequests >= this.maxRequests) {\n    this.pending.push(requestData);\n    return;\n  }\n\n  // Otherwise send the request\n  this.sendRequest(requestData[0], requestData[1]);\n};\n\n/**\n * Sends the request\n *\n * @param {object} request - The request object\n * @param {object} data    - The request data\n */\nRequestManager.prototype.sendRequest = function (request, data) {\n\n  // If there is a reset timer, we need to clear it so its not run\n  if (this.resetTimer) {\n    clearTimeout(this.resetTimer);\n  }\n\n  // If this request is the start of a set, lets reset the set data\n  if (this.currentSetRequests % this.maxRequests === 0) {\n    this.resetCurrentSet(Date.now());\n  }\n\n  // Increment counters\n  this.activeRequests++;\n  this.currentSetRequests++;\n\n  // Send data\n  if (data) {\n    request.send(data);\n  } else {\n    request.send();\n  }\n};\n\n/**\n * Sends the next available request if applicable\n *\n * @param {object}  response - The http response data\n *\n * @return {object} response - The http response data\n */\nRequestManager.prototype.sendNextRequest = function (response) {\n  var XRatelimitRemaining, moreRequests, requestData, delay;\n\n  // Deincrement counter\n  this.activeRequests--;\n\n  // No more to send, reset data if enough time passes\n  if (this.pending.length === 0) {\n\n    // If i don't have a timer already and have no active requests\n    if (!this.resetTimer && this.activeRequests === 0) {\n      // Set the reset timer so new calls are in sync\n      this.resetTimer = setTimeout(this._resetCurrentSet, this.XRatelimitLimit * 1000);\n    }\n\n    // Return response\n    return response;\n  }\n\n  // Only run the first time to get the limits\n  if (!this.XRatelimitReset) {\n    // Set the reset and the limit\n    this.XRatelimitReset = response.headers('X-Ratelimit-Reset');\n    this.XRatelimitLimit = response.headers('X-Ratelimit-Limit');\n\n    // If the limit returned from the server is less than the set max limit, lets override it\n    if (this.XRatelimitLimit < this.maxRequests) {\n      this.maxRequests = this.XRatelimitLimit;\n    }\n  }\n\n  // Get my next request and requests remaining\n  requestData = this.pending.shift();\n  XRatelimitRemaining = response.headers('X-Ratelimit-Remaining');\n\n  // See if I can send more requests right now\n  moreRequests = (this.activeRequests < this.maxRequests) && (XRatelimitRemaining > 0);\n\n  // If I can send more requests send them\n  if (moreRequests) {\n    this.sendRequest(requestData[0], requestData[1]);\n  } else {\n    // Otherwise lets delay so these get sent in the next tick\n    delay = (Date.now() - this.lastRequestSetStart) < 100 ? 100 : (Date.now() - this.lastRequestSetStart);\n\n    // Delay the call of the next send request\n    setTimeout(this.sendRequest.bind(this, requestData[0], requestData[1]), delay);\n  }\n\n  // Return the response\n  return response;\n};\n\nmodule.exports = new RequestManager();\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/RequestManager.js\n// module id = 8\n// module chunks = 0","'use strict';\n\nvar Resource = require('./Resource');\nvar Request = require('../Request');\nvar utils = require('../Utils');\nvar extend = require('extend');\n\n/**\n * Abstract PlaybackContent Class\n *\n * @param {object} options - SDK Options.\n * @class\n * @extends Resource\n */\nfunction PlaybackContent (options) {\n\n  var overrides = {\n    thumbnail: '/<%=resource%>/<%=id%>/thumbnail',\n    thumbnails: '/<%=resource%>/<%=id%>/thumbnails',\n    deleteThumbnail: '/<%=resource%>/<%=id%>/thumbnail/<%=thumbnailId%>'\n  };\n\n  options = extend(true, {}, overrides, options);\n\n  Resource.call(this, options);\n\n};\n\n// This extends the base class of 'Resource'.\nPlaybackContent.prototype = Object.create(Resource.prototype);\nPlaybackContent.prototype.constructor = PlaybackContent;\n\n/**\n * Retrieve all thumbnails for a provided resource id.\n * @param {string}    id    ID of the resource to retrieve thumbnails for.\n * @return {promise}        A promise which resolves when the request is complete.\n */\nPlaybackContent.prototype.getThumbnails = function (id) {\n  var url, request;\n\n  if (typeof id !== 'string') {\n    return utils.promisify(false,\n      'IngestSDK PlaybackContent getThumbnails requires an id to be passed as a string.');\n  }\n\n  url = utils.parseTokens(this.config.host + this.config.thumbnails, {\n    resource: this.config.resource,\n    id: id\n  });\n\n  request = new Request({\n    url: url,\n    token: this._tokenSource()\n  });\n\n  return request.send();\n};\n\n/**\n * Add external images to the resource id.\n * @param   {string}          id      ID of the resource to add the external thumbnails to.\n * @param   {string|array}    images  A path to the image, or an array of image paths.\n * @return  {promise}                 A promise which resolves when the request is complete.\n */\nPlaybackContent.prototype.addExternalThumbnails = function (id, images) {\n\n  var url, request;\n\n  var imagesToAdd = [];\n\n  if (typeof id !== 'string') {\n    return utils.promisify(false,\n      'IngestSDK PlaybackContent addExternal requires an id to be passed as a string.');\n  }\n\n  // Early return if the types do not match what we are expecting.\n  if (!Array.isArray(images) && typeof images !== 'string') {\n    return utils.promisify(false,\n      'IngestSDK PlaybackContent addExternal requires images as a string or an array of strings.');\n  }\n\n  // If we already have an array replace the outgoing array, otherwise push the image path to the array.\n  // This ensures we are always passing an array.\n  if (Array.isArray(images)) {\n    imagesToAdd = images;\n  } else {\n    imagesToAdd.push(images);\n  }\n\n  url = utils.parseTokens(this.config.host + this.config.thumbnails, {\n    resource: this.config.resource,\n    id: id\n  });\n\n  request = new Request({\n    method: 'POST',\n    url: url,\n    token: this._tokenSource(),\n    data: imagesToAdd\n  });\n\n  return request.send();\n\n};\n\n/**\n * Add external images to the resource id.\n * @param   {string}        id        ID of the resource to add the external thumbnails to.\n * @param   {file}          image     A JavaScript File interface representing the image to upload.\n * @return  {promise}                 A promise which resolves when the request is complete.\n */\nPlaybackContent.prototype.uploadThumbnail = function (id, image) {\n\n  var request, url, formData;\n\n  if (typeof id !== 'string') {\n    return utils.promisify(false,\n      'IngestSDK PlaybackContent uploadThumbnail requires an id to be passed as a string.');\n  }\n\n  // Early return if the types do not match what we are expecting.\n  if (!image || !(image instanceof File) || !utils.isImage(image)) {\n    return utils.promisify(false,\n      'IngestSDK PlaybackContent uploadThumbnail requires a valid image.');\n  }\n\n  url = utils.parseTokens(this.config.host + this.config.thumbnail, {\n    resource: this.config.resource,\n    id: id\n  });\n\n  // Create a new FormData object so the request is properly sent as multipart.\n  formData = new FormData();\n  formData.append('image', image);\n\n  request = new Request({\n    method: 'POST',\n    url: url,\n    token: this._tokenSource(),\n    data: formData\n  });\n\n  return request.send();\n\n};\n\n/**\n * Remove an external thumbnail image.\n *\n * @param   {string}    id            ID of the resource to remove the thumbnail from.\n * @param   {string}    thumbnailId   ID of the thumbnail to remove from the resource.\n * @return  {promise}                 A promise which resolves when the request is complete.\n */\nPlaybackContent.prototype.deleteThumbnail = function (id, thumbnailId) {\n\n  var request, url;\n\n  if (typeof id !== 'string') {\n    return utils.promisify(false,\n      'IngestSDK PlaybackContent deleteThumbnail requires an id to be passed as a string.');\n  }\n\n  if (typeof thumbnailId !== 'string') {\n    return utils.promisify(false,\n      'IngestSDK PlaybackContent deleteThumbanil requires a thumbnailId to be passed as a string.');\n  }\n\n  url = utils.parseTokens(this.config.host + this.config.deleteThumbnail, {\n    resource: this.config.resource,\n    id: id,\n    thumbnailId: thumbnailId\n  });\n\n  request = new Request({\n    method: 'DELETE',\n    url: url,\n    token: this._tokenSource()\n  });\n\n  return request.send();\n\n};\n\nmodule.exports = PlaybackContent;\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/resources/PlaybackContent.js\n// module id = 9\n// module chunks = 0","'use strict';\n\nvar extend = require('extend');\nvar Request = require('./Request');\nvar JWTUtils = require('./JWTUtils');\nvar utils = require('./Utils');\nvar Uploader = require('./Uploader');\nvar RequestManager = require('./RequestManager');\n\nvar Resource = require('./resources/Resource');\nvar Media = require('./resources/PlaybackContent');\nvar Users = require('./resources/Users');\nvar Networks = require('./resources/Networks');\nvar Videos = require('./resources/Videos');\nvar Jobs = require('./resources/Jobs');\nvar Profiles = require('./resources/Profiles');\nvar Inputs = require('./resources/Inputs');\nvar Events = require('./resources/Events');\nvar Roles = require('./resources/Roles');\n\n/**\n * IngestAPI Object\n * @class\n * @param {object}  options        Options to override the default.\n * @param {string}  options.host   Override the default live host.\n * @param {string}  options.token  Auth token to use for requests.\n */\nfunction IngestSDK (options) {\n  var resourceConfig;\n\n  this.defaults = {\n    'maxRequests': 6, // Active Requests\n    'host': 'https://api.ingest.io'\n  };\n\n  // Create a config object by extending the defaults with the pass options.\n  this.config = extend(true, {}, this.defaults, options);\n\n  this.token = null;\n\n  if (this.config.token) {\n    // Store the token for future use.\n    this.setToken(this.config.token);\n  }\n\n  /* Exposed for testing */\n  this.request = Request;\n  this.JWTUtils = JWTUtils;\n  this.utils = utils;\n  this.resource = Resource;\n  this.playbackContent = Media;\n  this.usersResource = Users;\n  this.networksResource = Networks;\n  this.videosResource = Videos;\n  this.jobsResource = Jobs;\n  this.profilesResource = Profiles;\n  this.inputsResource = Inputs;\n  this.uploader = Uploader;\n  this.eventsResource = Events;\n  this.rolesResource = Roles;\n\n  // Set my max requests\n  this.requestManager = RequestManager;\n  this.setMaxRequests(this.config.maxRequests);\n\n  resourceConfig = {\n    host: this.config.host,\n    tokenSource: this.getToken.bind(this)\n  };\n\n  this.videos = new Videos(resourceConfig);\n  this.inputs = new Inputs(resourceConfig);\n  this.users = new Users(resourceConfig);\n  this.networks = new Networks(resourceConfig);\n  this.profiles = new Profiles(resourceConfig);\n  this.jobs = new Jobs(resourceConfig);\n  this.events = new Events(resourceConfig);\n  this.roles = new Roles(resourceConfig);\n}\n\n/** Token **/\n/**\n * Set the auth token to use.\n * @param   {String}        token Auth token to use.\n */\nIngestSDK.prototype.setToken = function (token) {\n\n  // Make sure a valid value is passed.\n  if (typeof token !== 'string') {\n    throw new Error('IngestSDK requires an authentication token passed as a string.');\n  }\n\n  this.token = token;\n};\n\n/**\n * Sets the maxrequests in the Request Manager\n * @param {number} max - The max amount of requests at once\n */\nIngestSDK.prototype.setMaxRequests = function (max) {\n  // Make sure we have a valid number.\n  if (typeof max !== 'number' || max < 1) {\n    throw new Error('IngestSDK requires a maxRequest count to be passed as a positive number.');\n  }\n\n  RequestManager.setMaxRequests(max);\n};\n\n/**\n * Return the current auth token.\n * @return  {String}        Current auth token, or null if a token has not been set.\n */\nIngestSDK.prototype.getToken = function () {\n  return this.token;\n};\n\n/**\n * Create a new input and upload a file.\n * @param  {File}   file    File to upload.\n * @return {Promise} A promise which resolves when the upload is complete.\n */\nIngestSDK.prototype.upload = function (file) {\n  return new Uploader({\n    file: file,\n    api: this,\n    host: this.config.host\n  });\n};\n\nmodule.exports = IngestSDK;\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/index.js\n// module id = 10\n// module chunks = 0","var apply = Function.prototype.apply;\n\n// DOM APIs, for completeness\n\nexports.setTimeout = function() {\n  return new Timeout(apply.call(setTimeout, window, arguments), clearTimeout);\n};\nexports.setInterval = function() {\n  return new Timeout(apply.call(setInterval, window, arguments), clearInterval);\n};\nexports.clearTimeout =\nexports.clearInterval = function(timeout) {\n  if (timeout) {\n    timeout.close();\n  }\n};\n\nfunction Timeout(id, clearFn) {\n  this._id = id;\n  this._clearFn = clearFn;\n}\nTimeout.prototype.unref = Timeout.prototype.ref = function() {};\nTimeout.prototype.close = function() {\n  this._clearFn.call(window, this._id);\n};\n\n// Does not start the time, just sets up the members needed.\nexports.enroll = function(item, msecs) {\n  clearTimeout(item._idleTimeoutId);\n  item._idleTimeout = msecs;\n};\n\nexports.unenroll = function(item) {\n  clearTimeout(item._idleTimeoutId);\n  item._idleTimeout = -1;\n};\n\nexports._unrefActive = exports.active = function(item) {\n  clearTimeout(item._idleTimeoutId);\n\n  var msecs = item._idleTimeout;\n  if (msecs >= 0) {\n    item._idleTimeoutId = setTimeout(function onTimeout() {\n      if (item._onTimeout)\n        item._onTimeout();\n    }, msecs);\n  }\n};\n\n// setimmediate attaches itself to the global object\nrequire(\"setimmediate\");\nexports.setImmediate = setImmediate;\nexports.clearImmediate = clearImmediate;\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/timers-browserify/main.js\n// module id = 11\n// module chunks = 0","(function (global, undefined) {\n    \"use strict\";\n\n    if (global.setImmediate) {\n        return;\n    }\n\n    var nextHandle = 1; // Spec says greater than zero\n    var tasksByHandle = {};\n    var currentlyRunningATask = false;\n    var doc = global.document;\n    var registerImmediate;\n\n    function setImmediate(callback) {\n      // Callback can either be a function or a string\n      if (typeof callback !== \"function\") {\n        callback = new Function(\"\" + callback);\n      }\n      // Copy function arguments\n      var args = new Array(arguments.length - 1);\n      for (var i = 0; i < args.length; i++) {\n          args[i] = arguments[i + 1];\n      }\n      // Store and register the task\n      var task = { callback: callback, args: args };\n      tasksByHandle[nextHandle] = task;\n      registerImmediate(nextHandle);\n      return nextHandle++;\n    }\n\n    function clearImmediate(handle) {\n        delete tasksByHandle[handle];\n    }\n\n    function run(task) {\n        var callback = task.callback;\n        var args = task.args;\n        switch (args.length) {\n        case 0:\n            callback();\n            break;\n        case 1:\n            callback(args[0]);\n            break;\n        case 2:\n            callback(args[0], args[1]);\n            break;\n        case 3:\n            callback(args[0], args[1], args[2]);\n            break;\n        default:\n            callback.apply(undefined, args);\n            break;\n        }\n    }\n\n    function runIfPresent(handle) {\n        // From the spec: \"Wait until any invocations of this algorithm started before this one have completed.\"\n        // So if we're currently running a task, we'll need to delay this invocation.\n        if (currentlyRunningATask) {\n            // Delay by doing a setTimeout. setImmediate was tried instead, but in Firefox 7 it generated a\n            // \"too much recursion\" error.\n            setTimeout(runIfPresent, 0, handle);\n        } else {\n            var task = tasksByHandle[handle];\n            if (task) {\n                currentlyRunningATask = true;\n                try {\n                    run(task);\n                } finally {\n                    clearImmediate(handle);\n                    currentlyRunningATask = false;\n                }\n            }\n        }\n    }\n\n    function installNextTickImplementation() {\n        registerImmediate = function(handle) {\n            process.nextTick(function () { runIfPresent(handle); });\n        };\n    }\n\n    function canUsePostMessage() {\n        // The test against `importScripts` prevents this implementation from being installed inside a web worker,\n        // where `global.postMessage` means something completely different and can't be used for this purpose.\n        if (global.postMessage && !global.importScripts) {\n            var postMessageIsAsynchronous = true;\n            var oldOnMessage = global.onmessage;\n            global.onmessage = function() {\n                postMessageIsAsynchronous = false;\n            };\n            global.postMessage(\"\", \"*\");\n            global.onmessage = oldOnMessage;\n            return postMessageIsAsynchronous;\n        }\n    }\n\n    function installPostMessageImplementation() {\n        // Installs an event handler on `global` for the `message` event: see\n        // * https://developer.mozilla.org/en/DOM/window.postMessage\n        // * http://www.whatwg.org/specs/web-apps/current-work/multipage/comms.html#crossDocumentMessages\n\n        var messagePrefix = \"setImmediate$\" + Math.random() + \"$\";\n        var onGlobalMessage = function(event) {\n            if (event.source === global &&\n                typeof event.data === \"string\" &&\n                event.data.indexOf(messagePrefix) === 0) {\n                runIfPresent(+event.data.slice(messagePrefix.length));\n            }\n        };\n\n        if (global.addEventListener) {\n            global.addEventListener(\"message\", onGlobalMessage, false);\n        } else {\n            global.attachEvent(\"onmessage\", onGlobalMessage);\n        }\n\n        registerImmediate = function(handle) {\n            global.postMessage(messagePrefix + handle, \"*\");\n        };\n    }\n\n    function installMessageChannelImplementation() {\n        var channel = new MessageChannel();\n        channel.port1.onmessage = function(event) {\n            var handle = event.data;\n            runIfPresent(handle);\n        };\n\n        registerImmediate = function(handle) {\n            channel.port2.postMessage(handle);\n        };\n    }\n\n    function installReadyStateChangeImplementation() {\n        var html = doc.documentElement;\n        registerImmediate = function(handle) {\n            // Create a <script> element; its readystatechange event will be fired asynchronously once it is inserted\n            // into the document. Do so, thus queuing up the task. Remember to clean up once it's been called.\n            var script = doc.createElement(\"script\");\n            script.onreadystatechange = function () {\n                runIfPresent(handle);\n                script.onreadystatechange = null;\n                html.removeChild(script);\n                script = null;\n            };\n            html.appendChild(script);\n        };\n    }\n\n    function installSetTimeoutImplementation() {\n        registerImmediate = function(handle) {\n            setTimeout(runIfPresent, 0, handle);\n        };\n    }\n\n    // If supported, we should attach to the prototype of global, since that is where setTimeout et al. live.\n    var attachTo = Object.getPrototypeOf && Object.getPrototypeOf(global);\n    attachTo = attachTo && attachTo.setTimeout ? attachTo : global;\n\n    // Don't get fooled by e.g. browserify environments.\n    if ({}.toString.call(global.process) === \"[object process]\") {\n        // For Node.js before 0.9\n        installNextTickImplementation();\n\n    } else if (canUsePostMessage()) {\n        // For non-IE10 modern browsers\n        installPostMessageImplementation();\n\n    } else if (global.MessageChannel) {\n        // For web workers, where supported\n        installMessageChannelImplementation();\n\n    } else if (doc && \"onreadystatechange\" in doc.createElement(\"script\")) {\n        // For IE 6–8\n        installReadyStateChangeImplementation();\n\n    } else {\n        // For older browsers\n        installSetTimeoutImplementation();\n    }\n\n    attachTo.setImmediate = setImmediate;\n    attachTo.clearImmediate = clearImmediate;\n}(typeof self === \"undefined\" ? typeof global === \"undefined\" ? this : global : self));\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/setimmediate/setImmediate.js\n// module id = 12\n// module chunks = 0","var g;\r\n\r\n// This works in non-strict mode\r\ng = (function() {\r\n\treturn this;\r\n})();\r\n\r\ntry {\r\n\t// This works if eval is allowed (see CSP)\r\n\tg = g || Function(\"return this\")() || (1,eval)(\"this\");\r\n} catch(e) {\r\n\t// This works if the window reference is available\r\n\tif(typeof window === \"object\")\r\n\t\tg = window;\r\n}\r\n\r\n// g can still be undefined, but nothing to do about it...\r\n// We return undefined, instead of nothing here, so it's\r\n// easier to handle this case. if(!global) { ...}\r\n\r\nmodule.exports = g;\r\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// (webpack)/buildin/global.js\n// module id = 13\n// module chunks = 0","'use strict';\n\nvar extend = require('extend');\nvar Request = require('./Request');\nvar Promise = require('pinkyswear');\nvar utils = require('./Utils');\n\n/**\n * Create a new upload wrapper.  Manages the entire upload of a file.\n * @class\n * @param   {object}  options                   Configuration options to override the defaults.\n * @param   {object}  options.api               A reference to the parent API instance.\n * @param   {object}  options.file              The file to upload.\n * @param   {object}  options.upload            REST endpoint for creating an input.\n * @param   {object}  options.sign              REST endpoint for signing a blob before upload.\n * @param   {object}  options.uploadComplete    REST endpoint to notify the API that the upload is complete.\n * @param   {object}  options.uploadAbort       REST endpoint to abort the upload.\n */\nfunction Upload (options) {\n\n  this.defaults = {\n    api: null,\n    file: null,\n    upload: '/encoding/inputs/<%=id%>/upload<%=method%>',\n    sign: '/encoding/inputs/<%=id%>/upload/sign<%=method%>',\n    uploadComplete: '/encoding/inputs/<%=id%>/upload/complete',\n    uploadAbort: '/encoding/inputs/<%=id%>/upload/abort<%=method%>',\n    uploadMethods: {\n      param: '?type=',\n      singlePart: 'amazon',\n      multiPart: 'amazonMP'\n    }\n  };\n\n  // Create a config object by extending the defaults with the pass options.\n  this.config = extend(true, {}, this.defaults, options);\n\n  this.api = this.config.api;\n  this.file = this.config.file;\n\n  this.chunks = [];\n  this.chunkSize = 0;\n  this.chunkCount = 0;\n  this.chunksComplete = 0;\n  this.uploadedBytes = 0;\n\n  this.aborted = false;\n  this.paused = false;\n  this.created = false;\n  this.initialized = false;\n\n  // Set to true when all the chunks are uploaded, but before the complete call is made.\n  this.uploadComplete = false;\n\n  this.fileRecord = {\n    filename: this.file.name,\n    type: this.file.type,\n    size: this.file.size,\n    method: this._checkMultipart(this.file),\n    contentType: 'application/octet-stream'\n  };\n\n};\n\n/**\n * Register a function to execute when a chunk completes uploading.\n * @param  {Function} callback A callback to execute when progress is made.\n */\nUpload.prototype.progress = function (callback) {\n  this.config.progress = callback.bind(this);\n};\n\n/**\n * Create a new input record and upload the files to amazon.\n * @return  {Promise}         A promise which resolves when the new input record is created and uploaded.\n */\nUpload.prototype.save = function () {\n  return this._create(this.fileRecord)\n    .then(this._initialize.bind(this))\n    .then(this._prepareUpload.bind(this));\n};\n\n/**\n * Call the progress callback and pass the current progress percentage.\n * @private\n * @param  {number} message Current progress percentage.\n */\nUpload.prototype._updateProgress = function (percent, chunkSize) {\n\n  if (!this.config.progress) {\n    return;\n  }\n\n  this.config.progress.call(this, percent, chunkSize);\n};\n\n/**\n * Create a new input record.\n * @private\n * @param   {object}  record  A JSON object representing the input record to create.\n * @return  {Promise}         A promise which resolves when the new input record is created.\n */\nUpload.prototype._create = function (record) {\n\n  if (this.created) {\n    return utils.promisify(true, this.fileRecord.id);\n  }\n\n  if (this.aborted) {\n    return utils.promisify(false, 'upload aborted');\n  }\n\n  return this.api.inputs.add(record).then(this._createSuccess.bind(this));\n};\n\n/**\n * Return the data object from the response.\n * @private\n * @param  {JSON}   response  JSON response containing the new input record id.\n * @return {string}           new input record id.\n */\nUpload.prototype._createSuccess = function (response) {\n\n  this.created = true;\n\n  this._updateProgress(0, 0);\n\n  // Store the input record.\n  this.input = response.data;\n\n  this.fileRecord.id = response.data.id;\n\n  return this.fileRecord.id;\n};\n\n/**\n * Initializes an Input for upload\n * @private\n * @return {Promise} A promise which resolves when the request is complete.\n */\nUpload.prototype._initialize = function () {\n  var url;\n  var tokens;\n  var signing = '';\n  var request;\n\n  if (this.aborted) {\n    return utils.promisify(false, 'upload aborted');\n  }\n\n  if (!this.fileRecord.method) {\n    signing = this.config.uploadMethods.param + this.config.uploadMethods.singlePart;\n  }\n\n  tokens = {\n    id: this.fileRecord.id,\n    method: signing\n  };\n\n  url = utils.parseTokens(this.api.config.host + this.config.upload, tokens);\n\n  request = new Request({\n    url: url,\n    token: this.api.getToken(),\n    method: 'POST',\n    data: this.fileRecord\n  });\n\n  return request.send()\n          .then(this._initializeComplete.bind(this));\n\n};\n\n/**\n * Store the information returned from the initialize request.\n * @private\n */\nUpload.prototype._initializeComplete = function (response) {\n  this.initialized = true;\n  this.fileRecord.key = response.data.key;\n  this.fileRecord.uploadId = response.data.uploadId;\n  this.chunkSize = response.data.pieceSize;\n  this.chunkCount = response.data.pieceCount;\n};\n\n/**\n * Setup the upload depending on its type, single or multi part.\n * @return {Promise} A promise which resolves when all of the pieces have completed uploading.\n */\nUpload.prototype._prepareUpload = function () {\n  if (!this.fileRecord.method) {\n    // Singlepart.\n    return this._uploadFile()\n      .then(this._onCompleteUpload.bind(this));\n  }\n\n  // Multipart.\n  return this._createChunks()\n    .then(this._completeUpload.bind(this));\n};\n\n/**\n * Break a file into blobs and create a chunk object for each piece.\n * @private\n * @return {Promise} A promise which resolves when all of the pieces have completed uploading.\n */\nUpload.prototype._createChunks = function () {\n  var sliceMethod = this._getSliceMethod(this.file);\n  var i, blob, chunk, start, end,\n    chunkPromises = [];\n\n  if (this.aborted) {\n    this.abort();\n    return utils.promisify(false, 'upload aborted');\n  }\n\n  for (i = 0; i < this.chunkCount; i++) {\n\n    start = i * this.chunkSize;\n    // Choose the smaller value, so that we don't go over the filesize.\n    end = Math.min((i + 1) * this.chunkSize, this.fileRecord.size);\n\n    blob = this.file[sliceMethod](start, end);\n\n    chunk = {\n      partNumber: i + 1,\n      data: blob\n    };\n\n    this.chunks.push(chunk);\n\n    chunkPromises.push(this._uploadChunk.bind(this, chunk));\n\n  }\n\n  // Store a reference for pausing and resuming.\n  this.multiPartPromise = utils.series(chunkPromises, this.paused);\n\n  return this.multiPartPromise;\n};\n\n/**\n * Create a promise chain for each chunk to be uploaded.\n * @private\n * @return {Promise} A promise which resolves when the request is complete.\n */\nUpload.prototype._uploadChunk = function (chunk) {\n  var promise = Promise();\n\n  // Break the promise chain.\n  this._signUpload(chunk)\n    .then(this._sendUpload.bind(this, chunk))\n    .then(this._completeChunk.bind(this, chunk, promise));\n\n  return promise;\n};\n\n/**\n * Create a promise chain for a single part file upload.\n * @param  {file}   file    A file reference to upload.\n * @return {Promise} A promise which resolves when the request is complete.\n */\nUpload.prototype._uploadFile = function () {\n  var chunk = {\n    data: this.file\n  };\n\n  // Create a new promise if one doesn't exist.\n  if (!this.singlePartPromise) {\n    this.singlePartPromise = Promise();\n  }\n\n  // Broken off the chain, this will allow us to cancel single part uploads without breaking the\n  // initial chain.\n  this._signUpload(chunk)\n    .then(this._sendUpload.bind(this, chunk))\n    .then(this._sendSinglepartComplete.bind(this))\n    .then(this._updateProgress.bind(this, 100, this.fileRecord.size))\n    .then(this._uploadFileComplete.bind(this));\n\n  return this.singlePartPromise;\n};\n\n/**\n *  Resolve the single part upload promise;\n */\nUpload.prototype._uploadFileComplete = function () {\n  this.singlePartPromise(true, []);\n};\n\n/**\n * Make a request and sign the chunk to be uploaded.\n * @private\n * @param  {object}   chunk           Information about the chunk to be uploaded.\n * @return {Promise}                  A promise which resolves when the request is complete.\n */\nUpload.prototype._signUpload = function (chunk) {\n  var url;\n  var signing = '';\n  var headers = {};\n  var request;\n\n  // Set the part number for the current chunk.\n  if (chunk.partNumber) {\n    this.fileRecord.partNumber = chunk.partNumber;\n  }\n\n  headers['Content-Type'] = 'multipart/form-data';\n\n  if (!this.fileRecord.method) {\n    signing = this.config.uploadMethods.param + this.config.uploadMethods.singlePart;\n  }\n\n  url = utils.parseTokens(this.api.config.host + this.config.sign, {\n    id: this.fileRecord.id,\n    method: signing\n  });\n\n  request = new Request({\n    url: url,\n    token: this.api.getToken(),\n    method: 'POST',\n    headers: headers,\n    data: this.fileRecord\n  });\n\n  return request.send();\n};\n\n/**\n * Send the upload to the server.\n * @private\n * @param   {object} upload  An object representing the upload to send to the server.\n * @return  {Promise}       A promise which resolves when the request is complete.\n */\nUpload.prototype._sendUpload = function (upload, response) {\n  var headers = {};\n  var request;\n\n  // Set the proper headers to send with the file.\n  headers['Content-Type'] = this.fileRecord.contentType;\n\n  headers.authorization = response.data.authHeader;\n  headers['x-amz-date'] = response.data.dateHeader;\n  headers['x-amz-security-token'] = response.data.securityToken;\n\n  request = new Request({\n    url: response.data.url,\n    method: 'PUT',\n    headers: headers,\n    data: upload.data,\n    ignoreAcceptHeader: true\n  });\n\n  this.requestPromise = request;\n\n  return request.send();\n};\n\n/**\n * Update the upload bytes value when a single part file is uploaded.\n */\nUpload.prototype._sendSinglepartComplete = function () {\n  this.uploadComplete = true;\n  this.uploadedBytes = this.fileRecord.size;\n};\n\n/**\n *  Executed when a chunk is finished uploading.\n *  @private\n *  @param {object}   chunk   The current chunk that was uploaded.\n *  @param {Promise}  promise The promise to resolve when the chunk is complete.\n */\nUpload.prototype._completeChunk = function (chunk, promise) {\n  var progress;\n\n  this.chunksComplete++;\n  chunk.complete = true;\n\n  this.uploadedBytes += chunk.data.size;\n\n  // Upload is complete.\n  if (this.chunksComplete === this.chunkCount) {\n    this.uploadComplete = true;\n  }\n\n  progress = this.uploadedBytes / this.fileRecord.size;\n  // 0 - 99 for actual upload progress, 1% for the complete call.\n  progress *= 99;\n  progress = Math.round(progress);\n\n  this._updateProgress(progress, chunk.data.size);\n\n  // Resolve the promise.\n  promise(true, []);\n};\n\n/**\n * Notify the server that the upload is complete.\n *\n * @private\n * @return  {Promise} A promise which resolves when the request is complete.\n */\nUpload.prototype._completeUpload = function () {\n  var url;\n  var tokens;\n  var request;\n\n  // Early return so we don't process any of the complete information on an aborted upload.\n  if (this.aborted) {\n    return utils.promisify(false, 'Upload Aborted.');\n  }\n\n  tokens = {\n    id: this.fileRecord.id\n  };\n\n  url = utils.parseTokens(this.api.config.host + this.config.uploadComplete, tokens);\n\n  request = new Request({\n    url: url,\n    token: this.api.getToken(),\n    method: 'POST',\n    data: this.fileRecord\n  });\n\n  return request.send()\n          .then(this._onCompleteUpload.bind(this));\n};\n\n/**\n * Return the id for the current file record.\n * @private\n * @return {string} ID for the input record that was created.\n */\nUpload.prototype._onCompleteUpload = function () {\n  // Send the final progress update once the upload is actually complete.\n  this._updateProgress(100);\n\n  this.uploadComplete = true;\n  this.multiPartPromise = null;\n  this.requestPromise = null;\n  this.singlePartPromise = null;\n  return this.fileRecord.id;\n};\n\n/**\n * Aborts an input upload\n *\n * @return {Promise} A promise which resolves when the request is complete.\n */\nUpload.prototype.abort = function () {\n  var url;\n  var tokens;\n  var request;\n\n  this.aborted = true;\n\n  // If initialize hasn't been called yet there is no need to abort the upload as it doesn't\n  // exist yet.\n  if (!this.initialized) {\n\n    if (this.created) {\n      // If the input has been created simply return early with a\n      // promise to delete the created input record.\n      return this.api.inputs.delete(this.fileRecord.id);\n    }\n\n    // Resolve as a successful promise. This case would be fulfilled when an upload\n    // has been created but save() hasn't yet been called.\n    return utils.promisify(true);\n\n  }\n\n  // Cancel the current request.\n  if (this.requestPromise) {\n    this.requestPromise.cancel();\n    this.requestPromise = null;\n  }\n\n  if (this.singlePartPromise) {\n    this.singlePartPromise = null;\n    // Return here because there is no need to abort a single part upload.\n    return this._abortComplete();\n  }\n\n  if (this.multiPartPromise) {\n    this.multiPartPromise.cancel();\n    this.multiPartPromise = null;\n  }\n\n  tokens = {\n    id: this.fileRecord.id,\n    method: ''\n  };\n\n  url = utils.parseTokens(this.api.config.host + this.config.uploadAbort, tokens);\n\n  request = new Request({\n    url: url,\n    token: this.api.getToken(),\n    method: 'POST',\n    data: this.fileRecord\n  });\n\n  return request.send()\n    .then(this._abortComplete.bind(this));\n\n};\n\n/**\n * Aborts an input upload\n * @param {function} callback Callback executed when the request is complete, or an error occurs.\n */\nUpload.prototype.abortSync = function (callback) {\n  var url;\n  var tokens;\n  var request;\n\n  this.aborted = true;\n\n  // If initialize hasn't been called yet there is no need to abort the upload as it doesn't\n  // exist yet.\n  if (!this.initialized) {\n\n    if (this.created) {\n      // If the input has been created simply return early and delete the input.\n      this.api.inputs.deleteSync(this.fileRecord.id, callback);\n      return;\n    }\n\n    // Resolve as a successful promise. This case would be fulfilled when an upload\n    // has been created but save() hasn't yet been called.\n    callback(null);\n    return;\n\n  }\n\n  // Cancel the current request.\n  if (this.requestPromise) {\n    this.requestPromise.cancel();\n    this.requestPromise = null;\n  }\n\n  if (this.singlePartPromise) {\n    this.singlePartPromise = null;\n    // Return here because there is no need to abort a single part upload.\n    this.api.inputs.deleteSync(this.fileRecord.id, callback);\n    return;\n  }\n\n  // If we have a multi part promise we need to cancel it\n  if (this.multiPartPromise) {\n    this.multiPartPromise.cancel();\n    this.multiPartPromise = null;\n  }\n\n  tokens = {\n    id: this.fileRecord.id,\n    method: ''\n  };\n\n  url = utils.parseTokens(this.api.config.host + this.config.uploadAbort, tokens);\n\n  request = new Request({\n    url: url,\n    async: false,\n    token: this.api.getToken(),\n    method: 'POST',\n    data: this.fileRecord\n  });\n\n  request.sendSync(this.abortSyncComplete.bind(this, callback));\n};\n\n/**\n * Delete the input when the abort call completes and then execute the callback.\n *\n * @param {Function} callback - Synchronous callback\n * @param {object}   error    - Error from abort call.\n */\nUpload.prototype.abortSyncComplete = function (callback, error) {\n\n  if (!error) {\n    this.api.inputs.deleteSync(this.fileRecord.id, callback);\n  } else if (typeof callback === 'function') {\n    callback(error);\n  } else {\n    throw error;\n  }\n\n};\n\n/**\n * Delete the input that was created.\n * @private\n * @return {Promise} A promise which resolves when the request is complete.\n */\nUpload.prototype._abortComplete = function () {\n  return this.api.inputs.delete(this.fileRecord.id);\n};\n\n/**\n * Pause the current upload.\n */\nUpload.prototype.pause = function () {\n  // Return early if the upload portion is complete.\n  // The work is done by now so we might as well fire the\n  // complete call.\n  if (this.uploadComplete) {\n    return;\n  }\n\n  this.paused = true;\n\n  // Is there a multipart upload\n  if (this.multiPartPromise) {\n    // Pause the series if its a multipart upload.\n    this.multiPartPromise.pause();\n  }\n\n  // Abort the upload if its a singlepart upload and cancel the request if it is a multipart promise\n  if (this.requestPromise) {\n    this.requestPromise.cancel();\n  }\n};\n\n/**\n * Resume the current upload.\n */\nUpload.prototype.resume = function () {\n  this.paused = false;\n\n  if (this.multiPartPromise) {\n    // Resume the series if it's multipart.\n    this.multiPartPromise.resume();\n  } else if (this.requestPromise) {\n    // Restart the file upload.\n    this._uploadFile();\n  }\n\n};\n\n/**\n * Check the file size to determine if it should be a multipart upload, returns false for singlepart uploads.\n * @private\n *\n * @param {File} file - The file to evaluate.\n *\n * @return {boolean} - True if the file will be uploading using mutlipart upload.\n */\nUpload.prototype._checkMultipart = function (file) {\n  if (!file) {\n    throw new Error('Upload::_checkMultipart - A file object is required.');\n  }\n\n  return file.size > (5 * 1024 * 1024);\n};\n\n/**\n * Function that determines the slice method to be used\n * @private\n * @param {object} file - The file object you wish to determine the slice method for\n * @return {string} sliceMethod - The slice method to use.\n */\nUpload.prototype._getSliceMethod = function (file) {\n  var sliceMethod;\n\n  if ('mozSlice' in file) {\n    sliceMethod = 'mozSlice';\n  } else if ('webkitSlice' in file) {\n    sliceMethod = 'webkitSlice';\n  } else {\n    sliceMethod = 'slice';\n  }\n\n  return sliceMethod;\n};\n\nmodule.exports = Upload;\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/Uploader.js\n// module id = 14\n// module chunks = 0","'use strict';\n\nvar Resource = require('./Resource');\nvar Request = require('../Request');\nvar utils = require('../Utils');\nvar extend = require('extend');\nvar ResourceTypes = require('../constants/resourceTypes');\n\n/**\n * Users Resource\n *\n * @param {object} options - SDK Options.\n * @class\n * @extends Resource\n */\nfunction Users (options) {\n\n  var overrides = {\n    resource: ResourceTypes.USERS,\n    currentUser: '/users/me',\n    transfer: '/users/<%=oldId%>/transfer/<%=newId%>',\n    revoke: '/revoke'\n  };\n\n  options = extend(true, {}, overrides, options);\n\n  Resource.call(this, options);\n\n};\n\n// This extends the base class of 'Resource'.\nUsers.prototype = Object.create(Resource.prototype);\nUsers.prototype.constructor = Users;\n\n/**\n * Retrieve information for the current user.\n *\n * @return {Promise} A promise which resolves when the request is complete.\n */\nUsers.prototype.getCurrentUserInfo = function () {\n  var request = new Request({\n    url: this.config.host + this.config.currentUser,\n    token: this._tokenSource()\n  });\n\n  return request.send();\n};\n\n/**\n * Transfer all authorship currently under the specified user onto another.\n * This includes all videos.\n * This task is commonly used in conjunction with permanently deleting a user.\n *\n * @param {string} oldId - The user who currently has authorship.\n * @param {string} newId - The user to transfer authorship to.\n *\n * @return {Promise} A promise which resolves when the request is complete.\n */\nUsers.prototype.transferUserAuthorship = function (oldId, newId) {\n  var tokens, url, request;\n\n  if (typeof oldId !== 'string') {\n    return utils.promisify(false,\n      'IngestSDK transferUserAuthorship requires `oldId` to be passed as a string.');\n  }\n\n  if (typeof newId !== 'string') {\n    return utils.promisify(false,\n      'IngestSDK transferUserAuthorship requires `newId` to be passed as a string');\n  }\n\n  tokens = {\n    oldId: oldId,\n    newId: newId\n  };\n\n  url = utils.parseTokens(this.config.host + this.config.transfer, tokens);\n\n  request = new Request({\n    url: url,\n    token: this._tokenSource(),\n    method: 'PATCH'\n  });\n\n  return request.send();\n};\n\n/**\n * Revokes the authorization token for the current user.\n *\n * @return {Promise} A promise which resolves when the request is complete.\n */\nUsers.prototype.revokeCurrentUser = function () {\n  var request = new Request({\n    url: this.config.host + this.config.currentUser + this.config.revoke,\n    token: this._tokenSource(),\n    method: 'DELETE'\n  });\n\n  return request.send();\n};\n\nmodule.exports = Users;\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/resources/Users.js\n// module id = 15\n// module chunks = 0","'use strict';\n\nvar Resource = require('./Resource');\nvar Request = require('../Request');\nvar utils = require('../Utils');\nvar extend = require('extend');\nvar ResourceTypes = require('../constants/resourceTypes');\n\n/**\n * Networks Resource\n *\n * @param {object} options - SDK Options.\n * @class\n * @extends Resource\n */\nfunction Networks (options) {\n\n  var overrides = {\n    resource: ResourceTypes.NETWORKS,\n    keys: '/<%=resource%>/<%=networkId%>/keys',\n    keysById: '/<%=resource%>/<%=networkId%>/keys/<%=keyId%>',\n    invite: '/<%=resource%>/<%=networkId%>/invite',\n    invoices: '/<%=resource%>/<%=networkId%>/invoices',\n    invoicesById: '/<%=resource%>/<%=networkId%>/invoices/<%=invoiceId%>',\n    currentUsage: '/<%=resource%>/<%=networkId%>/invoices?currentUsage=true',\n    customers: '/<%=resource%>/<%=networkId%>/customers',\n    customerById: '/<%=resource%>/<%=networkId%>/customers/<%=cusId%>',\n    customerCardInformation: '/<%=resource%>/<%=networkId%>/customers/<%=cusId%>/card',\n    getPendingUsers: '/<%=resource%>/<%=networkId%>?filter=pending',\n    deletePendingUser: '/<%=resource%>/<%=networkId%>/pending-users/<%=pendingUserId%>',\n  };\n\n  options = extend(true, {}, overrides, options);\n\n  Resource.call(this, options);\n\n};\n\n// This extends the base class of 'Resource'.\nNetworks.prototype = Object.create(Resource.prototype);\nNetworks.prototype.constructor = Networks;\n\n/**\n * Link an existing user to the specified network.\n *\n * @param {string}  networkId  The unique ID of the network.\n * @param {string}  userId     The unique ID of the user to link.\n *\n * @return {Promise}  A promise which resolves when the request is complete.\n */\nNetworks.prototype.linkUser = function (networkId, userId) {\n  var data, request, url;\n\n  if (typeof networkId !== 'string') {\n    return utils.promisify(false,\n      'IngestSDK linkUser requires `networkId` to be passed as a string.');\n  }\n\n  if (typeof userId !== 'string') {\n    return utils.promisify(false,\n      'IngestSDK linkUser requires `userId` to be passed as a string.');\n  }\n\n  data = {\n    id: userId\n  };\n\n  url = utils.parseTokens(this.config.host + this.config.byId, {\n    resource: this.config.resource,\n    id: networkId\n  });\n\n  request = new Request({\n    url: url,\n    data: data,\n    token: this._tokenSource(),\n    method: 'LINK'\n  });\n\n  return request.send();\n};\n\n/**\n * Removes the specified user from the specified network.\n *\n * @param {string}  networkId  The unique ID of the network.\n * @param {string}  userId     The unique ID of the user to unlink.\n *\n * @return {Promise}  A promise which resolves when the request is complete.\n */\nNetworks.prototype.unlinkUser = function (networkId, userId) {\n  var data, request, url;\n\n  if (typeof networkId !== 'string') {\n    return utils.promisify(false,\n      'IngestSDK unlinkUser requires `networkId` to be passed as a string.');\n  }\n\n  if (typeof userId !== 'string') {\n    return utils.promisify(false,\n      'IngestSDK unlinkUser requires `userId` to be passed as a string.');\n  }\n\n  data = {\n    id: userId\n  };\n\n  url = utils.parseTokens(this.config.host + this.config.byId, {\n    resource: this.config.resource,\n    id: networkId\n  });\n\n  request = new Request({\n    url: url,\n    data: data,\n    token: this._tokenSource(),\n    method: 'UNLINK'\n  });\n\n  return request.send();\n};\n\n/**\n * Invites a user to the specified network.\n *\n * @param {string}  networkId  The unique ID of the network.\n * @param {string}  email      The email to send the invite to.\n * @param {string}  name       The name of the person to invite.\n * @param {boolean} resend     [Optional] True: Resend an invite. False for first time invite. Default value is false.\n *\n * @return {Promise} A promise which resolves when the request is complete.\n */\nNetworks.prototype.inviteUser = function (networkId, email, name, resend) {\n  var data, request, url;\n\n  if (typeof networkId !== 'string') {\n    return utils.promisify(false,\n      'IngestSDK inviteUser requires `networkId` to be passed as a string.');\n  }\n\n  if (typeof email !== 'string') {\n    return utils.promisify(false,\n      'IngestSDK inviteUser requires `email` to be passed as a string.');\n  }\n\n  if (typeof name !== 'string') {\n    return utils.promisify(false,\n      'IngestSDK inviteUser requires `name` to be passed as a string.');\n  }\n\n  data = {\n    email: email,\n    name: name\n  };\n\n  if (typeof resend === 'boolean') {\n    data.resend = resend;\n  }\n\n  url = utils.parseTokens(this.config.host + this.config.invite, {\n    resource: this.config.resource,\n    networkId: networkId\n  });\n\n  request = new Request({\n    url: url,\n    data: data,\n    token: this._tokenSource(),\n    method: 'POST'\n  });\n\n  return request.send();\n};\n\n/**\n * Gets a list of all secure keys for the network given.\n *\n * @param {string}  networkId  The unique ID of the network.\n *\n * @return {Promise}  A promise which resolves when the request is complete.\n */\nNetworks.prototype.getSecureKeys = function (networkId) {\n  var request, url;\n\n  if (typeof networkId !== 'string') {\n    return utils.promisify(false,\n      'IngestSDK getSecureKeys requires `networkId` to be passed as a string.');\n  }\n\n  url = utils.parseTokens(this.config.host + this.config.keys, {\n    resource: this.config.resource,\n    networkId: networkId\n  });\n\n  request = new Request({\n    url: url,\n    token: this._tokenSource()\n  });\n\n  return request.send();\n};\n\n/**\n * Adds a new secure key to the specified network.\n *\n * @param {string}  networkId   The unique ID of the network.\n * @param {object}  data        The object containing data for the secure key entry.\n * @param {string}  data.title  Optional. The title of the secure key. Will default to \"Default Key Title\"\n * @param {string}  data.key    The public key in RSA format.\n *\n * @return {Promise}  A promise which resolves when the request is complete.\n */\nNetworks.prototype.addSecureKey = function (networkId, data) {\n  var request, url;\n\n  if (typeof networkId !== 'string') {\n    return utils.promisify(false,\n      'IngestSDK addSecureKey requires `networkId` to be passed as a string.');\n  }\n\n  if (typeof data !== 'object') {\n    return utils.promisify(false,\n      'IngestSDK addSecureKey requires `data` to be passed as an object.');\n  }\n\n  if (typeof data.key !== 'string') {\n    return utils.promisify(false,\n      'IngestSDK addSecureKey requires that the key be a string in RSA public key format.');\n  }\n\n  // The title must be a string.\n  if (typeof data.title !== 'string') {\n    data.title = '';\n  }\n\n  url = utils.parseTokens(this.config.host + this.config.keys, {\n    resource: this.config.resource,\n    networkId: networkId\n  });\n\n  request = new Request({\n    url: url,\n    token: this._tokenSource(),\n    method: 'POST',\n    data: data\n  });\n\n  return request.send();\n};\n\n/**\n * Retrieves a single network secure key entry based on the unique ID given.\n *\n * @param {string}  networkId  The unique ID of the network.\n * @param {string}  keyId      The unique ID of the secure key entry.\n *\n * @return {Promise}  A promise which resolves when the request is complete.\n */\nNetworks.prototype.getSecureKeyById = function (networkId, keyId) {\n  var url, request;\n\n  if (typeof networkId !== 'string') {\n    return utils.promisify(false,\n      'IngestSDK getSecureKeyById requires a `networkId` to be passed as a string.');\n  }\n\n  if (typeof keyId !== 'string') {\n    return utils.promisify(false,\n      'IngestSDK getSecureKeyById requires a `keyId` to be passed as a string.');\n  }\n\n  url = utils.parseTokens(this.config.host + this.config.keysById, {\n    resource: this.config.resource,\n    networkId: networkId,\n    keyId: keyId\n  });\n\n  request = new Request({\n    url: url,\n    token: this._tokenSource()\n  });\n\n  return request.send();\n};\n\n/**\n * Updates an individual secure key entry in the network specified.\n *\n * @param {string}  networkId   The unique ID of the network.\n * @param {object}  data        The object containing data for the secure key entry.\n * @param {string}  data.title  The title for the current network.\n *\n * @return {Promise} A promise which resolves when the request is complete.\n */\nNetworks.prototype.updateSecureKey = function (networkId, data) {\n  var url, request;\n\n  if (typeof networkId !== 'string') {\n    return utils.promisify(false,\n      'IngestSDK updateSecureKeyById requires `networkId` to be passed as a string.');\n  }\n\n  if (typeof data !== 'object') {\n    return utils.promisify(false,\n      'IngestSDK updateSecureKeyById requires `data` to be passed as an object.');\n  }\n\n  if (typeof data.id !== 'string') {\n    return utils.promisify(false,\n      'IngestSDK updateSecureKeyById requires param `data.id` to be a string.');\n  }\n\n  if (typeof data.title !== 'string') {\n    data.title = '';\n  }\n\n  url = utils.parseTokens(this.config.host + this.config.keysById, {\n    resource: this.config.resource,\n    networkId: networkId,\n    keyId: data.id\n  });\n\n  request = new Request({\n    url: url,\n    token: this._tokenSource(),\n    method: 'PATCH',\n    data: data\n  });\n\n  return request.send();\n};\n\n/**\n * Deletes a single network secure key entry based on the unique ID given.\n *\n * @param {string}  networkId  The unique ID of the network.\n * @param {string}  keyId      The unique ID of the secure key entry.\n *\n * @return {Promise}  A promise which resolves when the request is complete.\n */\nNetworks.prototype.deleteSecureKey = function (networkId, keyId) {\n  var url, request;\n\n  if (typeof networkId !== 'string') {\n    return utils.promisify(false,\n      'IngestSDK deleteSecureKeyById requires a `networkId` to be passed as a string.');\n  }\n\n  if (typeof keyId !== 'string') {\n    return utils.promisify(false,\n      'IngestSDK deleteSecureKeyById requires a `keyId` to be passed as a string.');\n  }\n\n  url = utils.parseTokens(this.config.host + this.config.keysById, {\n    resource: this.config.resource,\n    networkId: networkId,\n    keyId: keyId\n  });\n\n  request = new Request({\n    url: url,\n    token: this._tokenSource(),\n    method: 'DELETE'\n  });\n\n  return request.send();\n\n};\n\n/**\n * Creates a Stripe customer for the given network ID.\n *\n * @param {string} stripeToken - The Stripe token to reference submitted payment details.\n * @param {string} networkId   - The network UUID for this Stripe customer.\n *\n * @return {Promise} A promise which resolves when the request is complete.\n */\nNetworks.prototype.createCustomer = function (stripeToken, networkId) {\n  var url, request, data;\n\n  if (typeof stripeToken !== 'string' || typeof networkId !== 'string') {\n    return utils.promisify(false,\n      'IngestSDK Networks createCustomer requires stripeToken and networkId to be strings.');\n  }\n\n  url = utils.parseTokens(this.config.host + this.config.customers, {\n    networkId: networkId,\n    resource: this.config.resource\n  });\n\n  data = {\n    stripeToken: stripeToken\n  };\n\n  request = new Request({\n    url: url,\n    data: data,\n    token: this._tokenSource(),\n    method: 'POST'\n  });\n\n  return request.send();\n};\n\n/**\n * Updates an existing Stripe customer for the given network ID.\n *\n * @param {string} networkId   - The networkID that this Stripe customer belongs to.\n * @param {string} cusId       - The Stripe customer ID you wish to update.\n * @param {string} networkName - [Optional] Only provide if you wish to update the network name on the Stripe customer.\n * @param {string} stripeToken - [Optional] Provide only if payment details have been updated.\n *\n * @return {Promise} A promise which resolves when the request is complete.\n *\n */\nNetworks.prototype.updateCustomer = function (networkId, cusId, networkName, stripeToken) {\n  var url, request, data;\n\n  if (typeof networkId !== 'string' || typeof cusId !== 'string') {\n    return utils.promisify(false,\n      'IngestSDK Networks updateCustomer requires `networkId` and `cusID` to be a string.');\n  }\n\n  if (typeof networkName !== 'string' && typeof stripeToken !== 'string') {\n    return utils.promisify(false,\n      'IngestSDK Networks updateCustomer requires either networkName or stripeToken passed as a string.');\n  }\n\n  url = utils.parseTokens(this.config.host + this.config.customerById, {\n    resource: this.config.resource,\n    networkId: networkId,\n    cusId: cusId\n  });\n\n  data = {\n    networkName: networkName,\n    stripeToken: stripeToken\n  };\n\n  request = new Request({\n    url: url,\n    data: data,\n    token: this._tokenSource(),\n    method: 'PATCH'\n  });\n\n  return request.send();\n};\n\n/**\n * Deletes an existing Stripe customer for the given network ID.\n *\n * @param {string} networkId - The network ID that the customer belongs to.\n * @param {string} cusId     - The Stripe customer ID to be deleted.\n *\n * @return {Promise} A promise which resolves when the request is complete.\n *\n */\nNetworks.prototype.deleteCustomer = function (networkId, cusId) {\n\n  var url, request;\n\n  if (typeof networkId !== 'string' || typeof cusId !== 'string') {\n    return utils.promisify(false,\n      'IngestSDK Networks deleteCustomer requires `networkId` and `cusId` to be strings.');\n  }\n\n  url = utils.parseTokens(this.config.host + this.config.customerById, {\n    resource: this.config.resource,\n    networkId: networkId,\n    cusId: cusId\n  });\n\n  request = new Request({\n    url: url,\n    token: this._tokenSource(),\n    method: 'DELETE'\n  });\n\n  return request.send();\n\n};\n\n/**\n * Gets a customers card information on file\n *\n * @param {string} customerId - The customer ID you wish to get the information for.\n * @param {string} networkId  - The network ID the customer belongs to.\n *\n * @return {Promise} A promise which resolves when the request is complete.\n *\n */\nNetworks.prototype.getCustomerCardInformation = function (networkId, customerId) {\n  var url, request;\n\n  if (typeof customerId !== 'string' || typeof networkId !== 'string') {\n    return utils.promisify(false,\n      'IngestSDK Networks getCustomerCardInformation requires networkId and customerId to be strings');\n  }\n\n  url = utils.parseTokens(this.config.host + this.config.customerCardInformation, {\n    resource: this.config.resource,\n    networkId: networkId,\n    cusId: customerId\n  });\n\n  request = new Request({\n    url: url,\n    token: this._tokenSource()\n  });\n\n  return request.send();\n};\n\n/**\n * Remove the credit card currently associated with the proviced customer.\n * @param {string} networkId  - The network ID the customer belongs to.\n * @param {string} networkId  - The customer ID.\n *\n * @return {Promise} A promise which resolves when the request is complete.\n */\nNetworks.prototype.deleteCustomerCard = function (networkId, customerId) {\n  var url, request;\n\n  if (typeof customerId !== 'string' || typeof networkId !== 'string') {\n    return utils.promisify(false,\n      'IngestSDK Networks deleteCustomerCard requires networkId and customerId to be strings');\n  }\n\n  url = utils.parseTokens(this.config.host + this.config.customerCardInformation, {\n    resource: this.config.resource,\n    networkId: networkId,\n    cusId: customerId\n  });\n\n  request = new Request({\n    url: url,\n    token: this._tokenSource(),\n    method: 'DELETE'\n  });\n\n  return request.send();\n};\n\n/**\n * Gets a networks invoices\n *\n * @param {string} networkId  - The network ID that you wish to get the invoices for.\n *\n * @return {Promise} A promise which resolves when the request is complete.\n *\n */\nNetworks.prototype.getInvoices = function (networkId) {\n  var url, request;\n\n  if (typeof networkId !== 'string') {\n    return utils.promisify(false, 'IngestSDK Networks getInvoices requires networkId to be a string');\n  }\n\n  url = utils.parseTokens(this.config.host + this.config.invoices, {\n    resource: this.config.resource,\n    networkId: networkId,\n  });\n\n  request = new Request({\n    url: url,\n    token: this._tokenSource()\n  });\n\n  return request.send();\n};\n\n/**\n * Gets a specific invoice for a network\n *\n * @param {string} networkId  - The network ID the customer belongs to.\n * @param {string} invoiceId  - The invoice ID you wish to get the information for.\n *\n * @return {Promise} A promise which resolves when the request is complete.\n *\n */\nNetworks.prototype.getInvoiceById = function (networkId, invoiceId) {\n  var url, request;\n\n  if (typeof networkId !== 'string') {\n    return utils.promisify(false,\n      'IngestSDK getInvoiceById requires networkId to be passed as a string.');\n  }\n\n  if (typeof invoiceId !== 'string') {\n    return utils.promisify(false,\n      'IngestSDK getInvoiceById requires invoiceId to be passed as a string.');\n  }\n\n  url = utils.parseTokens(this.config.host + this.config.invoicesById, {\n    resource: this.config.resource,\n    networkId: networkId,\n    invoiceId: invoiceId\n  });\n\n  request = new Request({\n    url: url,\n    token: this._tokenSource()\n  });\n\n  return request.send();\n};\n\n/**\n * Gets current usage for a network\n *\n * @param {string} networkId  - The network ID the customer belongs to.\n *\n * @return {Promise} A promise which resolves when the request is complete.\n *\n */\nNetworks.prototype.getCurrentUsage = function (networkId) {\n  var url, request;\n\n  if (typeof networkId !== 'string') {\n    return utils.promisify(false,\n      'IngestSDK getCurrentUsage requires networkId to be passed as a string.');\n  }\n\n  url = utils.parseTokens(this.config.host + this.config.currentUsage, {\n    resource: this.config.resource,\n    networkId: networkId\n  });\n\n  request = new Request({\n    url: url,\n    token: this._tokenSource()\n  });\n\n  return request.send();\n};\n\n/**\n * Gets all pending users for the specified network.\n *\n * @param {string} networkId - The network ID.\n *\n * @return {Promise} - A promise which resolves when the request is complete.\n */\nNetworks.prototype.getPendingUsers = function (networkId) {\n  var url, request;\n\n  if (typeof networkId !== 'string') {\n    return utils.promisify(false,\n      'IngestSDK getPendingUsers requires networkId to be passed as a string.');\n  }\n\n  url = utils.parseTokens(this.config.host + this.config.getPendingUsers, {\n    resource:  this.config.resource,\n    networkId: networkId\n  });\n\n  request = new Request({\n    url: url,\n    token: this._tokenSource()\n  });\n\n  return request.send();\n};\n\n/**\n * Deletes a pending user from the specified network.\n *\n * @param {string} networkId     - The network ID that the pending user belongs to.\n * @param {string} pendingUserId - The pending user to delete from the network.\n *\n * @return {Promise} - A promise which resolves when the request is complete.\n */\nNetworks.prototype.deletePendingUser = function (networkId, pendingUserId) {\n  var url, request;\n\n  if (typeof networkId !== 'string' || typeof pendingUserId !== 'string') {\n    return utils.promisify(false,\n      'IngestSDK deletePendingUser requires networkId and pendingUserId to be passed as strings.');\n  }\n\n  url = utils.parseTokens(this.config.host + this.config.deletePendingUser, {\n    resource: this.config.resource,\n    networkId: networkId,\n    pendingUserId: pendingUserId\n  });\n\n  request = new Request({\n    method: 'DELETE',\n    url: url,\n    token: this._tokenSource()\n  });\n\n  return request.send();\n};\n\nmodule.exports = Networks;\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/resources/Networks.js\n// module id = 16\n// module chunks = 0","'use strict';\n\nvar PlaybackContent = require('./PlaybackContent');\nvar Request = require('../Request');\nvar utils = require('../Utils');\nvar extend = require('extend');\nvar ResourceTypes = require('../constants/resourceTypes');\n\n/**\n * Videos Resource\n *\n * @param {object} options - SDK Options.\n * @class\n * @extends PlaybackContent\n */\nfunction Videos (options) {\n  var overrides = {\n    resource: ResourceTypes.VIDEOS,\n    variants: '/<%=resource%>/<%=id%>/variants',\n    publish: '/<%=resource%>/publish'\n  };\n\n  options = extend(true, {}, overrides, options);\n\n  PlaybackContent.call(this, options);\n\n};\n\n// This extends the base class of 'PlaybackContent'.\nVideos.prototype = Object.create(PlaybackContent.prototype);\nVideos.prototype.constructor = Videos;\n\n/**\n * Return a list of the requested videos for the current user and network.\n * @param  {object}   headers   Object representing headers to apply to the request.\n * @return {promise}            A promise which resolves when the request is complete.\n */\nVideos.prototype.getAll = function (headers, status) {\n  var request;\n  var url = utils.parseTokens(this.config.host + this.config.all, {\n    resource: this.config.resource\n  });\n\n  // If there is a status\n  if (status) {\n    if (typeof status !== 'string') {\n      return utils.promisify(false,\n        'IngestSDK Videos.getAll requires a valid status to be passed as a string.');\n    }\n\n    url = url + '?status=' + status;\n  }\n\n  request = new Request({\n    url: url,\n    token: this._tokenSource(),\n    headers: headers\n  });\n\n  return request.send();\n};\n\n/**\n * Get all of the variants for the supplied video id.\n * @param   {string}    id     Video id.\n * @return  {promise}          A promise which resolves when the request is complete.\n */\nVideos.prototype.getVariants = function (id) {\n  var url, request;\n\n  if (typeof id !== 'string') {\n    return utils.promisify(false,\n      'IngestSDK Resource getVariants requires a valid video id passed as a string.');\n  }\n\n  url = utils.parseTokens(this.config.host + this.config.variants, {\n    resource: this.config.resource,\n    id: id\n  });\n\n  request = new Request({\n    url: url,\n    token: this._tokenSource()\n  });\n\n  return request.send();\n};\n\n/**\n * Publishes a video based on the server time\n *\n * @param  {array}   ids   An array of video ids to publish\n * @return {promise}       A promise which resolves when the request is complete\n */\nVideos.prototype.publish = function (ids) {\n  var request, url;\n\n  // Check to make sure the ids are in an array\n  if (!Array.isArray(ids) || ids.length === 0) {\n    return utils.promisify(false,\n      'IngestSDK Videos publish requires an array of ids to be passed in.');\n  }\n\n  url = utils.parseTokens(this.config.host + this.config.publish, {\n    resource: this.config.resource,\n  });\n\n  request = new Request({\n    url: url,\n    token: this._tokenSource(),\n    method: 'POST',\n    data: ids\n  });\n\n  return request.send();\n};\n\n/**\n * Gets the total count of videos.\n *\n * @param {string}  status   - [Optional] A comma seperated string of video statuses to filter by.\n * @param {boolean} _private - [Optional] If true, private videos will be included in the response.\n *\n * @return {promise} A promise which resolves when the request is complete.\n */\nVideos.prototype.count = function (status, _private) {\n  var request, url, isStatusSet;\n\n  isStatusSet = false;\n\n  url = utils.parseTokens(this.config.host + this.config.all, {\n    resource: this.config.resource\n  });\n\n  // If there is a status and it is a string, use it as the status filter.\n  if (status) {\n    if (typeof status !== 'string') {\n      return utils.promisify(false,\n        'IngestSDK Videos count requires a valid status to be passed as a string.');\n    }\n\n    url += '?status=' + status;\n    isStatusSet = true;\n  }\n\n  // If private videos were requested, add the `private` query parameter to the url.\n  if (_private === true) {\n\n    // If a status has been set, then we need to append the next parameter with '&'.\n    if (isStatusSet) {\n      url += '&';\n    } else {\n      url += '?';\n    }\n\n    url += 'private=true';\n  }\n\n  request = new Request({\n    url: url,\n    token: this._tokenSource(),\n    method: 'HEAD'\n  });\n\n  return request.send()\n    .then(this._handleCountResponse);\n};\n\n\nmodule.exports = Videos;\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/resources/Videos.js\n// module id = 17\n// module chunks = 0","'use strict';\n\nvar Resource = require('./Resource');\nvar Request = require('../Request');\nvar utils = require('../Utils');\nvar extend = require('extend');\nvar ResourceTypes = require('../constants/resourceTypes');\n\n/**\n * Jobs Resource\n *\n * @param {object} options - SDK Options.\n * @class\n * @extends Resource\n */\nfunction Jobs (options) {\n\n  var overrides = {\n    resource: ResourceTypes.JOBS,\n    progress: '/<%=resource%>/<%=id%>/progress'\n  };\n\n  options = extend(true, {}, overrides, options);\n\n  Resource.call(this, options);\n\n};\n\n// This extends the base class of 'Resource'.\nJobs.prototype = Object.create(Resource.prototype);\nJobs.prototype.constructor = Jobs;\n\n/**\n * Creates a new encoding job.\n *\n * @return {Promise} A promise which resolves when the request is complete.\n */\nJobs.prototype.add = function (resource) {\n\n  var url, request;\n\n  if (typeof resource !== 'object') {\n    return utils.promisify(false,\n      'IngestSDK Jobs `add` requires a resource passed as an object.');\n  }\n\n  url = utils.parseTokens(this.config.host + this.config.all, {\n    resource: this.config.resource\n  });\n\n  request = new Request({\n    url: url,\n    token: this._tokenSource(),\n    method: 'POST',\n    data: resource\n  });\n\n  return request.send();\n};\n\n/**\n * Gets the progress of a current encoding job\n *\n * @param  {string}  id The id of the job\n * @return {Promise}    A promise which resolves when the request is complete.\n */\nJobs.prototype.progress = function (id) {\n  var url, request;\n\n  if (typeof id !== 'string') {\n    return utils.promisify(false,\n      'IngestSDK Jobs `progress` requires `jobId` to be passed as a string.');\n  }\n\n  url = utils.parseTokens(this.config.host + this.config.progress, {\n    resource: this.config.resource,\n    id: id\n  });\n\n  request = new Request({\n    url: url,\n    token: this._tokenSource(),\n    method: 'GET'\n  });\n\n  return request.send();\n};\n\nmodule.exports = Jobs;\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/resources/Jobs.js\n// module id = 18\n// module chunks = 0","'use strict';\n\nvar Resource = require('./Resource');\nvar Request = require('../Request');\nvar utils = require('../Utils');\nvar extend = require('extend');\nvar ResourceTypes = require('../constants/resourceTypes');\n\n/**\n * Profiles Resource\n *\n * @param {object} options - SDK Options.\n * @class\n * @extends Resource\n */\nfunction Profiles (options) {\n  var overrides = {\n    resource: ResourceTypes.PROFILES\n  };\n\n  options = extend(true, {}, overrides, options);\n\n  Resource.call(this, options);\n\n};\n\n// This extends the base class of 'Resource'.\nProfiles.prototype = Object.create(Resource.prototype);\nProfiles.prototype.constructor = Profiles;\n\n/**\n * Update an existing profile with new content.\n * @param  {object|array} resource  An object or an array of objects representing the profile to be updated.\n * @return {promise}                A promise which resolves when the request is complete.\n */\nProfiles.prototype.update = function (resource) {\n  var request, data, url;\n\n  if (typeof resource !== 'object') {\n    return utils.promisify(false,\n      'IngestSDK Profiles update requires a resource to be passed as an object.');\n  }\n\n  data = resource;\n\n  url = utils.parseTokens(this.config.host + this.config.byId, {\n    resource: this.config.resource,\n    id: resource.id\n  });\n\n  request = new Request({\n    url: url,\n    token: this._tokenSource(),\n    method: 'PUT',\n    data: data\n  });\n\n  return request.send();\n};\n\nmodule.exports = Profiles;\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/resources/Profiles.js\n// module id = 19\n// module chunks = 0","'use strict';\n\nvar Resource = require('./Resource');\nvar Request = require('../Request');\nvar utils = require('../Utils');\nvar extend = require('extend');\nvar ResourceTypes = require('../constants/resourceTypes');\n\n/**\n * Inputs Resource\n *\n * @param {object} options - SDK Options.\n * @class\n * @extends Resource\n */\nfunction Inputs (options) {\n\n  var overrides = {\n    resource: ResourceTypes.INPUTS,\n    allWithFilters: '/<%=resource%>?filter=<%=filterChain%>',\n    searchWithFilters: '/<%=resource%>?search=<%=input%>&filter=<%=filterChain%>'\n  };\n\n  options = extend(true, {}, overrides, options);\n\n  Resource.call(this, options);\n\n};\n\n// This extends the base class of 'Resource'.\nInputs.prototype = Object.create(Resource.prototype);\nInputs.prototype.constructor = Inputs;\n\n/**\n * Return a list of Inputs for the current user and network.\n *\n * @param  {object} headers - Object representing headers to apply to the request.\n * @param  {Array}  filters - [Optional] A list of filters to send along with the request to return Inputs that match the criteria.\n *\n * @return {Promise} - A promise which resolves when the request is complete.\n */\nInputs.prototype.getAll = function (headers, filters) {\n  var request, url, urlTemplate, tokens;\n\n  tokens = { resource: this.config.resource };\n  urlTemplate = this.config.host + this.config.all;\n\n  // If there are filters, join them as a comma seperated string and update our tokens and url template.\n  if (Array.isArray(filters) && filters.length > 0) {\n    tokens.filterChain = filters.join(',');\n    urlTemplate = this.config.host + this.config.allWithFilters;\n  }\n\n  url = utils.parseTokens(urlTemplate, tokens);\n\n  request = new Request({\n    url: url,\n    token: this._tokenSource(),\n    headers: headers\n  });\n\n  return request.send();\n};\n\n/**\n * Return a subset of Inputs that match the search terms.\n *\n * @param  {string} input   - The search terms to match against.\n * @param  {object} headers - The headers to be passed to the request.\n * @param  {Array}  filters - [Optional] A list of filters to send along with the request to return Inputs that match the criteria.\n *\n * @return {Promise} - A promise which resolves when the request is complete.\n */\nInputs.prototype.search = function (input, headers, filters) {\n  var url, request, urlTemplate, tokens;\n\n  if (typeof input !== 'string') {\n    return utils.promisify(false,\n      'IngestSDK Inputs search requires search input to be passed as a string.');\n  }\n\n  tokens = { resource: this.config.resource, input: encodeURIComponent(input) };\n  urlTemplate = this.config.host + this.config.search;\n\n  // If there are filters, join them as a comma seperated string and update our tokens and url template.\n  if (Array.isArray(filters) && filters.length > 0) {\n    tokens.filterChain = filters.join(',');\n    urlTemplate = this.config.host + this.config.searchWithFilters;\n  }\n\n  url = utils.parseTokens(urlTemplate, tokens);\n\n  request = new Request({\n    url: url,\n    token: this._tokenSource(),\n    headers: headers\n  });\n\n  return request.send();\n};\n\nmodule.exports = Inputs;\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/resources/Inputs.js\n// module id = 20\n// module chunks = 0","'use strict';\n\nvar Resource = require('./Resource');\nvar Request = require('../Request');\nvar utils = require('../Utils');\nvar extend = require('extend');\nvar ResourceTypes = require('../constants/resourceTypes');\n\n/**\n * Events Resource\n *\n * @param {object} options - SDK Options.\n * @class\n * @extends Resource\n */\nfunction Events (options) {\n  var overrides = {\n    resource: ResourceTypes.EVENTS,\n    types: '/<%=resource%>/types',\n  };\n\n  options = extend(true, {}, overrides, options);\n\n  Resource.call(this, options);\n};\n\n// This extends the base class of 'Resource'.\nEvents.prototype = Object.create(Resource.prototype);\nEvents.prototype.constructor = Events;\n\n/**\n * Returns a list of the requested events for the current network\n *\n * @param {object} headers      - The headers to apply to the request\n * @param {string} filterStatus - A string of all the statuses to filter by, separated by commas\n * @param {string} filterType   - A string of all the types to filter by, separated by commas\n *\n * @return {Promise}\n */\nEvents.prototype.getAll = function (headers, filterStatus, filterType) {\n  var request, url, filterString;\n\n  filterString = '';\n\n  url = utils.parseTokens(this.config.host + this.config.all, {\n    resource: this.config.resource\n  });\n\n  // If there is a status filter\n  if (filterStatus) {\n    if (typeof filterStatus !== 'string') {\n      return utils.promisify(false,\n        'IngestSDK Events.getAll requires a valid filter status to be passed as a string.');\n    }\n\n    filterString = '?filter=' + filterStatus;\n  }\n\n  if (filterType) {\n    if (typeof filterType !== 'string') {\n      return utils.promisify(false,\n        'IngestSDK Events.getAll requires a valid filter type to be passed as a string.');\n    }\n\n    if (!filterString) {\n      filterString = '?resource=' + filterType;\n    } else {\n      filterString = filterString + '&resource=' + filterType;\n    }\n  }\n\n  url += filterString;\n\n  request = new Request({\n    url: url,\n    token: this._tokenSource(),\n    headers: headers\n  });\n\n  return request.send();\n};\n\n/**\n * Gets a list of all event types\n *\n * @return {Promise}\n */\nEvents.prototype.getTypes = function () {\n  var url, request;\n\n  url = utils.parseTokens(this.config.host + this.config.types, {\n    resource: this.config.resource\n  });\n\n  request = new Request({\n    url: url,\n    token: this._tokenSource(),\n  });\n\n  return request.send();\n};\n\nmodule.exports = Events;\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/resources/Events.js\n// module id = 21\n// module chunks = 0","'use strict';\n\nvar Resource = require('./Resource');\nvar Request = require('../Request');\nvar utils = require('../Utils');\nvar extend = require('extend');\nvar ResourceTypes = require('../constants/resourceTypes');\n\n/**\n * Roles Resource\n *\n * @param {object} options - SDK Options.\n * @class\n * @extends Resource\n */\nfunction Roles (options) {\n  var overrides = {\n    resource: ResourceTypes.ROLES\n  };\n\n  options = extend(true, {}, overrides, options);\n\n  Resource.call(this, options);\n\n};\n\n// This extends the base class of 'Resource'.\nRoles.prototype = Object.create(Resource.prototype);\nRoles.prototype.constructor = Roles;\n\n/**\n * Update an existing role with new content.\n * @param  {object|array} resource  An object or an array of objects representing the role(s) to be updated.\n * @return {promise}                A promise which resolves when the request is complete.\n */\nRoles.prototype.update = function (resource) {\n  var request, data, url;\n\n  if (typeof resource !== 'object') {\n    return utils.promisify(false,\n      'IngestSDK Roles update requires a role to be passed as an object.');\n  }\n\n  data = resource;\n\n  url = utils.parseTokens(this.config.host + this.config.byId, {\n    resource: this.config.resource,\n    id: resource.id\n  });\n\n  request = new Request({\n    url: url,\n    token: this._tokenSource(),\n    method: 'PUT',\n    data: data\n  });\n\n  return request.send();\n};\n\nmodule.exports = Roles;\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/resources/Roles.js\n// module id = 22\n// module chunks = 0"],"sourceRoot":""}